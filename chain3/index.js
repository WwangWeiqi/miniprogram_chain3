module.exports =
/******/ (function (modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if (installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
        /******/
}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
        /******/
};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
      /******/
}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function (exports, name, getter) {
/******/ 		if (!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
          /******/
});
        /******/
}
      /******/
};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function (module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
      /******/
};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 225);
    /******/
})
/************************************************************************/
/******/([
/* 0 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file utils.js
         * @author Marek Kotewicz <marek@ethdev.com>
         * @date 2015
         * @modified to work with MOAC network
         * renamed the unit map
         * Added bignumber.js
         * @MOAC lab
         * @date 2018
         */

        var _ = __webpack_require__(228);
        var BigNumber = __webpack_require__(59);
        var sha3 = __webpack_require__(18);
        var utf8 = __webpack_require__(232);
        var assert = __webpack_require__(134);
        var hashjs = __webpack_require__(72);
        var BN = __webpack_require__(11);
        var numberToBN = __webpack_require__(245);

        //used the utils function
        //to avoid using the BUFFER lib, internal function convert to String
        function bytesArrayToHEXString(in_bytes) {
          //Should check the array contents
          if (in_bytes.length === 0) throw new TypeError('Empty array!! Expected input bytes array length > 0')

          try {

            var out_str = ""; //output HEX string

            for (var i = 0; i < in_bytes.length; i++) {
              //convert the byte to HEX
              //and append to the string
              //Note the bigNumber only returns the value in HEX, not adding 0s
              //e.g. '10' -> 'a', need to add '0', '10' -> '0a'
              // 
              var tmp = new BigNumber(in_bytes[i]).toString(16);
              if (tmp.length < 2)
                out_str += '0' + tmp;
              else
                out_str += tmp;
              // out_str += (new BigNumber(in_bytes[i]).toString(16));

            }
            return out_str;

          } catch (e) {
            // Handle possible errors here
            throw new Error('Error from Bytes array to HEX string :' + e + '!');
          }

        }

        //used the utils function
        //to avoid using the BN.js lib
        //Note this function only to be used for the decode of the 
        //input HEX string 

        function hexStringToBytesArray(in_str) {
          //Should check the array contents

          var strlen = in_str.length;

          if (in_str.slice(0, 1) == '0x' && strlen > 2)
            in_str = in_str.slice(2, strlen);
          if (in_str.length === 0) throw new TypeError('Empty input string!! Expected input string length > 0')

          //the input HEX string should have even length, if not , add '0' to make it
          if (in_str.length % 2 != 0)
            in_str = '0' + in_str;


          try {

            var out_array = new Array(in_str.length / 2); //output byte array

            for (var i = 0; i < in_str.length; i = i + 2) {
              //convert the byte to HEX
              //and append to the string
              //Note the bigNumber only returns the value in HEX, not adding 0s
              //e.g. '10' -> 'a', need to add '0', '10' -> '0a'
              // 

              var tmp = in_str.slice(i, i + 2);

              out_array[i / 2] = new BigNumber(tmp, 16).toNumber(10);

            }
            return out_array;

          } catch (e) {
            // Handle possible errors here
            throw new Error('Error from HEX string decode error:' + e + '!');
          }

        }

        /*
         * Return the hash result of the input bytes
         */
        function sha256(bytes) {
          return hashjs.sha256().update(bytes).digest();
        }


        /*
          Unit of MOAC MC is sha (sand)
             To see a world in a grain of sand, 
             And a heaven in a wild flower,
             Hold infinty in the palm of your hand,
             And eternity in an hour.
            William Blake (1757â€“1827), Auguries Of Innocence 
            1 mc = 1,000,000 sand
            1 mc = 1,000 Xiao
        */

        var unitMap = {
          'nomc': '0',
          'sha': '1',
          'ksha': '1000',
          'Ksha': '1000',
          'femtomc': '1000',
          'msha': '1000000',
          'Msha': '1000000',
          'picomc': '1000000',
          'gsha': '1000000000',
          'Gsha': '1000000000',
          'nanomc': '1000000000',
          'nano': '1000000000',
          'xiao': '1000000000',
          'micromc': '1000000000000',
          'micro': '1000000000000',
          'sand': '1000000000000',
          'millimc': '1000000000000000',
          'milli': '1000000000000000',
          'mc': '1000000000000000000',
          'ine': '1000000000000000000',
          'kmc': '1000000000000000000000',
          'grand': '1000000000000000000000',
          'mmc': '1000000000000000000000000',
          'gmc': '1000000000000000000000000000',
          'tmc': '1000000000000000000000000000000'
        };

        /**
         * Should be called to pad string to expected length
         *
         * @method padLeft
         * @param {String} string to be padded
         * @param {Number} characters that result string should have
         * @param {String} sign, by default 0
         * @returns {String} right aligned string
         */
        var padLeft = function (string, chars, sign) {
          return new Array(chars - string.length + 1).join(sign ? sign : "0") + string;
        };

        /**
         * Should be called to pad string to expected length
         *
         * @method padRight
         * @param {String} string to be padded
         * @param {Number} characters that result string should have
         * @param {String} sign, by default 0
         * @returns {String} right aligned string
         */
        var padRight = function (string, chars, sign) {
          return string + (new Array(chars - string.length + 1).join(sign ? sign : "0"));
        };

        /**
         * Should be called to get utf8 from it's hex representation
         *
         * @method toUtf8
         * @param {String} string in hex
         * @returns {String} ascii string representation of hex value
         */
        var toUtf8 = function (hex) {
          // Find termination
          var str = "";
          var i = 0,
            l = hex.length;
          if (hex.substring(0, 2) === '0x') {
            i = 2;
          }
          for (; i < l; i += 2) {
            var code = parseInt(hex.substr(i, 2), 16);
            if (code === 0)
              break;
            str += String.fromCharCode(code);
          }

          return utf8.decode(str);
        };

        /**
         * Should be called to get ascii from it's hex representation
         *
         * @method toAscii
         * @param {String} string in hex
         * @returns {String} ascii string representation of hex value
         */
        var toAscii = function (hex) {
          // Find termination
          var str = "";
          var i = 0,
            l = hex.length;
          if (hex.substring(0, 2) === '0x') {
            i = 2;
          }
          for (; i < l; i += 2) {
            var code = parseInt(hex.substr(i, 2), 16);
            str += String.fromCharCode(code);
          }

          return str;
        };

        /**
         * Should be called to get hex representation (prefixed by 0x) of utf8 string
         *
         * @method fromUtf8
         * @param {String} string
         * @param {Number} optional padding
         * @returns {String} hex representation of input string
         */
        var fromUtf8 = function (str, allowZero) {
          str = utf8.encode(str);
          var hex = "";
          for (var i = 0; i < str.length; i++) {
            var code = str.charCodeAt(i);
            if (code === 0) {
              if (allowZero) {
                hex += '00';
              } else {
                break;
              }
            } else {
              var n = code.toString(16);
              hex += n.length < 2 ? '0' + n : n;
            }
          }

          return "0x" + hex;
        };

        /**
         * Should be called to get hex representation (prefixed by 0x) of ascii string
         *
         * @method fromAscii
         * @param {String} string
         * @param {Number} optional padding
         * @returns {String} hex representation of input string
         */
        var fromAscii = function (str) {
          var hex = "";
          for (var i = 0; i < str.length; i++) {
            var code = str.charCodeAt(i);
            var n = code.toString(16);
            hex += n.length < 2 ? '0' + n : n;
          }

          return "0x" + hex;
        };

        /**
         * Should be used to create full function/event name from json abi
         *
         * @method transformToFullName
         * @param {Object} json-abi
         * @return {String} full fnction/event name
         */
        var transformToFullName = function (json) {
          if (json.name.indexOf('(') !== -1) {
            return json.name;
          }

          var typeName = json.inputs.map(function (i) {
            return i.type;
          }).join();
          return json.name + '(' + typeName + ')';
        };

        /**
         * Should be called to get display name of contract function
         *
         * @method extractDisplayName
         * @param {String} name of function/event
         * @returns {String} display name for function/event eg. multiply(uint256) -> multiply
         */
        var extractDisplayName = function (name) {
          var length = name.indexOf('(');
          return length !== -1 ? name.substr(0, length) : name;
        };

        /// @returns overloaded part of function/event name
        var extractTypeName = function (name) {
          /// TODO: make it invulnerable
          var length = name.indexOf('(');
          return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : "";
        };

        /**
         * Converts value to it's decimal representation in string
         *
         * @method toDecimal
         * @param {String|Number|BigNumber}
         * @return {String}
         */
        var toDecimal = function (value) {
          return toBigNumber(value).toNumber();
        };

        /**
         * Converts value to it's hex representation
         *
         * @method fromDecimal
         * @param {String|Number|BigNumber}
         * @return {String}
         */
        var fromDecimal = function (value) {
          var number = toBigNumber(value);
          var result = number.toString(16);

          return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;
        };

        /**
         * Converts a `Number` into a hex `String`
         * This could have problem when the input number is
         * too large
         *  Use bn.js to convert the input to a HEX number
         * certain range.
         * @param {Number} i
         * @return {String}
         */
        var BigIntToHex = function BigIntToHex(i) {

          var inNum = new BN(i, 10);
          var hex = makeEven(inNum.toString(16));


          // return `0x${makeEven(hex)}`;
          return '0x' + hex;
        }

        var makeEven = function (hex) {
          if (hex.length % 2 === 1) {
            hex = hex.replace('0x', '0x0');
          }
          return hex;
        };

        /**
         * Converts value to it's hex representation
         *
         * @method numberToHex
         * @param {String|Number|BN} value
         * @return {String}
         */
        var numberToHex = function (value) {
          if (_.isNull(value) || _.isUndefined(value)) {
            return value;
          }

          if (!isFinite(value) && !isHexStrict(value)) {
            throw new Error('Given input "' + value + '" is not a number.');
          }

          var number = toBN(value);
          var result = number.toString(16);

          return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;
        };

        /*
         * RLP usage, convert an integer to HEX
         * input could be a big number object
         */
        function intToHex(i) {
          var hex = i.toString(16)
          if (hex.length % 2) {
            hex = '0' + hex
          }

          return hex
        }

        /**
         * Check if string is HEX, requires a 0x in front
         *
         * @method isHexStrict
         * @param {String} hex to be checked
         * @returns {Boolean}
         */
        var isHexStrict = function (hex) {
          return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));
        };



        /**
         * Auto converts any given value into it's hex representation.
         *
         * And even stringifys objects before.
         *
         * @method toHex
         * @param {String|Number|BigNumber|Object}
         * @return {String}
         */
        var toHex = function (val) {
          /*jshint maxcomplexity: 8 */

          if (isBoolean(val))
            return fromDecimal(+val);

          if (isBigNumber(val))
            return fromDecimal(val);

          if (typeof val === 'object')
            return fromUtf8(JSON.stringify(val));

          // if its a negative number, pass it through fromDecimal
          if (isString(val)) {
            if (val.indexOf('-0x') === 0)
              return fromDecimal(val);
            else if (val.indexOf('0x') === 0)
              return val;
            else if (!isFinite(val)) {

              return fromUtf8(val, 1);
            }

          }

          return fromDecimal(val);
        };

        /**
         * Returns value of unit in Sha
         *
         * @method getValueOfUnit
         * @param {String} unit the unit to convert to, default mc
         * @returns {BigNumber} value of the unit (in Sha)
         * @throws error if the unit is not correct:w
         */
        var getValueOfUnit = function (unit) {
          unit = unit ? unit.toLowerCase() : 'mc';
          var unitValue = unitMap[unit];
          if (unitValue === undefined) {
            throw new Error('This unit [' + unit + '] doesn\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));
          }
          return new BigNumber(unitValue, 10);
        };

        /**
         * Takes a number of sha and converts it to any other MOAC unit.
         * 1 sha = 1e-18 mc 
         * Possible units are:
         *   SI Short   SI Full     PowerOfTen  Other
         * - ksha       femtomc     -15
         * - msha       picomc      -12
         * - gsha       nanomc      -9          nano
         * - --         micromc     -6          micro
         * - --         millimc     -3          milli
         * - mc         -           0
         * - kmc                    3           grand
         * - mmc                    6 
         * - gmc                    9
         * - tmc                    12 
         *
         * @method fromSha
         * @param {Number|String} number can be a number, number string or a HEX of a decimal
         * @param {String} unit the unit to convert to, default mc
         * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number
         */
        var fromSha = function (number, unit) {
          var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));

          return isBigNumber(number) ? returnValue : returnValue.toString(10);
        };

        /**
         * Takes a number of a unit and converts it to sha.
         *
         * Possible units are:
         *   SI Short   SI Full     PowerOfTen  Other
         * - ksha       femtomc     -15
         * - msha       picomc      -12
         * - gsha       nanomc      -9          nano
         * - --         micromc     -6          micro
         * - --         millimc     -3          milli
         * - mc         -           0
         * - kmc                    3           grand
         * - mmc                    6 
         * - gmc                    9
         * - tmc                    12 
         *
         * @method toSha
         * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal
         * @param {String} unit the unit to convert from, default mc
         * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number
         */
        var toSha = function (number, unit) {
          var returnValue = toBigNumber(number).times(getValueOfUnit(unit));

          return isBigNumber(number) ? returnValue : returnValue.toString(10);
        };

        /**
         * Takes an input and transforms it into an bignumber
         *
         * @method toBigNumber
         * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber
         * @return {BigNumber} BigNumber
         */
        var toBigNumber = function (number) {
          /*jshint maxcomplexity:5 */
          number = number || 0;
          if (isBigNumber(number))
            return number;

          if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {
            return new BigNumber(number.toLowerCase().replace('0x', ''), 16);
          }

          return new BigNumber(number.toString(10), 10);
        };

        /**
         * Takes an input and transforms it into an BN
         *
         * @method toBN
         * @param {Number|String|BN} number, string, HEX string or BN
         * @return {BN} BN
         */
        var toBN = function (number) {
          try {
            return numberToBN.apply(null, arguments);
          } catch (e) {
            throw new Error(e + ' Given value: "' + number + '"');
          }
        };

        /**
         * Takes and input transforms it into bignumber and if it is negative value, into two's complement
         *
         * @method toTwosComplement
         * @param {Number|String|BigNumber}
         * @return {BigNumber}
         */
        var toTwosComplement = function (number) {
          var bigNumber = toBigNumber(number).integerValue();
          if (bigNumber.isLessThan(0)) {
            return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).plus(bigNumber).plus(1);
          }
          return bigNumber;
        };

        /**
         * Checks if the given string is strictly an address
         *
         * @method isStrictAddress
         * @param {String} address the given HEX adress
         * @return {Boolean}
         */
        var isStrictAddress = function (address) {
          return /^0x[0-9a-f]{40}$/i.test(address);
        };

        /**
         * Checks if the given string is an address
         *
         * @method isAddress
         * @param {String} address the given HEX adress
         * @return {Boolean}
         */
        var isAddress = function (address) {
          if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
            // check if it has the basic requirements of an address
            return false;
          } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
            // If it's all small caps or all all caps, return true
            return true;
          } else {
            // Otherwise check each case
            return isChecksumAddress(address);
          }
        };

        /**
         * Checks if the given string is a checksummed address
         *
         * @method isChecksumAddress
         * @param {String} address the given HEX adress
         * @return {Boolean}
         */
        var isChecksumAddress = function (address) {
          // Check each case
          address = address.replace('0x', '');
          var addressHash = sha3(address.toLowerCase());

          for (var i = 0; i < 40; i++) {
            // the nth letter should be uppercase if the nth digit of casemap is 1
            if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
              return false;
            }
          }
          return true;
        };



        /**
         * Makes a checksum address
         *
         * @method toChecksumAddress
         * @param {String} address the given HEX adress
         * @return {String}
         */
        var toChecksumAddress = function (address) {
          if (typeof address === 'undefined') return '';

          address = address.toLowerCase().replace('0x', '');
          var addressHash = sha3(address);
          var checksumAddress = '0x';

          for (var i = 0; i < address.length; i++) {
            // If ith character is 9 to f then make it uppercase
            if (parseInt(addressHash[i], 16) > 7) {
              checksumAddress += address[i].toUpperCase();
            } else {
              checksumAddress += address[i];
            }
          }
          return checksumAddress;
        };

        /**
         * Transforms given string to valid 20 bytes-length addres with 0x prefix
         *
         * @method toAddress
         * @param {String} address
         * @return {String} formatted address
         */
        var toAddress = function (address) {
          if (isStrictAddress(address)) {
            return address;
          }

          if (/^[0-9a-f]{40}$/.test(address)) {
            return '0x' + address;
          }

          return '0x' + padLeft(toHex(address).substr(2), 40);
        };

        /**
         * Returns true if object is BigNumber, otherwise false
         *
         * @method isBigNumber
         * @param {Object}
         * @return {Boolean}
         */
        var isBigNumber = function (object) {
          return object instanceof BigNumber ||
            (object && object.constructor && object.constructor.name === 'BigNumber');
        };

        /**
         * Returns true if object is string, otherwise false
         *
         * @method isString
         * @param {Object}
         * @return {Boolean}
         */
        var isString = function (object) {
          return typeof object === 'string' ||
            (object && object.constructor && object.constructor.name === 'String');
        };

        /**
         * Check if string is HEX, requires a 0x in front
         *
         * @method isHexStrict
         * @param {String} hex to be checked
         * @returns {Boolean}
         */
        var isHexStrict = function (hex) {
          return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));
        };

        /**
         * Returns true if object is function, otherwise false
         *
         * @method isFunction
         * @param {Object}
         * @return {Boolean}
         */
        var isFunction = function (object) {
          return typeof object === 'function';
        };

        /**
         * Returns true if object is Objet, otherwise false
         *
         * @method isObject
         * @param {Object}
         * @return {Boolean}
         */
        var isObject = function (object) {
          return object !== null && !(Array.isArray(object)) && typeof object === 'object';
        };

        /**
         * Returns true if object is boolean, otherwise false
         *
         * @method isBoolean
         * @param {Object}
         * @return {Boolean}
         */
        var isBoolean = function (object) {
          return typeof object === 'boolean';
        };

        /**
         * Returns true if object is array, otherwise false
         *
         * @method isArray
         * @param {Object}
         * @return {Boolean}
         */
        var isArray = function (object) {
          return Array.isArray(object);
        };

        /**
         * Returns true if given string is valid json object
         *
         * @method isJson
         * @param {String}
         * @return {Boolean}
         */
        var isJson = function (str) {
          try {
            return !!JSON.parse(str);
          } catch (e) {
            return false;
          }
        };

        /**
         * Returns true if given string is a valid MOAC node block header bloom.
         *
         * @method isBloom
         * @param {String} hex encoded bloom filter
         * @return {Boolean}
         */
        var isBloom = function (bloom) {
          if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
            return false;
          } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
            return true;
          }
          return false;
        };

        /**
         * Returns true if given string is a valid log topic.
         *
         * @method isTopic
         * @param {String} hex encoded topic
         * @return {Boolean}
         */
        var isTopic = function (topic) {
          if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
            return false;
          } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
            return true;
          }
          return false;
        };

        module.exports = {
          padLeft: padLeft,
          padRight: padRight,
          BigIntToHex: BigIntToHex,
          numberToHex: numberToHex,
          toHex: toHex,
          toDecimal: toDecimal,
          fromDecimal: fromDecimal,
          toUtf8: toUtf8,
          toAscii: toAscii,
          fromUtf8: fromUtf8,
          fromAscii: fromAscii,
          transformToFullName: transformToFullName,
          extractDisplayName: extractDisplayName,
          extractTypeName: extractTypeName,
          toSha: toSha,
          fromSha: fromSha,
          toBigNumber: toBigNumber,
          toTwosComplement: toTwosComplement,
          toAddress: toAddress,
          isBigNumber: isBigNumber,
          isStrictAddress: isStrictAddress,
          isAddress: isAddress,
          isChecksumAddress: isChecksumAddress,
          toChecksumAddress: toChecksumAddress,
          isFunction: isFunction,
          isString: isString,
          isObject: isObject,
          isBoolean: isBoolean,
          isArray: isArray,
          isJson: isJson,
          isBloom: isBloom,
          isTopic: isTopic,
          isHexString: isHexStrict
        };



        /***/
}),
/* 1 */
/***/ (function (module, exports, __webpack_require__) {

        var baseMatches = __webpack_require__(287),
          baseMatchesProperty = __webpack_require__(304),
          identity = __webpack_require__(42),
          isArray = __webpack_require__(4),
          property = __webpack_require__(309);

        /**
         * The base implementation of `_.iteratee`.
         *
         * @private
         * @param {*} [value=_.identity] The value to convert to an iteratee.
         * @returns {Function} Returns the iteratee.
         */
        function baseIteratee(value) {
          // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
          // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
          if (typeof value == 'function') {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == 'object') {
            return isArray(value)
              ? baseMatchesProperty(value[0], value[1])
              : baseMatches(value);
          }
          return property(value);
        }

        module.exports = baseIteratee;


        /***/
}),
/* 2 */
/***/ (function (module, exports, __webpack_require__) {

        var identity = __webpack_require__(42),
          overRest = __webpack_require__(142),
          setToString = __webpack_require__(101);

        /**
         * The base implementation of `_.rest` which doesn't validate or coerce arguments.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         */
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + '');
        }

        module.exports = baseRest;


        /***/
}),
/* 3 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file formatters.js
         * @author Marek Kotewicz <marek@ethdev.com>
         * @author Fabian Vogelsteller <fabian@ethdev.com>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */



        var utils = __webpack_require__(0);
        var config = __webpack_require__(47);
        var Iban = __webpack_require__(73);

        /**
         * Should the format output to a big number
         *
         * @method outputBigNumberFormatter
         * @param {String|Number|BigNumber}
         * @returns {BigNumber} object
         */
        var outputBigNumberFormatter = function (number) {
          return utils.toBigNumber(number);
        };

        var isPredefinedBlockNumber = function (blockNumber) {
          return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';
        };

        // return default RecordIndex as 0
        var inputDefaultRecordIndexFormatter = function (inRecordIndex) {
          if (inRecordIndex === undefined) {
            return config.defaultRecordIndex;
          }
          return utils.fromDecimal(inRecordIndex);
        };

        // Record size default value if not set
        var inputDefaultRecordSizeFormatter = function (inRecordSize) {
          if (inRecordSize === undefined) {
            return config.defaultRecordSize;
          }
          return utils.fromDecimal(inRecordSize);
        };


        var inputDefaultBlockNumberFormatter = function (blockNumber) {
          if (blockNumber === undefined) {
            return config.defaultBlock;
          }
          return inputBlockNumberFormatter(blockNumber);
        };

        var inputBlockNumberFormatter = function (blockNumber) {
          if (blockNumber === undefined) {
            return undefined;
          } else if (isPredefinedBlockNumber(blockNumber)) {
            return blockNumber;
          }
          return utils.toHex(blockNumber);
        };

        /**
         * Formats the input of a transaction and converts all values to HEX
         *
         * @method inputCallFormatter
         * @param {Object} transaction options
         * @returns object
        */
        var inputCallFormatter = function (options) {

          // console.log("Options:", options);
          options.from = options.from || config.defaultAccount;

          if (options.from) {
            options.from = inputAddressFormatter(options.from);
          }

          if (options.to) { // it might be contract creation
            options.to = inputAddressFormatter(options.to);
          }

          ['gasPrice', 'gas', 'value', 'nonce', 'shardingFlag'].filter(function (key) {
            return options[key] !== undefined;
          }).forEach(function (key) {
            options[key] = utils.fromDecimal(options[key]);
          });

          return options;
        };

        /**
         * Formats the input of a transaction and converts all values to HEX
         *
         * @method inputTransactionFormatter
         * @param {Object} transaction options
         * @returns object
        */
        var inputTransactionFormatter = function (options) {

          options.from = options.from || config.defaultAccount;
          // console.log("inputTransactionFormatter options:",options)
          options.from = inputAddressFormatter(options.from);

          if (options.to) { // it might be contract creation
            options.to = inputAddressFormatter(options.to);
          }

          ['gasPrice', 'gas', 'value', 'nonce', 'shardingFlag'].filter(function (key) {
            return options[key] !== undefined;
          }).forEach(function (key) {
            options[key] = utils.fromDecimal(options[key]);
          });

          return options;
        };

        /**
         * Formats the output of a transaction to its proper values
         * used for getTransaction, getTransactionByHash
         * @method outputTransactionFormatter
         * @param {Object} tx
         * @returns {Object}
        */
        var outputTransactionFormatter = function (tx) {
          //scsConsensusAddr
          //controlFlag
          if (tx.blockNumber !== null)
            tx.blockNumber = utils.toDecimal(tx.blockNumber);
          if (tx.transactionIndex !== null)
            tx.transactionIndex = utils.toDecimal(tx.transactionIndex);
          tx.nonce = utils.toDecimal(tx.nonce);
          tx.gas = utils.toDecimal(tx.gas);
          tx.gasPrice = utils.toBigNumber(tx.gasPrice);
          tx.value = utils.toBigNumber(tx.value);

          return tx;
        };

        /**
         * Formats the output of a transaction receipt to its proper values
         *
         * @method outputTransactionReceiptFormatter
         * @param {Object} receipt
         * @returns {Object}
        */
        var outputTransactionReceiptFormatter = function (receipt) {
          if (receipt.blockNumber !== null)
            receipt.blockNumber = utils.toDecimal(receipt.blockNumber);
          if (receipt.transactionIndex !== null)
            receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);
          receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);
          receipt.gasUsed = utils.toDecimal(receipt.gasUsed);

          if (utils.isArray(receipt.logs)) {
            receipt.logs = receipt.logs.map(function (log) {
              return outputLogFormatter(log);
            });
          }

          return receipt;
        };

        /**
         * Formats the output of a block to its proper values
         *
         * @method outputBlockFormatter
         * @param {Object} block
         * @returns {Object}
        */
        var outputBlockFormatter = function (block) {

          // transform to number
          block.gasLimit = utils.toDecimal(block.gasLimit);
          block.gasUsed = utils.toDecimal(block.gasUsed);
          block.size = utils.toDecimal(block.size);
          block.timestamp = utils.toDecimal(block.timestamp);
          if (block.number !== null)
            block.number = utils.toDecimal(block.number);

          block.difficulty = utils.toBigNumber(block.difficulty);
          block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);

          if (utils.isArray(block.transactions)) {
            block.transactions.forEach(function (item) {
              if (!utils.isString(item))
                return outputTransactionFormatter(item);
            });
          }

          return block;
        };

        /**
         * Formats the output of a log
         *
         * @method outputLogFormatter
         * @param {Object} log object
         * @returns {Object} log
        */
        var outputLogFormatter = function (log) {
          if (log.blockNumber)
            log.blockNumber = utils.toDecimal(log.blockNumber);
          if (log.transactionIndex)
            log.transactionIndex = utils.toDecimal(log.transactionIndex);
          if (log.logIndex)
            log.logIndex = utils.toDecimal(log.logIndex);

          return log;
        };

        /**
         * Formats the input of a whisper post and converts all values to HEX
         *
         * @method inputPostFormatter
         * @param {Object} transaction object
         * @returns {Object}
        */
        var inputPostFormatter = function (post) {

          // post.payload = utils.toHex(post.payload);
          post.ttl = utils.fromDecimal(post.ttl);
          post.workToProve = utils.fromDecimal(post.workToProve);
          post.priority = utils.fromDecimal(post.priority);

          // fallback
          if (!utils.isArray(post.topics)) {
            post.topics = post.topics ? [post.topics] : [];
          }

          // format the following options
          post.topics = post.topics.map(function (topic) {
            // convert only if not hex
            return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);
          });

          return post;
        };

        /**
         * Formats the output of a received post message
         *
         * @method outputPostFormatter
         * @param {Object}
         * @returns {Object}
         */
        var outputPostFormatter = function (post) {

          post.expiry = utils.toDecimal(post.expiry);
          post.sent = utils.toDecimal(post.sent);
          post.ttl = utils.toDecimal(post.ttl);
          post.workProved = utils.toDecimal(post.workProved);
          // post.payloadRaw = post.payload;
          // post.payload = utils.toAscii(post.payload);

          // if (utils.isJson(post.payload)) {
          //     post.payload = JSON.parse(post.payload);
          // }

          // format the following options
          if (!post.topics) {
            post.topics = [];
          }
          post.topics = post.topics.map(function (topic) {
            return utils.toAscii(topic);
          });

          return post;
        };

        /*
         * Add MOAC address check
         * and convert input string to MOAC address
        */
        var inputAddressFormatter = function (address) {
          // console.log("inputAddressFormatter:", address)
          var iban = new Iban(address);
          if (iban.isValid() && iban.isDirect()) {
            return '0x' + iban.address();
          } else if (utils.isStrictAddress(address)) {
            return address;
          } else if (utils.isAddress(address)) {
            return '0x' + address;
          }
          throw new Error('invalid address');
        };


        var outputSyncingFormatter = function (result) {
          if (!result) {
            return result;
          }

          result.startingBlock = utils.toDecimal(result.startingBlock);
          result.currentBlock = utils.toDecimal(result.currentBlock);
          result.highestBlock = utils.toDecimal(result.highestBlock);
          if (result.knownStates) {
            result.knownStates = utils.toDecimal(result.knownStates);
            result.pulledStates = utils.toDecimal(result.pulledStates);
          }

          return result;
        };

        /**
         * Formats the output of a vnode list to its proper values
         *
         * @method outputVnodesFormattertoo many elements
         * @param {Object} vnodes
         * @returns {Object}
        */
        var outputVnodesFormatter = function (vnodes) {

          var vnodeObjs = [];
          var len = vnodes.length;
          for (var i = 0; i < len; i++) {
            var vnodeStr = vnodes[i];
            var nodeAddress = vnodeStr;
            var ipStart = vnodeStr.substring(vnodeStr.indexOf("@") + 1);
            var ip = ipStart.substring(0, ipStart.indexOf(":"));
            if (ip.length < 5) {
              if (vnodeStr.indexOf("ip=") >= 0) {
                ip = vnodeStr.substring(vnodeStr.indexOf("ip=") + 3);
                if (ip.indexOf("&") >= 0) {
                  ip = ip.substring(0, ip.indexOf("&"));
                }
              } else {
                ip = ipStart.substring(0, ipStart.indexOf("[::]") + 4);
              }
            }

            var serviceCfgIP = "";
            var serviceCfgPort = "";
            if (vnodeStr.indexOf("servicecfgport=") >= 0) {
              serviceCfgPort = vnodeStr.substring(vnodeStr.indexOf("servicecfgport=") + 15);
              if (serviceCfgPort.indexOf("&") >= 0) {
                serviceCfgIP = serviceCfgPort.substring(0, serviceCfgPort.indexOf(":"));
                serviceCfgPort = serviceCfgPort.substring(serviceCfgPort.indexOf(":") + 1, serviceCfgPort.indexOf("&"));
              }
            }

            var beneficialAddress = "";
            if (vnodeStr.indexOf("beneficialaddress=") >= 0) {
              beneficialAddress = vnodeStr.substring(vnodeStr.indexOf("beneficialaddress=") + 18);
              if (beneficialAddress.indexOf("&") >= 0) {
                beneficialAddress = beneficialAddress.substring(0, beneficialAddress.indexOf("&"));
              }
            }

            var showtopublic = "";
            if (vnodeStr.indexOf("showtopublic=") >= 0) {
              showtopublic = vnodeStr.substring(vnodeStr.indexOf("showtopublic=") + 13);
              if (showtopublic.indexOf("&") >= 0) {
                showtopublic = showtopublic.substring(0, showtopublic.indexOf("&"));
              }
            }

            if (showtopublic.toLowerCase() === "true") {
              var vnode = {
                nodeAddress: nodeAddress,
                ip: ip,
                serviceCfgPort: serviceCfgPort,
                beneficialAddress: beneficialAddress
              };

              vnodeObjs.push(vnode);
            }
          }

          return vnodeObjs;
        };

        module.exports = {
          inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,
          inputBlockNumberFormatter: inputBlockNumberFormatter,
          inputCallFormatter: inputCallFormatter,
          inputTransactionFormatter: inputTransactionFormatter,
          inputAddressFormatter: inputAddressFormatter,
          inputPostFormatter: inputPostFormatter,
          outputBigNumberFormatter: outputBigNumberFormatter,
          outputTransactionFormatter: outputTransactionFormatter,
          outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,
          outputBlockFormatter: outputBlockFormatter,
          outputLogFormatter: outputLogFormatter,
          outputPostFormatter: outputPostFormatter,
          outputSyncingFormatter: outputSyncingFormatter,
          outputVnodesFormatter: outputVnodesFormatter
        };



        /***/
}),
/* 4 */
/***/ (function (module, exports) {

        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(document.body.children);
         * // => false
         *
         * _.isArray('abc');
         * // => false
         *
         * _.isArray(_.noop);
         * // => false
         */
        var isArray = Array.isArray;

        module.exports = isArray;


        /***/
}),
/* 5 */
/***/ (function (module, exports, __webpack_require__) {

        var toFinite = __webpack_require__(254);

        /**
         * Converts `value` to an integer.
         *
         * **Note:** This method is loosely based on
         * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toInteger(3.2);
         * // => 3
         *
         * _.toInteger(Number.MIN_VALUE);
         * // => 0
         *
         * _.toInteger(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toInteger('3.2');
         * // => 3
         */
        function toInteger(value) {
          var result = toFinite(value),
            remainder = result % 1;

          return result === result ? (remainder ? result - remainder : result) : 0;
        }

        module.exports = toInteger;


        /***/
}),
/* 6 */
/***/ (function (module, exports) {

        if (typeof Object.create === 'function') {
          // implementation from standard node.js 'util' module
          module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              })
            }
          };
        } else {
          // old school shim for old browsers
          module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor
              var TempCtor = function () { }
              TempCtor.prototype = superCtor.prototype
              ctor.prototype = new TempCtor()
              ctor.prototype.constructor = ctor
            }
          }
        }


        /***/
}),
/* 7 */
/***/ (function (module, exports) {

        /**
         * A specialized version of `_.map` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function arrayMap(array, iteratee) {
          var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);

          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }

        module.exports = arrayMap;


        /***/
}),
/* 8 */
/***/ (function (module, exports, __webpack_require__) {

        var freeGlobal = __webpack_require__(139);

        /** Detect free variable `self`. */
        var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

        /** Used as a reference to the global object. */
        var root = freeGlobal || freeSelf || Function('return this')();

        module.exports = root;


        /***/
}),
/* 9 */
/***/ (function (module, exports) {

        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == 'object' || type == 'function');
        }

        module.exports = isObject;


        /***/
}),
/* 10 */
/***/ (function (module, exports, __webpack_require__) {

        /* eslint-disable node/no-deprecated-api */
        var buffer = __webpack_require__(27)
        var Buffer = buffer.Buffer

        // alternative to using Object.keys for old browsers
        function copyProps(src, dst) {
          for (var key in src) {
            dst[key] = src[key]
          }
        }
        if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
          module.exports = buffer
        } else {
          // Copy properties from require('buffer')
          copyProps(buffer, exports)
          exports.Buffer = SafeBuffer
        }

        function SafeBuffer(arg, encodingOrOffset, length) {
          return Buffer(arg, encodingOrOffset, length)
        }

        SafeBuffer.prototype = Object.create(Buffer.prototype)

        // Copy static methods from Buffer
        copyProps(Buffer, SafeBuffer)

        SafeBuffer.from = function (arg, encodingOrOffset, length) {
          if (typeof arg === 'number') {
            throw new TypeError('Argument must not be a number')
          }
          return Buffer(arg, encodingOrOffset, length)
        }

        SafeBuffer.alloc = function (size, fill, encoding) {
          if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number')
          }
          var buf = Buffer(size)
          if (fill !== undefined) {
            if (typeof encoding === 'string') {
              buf.fill(fill, encoding)
            } else {
              buf.fill(fill)
            }
          } else {
            buf.fill(0)
          }
          return buf
        }

        SafeBuffer.allocUnsafe = function (size) {
          if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number')
          }
          return Buffer(size)
        }

        SafeBuffer.allocUnsafeSlow = function (size) {
          if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number')
          }
          return buffer.SlowBuffer(size)
        }


        /***/
}),
/* 11 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (module) {
          (function (module, exports) {
            'use strict';

            // Utils
            function assert(val, msg) {
              if (!val) throw new Error(msg || 'Assertion failed');
            }

            // Could use `inherits` module, but don't want to move from single file
            // architecture yet.
            function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function () { };
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            }

            // BN

            function BN(number, base, endian) {
              if (BN.isBN(number)) {
                return number;
              }

              this.negative = 0;
              this.words = null;
              this.length = 0;

              // Reduction context
              this.red = null;

              if (number !== null) {
                if (base === 'le' || base === 'be') {
                  endian = base;
                  base = 10;
                }

                this._init(number || 0, base || 10, endian || 'be');
              }
            }
            if (typeof module === 'object') {
              module.exports = BN;
            } else {
              exports.BN = BN;
            }

            BN.BN = BN;
            BN.wordSize = 26;

            var Buffer;
            try {
              Buffer = __webpack_require__(27).Buffer;
            } catch (e) {
            }

            BN.isBN = function isBN(num) {
              if (num instanceof BN) {
                return true;
              }

              return num !== null && typeof num === 'object' &&
                num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
            };

            BN.max = function max(left, right) {
              if (left.cmp(right) > 0) return left;
              return right;
            };

            BN.min = function min(left, right) {
              if (left.cmp(right) < 0) return left;
              return right;
            };

            BN.prototype._init = function init(number, base, endian) {
              if (typeof number === 'number') {
                return this._initNumber(number, base, endian);
              }

              if (typeof number === 'object') {
                return this._initArray(number, base, endian);
              }

              if (base === 'hex') {
                base = 16;
              }
              assert(base === (base | 0) && base >= 2 && base <= 36);

              number = number.toString().replace(/\s+/g, '');
              var start = 0;
              if (number[0] === '-') {
                start++;
              }

              if (base === 16) {
                this._parseHex(number, start);
              } else {
                this._parseBase(number, base, start);
              }

              if (number[0] === '-') {
                this.negative = 1;
              }

              this.strip();

              if (endian !== 'le') return;

              this._initArray(this.toArray(), base, endian);
            };

            BN.prototype._initNumber = function _initNumber(number, base, endian) {
              if (number < 0) {
                this.negative = 1;
                number = -number;
              }
              if (number < 0x4000000) {
                this.words = [number & 0x3ffffff];
                this.length = 1;
              } else if (number < 0x10000000000000) {
                this.words = [
                  number & 0x3ffffff,
                  (number / 0x4000000) & 0x3ffffff
                ];
                this.length = 2;
              } else {
                assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
                this.words = [
                  number & 0x3ffffff,
                  (number / 0x4000000) & 0x3ffffff,
                  1
                ];
                this.length = 3;
              }

              if (endian !== 'le') return;

              // Reverse the bytes
              this._initArray(this.toArray(), base, endian);
            };

            BN.prototype._initArray = function _initArray(number, base, endian) {
              // Perhaps a Uint8Array
              assert(typeof number.length === 'number');
              if (number.length <= 0) {
                this.words = [0];
                this.length = 1;
                return this;
              }

              this.length = Math.ceil(number.length / 3);
              this.words = new Array(this.length);
              for (var i = 0; i < this.length; i++) {
                this.words[i] = 0;
              }

              var j, w;
              var off = 0;
              if (endian === 'be') {
                for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                  w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                  this.words[j] |= (w << off) & 0x3ffffff;
                  this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                  off += 24;
                  if (off >= 26) {
                    off -= 26;
                    j++;
                  }
                }
              } else if (endian === 'le') {
                for (i = 0, j = 0; i < number.length; i += 3) {
                  w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                  this.words[j] |= (w << off) & 0x3ffffff;
                  this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                  off += 24;
                  if (off >= 26) {
                    off -= 26;
                    j++;
                  }
                }
              }
              return this.strip();
            };

            function parseHex(str, start, end) {
              var r = 0;
              var len = Math.min(str.length, end);
              for (var i = start; i < len; i++) {
                var c = str.charCodeAt(i) - 48;

                r <<= 4;

                // 'a' - 'f'
                if (c >= 49 && c <= 54) {
                  r |= c - 49 + 0xa;

                  // 'A' - 'F'
                } else if (c >= 17 && c <= 22) {
                  r |= c - 17 + 0xa;

                  // '0' - '9'
                } else {
                  r |= c & 0xf;
                }
              }
              return r;
            }

            BN.prototype._parseHex = function _parseHex(number, start) {
              // Create possibly bigger array to ensure that it fits the number
              this.length = Math.ceil((number.length - start) / 6);
              this.words = new Array(this.length);
              for (var i = 0; i < this.length; i++) {
                this.words[i] = 0;
              }

              var j, w;
              // Scan 24-bit chunks and add them to the number
              var off = 0;
              for (i = number.length - 6, j = 0; i >= start; i -= 6) {
                w = parseHex(number, i, i + 6);
                this.words[j] |= (w << off) & 0x3ffffff;
                // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
                this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
              if (i + 6 !== start) {
                w = parseHex(number, start, i + 6);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
              }
              this.strip();
            };

            function parseBase(str, start, end, mul) {
              var r = 0;
              var len = Math.min(str.length, end);
              for (var i = start; i < len; i++) {
                var c = str.charCodeAt(i) - 48;

                r *= mul;

                // 'a'
                if (c >= 49) {
                  r += c - 49 + 0xa;

                  // 'A'
                } else if (c >= 17) {
                  r += c - 17 + 0xa;

                  // '0' - '9'
                } else {
                  r += c;
                }
              }
              return r;
            }

            BN.prototype._parseBase = function _parseBase(number, base, start) {
              // Initialize as zero
              this.words = [0];
              this.length = 1;

              // Find length of limb in base
              for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
                limbLen++;
              }
              limbLen--;
              limbPow = (limbPow / base) | 0;

              var total = number.length - start;
              var mod = total % limbLen;
              var end = Math.min(total, total - mod) + start;

              var word = 0;
              for (var i = start; i < end; i += limbLen) {
                word = parseBase(number, i, i + limbLen, base);

                this.imuln(limbPow);
                if (this.words[0] + word < 0x4000000) {
                  this.words[0] += word;
                } else {
                  this._iaddn(word);
                }
              }

              if (mod !== 0) {
                var pow = 1;
                word = parseBase(number, i, number.length, base);

                for (i = 0; i < mod; i++) {
                  pow *= base;
                }

                this.imuln(pow);
                if (this.words[0] + word < 0x4000000) {
                  this.words[0] += word;
                } else {
                  this._iaddn(word);
                }
              }
            };

            BN.prototype.copy = function copy(dest) {
              dest.words = new Array(this.length);
              for (var i = 0; i < this.length; i++) {
                dest.words[i] = this.words[i];
              }
              dest.length = this.length;
              dest.negative = this.negative;
              dest.red = this.red;
            };

            BN.prototype.clone = function clone() {
              var r = new BN(null);
              this.copy(r);
              return r;
            };

            BN.prototype._expand = function _expand(size) {
              while (this.length < size) {
                this.words[this.length++] = 0;
              }
              return this;
            };

            // Remove leading `0` from `this`
            BN.prototype.strip = function strip() {
              while (this.length > 1 && this.words[this.length - 1] === 0) {
                this.length--;
              }
              return this._normSign();
            };

            BN.prototype._normSign = function _normSign() {
              // -0 = 0
              if (this.length === 1 && this.words[0] === 0) {
                this.negative = 0;
              }
              return this;
            };

            BN.prototype.inspect = function inspect() {
              return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
            };

            /*
          
            var zeros = [];
            var groupSizes = [];
            var groupBases = [];
          
            var s = '';
            var i = -1;
            while (++i < BN.wordSize) {
              zeros[i] = s;
              s += '0';
            }
            groupSizes[0] = 0;
            groupSizes[1] = 0;
            groupBases[0] = 0;
            groupBases[1] = 0;
            var base = 2 - 1;
            while (++base < 36 + 1) {
              var groupSize = 0;
              var groupBase = 1;
              while (groupBase < (1 << BN.wordSize) / base) {
                groupBase *= base;
                groupSize += 1;
              }
              groupSizes[base] = groupSize;
              groupBases[base] = groupBase;
            }
          
            */

            var zeros = [
              '',
              '0',
              '00',
              '000',
              '0000',
              '00000',
              '000000',
              '0000000',
              '00000000',
              '000000000',
              '0000000000',
              '00000000000',
              '000000000000',
              '0000000000000',
              '00000000000000',
              '000000000000000',
              '0000000000000000',
              '00000000000000000',
              '000000000000000000',
              '0000000000000000000',
              '00000000000000000000',
              '000000000000000000000',
              '0000000000000000000000',
              '00000000000000000000000',
              '000000000000000000000000',
              '0000000000000000000000000'
            ];

            var groupSizes = [
              0, 0,
              25, 16, 12, 11, 10, 9, 8,
              8, 7, 7, 7, 7, 6, 6,
              6, 6, 6, 6, 6, 5, 5,
              5, 5, 5, 5, 5, 5, 5,
              5, 5, 5, 5, 5, 5, 5
            ];

            var groupBases = [
              0, 0,
              33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
              43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
              16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
              6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
              24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
            ];

            BN.prototype.toString = function toString(base, padding) {
              base = base || 10;
              padding = padding | 0 || 1;

              var out;
              if (base === 16 || base === 'hex') {
                out = '';
                var off = 0;
                var carry = 0;
                for (var i = 0; i < this.length; i++) {
                  var w = this.words[i];
                  var word = (((w << off) | carry) & 0xffffff).toString(16);
                  carry = (w >>> (24 - off)) & 0xffffff;
                  if (carry !== 0 || i !== this.length - 1) {
                    out = zeros[6 - word.length] + word + out;
                  } else {
                    out = word + out;
                  }
                  off += 2;
                  if (off >= 26) {
                    off -= 26;
                    i--;
                  }
                }
                if (carry !== 0) {
                  out = carry.toString(16) + out;
                }
                while (out.length % padding !== 0) {
                  out = '0' + out;
                }
                if (this.negative !== 0) {
                  out = '-' + out;
                }
                return out;
              }

              if (base === (base | 0) && base >= 2 && base <= 36) {
                // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                var groupSize = groupSizes[base];
                // var groupBase = Math.pow(base, groupSize);
                var groupBase = groupBases[base];
                out = '';
                var c = this.clone();
                c.negative = 0;
                while (!c.isZero()) {
                  var r = c.modn(groupBase).toString(base);
                  c = c.idivn(groupBase);

                  if (!c.isZero()) {
                    out = zeros[groupSize - r.length] + r + out;
                  } else {
                    out = r + out;
                  }
                }
                if (this.isZero()) {
                  out = '0' + out;
                }
                while (out.length % padding !== 0) {
                  out = '0' + out;
                }
                if (this.negative !== 0) {
                  out = '-' + out;
                }
                return out;
              }

              assert(false, 'Base should be between 2 and 36');
            };

            BN.prototype.toNumber = function toNumber() {
              var ret = this.words[0];
              if (this.length === 2) {
                ret += this.words[1] * 0x4000000;
              } else if (this.length === 3 && this.words[2] === 0x01) {
                // NOTE: at this stage it is known that the top bit is set
                ret += 0x10000000000000 + (this.words[1] * 0x4000000);
              } else if (this.length > 2) {
                assert(false, 'Number can only safely store up to 53 bits');
              }
              return (this.negative !== 0) ? -ret : ret;
            };

            BN.prototype.toJSON = function toJSON() {
              return this.toString(16);
            };

            BN.prototype.toBuffer = function toBuffer(endian, length) {
              assert(typeof Buffer !== 'undefined');
              return this.toArrayLike(Buffer, endian, length);
            };

            BN.prototype.toArray = function toArray(endian, length) {
              return this.toArrayLike(Array, endian, length);
            };

            BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
              var byteLength = this.byteLength();
              var reqLength = length || Math.max(1, byteLength);
              assert(byteLength <= reqLength, 'byte array longer than desired length');
              assert(reqLength > 0, 'Requested array length <= 0');

              this.strip();
              var littleEndian = endian === 'le';
              var res = new ArrayType(reqLength);

              var b, i;
              var q = this.clone();
              if (!littleEndian) {
                // Assume big-endian
                for (i = 0; i < reqLength - byteLength; i++) {
                  res[i] = 0;
                }

                for (i = 0; !q.isZero(); i++) {
                  b = q.andln(0xff);
                  q.iushrn(8);

                  res[reqLength - i - 1] = b;
                }
              } else {
                for (i = 0; !q.isZero(); i++) {
                  b = q.andln(0xff);
                  q.iushrn(8);

                  res[i] = b;
                }

                for (; i < reqLength; i++) {
                  res[i] = 0;
                }
              }

              return res;
            };

            if (Math.clz32) {
              BN.prototype._countBits = function _countBits(w) {
                return 32 - Math.clz32(w);
              };
            } else {
              BN.prototype._countBits = function _countBits(w) {
                var t = w;
                var r = 0;
                if (t >= 0x1000) {
                  r += 13;
                  t >>>= 13;
                }
                if (t >= 0x40) {
                  r += 7;
                  t >>>= 7;
                }
                if (t >= 0x8) {
                  r += 4;
                  t >>>= 4;
                }
                if (t >= 0x02) {
                  r += 2;
                  t >>>= 2;
                }
                return r + t;
              };
            }

            BN.prototype._zeroBits = function _zeroBits(w) {
              // Short-cut
              if (w === 0) return 26;

              var t = w;
              var r = 0;
              if ((t & 0x1fff) === 0) {
                r += 13;
                t >>>= 13;
              }
              if ((t & 0x7f) === 0) {
                r += 7;
                t >>>= 7;
              }
              if ((t & 0xf) === 0) {
                r += 4;
                t >>>= 4;
              }
              if ((t & 0x3) === 0) {
                r += 2;
                t >>>= 2;
              }
              if ((t & 0x1) === 0) {
                r++;
              }
              return r;
            };

            // Return number of used bits in a BN
            BN.prototype.bitLength = function bitLength() {
              var w = this.words[this.length - 1];
              var hi = this._countBits(w);
              return (this.length - 1) * 26 + hi;
            };

            function toBitArray(num) {
              var w = new Array(num.bitLength());

              for (var bit = 0; bit < w.length; bit++) {
                var off = (bit / 26) | 0;
                var wbit = bit % 26;

                w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
              }

              return w;
            }

            // Number of trailing zero bits
            BN.prototype.zeroBits = function zeroBits() {
              if (this.isZero()) return 0;

              var r = 0;
              for (var i = 0; i < this.length; i++) {
                var b = this._zeroBits(this.words[i]);
                r += b;
                if (b !== 26) break;
              }
              return r;
            };

            BN.prototype.byteLength = function byteLength() {
              return Math.ceil(this.bitLength() / 8);
            };

            BN.prototype.toTwos = function toTwos(width) {
              if (this.negative !== 0) {
                return this.abs().inotn(width).iaddn(1);
              }
              return this.clone();
            };

            BN.prototype.fromTwos = function fromTwos(width) {
              if (this.testn(width - 1)) {
                return this.notn(width).iaddn(1).ineg();
              }
              return this.clone();
            };

            BN.prototype.isNeg = function isNeg() {
              return this.negative !== 0;
            };

            // Return negative clone of `this`
            BN.prototype.neg = function neg() {
              return this.clone().ineg();
            };

            BN.prototype.ineg = function ineg() {
              if (!this.isZero()) {
                this.negative ^= 1;
              }

              return this;
            };

            // Or `num` with `this` in-place
            BN.prototype.iuor = function iuor(num) {
              while (this.length < num.length) {
                this.words[this.length++] = 0;
              }

              for (var i = 0; i < num.length; i++) {
                this.words[i] = this.words[i] | num.words[i];
              }

              return this.strip();
            };

            BN.prototype.ior = function ior(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuor(num);
            };

            // Or `num` with `this`
            BN.prototype.or = function or(num) {
              if (this.length > num.length) return this.clone().ior(num);
              return num.clone().ior(this);
            };

            BN.prototype.uor = function uor(num) {
              if (this.length > num.length) return this.clone().iuor(num);
              return num.clone().iuor(this);
            };

            // And `num` with `this` in-place
            BN.prototype.iuand = function iuand(num) {
              // b = min-length(num, this)
              var b;
              if (this.length > num.length) {
                b = num;
              } else {
                b = this;
              }

              for (var i = 0; i < b.length; i++) {
                this.words[i] = this.words[i] & num.words[i];
              }

              this.length = b.length;

              return this.strip();
            };

            BN.prototype.iand = function iand(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuand(num);
            };

            // And `num` with `this`
            BN.prototype.and = function and(num) {
              if (this.length > num.length) return this.clone().iand(num);
              return num.clone().iand(this);
            };

            BN.prototype.uand = function uand(num) {
              if (this.length > num.length) return this.clone().iuand(num);
              return num.clone().iuand(this);
            };

            // Xor `num` with `this` in-place
            BN.prototype.iuxor = function iuxor(num) {
              // a.length > b.length
              var a;
              var b;
              if (this.length > num.length) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              for (var i = 0; i < b.length; i++) {
                this.words[i] = a.words[i] ^ b.words[i];
              }

              if (this !== a) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              this.length = a.length;

              return this.strip();
            };

            BN.prototype.ixor = function ixor(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuxor(num);
            };

            // Xor `num` with `this`
            BN.prototype.xor = function xor(num) {
              if (this.length > num.length) return this.clone().ixor(num);
              return num.clone().ixor(this);
            };

            BN.prototype.uxor = function uxor(num) {
              if (this.length > num.length) return this.clone().iuxor(num);
              return num.clone().iuxor(this);
            };

            // Not ``this`` with ``width`` bitwidth
            BN.prototype.inotn = function inotn(width) {
              assert(typeof width === 'number' && width >= 0);

              var bytesNeeded = Math.ceil(width / 26) | 0;
              var bitsLeft = width % 26;

              // Extend the buffer with leading zeroes
              this._expand(bytesNeeded);

              if (bitsLeft > 0) {
                bytesNeeded--;
              }

              // Handle complete words
              for (var i = 0; i < bytesNeeded; i++) {
                this.words[i] = ~this.words[i] & 0x3ffffff;
              }

              // Handle the residue
              if (bitsLeft > 0) {
                this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
              }

              // And remove leading zeroes
              return this.strip();
            };

            BN.prototype.notn = function notn(width) {
              return this.clone().inotn(width);
            };

            // Set `bit` of `this`
            BN.prototype.setn = function setn(bit, val) {
              assert(typeof bit === 'number' && bit >= 0);

              var off = (bit / 26) | 0;
              var wbit = bit % 26;

              this._expand(off + 1);

              if (val) {
                this.words[off] = this.words[off] | (1 << wbit);
              } else {
                this.words[off] = this.words[off] & ~(1 << wbit);
              }

              return this.strip();
            };

            // Add `num` to `this` in-place
            BN.prototype.iadd = function iadd(num) {
              var r;

              // negative + positive
              if (this.negative !== 0 && num.negative === 0) {
                this.negative = 0;
                r = this.isub(num);
                this.negative ^= 1;
                return this._normSign();

                // positive + negative
              } else if (this.negative === 0 && num.negative !== 0) {
                num.negative = 0;
                r = this.isub(num);
                num.negative = 1;
                return r._normSign();
              }

              // a.length > b.length
              var a, b;
              if (this.length > num.length) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              var carry = 0;
              for (var i = 0; i < b.length; i++) {
                r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                this.words[i] = r & 0x3ffffff;
                carry = r >>> 26;
              }
              for (; carry !== 0 && i < a.length; i++) {
                r = (a.words[i] | 0) + carry;
                this.words[i] = r & 0x3ffffff;
                carry = r >>> 26;
              }

              this.length = a.length;
              if (carry !== 0) {
                this.words[this.length] = carry;
                this.length++;
                // Copy the rest of the words
              } else if (a !== this) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              return this;
            };

            // Add `num` to `this`
            BN.prototype.add = function add(num) {
              var res;
              if (num.negative !== 0 && this.negative === 0) {
                num.negative = 0;
                res = this.sub(num);
                num.negative ^= 1;
                return res;
              } else if (num.negative === 0 && this.negative !== 0) {
                this.negative = 0;
                res = num.sub(this);
                this.negative = 1;
                return res;
              }

              if (this.length > num.length) return this.clone().iadd(num);

              return num.clone().iadd(this);
            };

            // Subtract `num` from `this` in-place
            BN.prototype.isub = function isub(num) {
              // this - (-num) = this + num
              if (num.negative !== 0) {
                num.negative = 0;
                var r = this.iadd(num);
                num.negative = 1;
                return r._normSign();

                // -this - num = -(this + num)
              } else if (this.negative !== 0) {
                this.negative = 0;
                this.iadd(num);
                this.negative = 1;
                return this._normSign();
              }

              // At this point both numbers are positive
              var cmp = this.cmp(num);

              // Optimization - zeroify
              if (cmp === 0) {
                this.negative = 0;
                this.length = 1;
                this.words[0] = 0;
                return this;
              }

              // a > b
              var a, b;
              if (cmp > 0) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              var carry = 0;
              for (var i = 0; i < b.length; i++) {
                r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                carry = r >> 26;
                this.words[i] = r & 0x3ffffff;
              }
              for (; carry !== 0 && i < a.length; i++) {
                r = (a.words[i] | 0) + carry;
                carry = r >> 26;
                this.words[i] = r & 0x3ffffff;
              }

              // Copy rest of the words
              if (carry === 0 && i < a.length && a !== this) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              this.length = Math.max(this.length, i);

              if (a !== this) {
                this.negative = 1;
              }

              return this.strip();
            };

            // Subtract `num` from `this`
            BN.prototype.sub = function sub(num) {
              return this.clone().isub(num);
            };

            function smallMulTo(self, num, out) {
              out.negative = num.negative ^ self.negative;
              var len = (self.length + num.length) | 0;
              out.length = len;
              len = (len - 1) | 0;

              // Peel one iteration (compiler can't do it, because of code complexity)
              var a = self.words[0] | 0;
              var b = num.words[0] | 0;
              var r = a * b;

              var lo = r & 0x3ffffff;
              var carry = (r / 0x4000000) | 0;
              out.words[0] = lo;

              for (var k = 1; k < len; k++) {
                // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                // note that ncarry could be >= 0x3ffffff
                var ncarry = carry >>> 26;
                var rword = carry & 0x3ffffff;
                var maxJ = Math.min(k, num.length - 1);
                for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                  var i = (k - j) | 0;
                  a = self.words[i] | 0;
                  b = num.words[j] | 0;
                  r = a * b + rword;
                  ncarry += (r / 0x4000000) | 0;
                  rword = r & 0x3ffffff;
                }
                out.words[k] = rword | 0;
                carry = ncarry | 0;
              }
              if (carry !== 0) {
                out.words[k] = carry | 0;
              } else {
                out.length--;
              }

              return out.strip();
            }

            // TODO(indutny): it may be reasonable to omit it for users who don't need
            // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
            // multiplication (like elliptic secp256k1).
            var comb10MulTo = function comb10MulTo(self, num, out) {
              var a = self.words;
              var b = num.words;
              var o = out.words;
              var c = 0;
              var lo;
              var mid;
              var hi;
              var a0 = a[0] | 0;
              var al0 = a0 & 0x1fff;
              var ah0 = a0 >>> 13;
              var a1 = a[1] | 0;
              var al1 = a1 & 0x1fff;
              var ah1 = a1 >>> 13;
              var a2 = a[2] | 0;
              var al2 = a2 & 0x1fff;
              var ah2 = a2 >>> 13;
              var a3 = a[3] | 0;
              var al3 = a3 & 0x1fff;
              var ah3 = a3 >>> 13;
              var a4 = a[4] | 0;
              var al4 = a4 & 0x1fff;
              var ah4 = a4 >>> 13;
              var a5 = a[5] | 0;
              var al5 = a5 & 0x1fff;
              var ah5 = a5 >>> 13;
              var a6 = a[6] | 0;
              var al6 = a6 & 0x1fff;
              var ah6 = a6 >>> 13;
              var a7 = a[7] | 0;
              var al7 = a7 & 0x1fff;
              var ah7 = a7 >>> 13;
              var a8 = a[8] | 0;
              var al8 = a8 & 0x1fff;
              var ah8 = a8 >>> 13;
              var a9 = a[9] | 0;
              var al9 = a9 & 0x1fff;
              var ah9 = a9 >>> 13;
              var b0 = b[0] | 0;
              var bl0 = b0 & 0x1fff;
              var bh0 = b0 >>> 13;
              var b1 = b[1] | 0;
              var bl1 = b1 & 0x1fff;
              var bh1 = b1 >>> 13;
              var b2 = b[2] | 0;
              var bl2 = b2 & 0x1fff;
              var bh2 = b2 >>> 13;
              var b3 = b[3] | 0;
              var bl3 = b3 & 0x1fff;
              var bh3 = b3 >>> 13;
              var b4 = b[4] | 0;
              var bl4 = b4 & 0x1fff;
              var bh4 = b4 >>> 13;
              var b5 = b[5] | 0;
              var bl5 = b5 & 0x1fff;
              var bh5 = b5 >>> 13;
              var b6 = b[6] | 0;
              var bl6 = b6 & 0x1fff;
              var bh6 = b6 >>> 13;
              var b7 = b[7] | 0;
              var bl7 = b7 & 0x1fff;
              var bh7 = b7 >>> 13;
              var b8 = b[8] | 0;
              var bl8 = b8 & 0x1fff;
              var bh8 = b8 >>> 13;
              var b9 = b[9] | 0;
              var bl9 = b9 & 0x1fff;
              var bh9 = b9 >>> 13;

              out.negative = self.negative ^ num.negative;
              out.length = 19;
              /* k = 0 */
              lo = Math.imul(al0, bl0);
              mid = Math.imul(al0, bh0);
              mid = (mid + Math.imul(ah0, bl0)) | 0;
              hi = Math.imul(ah0, bh0);
              var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
              w0 &= 0x3ffffff;
              /* k = 1 */
              lo = Math.imul(al1, bl0);
              mid = Math.imul(al1, bh0);
              mid = (mid + Math.imul(ah1, bl0)) | 0;
              hi = Math.imul(ah1, bh0);
              lo = (lo + Math.imul(al0, bl1)) | 0;
              mid = (mid + Math.imul(al0, bh1)) | 0;
              mid = (mid + Math.imul(ah0, bl1)) | 0;
              hi = (hi + Math.imul(ah0, bh1)) | 0;
              var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
              w1 &= 0x3ffffff;
              /* k = 2 */
              lo = Math.imul(al2, bl0);
              mid = Math.imul(al2, bh0);
              mid = (mid + Math.imul(ah2, bl0)) | 0;
              hi = Math.imul(ah2, bh0);
              lo = (lo + Math.imul(al1, bl1)) | 0;
              mid = (mid + Math.imul(al1, bh1)) | 0;
              mid = (mid + Math.imul(ah1, bl1)) | 0;
              hi = (hi + Math.imul(ah1, bh1)) | 0;
              lo = (lo + Math.imul(al0, bl2)) | 0;
              mid = (mid + Math.imul(al0, bh2)) | 0;
              mid = (mid + Math.imul(ah0, bl2)) | 0;
              hi = (hi + Math.imul(ah0, bh2)) | 0;
              var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
              w2 &= 0x3ffffff;
              /* k = 3 */
              lo = Math.imul(al3, bl0);
              mid = Math.imul(al3, bh0);
              mid = (mid + Math.imul(ah3, bl0)) | 0;
              hi = Math.imul(ah3, bh0);
              lo = (lo + Math.imul(al2, bl1)) | 0;
              mid = (mid + Math.imul(al2, bh1)) | 0;
              mid = (mid + Math.imul(ah2, bl1)) | 0;
              hi = (hi + Math.imul(ah2, bh1)) | 0;
              lo = (lo + Math.imul(al1, bl2)) | 0;
              mid = (mid + Math.imul(al1, bh2)) | 0;
              mid = (mid + Math.imul(ah1, bl2)) | 0;
              hi = (hi + Math.imul(ah1, bh2)) | 0;
              lo = (lo + Math.imul(al0, bl3)) | 0;
              mid = (mid + Math.imul(al0, bh3)) | 0;
              mid = (mid + Math.imul(ah0, bl3)) | 0;
              hi = (hi + Math.imul(ah0, bh3)) | 0;
              var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
              w3 &= 0x3ffffff;
              /* k = 4 */
              lo = Math.imul(al4, bl0);
              mid = Math.imul(al4, bh0);
              mid = (mid + Math.imul(ah4, bl0)) | 0;
              hi = Math.imul(ah4, bh0);
              lo = (lo + Math.imul(al3, bl1)) | 0;
              mid = (mid + Math.imul(al3, bh1)) | 0;
              mid = (mid + Math.imul(ah3, bl1)) | 0;
              hi = (hi + Math.imul(ah3, bh1)) | 0;
              lo = (lo + Math.imul(al2, bl2)) | 0;
              mid = (mid + Math.imul(al2, bh2)) | 0;
              mid = (mid + Math.imul(ah2, bl2)) | 0;
              hi = (hi + Math.imul(ah2, bh2)) | 0;
              lo = (lo + Math.imul(al1, bl3)) | 0;
              mid = (mid + Math.imul(al1, bh3)) | 0;
              mid = (mid + Math.imul(ah1, bl3)) | 0;
              hi = (hi + Math.imul(ah1, bh3)) | 0;
              lo = (lo + Math.imul(al0, bl4)) | 0;
              mid = (mid + Math.imul(al0, bh4)) | 0;
              mid = (mid + Math.imul(ah0, bl4)) | 0;
              hi = (hi + Math.imul(ah0, bh4)) | 0;
              var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
              w4 &= 0x3ffffff;
              /* k = 5 */
              lo = Math.imul(al5, bl0);
              mid = Math.imul(al5, bh0);
              mid = (mid + Math.imul(ah5, bl0)) | 0;
              hi = Math.imul(ah5, bh0);
              lo = (lo + Math.imul(al4, bl1)) | 0;
              mid = (mid + Math.imul(al4, bh1)) | 0;
              mid = (mid + Math.imul(ah4, bl1)) | 0;
              hi = (hi + Math.imul(ah4, bh1)) | 0;
              lo = (lo + Math.imul(al3, bl2)) | 0;
              mid = (mid + Math.imul(al3, bh2)) | 0;
              mid = (mid + Math.imul(ah3, bl2)) | 0;
              hi = (hi + Math.imul(ah3, bh2)) | 0;
              lo = (lo + Math.imul(al2, bl3)) | 0;
              mid = (mid + Math.imul(al2, bh3)) | 0;
              mid = (mid + Math.imul(ah2, bl3)) | 0;
              hi = (hi + Math.imul(ah2, bh3)) | 0;
              lo = (lo + Math.imul(al1, bl4)) | 0;
              mid = (mid + Math.imul(al1, bh4)) | 0;
              mid = (mid + Math.imul(ah1, bl4)) | 0;
              hi = (hi + Math.imul(ah1, bh4)) | 0;
              lo = (lo + Math.imul(al0, bl5)) | 0;
              mid = (mid + Math.imul(al0, bh5)) | 0;
              mid = (mid + Math.imul(ah0, bl5)) | 0;
              hi = (hi + Math.imul(ah0, bh5)) | 0;
              var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
              w5 &= 0x3ffffff;
              /* k = 6 */
              lo = Math.imul(al6, bl0);
              mid = Math.imul(al6, bh0);
              mid = (mid + Math.imul(ah6, bl0)) | 0;
              hi = Math.imul(ah6, bh0);
              lo = (lo + Math.imul(al5, bl1)) | 0;
              mid = (mid + Math.imul(al5, bh1)) | 0;
              mid = (mid + Math.imul(ah5, bl1)) | 0;
              hi = (hi + Math.imul(ah5, bh1)) | 0;
              lo = (lo + Math.imul(al4, bl2)) | 0;
              mid = (mid + Math.imul(al4, bh2)) | 0;
              mid = (mid + Math.imul(ah4, bl2)) | 0;
              hi = (hi + Math.imul(ah4, bh2)) | 0;
              lo = (lo + Math.imul(al3, bl3)) | 0;
              mid = (mid + Math.imul(al3, bh3)) | 0;
              mid = (mid + Math.imul(ah3, bl3)) | 0;
              hi = (hi + Math.imul(ah3, bh3)) | 0;
              lo = (lo + Math.imul(al2, bl4)) | 0;
              mid = (mid + Math.imul(al2, bh4)) | 0;
              mid = (mid + Math.imul(ah2, bl4)) | 0;
              hi = (hi + Math.imul(ah2, bh4)) | 0;
              lo = (lo + Math.imul(al1, bl5)) | 0;
              mid = (mid + Math.imul(al1, bh5)) | 0;
              mid = (mid + Math.imul(ah1, bl5)) | 0;
              hi = (hi + Math.imul(ah1, bh5)) | 0;
              lo = (lo + Math.imul(al0, bl6)) | 0;
              mid = (mid + Math.imul(al0, bh6)) | 0;
              mid = (mid + Math.imul(ah0, bl6)) | 0;
              hi = (hi + Math.imul(ah0, bh6)) | 0;
              var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
              w6 &= 0x3ffffff;
              /* k = 7 */
              lo = Math.imul(al7, bl0);
              mid = Math.imul(al7, bh0);
              mid = (mid + Math.imul(ah7, bl0)) | 0;
              hi = Math.imul(ah7, bh0);
              lo = (lo + Math.imul(al6, bl1)) | 0;
              mid = (mid + Math.imul(al6, bh1)) | 0;
              mid = (mid + Math.imul(ah6, bl1)) | 0;
              hi = (hi + Math.imul(ah6, bh1)) | 0;
              lo = (lo + Math.imul(al5, bl2)) | 0;
              mid = (mid + Math.imul(al5, bh2)) | 0;
              mid = (mid + Math.imul(ah5, bl2)) | 0;
              hi = (hi + Math.imul(ah5, bh2)) | 0;
              lo = (lo + Math.imul(al4, bl3)) | 0;
              mid = (mid + Math.imul(al4, bh3)) | 0;
              mid = (mid + Math.imul(ah4, bl3)) | 0;
              hi = (hi + Math.imul(ah4, bh3)) | 0;
              lo = (lo + Math.imul(al3, bl4)) | 0;
              mid = (mid + Math.imul(al3, bh4)) | 0;
              mid = (mid + Math.imul(ah3, bl4)) | 0;
              hi = (hi + Math.imul(ah3, bh4)) | 0;
              lo = (lo + Math.imul(al2, bl5)) | 0;
              mid = (mid + Math.imul(al2, bh5)) | 0;
              mid = (mid + Math.imul(ah2, bl5)) | 0;
              hi = (hi + Math.imul(ah2, bh5)) | 0;
              lo = (lo + Math.imul(al1, bl6)) | 0;
              mid = (mid + Math.imul(al1, bh6)) | 0;
              mid = (mid + Math.imul(ah1, bl6)) | 0;
              hi = (hi + Math.imul(ah1, bh6)) | 0;
              lo = (lo + Math.imul(al0, bl7)) | 0;
              mid = (mid + Math.imul(al0, bh7)) | 0;
              mid = (mid + Math.imul(ah0, bl7)) | 0;
              hi = (hi + Math.imul(ah0, bh7)) | 0;
              var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
              w7 &= 0x3ffffff;
              /* k = 8 */
              lo = Math.imul(al8, bl0);
              mid = Math.imul(al8, bh0);
              mid = (mid + Math.imul(ah8, bl0)) | 0;
              hi = Math.imul(ah8, bh0);
              lo = (lo + Math.imul(al7, bl1)) | 0;
              mid = (mid + Math.imul(al7, bh1)) | 0;
              mid = (mid + Math.imul(ah7, bl1)) | 0;
              hi = (hi + Math.imul(ah7, bh1)) | 0;
              lo = (lo + Math.imul(al6, bl2)) | 0;
              mid = (mid + Math.imul(al6, bh2)) | 0;
              mid = (mid + Math.imul(ah6, bl2)) | 0;
              hi = (hi + Math.imul(ah6, bh2)) | 0;
              lo = (lo + Math.imul(al5, bl3)) | 0;
              mid = (mid + Math.imul(al5, bh3)) | 0;
              mid = (mid + Math.imul(ah5, bl3)) | 0;
              hi = (hi + Math.imul(ah5, bh3)) | 0;
              lo = (lo + Math.imul(al4, bl4)) | 0;
              mid = (mid + Math.imul(al4, bh4)) | 0;
              mid = (mid + Math.imul(ah4, bl4)) | 0;
              hi = (hi + Math.imul(ah4, bh4)) | 0;
              lo = (lo + Math.imul(al3, bl5)) | 0;
              mid = (mid + Math.imul(al3, bh5)) | 0;
              mid = (mid + Math.imul(ah3, bl5)) | 0;
              hi = (hi + Math.imul(ah3, bh5)) | 0;
              lo = (lo + Math.imul(al2, bl6)) | 0;
              mid = (mid + Math.imul(al2, bh6)) | 0;
              mid = (mid + Math.imul(ah2, bl6)) | 0;
              hi = (hi + Math.imul(ah2, bh6)) | 0;
              lo = (lo + Math.imul(al1, bl7)) | 0;
              mid = (mid + Math.imul(al1, bh7)) | 0;
              mid = (mid + Math.imul(ah1, bl7)) | 0;
              hi = (hi + Math.imul(ah1, bh7)) | 0;
              lo = (lo + Math.imul(al0, bl8)) | 0;
              mid = (mid + Math.imul(al0, bh8)) | 0;
              mid = (mid + Math.imul(ah0, bl8)) | 0;
              hi = (hi + Math.imul(ah0, bh8)) | 0;
              var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
              w8 &= 0x3ffffff;
              /* k = 9 */
              lo = Math.imul(al9, bl0);
              mid = Math.imul(al9, bh0);
              mid = (mid + Math.imul(ah9, bl0)) | 0;
              hi = Math.imul(ah9, bh0);
              lo = (lo + Math.imul(al8, bl1)) | 0;
              mid = (mid + Math.imul(al8, bh1)) | 0;
              mid = (mid + Math.imul(ah8, bl1)) | 0;
              hi = (hi + Math.imul(ah8, bh1)) | 0;
              lo = (lo + Math.imul(al7, bl2)) | 0;
              mid = (mid + Math.imul(al7, bh2)) | 0;
              mid = (mid + Math.imul(ah7, bl2)) | 0;
              hi = (hi + Math.imul(ah7, bh2)) | 0;
              lo = (lo + Math.imul(al6, bl3)) | 0;
              mid = (mid + Math.imul(al6, bh3)) | 0;
              mid = (mid + Math.imul(ah6, bl3)) | 0;
              hi = (hi + Math.imul(ah6, bh3)) | 0;
              lo = (lo + Math.imul(al5, bl4)) | 0;
              mid = (mid + Math.imul(al5, bh4)) | 0;
              mid = (mid + Math.imul(ah5, bl4)) | 0;
              hi = (hi + Math.imul(ah5, bh4)) | 0;
              lo = (lo + Math.imul(al4, bl5)) | 0;
              mid = (mid + Math.imul(al4, bh5)) | 0;
              mid = (mid + Math.imul(ah4, bl5)) | 0;
              hi = (hi + Math.imul(ah4, bh5)) | 0;
              lo = (lo + Math.imul(al3, bl6)) | 0;
              mid = (mid + Math.imul(al3, bh6)) | 0;
              mid = (mid + Math.imul(ah3, bl6)) | 0;
              hi = (hi + Math.imul(ah3, bh6)) | 0;
              lo = (lo + Math.imul(al2, bl7)) | 0;
              mid = (mid + Math.imul(al2, bh7)) | 0;
              mid = (mid + Math.imul(ah2, bl7)) | 0;
              hi = (hi + Math.imul(ah2, bh7)) | 0;
              lo = (lo + Math.imul(al1, bl8)) | 0;
              mid = (mid + Math.imul(al1, bh8)) | 0;
              mid = (mid + Math.imul(ah1, bl8)) | 0;
              hi = (hi + Math.imul(ah1, bh8)) | 0;
              lo = (lo + Math.imul(al0, bl9)) | 0;
              mid = (mid + Math.imul(al0, bh9)) | 0;
              mid = (mid + Math.imul(ah0, bl9)) | 0;
              hi = (hi + Math.imul(ah0, bh9)) | 0;
              var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
              w9 &= 0x3ffffff;
              /* k = 10 */
              lo = Math.imul(al9, bl1);
              mid = Math.imul(al9, bh1);
              mid = (mid + Math.imul(ah9, bl1)) | 0;
              hi = Math.imul(ah9, bh1);
              lo = (lo + Math.imul(al8, bl2)) | 0;
              mid = (mid + Math.imul(al8, bh2)) | 0;
              mid = (mid + Math.imul(ah8, bl2)) | 0;
              hi = (hi + Math.imul(ah8, bh2)) | 0;
              lo = (lo + Math.imul(al7, bl3)) | 0;
              mid = (mid + Math.imul(al7, bh3)) | 0;
              mid = (mid + Math.imul(ah7, bl3)) | 0;
              hi = (hi + Math.imul(ah7, bh3)) | 0;
              lo = (lo + Math.imul(al6, bl4)) | 0;
              mid = (mid + Math.imul(al6, bh4)) | 0;
              mid = (mid + Math.imul(ah6, bl4)) | 0;
              hi = (hi + Math.imul(ah6, bh4)) | 0;
              lo = (lo + Math.imul(al5, bl5)) | 0;
              mid = (mid + Math.imul(al5, bh5)) | 0;
              mid = (mid + Math.imul(ah5, bl5)) | 0;
              hi = (hi + Math.imul(ah5, bh5)) | 0;
              lo = (lo + Math.imul(al4, bl6)) | 0;
              mid = (mid + Math.imul(al4, bh6)) | 0;
              mid = (mid + Math.imul(ah4, bl6)) | 0;
              hi = (hi + Math.imul(ah4, bh6)) | 0;
              lo = (lo + Math.imul(al3, bl7)) | 0;
              mid = (mid + Math.imul(al3, bh7)) | 0;
              mid = (mid + Math.imul(ah3, bl7)) | 0;
              hi = (hi + Math.imul(ah3, bh7)) | 0;
              lo = (lo + Math.imul(al2, bl8)) | 0;
              mid = (mid + Math.imul(al2, bh8)) | 0;
              mid = (mid + Math.imul(ah2, bl8)) | 0;
              hi = (hi + Math.imul(ah2, bh8)) | 0;
              lo = (lo + Math.imul(al1, bl9)) | 0;
              mid = (mid + Math.imul(al1, bh9)) | 0;
              mid = (mid + Math.imul(ah1, bl9)) | 0;
              hi = (hi + Math.imul(ah1, bh9)) | 0;
              var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
              w10 &= 0x3ffffff;
              /* k = 11 */
              lo = Math.imul(al9, bl2);
              mid = Math.imul(al9, bh2);
              mid = (mid + Math.imul(ah9, bl2)) | 0;
              hi = Math.imul(ah9, bh2);
              lo = (lo + Math.imul(al8, bl3)) | 0;
              mid = (mid + Math.imul(al8, bh3)) | 0;
              mid = (mid + Math.imul(ah8, bl3)) | 0;
              hi = (hi + Math.imul(ah8, bh3)) | 0;
              lo = (lo + Math.imul(al7, bl4)) | 0;
              mid = (mid + Math.imul(al7, bh4)) | 0;
              mid = (mid + Math.imul(ah7, bl4)) | 0;
              hi = (hi + Math.imul(ah7, bh4)) | 0;
              lo = (lo + Math.imul(al6, bl5)) | 0;
              mid = (mid + Math.imul(al6, bh5)) | 0;
              mid = (mid + Math.imul(ah6, bl5)) | 0;
              hi = (hi + Math.imul(ah6, bh5)) | 0;
              lo = (lo + Math.imul(al5, bl6)) | 0;
              mid = (mid + Math.imul(al5, bh6)) | 0;
              mid = (mid + Math.imul(ah5, bl6)) | 0;
              hi = (hi + Math.imul(ah5, bh6)) | 0;
              lo = (lo + Math.imul(al4, bl7)) | 0;
              mid = (mid + Math.imul(al4, bh7)) | 0;
              mid = (mid + Math.imul(ah4, bl7)) | 0;
              hi = (hi + Math.imul(ah4, bh7)) | 0;
              lo = (lo + Math.imul(al3, bl8)) | 0;
              mid = (mid + Math.imul(al3, bh8)) | 0;
              mid = (mid + Math.imul(ah3, bl8)) | 0;
              hi = (hi + Math.imul(ah3, bh8)) | 0;
              lo = (lo + Math.imul(al2, bl9)) | 0;
              mid = (mid + Math.imul(al2, bh9)) | 0;
              mid = (mid + Math.imul(ah2, bl9)) | 0;
              hi = (hi + Math.imul(ah2, bh9)) | 0;
              var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
              w11 &= 0x3ffffff;
              /* k = 12 */
              lo = Math.imul(al9, bl3);
              mid = Math.imul(al9, bh3);
              mid = (mid + Math.imul(ah9, bl3)) | 0;
              hi = Math.imul(ah9, bh3);
              lo = (lo + Math.imul(al8, bl4)) | 0;
              mid = (mid + Math.imul(al8, bh4)) | 0;
              mid = (mid + Math.imul(ah8, bl4)) | 0;
              hi = (hi + Math.imul(ah8, bh4)) | 0;
              lo = (lo + Math.imul(al7, bl5)) | 0;
              mid = (mid + Math.imul(al7, bh5)) | 0;
              mid = (mid + Math.imul(ah7, bl5)) | 0;
              hi = (hi + Math.imul(ah7, bh5)) | 0;
              lo = (lo + Math.imul(al6, bl6)) | 0;
              mid = (mid + Math.imul(al6, bh6)) | 0;
              mid = (mid + Math.imul(ah6, bl6)) | 0;
              hi = (hi + Math.imul(ah6, bh6)) | 0;
              lo = (lo + Math.imul(al5, bl7)) | 0;
              mid = (mid + Math.imul(al5, bh7)) | 0;
              mid = (mid + Math.imul(ah5, bl7)) | 0;
              hi = (hi + Math.imul(ah5, bh7)) | 0;
              lo = (lo + Math.imul(al4, bl8)) | 0;
              mid = (mid + Math.imul(al4, bh8)) | 0;
              mid = (mid + Math.imul(ah4, bl8)) | 0;
              hi = (hi + Math.imul(ah4, bh8)) | 0;
              lo = (lo + Math.imul(al3, bl9)) | 0;
              mid = (mid + Math.imul(al3, bh9)) | 0;
              mid = (mid + Math.imul(ah3, bl9)) | 0;
              hi = (hi + Math.imul(ah3, bh9)) | 0;
              var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
              w12 &= 0x3ffffff;
              /* k = 13 */
              lo = Math.imul(al9, bl4);
              mid = Math.imul(al9, bh4);
              mid = (mid + Math.imul(ah9, bl4)) | 0;
              hi = Math.imul(ah9, bh4);
              lo = (lo + Math.imul(al8, bl5)) | 0;
              mid = (mid + Math.imul(al8, bh5)) | 0;
              mid = (mid + Math.imul(ah8, bl5)) | 0;
              hi = (hi + Math.imul(ah8, bh5)) | 0;
              lo = (lo + Math.imul(al7, bl6)) | 0;
              mid = (mid + Math.imul(al7, bh6)) | 0;
              mid = (mid + Math.imul(ah7, bl6)) | 0;
              hi = (hi + Math.imul(ah7, bh6)) | 0;
              lo = (lo + Math.imul(al6, bl7)) | 0;
              mid = (mid + Math.imul(al6, bh7)) | 0;
              mid = (mid + Math.imul(ah6, bl7)) | 0;
              hi = (hi + Math.imul(ah6, bh7)) | 0;
              lo = (lo + Math.imul(al5, bl8)) | 0;
              mid = (mid + Math.imul(al5, bh8)) | 0;
              mid = (mid + Math.imul(ah5, bl8)) | 0;
              hi = (hi + Math.imul(ah5, bh8)) | 0;
              lo = (lo + Math.imul(al4, bl9)) | 0;
              mid = (mid + Math.imul(al4, bh9)) | 0;
              mid = (mid + Math.imul(ah4, bl9)) | 0;
              hi = (hi + Math.imul(ah4, bh9)) | 0;
              var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
              w13 &= 0x3ffffff;
              /* k = 14 */
              lo = Math.imul(al9, bl5);
              mid = Math.imul(al9, bh5);
              mid = (mid + Math.imul(ah9, bl5)) | 0;
              hi = Math.imul(ah9, bh5);
              lo = (lo + Math.imul(al8, bl6)) | 0;
              mid = (mid + Math.imul(al8, bh6)) | 0;
              mid = (mid + Math.imul(ah8, bl6)) | 0;
              hi = (hi + Math.imul(ah8, bh6)) | 0;
              lo = (lo + Math.imul(al7, bl7)) | 0;
              mid = (mid + Math.imul(al7, bh7)) | 0;
              mid = (mid + Math.imul(ah7, bl7)) | 0;
              hi = (hi + Math.imul(ah7, bh7)) | 0;
              lo = (lo + Math.imul(al6, bl8)) | 0;
              mid = (mid + Math.imul(al6, bh8)) | 0;
              mid = (mid + Math.imul(ah6, bl8)) | 0;
              hi = (hi + Math.imul(ah6, bh8)) | 0;
              lo = (lo + Math.imul(al5, bl9)) | 0;
              mid = (mid + Math.imul(al5, bh9)) | 0;
              mid = (mid + Math.imul(ah5, bl9)) | 0;
              hi = (hi + Math.imul(ah5, bh9)) | 0;
              var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
              w14 &= 0x3ffffff;
              /* k = 15 */
              lo = Math.imul(al9, bl6);
              mid = Math.imul(al9, bh6);
              mid = (mid + Math.imul(ah9, bl6)) | 0;
              hi = Math.imul(ah9, bh6);
              lo = (lo + Math.imul(al8, bl7)) | 0;
              mid = (mid + Math.imul(al8, bh7)) | 0;
              mid = (mid + Math.imul(ah8, bl7)) | 0;
              hi = (hi + Math.imul(ah8, bh7)) | 0;
              lo = (lo + Math.imul(al7, bl8)) | 0;
              mid = (mid + Math.imul(al7, bh8)) | 0;
              mid = (mid + Math.imul(ah7, bl8)) | 0;
              hi = (hi + Math.imul(ah7, bh8)) | 0;
              lo = (lo + Math.imul(al6, bl9)) | 0;
              mid = (mid + Math.imul(al6, bh9)) | 0;
              mid = (mid + Math.imul(ah6, bl9)) | 0;
              hi = (hi + Math.imul(ah6, bh9)) | 0;
              var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
              w15 &= 0x3ffffff;
              /* k = 16 */
              lo = Math.imul(al9, bl7);
              mid = Math.imul(al9, bh7);
              mid = (mid + Math.imul(ah9, bl7)) | 0;
              hi = Math.imul(ah9, bh7);
              lo = (lo + Math.imul(al8, bl8)) | 0;
              mid = (mid + Math.imul(al8, bh8)) | 0;
              mid = (mid + Math.imul(ah8, bl8)) | 0;
              hi = (hi + Math.imul(ah8, bh8)) | 0;
              lo = (lo + Math.imul(al7, bl9)) | 0;
              mid = (mid + Math.imul(al7, bh9)) | 0;
              mid = (mid + Math.imul(ah7, bl9)) | 0;
              hi = (hi + Math.imul(ah7, bh9)) | 0;
              var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
              w16 &= 0x3ffffff;
              /* k = 17 */
              lo = Math.imul(al9, bl8);
              mid = Math.imul(al9, bh8);
              mid = (mid + Math.imul(ah9, bl8)) | 0;
              hi = Math.imul(ah9, bh8);
              lo = (lo + Math.imul(al8, bl9)) | 0;
              mid = (mid + Math.imul(al8, bh9)) | 0;
              mid = (mid + Math.imul(ah8, bl9)) | 0;
              hi = (hi + Math.imul(ah8, bh9)) | 0;
              var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
              w17 &= 0x3ffffff;
              /* k = 18 */
              lo = Math.imul(al9, bl9);
              mid = Math.imul(al9, bh9);
              mid = (mid + Math.imul(ah9, bl9)) | 0;
              hi = Math.imul(ah9, bh9);
              var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
              w18 &= 0x3ffffff;
              o[0] = w0;
              o[1] = w1;
              o[2] = w2;
              o[3] = w3;
              o[4] = w4;
              o[5] = w5;
              o[6] = w6;
              o[7] = w7;
              o[8] = w8;
              o[9] = w9;
              o[10] = w10;
              o[11] = w11;
              o[12] = w12;
              o[13] = w13;
              o[14] = w14;
              o[15] = w15;
              o[16] = w16;
              o[17] = w17;
              o[18] = w18;
              if (c !== 0) {
                o[19] = c;
                out.length++;
              }
              return out;
            };

            // Polyfill comb
            if (!Math.imul) {
              comb10MulTo = smallMulTo;
            }

            function bigMulTo(self, num, out) {
              out.negative = num.negative ^ self.negative;
              out.length = self.length + num.length;

              var carry = 0;
              var hncarry = 0;
              for (var k = 0; k < out.length - 1; k++) {
                // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                // note that ncarry could be >= 0x3ffffff
                var ncarry = hncarry;
                hncarry = 0;
                var rword = carry & 0x3ffffff;
                var maxJ = Math.min(k, num.length - 1);
                for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                  var i = k - j;
                  var a = self.words[i] | 0;
                  var b = num.words[j] | 0;
                  var r = a * b;

                  var lo = r & 0x3ffffff;
                  ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                  lo = (lo + rword) | 0;
                  rword = lo & 0x3ffffff;
                  ncarry = (ncarry + (lo >>> 26)) | 0;

                  hncarry += ncarry >>> 26;
                  ncarry &= 0x3ffffff;
                }
                out.words[k] = rword;
                carry = ncarry;
                ncarry = hncarry;
              }
              if (carry !== 0) {
                out.words[k] = carry;
              } else {
                out.length--;
              }

              return out.strip();
            }

            function jumboMulTo(self, num, out) {
              var fftm = new FFTM();
              return fftm.mulp(self, num, out);
            }

            BN.prototype.mulTo = function mulTo(num, out) {
              var res;
              var len = this.length + num.length;
              if (this.length === 10 && num.length === 10) {
                res = comb10MulTo(this, num, out);
              } else if (len < 63) {
                res = smallMulTo(this, num, out);
              } else if (len < 1024) {
                res = bigMulTo(this, num, out);
              } else {
                res = jumboMulTo(this, num, out);
              }

              return res;
            };

            // Cooley-Tukey algorithm for FFT
            // slightly revisited to rely on looping instead of recursion

            function FFTM(x, y) {
              this.x = x;
              this.y = y;
            }

            FFTM.prototype.makeRBT = function makeRBT(N) {
              var t = new Array(N);
              var l = BN.prototype._countBits(N) - 1;
              for (var i = 0; i < N; i++) {
                t[i] = this.revBin(i, l, N);
              }

              return t;
            };

            // Returns binary-reversed representation of `x`
            FFTM.prototype.revBin = function revBin(x, l, N) {
              if (x === 0 || x === N - 1) return x;

              var rb = 0;
              for (var i = 0; i < l; i++) {
                rb |= (x & 1) << (l - i - 1);
                x >>= 1;
              }

              return rb;
            };

            // Performs "tweedling" phase, therefore 'emulating'
            // behaviour of the recursive algorithm
            FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
              for (var i = 0; i < N; i++) {
                rtws[i] = rws[rbt[i]];
                itws[i] = iws[rbt[i]];
              }
            };

            FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
              this.permute(rbt, rws, iws, rtws, itws, N);

              for (var s = 1; s < N; s <<= 1) {
                var l = s << 1;

                var rtwdf = Math.cos(2 * Math.PI / l);
                var itwdf = Math.sin(2 * Math.PI / l);

                for (var p = 0; p < N; p += l) {
                  var rtwdf_ = rtwdf;
                  var itwdf_ = itwdf;

                  for (var j = 0; j < s; j++) {
                    var re = rtws[p + j];
                    var ie = itws[p + j];

                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];

                    var rx = rtwdf_ * ro - itwdf_ * io;

                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;

                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;

                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;

                    /* jshint maxdepth : false */
                    if (j !== l) {
                      rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                      itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                      rtwdf_ = rx;
                    }
                  }
                }
              }
            };

            FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
              var N = Math.max(m, n) | 1;
              var odd = N & 1;
              var i = 0;
              for (N = N / 2 | 0; N; N = N >>> 1) {
                i++;
              }

              return 1 << i + 1 + odd;
            };

            FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
              if (N <= 1) return;

              for (var i = 0; i < N / 2; i++) {
                var t = rws[i];

                rws[i] = rws[N - i - 1];
                rws[N - i - 1] = t;

                t = iws[i];

                iws[i] = -iws[N - i - 1];
                iws[N - i - 1] = -t;
              }
            };

            FFTM.prototype.normalize13b = function normalize13b(ws, N) {
              var carry = 0;
              for (var i = 0; i < N / 2; i++) {
                var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
                  Math.round(ws[2 * i] / N) +
                  carry;

                ws[i] = w & 0x3ffffff;

                if (w < 0x4000000) {
                  carry = 0;
                } else {
                  carry = w / 0x4000000 | 0;
                }
              }

              return ws;
            };

            FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
              var carry = 0;
              for (var i = 0; i < len; i++) {
                carry = carry + (ws[i] | 0);

                rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
                rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
              }

              // Pad with zeroes
              for (i = 2 * len; i < N; ++i) {
                rws[i] = 0;
              }

              assert(carry === 0);
              assert((carry & ~0x1fff) === 0);
            };

            FFTM.prototype.stub = function stub(N) {
              var ph = new Array(N);
              for (var i = 0; i < N; i++) {
                ph[i] = 0;
              }

              return ph;
            };

            FFTM.prototype.mulp = function mulp(x, y, out) {
              var N = 2 * this.guessLen13b(x.length, y.length);

              var rbt = this.makeRBT(N);

              var _ = this.stub(N);

              var rws = new Array(N);
              var rwst = new Array(N);
              var iwst = new Array(N);

              var nrws = new Array(N);
              var nrwst = new Array(N);
              var niwst = new Array(N);

              var rmws = out.words;
              rmws.length = N;

              this.convert13b(x.words, x.length, rws, N);
              this.convert13b(y.words, y.length, nrws, N);

              this.transform(rws, _, rwst, iwst, N, rbt);
              this.transform(nrws, _, nrwst, niwst, N, rbt);

              for (var i = 0; i < N; i++) {
                var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                rwst[i] = rx;
              }

              this.conjugate(rwst, iwst, N);
              this.transform(rwst, iwst, rmws, _, N, rbt);
              this.conjugate(rmws, _, N);
              this.normalize13b(rmws, N);

              out.negative = x.negative ^ y.negative;
              out.length = x.length + y.length;
              return out.strip();
            };

            // Multiply `this` by `num`
            BN.prototype.mul = function mul(num) {
              var out = new BN(null);
              out.words = new Array(this.length + num.length);
              return this.mulTo(num, out);
            };

            // Multiply employing FFT
            BN.prototype.mulf = function mulf(num) {
              var out = new BN(null);
              out.words = new Array(this.length + num.length);
              return jumboMulTo(this, num, out);
            };

            // In-place Multiplication
            BN.prototype.imul = function imul(num) {
              return this.clone().mulTo(num, this);
            };

            BN.prototype.imuln = function imuln(num) {
              assert(typeof num === 'number');
              assert(num < 0x4000000);

              // Carry
              var carry = 0;
              for (var i = 0; i < this.length; i++) {
                var w = (this.words[i] | 0) * num;
                var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                carry >>= 26;
                carry += (w / 0x4000000) | 0;
                // NOTE: lo is 27bit maximum
                carry += lo >>> 26;
                this.words[i] = lo & 0x3ffffff;
              }

              if (carry !== 0) {
                this.words[i] = carry;
                this.length++;
              }

              return this;
            };

            BN.prototype.muln = function muln(num) {
              return this.clone().imuln(num);
            };

            // `this` * `this`
            BN.prototype.sqr = function sqr() {
              return this.mul(this);
            };

            // `this` * `this` in-place
            BN.prototype.isqr = function isqr() {
              return this.imul(this.clone());
            };

            // Math.pow(`this`, `num`)
            BN.prototype.pow = function pow(num) {
              var w = toBitArray(num);
              if (w.length === 0) return new BN(1);

              // Skip leading zeroes
              var res = this;
              for (var i = 0; i < w.length; i++ , res = res.sqr()) {
                if (w[i] !== 0) break;
              }

              if (++i < w.length) {
                for (var q = res.sqr(); i < w.length; i++ , q = q.sqr()) {
                  if (w[i] === 0) continue;

                  res = res.mul(q);
                }
              }

              return res;
            };

            // Shift-left in-place
            BN.prototype.iushln = function iushln(bits) {
              assert(typeof bits === 'number' && bits >= 0);
              var r = bits % 26;
              var s = (bits - r) / 26;
              var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
              var i;

              if (r !== 0) {
                var carry = 0;

                for (i = 0; i < this.length; i++) {
                  var newCarry = this.words[i] & carryMask;
                  var c = ((this.words[i] | 0) - newCarry) << r;
                  this.words[i] = c | carry;
                  carry = newCarry >>> (26 - r);
                }

                if (carry) {
                  this.words[i] = carry;
                  this.length++;
                }
              }

              if (s !== 0) {
                for (i = this.length - 1; i >= 0; i--) {
                  this.words[i + s] = this.words[i];
                }

                for (i = 0; i < s; i++) {
                  this.words[i] = 0;
                }

                this.length += s;
              }

              return this.strip();
            };

            BN.prototype.ishln = function ishln(bits) {
              // TODO(indutny): implement me
              assert(this.negative === 0);
              return this.iushln(bits);
            };

            // Shift-right in-place
            // NOTE: `hint` is a lowest bit before trailing zeroes
            // NOTE: if `extended` is present - it will be filled with destroyed bits
            BN.prototype.iushrn = function iushrn(bits, hint, extended) {
              assert(typeof bits === 'number' && bits >= 0);
              var h;
              if (hint) {
                h = (hint - (hint % 26)) / 26;
              } else {
                h = 0;
              }

              var r = bits % 26;
              var s = Math.min((bits - r) / 26, this.length);
              var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
              var maskedWords = extended;

              h -= s;
              h = Math.max(0, h);

              // Extended mode, copy masked part
              if (maskedWords) {
                for (var i = 0; i < s; i++) {
                  maskedWords.words[i] = this.words[i];
                }
                maskedWords.length = s;
              }

              if (s === 0) {
                // No-op, we should not move anything at all
              } else if (this.length > s) {
                this.length -= s;
                for (i = 0; i < this.length; i++) {
                  this.words[i] = this.words[i + s];
                }
              } else {
                this.words[0] = 0;
                this.length = 1;
              }

              var carry = 0;
              for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
                var word = this.words[i] | 0;
                this.words[i] = (carry << (26 - r)) | (word >>> r);
                carry = word & mask;
              }

              // Push carried bits as a mask
              if (maskedWords && carry !== 0) {
                maskedWords.words[maskedWords.length++] = carry;
              }

              if (this.length === 0) {
                this.words[0] = 0;
                this.length = 1;
              }

              return this.strip();
            };

            BN.prototype.ishrn = function ishrn(bits, hint, extended) {
              // TODO(indutny): implement me
              assert(this.negative === 0);
              return this.iushrn(bits, hint, extended);
            };

            // Shift-left
            BN.prototype.shln = function shln(bits) {
              return this.clone().ishln(bits);
            };

            BN.prototype.ushln = function ushln(bits) {
              return this.clone().iushln(bits);
            };

            // Shift-right
            BN.prototype.shrn = function shrn(bits) {
              return this.clone().ishrn(bits);
            };

            BN.prototype.ushrn = function ushrn(bits) {
              return this.clone().iushrn(bits);
            };

            // Test if n bit is set
            BN.prototype.testn = function testn(bit) {
              assert(typeof bit === 'number' && bit >= 0);
              var r = bit % 26;
              var s = (bit - r) / 26;
              var q = 1 << r;

              // Fast case: bit is much higher than all existing words
              if (this.length <= s) return false;

              // Check bit and return
              var w = this.words[s];

              return !!(w & q);
            };

            // Return only lowers bits of number (in-place)
            BN.prototype.imaskn = function imaskn(bits) {
              assert(typeof bits === 'number' && bits >= 0);
              var r = bits % 26;
              var s = (bits - r) / 26;

              assert(this.negative === 0, 'imaskn works only with positive numbers');

              if (this.length <= s) {
                return this;
              }

              if (r !== 0) {
                s++;
              }
              this.length = Math.min(s, this.length);

              if (r !== 0) {
                var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                this.words[this.length - 1] &= mask;
              }

              return this.strip();
            };

            // Return only lowers bits of number
            BN.prototype.maskn = function maskn(bits) {
              return this.clone().imaskn(bits);
            };

            // Add plain number `num` to `this`
            BN.prototype.iaddn = function iaddn(num) {
              assert(typeof num === 'number');
              assert(num < 0x4000000);
              if (num < 0) return this.isubn(-num);

              // Possible sign change
              if (this.negative !== 0) {
                if (this.length === 1 && (this.words[0] | 0) < num) {
                  this.words[0] = num - (this.words[0] | 0);
                  this.negative = 0;
                  return this;
                }

                this.negative = 0;
                this.isubn(num);
                this.negative = 1;
                return this;
              }

              // Add without checks
              return this._iaddn(num);
            };

            BN.prototype._iaddn = function _iaddn(num) {
              this.words[0] += num;

              // Carry
              for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
                this.words[i] -= 0x4000000;
                if (i === this.length - 1) {
                  this.words[i + 1] = 1;
                } else {
                  this.words[i + 1]++;
                }
              }
              this.length = Math.max(this.length, i + 1);

              return this;
            };

            // Subtract plain number `num` from `this`
            BN.prototype.isubn = function isubn(num) {
              assert(typeof num === 'number');
              assert(num < 0x4000000);
              if (num < 0) return this.iaddn(-num);

              if (this.negative !== 0) {
                this.negative = 0;
                this.iaddn(num);
                this.negative = 1;
                return this;
              }

              this.words[0] -= num;

              if (this.length === 1 && this.words[0] < 0) {
                this.words[0] = -this.words[0];
                this.negative = 1;
              } else {
                // Carry
                for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                  this.words[i] += 0x4000000;
                  this.words[i + 1] -= 1;
                }
              }

              return this.strip();
            };

            BN.prototype.addn = function addn(num) {
              return this.clone().iaddn(num);
            };

            BN.prototype.subn = function subn(num) {
              return this.clone().isubn(num);
            };

            BN.prototype.iabs = function iabs() {
              this.negative = 0;

              return this;
            };

            BN.prototype.abs = function abs() {
              return this.clone().iabs();
            };

            BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
              var len = num.length + shift;
              var i;

              this._expand(len);

              var w;
              var carry = 0;
              for (i = 0; i < num.length; i++) {
                w = (this.words[i + shift] | 0) + carry;
                var right = (num.words[i] | 0) * mul;
                w -= right & 0x3ffffff;
                carry = (w >> 26) - ((right / 0x4000000) | 0);
                this.words[i + shift] = w & 0x3ffffff;
              }
              for (; i < this.length - shift; i++) {
                w = (this.words[i + shift] | 0) + carry;
                carry = w >> 26;
                this.words[i + shift] = w & 0x3ffffff;
              }

              if (carry === 0) return this.strip();

              // Subtraction overflow
              assert(carry === -1);
              carry = 0;
              for (i = 0; i < this.length; i++) {
                w = -(this.words[i] | 0) + carry;
                carry = w >> 26;
                this.words[i] = w & 0x3ffffff;
              }
              this.negative = 1;

              return this.strip();
            };

            BN.prototype._wordDiv = function _wordDiv(num, mode) {
              var shift = this.length - num.length;

              var a = this.clone();
              var b = num;

              // Normalize
              var bhi = b.words[b.length - 1] | 0;
              var bhiBits = this._countBits(bhi);
              shift = 26 - bhiBits;
              if (shift !== 0) {
                b = b.ushln(shift);
                a.iushln(shift);
                bhi = b.words[b.length - 1] | 0;
              }

              // Initialize quotient
              var m = a.length - b.length;
              var q;

              if (mode !== 'mod') {
                q = new BN(null);
                q.length = m + 1;
                q.words = new Array(q.length);
                for (var i = 0; i < q.length; i++) {
                  q.words[i] = 0;
                }
              }

              var diff = a.clone()._ishlnsubmul(b, 1, m);
              if (diff.negative === 0) {
                a = diff;
                if (q) {
                  q.words[m] = 1;
                }
              }

              for (var j = m - 1; j >= 0; j--) {
                var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                  (a.words[b.length + j - 1] | 0);

                // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                // (0x7ffffff)
                qj = Math.min((qj / bhi) | 0, 0x3ffffff);

                a._ishlnsubmul(b, qj, j);
                while (a.negative !== 0) {
                  qj--;
                  a.negative = 0;
                  a._ishlnsubmul(b, 1, j);
                  if (!a.isZero()) {
                    a.negative ^= 1;
                  }
                }
                if (q) {
                  q.words[j] = qj;
                }
              }
              if (q) {
                q.strip();
              }
              a.strip();

              // Denormalize
              if (mode !== 'div' && shift !== 0) {
                a.iushrn(shift);
              }

              return {
                div: q || null,
                mod: a
              };
            };

            // NOTE: 1) `mode` can be set to `mod` to request mod only,
            //       to `div` to request div only, or be absent to
            //       request both div & mod
            //       2) `positive` is true if unsigned mod is requested
            BN.prototype.divmod = function divmod(num, mode, positive) {
              assert(!num.isZero());

              if (this.isZero()) {
                return {
                  div: new BN(0),
                  mod: new BN(0)
                };
              }

              var div, mod, res;
              if (this.negative !== 0 && num.negative === 0) {
                res = this.neg().divmod(num, mode);

                if (mode !== 'mod') {
                  div = res.div.neg();
                }

                if (mode !== 'div') {
                  mod = res.mod.neg();
                  if (positive && mod.negative !== 0) {
                    mod.iadd(num);
                  }
                }

                return {
                  div: div,
                  mod: mod
                };
              }

              if (this.negative === 0 && num.negative !== 0) {
                res = this.divmod(num.neg(), mode);

                if (mode !== 'mod') {
                  div = res.div.neg();
                }

                return {
                  div: div,
                  mod: res.mod
                };
              }

              if ((this.negative & num.negative) !== 0) {
                res = this.neg().divmod(num.neg(), mode);

                if (mode !== 'div') {
                  mod = res.mod.neg();
                  if (positive && mod.negative !== 0) {
                    mod.isub(num);
                  }
                }

                return {
                  div: res.div,
                  mod: mod
                };
              }

              // Both numbers are positive at this point

              // Strip both numbers to approximate shift value
              if (num.length > this.length || this.cmp(num) < 0) {
                return {
                  div: new BN(0),
                  mod: this
                };
              }

              // Very short reduction
              if (num.length === 1) {
                if (mode === 'div') {
                  return {
                    div: this.divn(num.words[0]),
                    mod: null
                  };
                }

                if (mode === 'mod') {
                  return {
                    div: null,
                    mod: new BN(this.modn(num.words[0]))
                  };
                }

                return {
                  div: this.divn(num.words[0]),
                  mod: new BN(this.modn(num.words[0]))
                };
              }

              return this._wordDiv(num, mode);
            };

            // Find `this` / `num`
            BN.prototype.div = function div(num) {
              return this.divmod(num, 'div', false).div;
            };

            // Find `this` % `num`
            BN.prototype.mod = function mod(num) {
              return this.divmod(num, 'mod', false).mod;
            };

            BN.prototype.umod = function umod(num) {
              return this.divmod(num, 'mod', true).mod;
            };

            // Find Round(`this` / `num`)
            BN.prototype.divRound = function divRound(num) {
              var dm = this.divmod(num);

              // Fast case - exact division
              if (dm.mod.isZero()) return dm.div;

              var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

              var half = num.ushrn(1);
              var r2 = num.andln(1);
              var cmp = mod.cmp(half);

              // Round down
              if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

              // Round up
              return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
            };

            BN.prototype.modn = function modn(num) {
              assert(num <= 0x3ffffff);
              var p = (1 << 26) % num;

              var acc = 0;
              for (var i = this.length - 1; i >= 0; i--) {
                acc = (p * acc + (this.words[i] | 0)) % num;
              }

              return acc;
            };

            // In-place division by number
            BN.prototype.idivn = function idivn(num) {
              assert(num <= 0x3ffffff);

              var carry = 0;
              for (var i = this.length - 1; i >= 0; i--) {
                var w = (this.words[i] | 0) + carry * 0x4000000;
                this.words[i] = (w / num) | 0;
                carry = w % num;
              }

              return this.strip();
            };

            BN.prototype.divn = function divn(num) {
              return this.clone().idivn(num);
            };

            BN.prototype.egcd = function egcd(p) {
              assert(p.negative === 0);
              assert(!p.isZero());

              var x = this;
              var y = p.clone();

              if (x.negative !== 0) {
                x = x.umod(p);
              } else {
                x = x.clone();
              }

              // A * x + B * y = x
              var A = new BN(1);
              var B = new BN(0);

              // C * x + D * y = y
              var C = new BN(0);
              var D = new BN(1);

              var g = 0;

              while (x.isEven() && y.isEven()) {
                x.iushrn(1);
                y.iushrn(1);
                ++g;
              }

              var yp = y.clone();
              var xp = x.clone();

              while (!x.isZero()) {
                for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                if (i > 0) {
                  x.iushrn(i);
                  while (i-- > 0) {
                    if (A.isOdd() || B.isOdd()) {
                      A.iadd(yp);
                      B.isub(xp);
                    }

                    A.iushrn(1);
                    B.iushrn(1);
                  }
                }

                for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                if (j > 0) {
                  y.iushrn(j);
                  while (j-- > 0) {
                    if (C.isOdd() || D.isOdd()) {
                      C.iadd(yp);
                      D.isub(xp);
                    }

                    C.iushrn(1);
                    D.iushrn(1);
                  }
                }

                if (x.cmp(y) >= 0) {
                  x.isub(y);
                  A.isub(C);
                  B.isub(D);
                } else {
                  y.isub(x);
                  C.isub(A);
                  D.isub(B);
                }
              }

              return {
                a: C,
                b: D,
                gcd: y.iushln(g)
              };
            };

            // This is reduced incarnation of the binary EEA
            // above, designated to invert members of the
            // _prime_ fields F(p) at a maximal speed
            BN.prototype._invmp = function _invmp(p) {
              assert(p.negative === 0);
              assert(!p.isZero());

              var a = this;
              var b = p.clone();

              if (a.negative !== 0) {
                a = a.umod(p);
              } else {
                a = a.clone();
              }

              var x1 = new BN(1);
              var x2 = new BN(0);

              var delta = b.clone();

              while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                if (i > 0) {
                  a.iushrn(i);
                  while (i-- > 0) {
                    if (x1.isOdd()) {
                      x1.iadd(delta);
                    }

                    x1.iushrn(1);
                  }
                }

                for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                if (j > 0) {
                  b.iushrn(j);
                  while (j-- > 0) {
                    if (x2.isOdd()) {
                      x2.iadd(delta);
                    }

                    x2.iushrn(1);
                  }
                }

                if (a.cmp(b) >= 0) {
                  a.isub(b);
                  x1.isub(x2);
                } else {
                  b.isub(a);
                  x2.isub(x1);
                }
              }

              var res;
              if (a.cmpn(1) === 0) {
                res = x1;
              } else {
                res = x2;
              }

              if (res.cmpn(0) < 0) {
                res.iadd(p);
              }

              return res;
            };

            BN.prototype.gcd = function gcd(num) {
              if (this.isZero()) return num.abs();
              if (num.isZero()) return this.abs();

              var a = this.clone();
              var b = num.clone();
              a.negative = 0;
              b.negative = 0;

              // Remove common factor of two
              for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                a.iushrn(1);
                b.iushrn(1);
              }

              do {
                while (a.isEven()) {
                  a.iushrn(1);
                }
                while (b.isEven()) {
                  b.iushrn(1);
                }

                var r = a.cmp(b);
                if (r < 0) {
                  // Swap `a` and `b` to make `a` always bigger than `b`
                  var t = a;
                  a = b;
                  b = t;
                } else if (r === 0 || b.cmpn(1) === 0) {
                  break;
                }

                a.isub(b);
              } while (true);

              return b.iushln(shift);
            };

            // Invert number in the field F(num)
            BN.prototype.invm = function invm(num) {
              return this.egcd(num).a.umod(num);
            };

            BN.prototype.isEven = function isEven() {
              return (this.words[0] & 1) === 0;
            };

            BN.prototype.isOdd = function isOdd() {
              return (this.words[0] & 1) === 1;
            };

            // And first word and num
            BN.prototype.andln = function andln(num) {
              return this.words[0] & num;
            };

            // Increment at the bit position in-line
            BN.prototype.bincn = function bincn(bit) {
              assert(typeof bit === 'number');
              var r = bit % 26;
              var s = (bit - r) / 26;
              var q = 1 << r;

              // Fast case: bit is much higher than all existing words
              if (this.length <= s) {
                this._expand(s + 1);
                this.words[s] |= q;
                return this;
              }

              // Add bit and propagate, if needed
              var carry = q;
              for (var i = s; carry !== 0 && i < this.length; i++) {
                var w = this.words[i] | 0;
                w += carry;
                carry = w >>> 26;
                w &= 0x3ffffff;
                this.words[i] = w;
              }
              if (carry !== 0) {
                this.words[i] = carry;
                this.length++;
              }
              return this;
            };

            BN.prototype.isZero = function isZero() {
              return this.length === 1 && this.words[0] === 0;
            };

            BN.prototype.cmpn = function cmpn(num) {
              var negative = num < 0;

              if (this.negative !== 0 && !negative) return -1;
              if (this.negative === 0 && negative) return 1;

              this.strip();

              var res;
              if (this.length > 1) {
                res = 1;
              } else {
                if (negative) {
                  num = -num;
                }

                assert(num <= 0x3ffffff, 'Number is too big');

                var w = this.words[0] | 0;
                res = w === num ? 0 : w < num ? -1 : 1;
              }
              if (this.negative !== 0) return -res | 0;
              return res;
            };

            // Compare two numbers and return:
            // 1 - if `this` > `num`
            // 0 - if `this` == `num`
            // -1 - if `this` < `num`
            BN.prototype.cmp = function cmp(num) {
              if (this.negative !== 0 && num.negative === 0) return -1;
              if (this.negative === 0 && num.negative !== 0) return 1;

              var res = this.ucmp(num);
              if (this.negative !== 0) return -res | 0;
              return res;
            };

            // Unsigned comparison
            BN.prototype.ucmp = function ucmp(num) {
              // At this point both numbers have the same sign
              if (this.length > num.length) return 1;
              if (this.length < num.length) return -1;

              var res = 0;
              for (var i = this.length - 1; i >= 0; i--) {
                var a = this.words[i] | 0;
                var b = num.words[i] | 0;

                if (a === b) continue;
                if (a < b) {
                  res = -1;
                } else if (a > b) {
                  res = 1;
                }
                break;
              }
              return res;
            };

            BN.prototype.gtn = function gtn(num) {
              return this.cmpn(num) === 1;
            };

            BN.prototype.gt = function gt(num) {
              return this.cmp(num) === 1;
            };

            BN.prototype.gten = function gten(num) {
              return this.cmpn(num) >= 0;
            };

            BN.prototype.gte = function gte(num) {
              return this.cmp(num) >= 0;
            };

            BN.prototype.ltn = function ltn(num) {
              return this.cmpn(num) === -1;
            };

            BN.prototype.lt = function lt(num) {
              return this.cmp(num) === -1;
            };

            BN.prototype.lten = function lten(num) {
              return this.cmpn(num) <= 0;
            };

            BN.prototype.lte = function lte(num) {
              return this.cmp(num) <= 0;
            };

            BN.prototype.eqn = function eqn(num) {
              return this.cmpn(num) === 0;
            };

            BN.prototype.eq = function eq(num) {
              return this.cmp(num) === 0;
            };

            //
            // A reduce context, could be using montgomery or something better, depending
            // on the `m` itself.
            //
            BN.red = function red(num) {
              return new Red(num);
            };

            BN.prototype.toRed = function toRed(ctx) {
              assert(!this.red, 'Already a number in reduction context');
              assert(this.negative === 0, 'red works only with positives');
              return ctx.convertTo(this)._forceRed(ctx);
            };

            BN.prototype.fromRed = function fromRed() {
              assert(this.red, 'fromRed works only with numbers in reduction context');
              return this.red.convertFrom(this);
            };

            BN.prototype._forceRed = function _forceRed(ctx) {
              this.red = ctx;
              return this;
            };

            BN.prototype.forceRed = function forceRed(ctx) {
              assert(!this.red, 'Already a number in reduction context');
              return this._forceRed(ctx);
            };

            BN.prototype.redAdd = function redAdd(num) {
              assert(this.red, 'redAdd works only with red numbers');
              return this.red.add(this, num);
            };

            BN.prototype.redIAdd = function redIAdd(num) {
              assert(this.red, 'redIAdd works only with red numbers');
              return this.red.iadd(this, num);
            };

            BN.prototype.redSub = function redSub(num) {
              assert(this.red, 'redSub works only with red numbers');
              return this.red.sub(this, num);
            };

            BN.prototype.redISub = function redISub(num) {
              assert(this.red, 'redISub works only with red numbers');
              return this.red.isub(this, num);
            };

            BN.prototype.redShl = function redShl(num) {
              assert(this.red, 'redShl works only with red numbers');
              return this.red.shl(this, num);
            };

            BN.prototype.redMul = function redMul(num) {
              assert(this.red, 'redMul works only with red numbers');
              this.red._verify2(this, num);
              return this.red.mul(this, num);
            };

            BN.prototype.redIMul = function redIMul(num) {
              assert(this.red, 'redMul works only with red numbers');
              this.red._verify2(this, num);
              return this.red.imul(this, num);
            };

            BN.prototype.redSqr = function redSqr() {
              assert(this.red, 'redSqr works only with red numbers');
              this.red._verify1(this);
              return this.red.sqr(this);
            };

            BN.prototype.redISqr = function redISqr() {
              assert(this.red, 'redISqr works only with red numbers');
              this.red._verify1(this);
              return this.red.isqr(this);
            };

            // Square root over p
            BN.prototype.redSqrt = function redSqrt() {
              assert(this.red, 'redSqrt works only with red numbers');
              this.red._verify1(this);
              return this.red.sqrt(this);
            };

            BN.prototype.redInvm = function redInvm() {
              assert(this.red, 'redInvm works only with red numbers');
              this.red._verify1(this);
              return this.red.invm(this);
            };

            // Return negative clone of `this` % `red modulo`
            BN.prototype.redNeg = function redNeg() {
              assert(this.red, 'redNeg works only with red numbers');
              this.red._verify1(this);
              return this.red.neg(this);
            };

            BN.prototype.redPow = function redPow(num) {
              assert(this.red && !num.red, 'redPow(normalNum)');
              this.red._verify1(this);
              return this.red.pow(this, num);
            };

            // Prime numbers with efficient reduction
            var primes = {
              k256: null,
              p224: null,
              p192: null,
              p25519: null
            };

            // Pseudo-Mersenne prime
            function MPrime(name, p) {
              // P = 2 ^ N - K
              this.name = name;
              this.p = new BN(p, 16);
              this.n = this.p.bitLength();
              this.k = new BN(1).iushln(this.n).isub(this.p);

              this.tmp = this._tmp();
            }

            MPrime.prototype._tmp = function _tmp() {
              var tmp = new BN(null);
              tmp.words = new Array(Math.ceil(this.n / 13));
              return tmp;
            };

            MPrime.prototype.ireduce = function ireduce(num) {
              // Assumes that `num` is less than `P^2`
              // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
              var r = num;
              var rlen;

              do {
                this.split(r, this.tmp);
                r = this.imulK(r);
                r = r.iadd(this.tmp);
                rlen = r.bitLength();
              } while (rlen > this.n);

              var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
              if (cmp === 0) {
                r.words[0] = 0;
                r.length = 1;
              } else if (cmp > 0) {
                r.isub(this.p);
              } else {
                r.strip();
              }

              return r;
            };

            MPrime.prototype.split = function split(input, out) {
              input.iushrn(this.n, 0, out);
            };

            MPrime.prototype.imulK = function imulK(num) {
              return num.imul(this.k);
            };

            function K256() {
              MPrime.call(
                this,
                'k256',
                'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
            }
            inherits(K256, MPrime);

            K256.prototype.split = function split(input, output) {
              // 256 = 9 * 26 + 22
              var mask = 0x3fffff;

              var outLen = Math.min(input.length, 9);
              for (var i = 0; i < outLen; i++) {
                output.words[i] = input.words[i];
              }
              output.length = outLen;

              if (input.length <= 9) {
                input.words[0] = 0;
                input.length = 1;
                return;
              }

              // Shift by 9 limbs
              var prev = input.words[9];
              output.words[output.length++] = prev & mask;

              for (i = 10; i < input.length; i++) {
                var next = input.words[i] | 0;
                input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
                prev = next;
              }
              prev >>>= 22;
              input.words[i - 10] = prev;
              if (prev === 0 && input.length > 10) {
                input.length -= 10;
              } else {
                input.length -= 9;
              }
            };

            K256.prototype.imulK = function imulK(num) {
              // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
              num.words[num.length] = 0;
              num.words[num.length + 1] = 0;
              num.length += 2;

              // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
              var lo = 0;
              for (var i = 0; i < num.length; i++) {
                var w = num.words[i] | 0;
                lo += w * 0x3d1;
                num.words[i] = lo & 0x3ffffff;
                lo = w * 0x40 + ((lo / 0x4000000) | 0);
              }

              // Fast length reduction
              if (num.words[num.length - 1] === 0) {
                num.length--;
                if (num.words[num.length - 1] === 0) {
                  num.length--;
                }
              }
              return num;
            };

            function P224() {
              MPrime.call(
                this,
                'p224',
                'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
            }
            inherits(P224, MPrime);

            function P192() {
              MPrime.call(
                this,
                'p192',
                'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
            }
            inherits(P192, MPrime);

            function P25519() {
              // 2 ^ 255 - 19
              MPrime.call(
                this,
                '25519',
                '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
            }
            inherits(P25519, MPrime);

            P25519.prototype.imulK = function imulK(num) {
              // K = 0x13
              var carry = 0;
              for (var i = 0; i < num.length; i++) {
                var hi = (num.words[i] | 0) * 0x13 + carry;
                var lo = hi & 0x3ffffff;
                hi >>>= 26;

                num.words[i] = lo;
                carry = hi;
              }
              if (carry !== 0) {
                num.words[num.length++] = carry;
              }
              return num;
            };

            // Exported mostly for testing purposes, use plain name instead
            BN._prime = function prime(name) {
              // Cached version of prime
              if (primes[name]) return primes[name];

              var prime;
              if (name === 'k256') {
                prime = new K256();
              } else if (name === 'p224') {
                prime = new P224();
              } else if (name === 'p192') {
                prime = new P192();
              } else if (name === 'p25519') {
                prime = new P25519();
              } else {
                throw new Error('Unknown prime ' + name);
              }
              primes[name] = prime;

              return prime;
            };

            //
            // Base reduction engine
            //
            function Red(m) {
              if (typeof m === 'string') {
                var prime = BN._prime(m);
                this.m = prime.p;
                this.prime = prime;
              } else {
                assert(m.gtn(1), 'modulus must be greater than 1');
                this.m = m;
                this.prime = null;
              }
            }

            Red.prototype._verify1 = function _verify1(a) {
              assert(a.negative === 0, 'red works only with positives');
              assert(a.red, 'red works only with red numbers');
            };

            Red.prototype._verify2 = function _verify2(a, b) {
              assert((a.negative | b.negative) === 0, 'red works only with positives');
              assert(a.red && a.red === b.red,
                'red works only with red numbers');
            };

            Red.prototype.imod = function imod(a) {
              if (this.prime) return this.prime.ireduce(a)._forceRed(this);
              return a.umod(this.m)._forceRed(this);
            };

            Red.prototype.neg = function neg(a) {
              if (a.isZero()) {
                return a.clone();
              }

              return this.m.sub(a)._forceRed(this);
            };

            Red.prototype.add = function add(a, b) {
              this._verify2(a, b);

              var res = a.add(b);
              if (res.cmp(this.m) >= 0) {
                res.isub(this.m);
              }
              return res._forceRed(this);
            };

            Red.prototype.iadd = function iadd(a, b) {
              this._verify2(a, b);

              var res = a.iadd(b);
              if (res.cmp(this.m) >= 0) {
                res.isub(this.m);
              }
              return res;
            };

            Red.prototype.sub = function sub(a, b) {
              this._verify2(a, b);

              var res = a.sub(b);
              if (res.cmpn(0) < 0) {
                res.iadd(this.m);
              }
              return res._forceRed(this);
            };

            Red.prototype.isub = function isub(a, b) {
              this._verify2(a, b);

              var res = a.isub(b);
              if (res.cmpn(0) < 0) {
                res.iadd(this.m);
              }
              return res;
            };

            Red.prototype.shl = function shl(a, num) {
              this._verify1(a);
              return this.imod(a.ushln(num));
            };

            Red.prototype.imul = function imul(a, b) {
              this._verify2(a, b);
              return this.imod(a.imul(b));
            };

            Red.prototype.mul = function mul(a, b) {
              this._verify2(a, b);
              return this.imod(a.mul(b));
            };

            Red.prototype.isqr = function isqr(a) {
              return this.imul(a, a.clone());
            };

            Red.prototype.sqr = function sqr(a) {
              return this.mul(a, a);
            };

            Red.prototype.sqrt = function sqrt(a) {
              if (a.isZero()) return a.clone();

              var mod3 = this.m.andln(3);
              assert(mod3 % 2 === 1);

              // Fast case
              if (mod3 === 3) {
                var pow = this.m.add(new BN(1)).iushrn(2);
                return this.pow(a, pow);
              }

              // Tonelli-Shanks algorithm (Totally unoptimized and slow)
              //
              // Find Q and S, that Q * 2 ^ S = (P - 1)
              var q = this.m.subn(1);
              var s = 0;
              while (!q.isZero() && q.andln(1) === 0) {
                s++;
                q.iushrn(1);
              }
              assert(!q.isZero());

              var one = new BN(1).toRed(this);
              var nOne = one.redNeg();

              // Find quadratic non-residue
              // NOTE: Max is such because of generalized Riemann hypothesis.
              var lpow = this.m.subn(1).iushrn(1);
              var z = this.m.bitLength();
              z = new BN(2 * z * z).toRed(this);

              while (this.pow(z, lpow).cmp(nOne) !== 0) {
                z.redIAdd(nOne);
              }

              var c = this.pow(z, q);
              var r = this.pow(a, q.addn(1).iushrn(1));
              var t = this.pow(a, q);
              var m = s;
              while (t.cmp(one) !== 0) {
                var tmp = t;
                for (var i = 0; tmp.cmp(one) !== 0; i++) {
                  tmp = tmp.redSqr();
                }
                assert(i < m);
                var b = this.pow(c, new BN(1).iushln(m - i - 1));

                r = r.redMul(b);
                c = b.redSqr();
                t = t.redMul(c);
                m = i;
              }

              return r;
            };

            Red.prototype.invm = function invm(a) {
              var inv = a._invmp(this.m);
              if (inv.negative !== 0) {
                inv.negative = 0;
                return this.imod(inv).redNeg();
              } else {
                return this.imod(inv);
              }
            };

            Red.prototype.pow = function pow(a, num) {
              if (num.isZero()) return new BN(1);
              if (num.cmpn(1) === 0) return a.clone();

              var windowSize = 4;
              var wnd = new Array(1 << windowSize);
              wnd[0] = new BN(1).toRed(this);
              wnd[1] = a;
              for (var i = 2; i < wnd.length; i++) {
                wnd[i] = this.mul(wnd[i - 1], a);
              }

              var res = wnd[0];
              var current = 0;
              var currentLen = 0;
              var start = num.bitLength() % 26;
              if (start === 0) {
                start = 26;
              }

              for (i = num.length - 1; i >= 0; i--) {
                var word = num.words[i];
                for (var j = start - 1; j >= 0; j--) {
                  var bit = (word >> j) & 1;
                  if (res !== wnd[0]) {
                    res = this.sqr(res);
                  }

                  if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                  }

                  current <<= 1;
                  current |= bit;
                  currentLen++;
                  if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

                  res = this.mul(res, wnd[current]);
                  currentLen = 0;
                  current = 0;
                }
                start = 26;
              }

              return res;
            };

            Red.prototype.convertTo = function convertTo(num) {
              var r = num.umod(this.m);

              return r === num ? r.clone() : r;
            };

            Red.prototype.convertFrom = function convertFrom(num) {
              var res = num.clone();
              res.red = null;
              return res;
            };

            //
            // Montgomery method engine
            //

            BN.mont = function mont(num) {
              return new Mont(num);
            };

            function Mont(m) {
              Red.call(this, m);

              this.shift = this.m.bitLength();
              if (this.shift % 26 !== 0) {
                this.shift += 26 - (this.shift % 26);
              }

              this.r = new BN(1).iushln(this.shift);
              this.r2 = this.imod(this.r.sqr());
              this.rinv = this.r._invmp(this.m);

              this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
              this.minv = this.minv.umod(this.r);
              this.minv = this.r.sub(this.minv);
            }
            inherits(Mont, Red);

            Mont.prototype.convertTo = function convertTo(num) {
              return this.imod(num.ushln(this.shift));
            };

            Mont.prototype.convertFrom = function convertFrom(num) {
              var r = this.imod(num.mul(this.rinv));
              r.red = null;
              return r;
            };

            Mont.prototype.imul = function imul(a, b) {
              if (a.isZero() || b.isZero()) {
                a.words[0] = 0;
                a.length = 1;
                return a;
              }

              var t = a.imul(b);
              var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
              var u = t.isub(c).iushrn(this.shift);
              var res = u;

              if (u.cmp(this.m) >= 0) {
                res = u.isub(this.m);
              } else if (u.cmpn(0) < 0) {
                res = u.iadd(this.m);
              }

              return res._forceRed(this);
            };

            Mont.prototype.mul = function mul(a, b) {
              if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

              var t = a.mul(b);
              var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
              var u = t.isub(c).iushrn(this.shift);
              var res = u;
              if (u.cmp(this.m) >= 0) {
                res = u.isub(this.m);
              } else if (u.cmpn(0) < 0) {
                res = u.iadd(this.m);
              }

              return res._forceRed(this);
            };

            Mont.prototype.invm = function invm(a) {
              // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
              var res = this.imod(a._invmp(this.m).mul(this.r2));
              return res._forceRed(this);
            };
          })(typeof module === 'undefined' || module, this);

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(36)(module)))

        /***/
}),
/* 12 */
/***/ (function (module, exports, __webpack_require__) {

        var isArrayLike = __webpack_require__(63),
          isObjectLike = __webpack_require__(14);

        /**
         * This method is like `_.isArrayLike` except that it also checks if `value`
         * is an object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array-like object,
         *  else `false`.
         * @example
         *
         * _.isArrayLikeObject([1, 2, 3]);
         * // => true
         *
         * _.isArrayLikeObject(document.body.children);
         * // => true
         *
         * _.isArrayLikeObject('abc');
         * // => false
         *
         * _.isArrayLikeObject(_.noop);
         * // => false
         */
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }

        module.exports = isArrayLikeObject;


        /***/
}),
/* 13 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayLikeKeys = __webpack_require__(153),
          baseKeysIn = __webpack_require__(396),
          isArrayLike = __webpack_require__(63);

        /**
         * Creates an array of the own and inherited enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keysIn(new Foo);
         * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
         */
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }

        module.exports = keysIn;


        /***/
}),
/* 14 */
/***/ (function (module, exports) {

        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */
        function isObjectLike(value) {
          return value != null && typeof value == 'object';
        }

        module.exports = isObjectLike;


        /***/
}),
/* 15 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayLikeKeys = __webpack_require__(153),
          baseKeys = __webpack_require__(155),
          isArrayLike = __webpack_require__(63);

        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }

        module.exports = keys;


        /***/
}),
/* 16 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file formatters.js
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var BigNumber = __webpack_require__(59);
        var utils = __webpack_require__(0);
        var config = __webpack_require__(47);
        var SolidityParam = __webpack_require__(208);


        /**
         * Formats input value to byte representation of int
         * If value is negative, return it's two's complement
         * If the value is floating point, round it down
         *
         * @method formatInputInt
         * @param {String|Number|BigNumber} value that needs to be formatted
         * @returns {SolidityParam}
         */
        var formatInputInt = function (value) {
          BigNumber.config(config.MC_BIGNUMBER_ROUNDING_MODE);
          var result = utils.padLeft(utils.toTwosComplement(value).toString(16), 64);
          return new SolidityParam(result);
        };

        /**
         * Formats input bytes
         *
         * @method formatInputBytes
         * @param {String}
         * @returns {SolidityParam}
         */
        var formatInputBytes = function (value) {
          var result = utils.toHex(value).substr(2);
          var l = Math.floor((result.length + 63) / 64);
          result = utils.padRight(result, l * 64);
          return new SolidityParam(result);
        };

        /**
         * Formats input bytes
         *
         * @method formatDynamicInputBytes
         * @param {String}
         * @returns {SolidityParam}
         */
        var formatInputDynamicBytes = function (value) {
          var result = utils.toHex(value).substr(2);
          var length = result.length / 2;
          var l = Math.floor((result.length + 63) / 64);
          result = utils.padRight(result, l * 64);
          return new SolidityParam(formatInputInt(length).value + result);
        };

        /**
         * Formats input value to byte representation of string
         *
         * @method formatInputString
         * @param {String}
         * @returns {SolidityParam}
         */
        var formatInputString = function (value) {
          var result = utils.fromUtf8(value).substr(2);
          var length = result.length / 2;
          var l = Math.floor((result.length + 63) / 64);
          result = utils.padRight(result, l * 64);
          return new SolidityParam(formatInputInt(length).value + result);
        };

        /**
         * Formats input value to byte representation of bool
         *
         * @method formatInputBool
         * @param {Boolean}
         * @returns {SolidityParam}
         */
        var formatInputBool = function (value) {
          var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ? '1' : '0');
          return new SolidityParam(result);
        };

        /**
         * Formats input value to byte representation of real
         * Values are multiplied by 2^m and encoded as integers
         *
         * @method formatInputReal
         * @param {String|Number|BigNumber}
         * @returns {SolidityParam}
         */
        var formatInputReal = function (value) {
          return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));
        };

        /**
         * Formats input value to tuple representation of struct
         * data type
         *
         * @method formatInputTuple
         * @param {Object}
         * @returns {SolidityParam}
         */
        var formatInputTuple = function (value) {
          return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));
        };

        /**
         * Check if input value is negative
         *
         * @method signedIsNegative
         * @param {String} value is hex format
         * @returns {Boolean} true if it is negative, otherwise false
         */
        var signedIsNegative = function (value) {
          return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';
        };

        /**
         * Formats right-aligned output bytes to int
         *
         * @method formatOutputInt
         * @param {SolidityParam} param
         * @returns {BigNumber} right-aligned output bytes formatted to big number
         */
        var formatOutputInt = function (param) {
          var value = param.staticPart() || "0";

          // check if it's negative number
          // it it is, return two's complement
          if (signedIsNegative(value)) {
            return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);
          }
          return new BigNumber(value, 16);
        };

        /**
         * Formats right-aligned output bytes to uint
         *
         * @method formatOutputUInt
         * @param {SolidityParam}
         * @returns {BigNumeber} right-aligned output bytes formatted to uint
         */
        var formatOutputUInt = function (param) {
          var value = param.staticPart() || "0";
          return new BigNumber(value, 16);
        };

        /**
         * Formats right-aligned output bytes to real
         *
         * @method formatOutputReal
         * @param {SolidityParam}
         * @returns {BigNumber} input bytes formatted to real
         */
        var formatOutputReal = function (param) {
          return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128));
        };

        /**
         * Formats right-aligned output bytes to ureal
         *
         * @method formatOutputUReal
         * @param {SolidityParam}
         * @returns {BigNumber} input bytes formatted to ureal
         */
        var formatOutputUReal = function (param) {
          return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128));
        };

        /**
         * Should be used to format output bool
         *
         * @method formatOutputBool
         * @param {SolidityParam}
         * @returns {Boolean} right-aligned input bytes formatted to bool
         */
        var formatOutputBool = function (param) {
          return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;
        };

        /**
         * Should be used to format output bytes
         *
         * @method formatOutputBytes
         * @param {SolidityParam} left-aligned hex representation of string
         * @param {String} name type name
         * @returns {String} hex string
         */
        var formatOutputBytes = function (param, name) {
          var matches = name.match(/^bytes([0-9]*)/);
          var size = parseInt(matches[1]);
          return '0x' + param.staticPart().slice(0, 2 * size);
        };

        /**
         * Should be used to format output bytes
         *
         * @method formatOutputDynamicBytes
         * @param {SolidityParam} left-aligned hex representation of string
         * @returns {String} hex string
         */
        var formatOutputDynamicBytes = function (param) {
          var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;
          return '0x' + param.dynamicPart().substr(64, length);
        };

        /**
         * Should be used to format output string
         *
         * @method formatOutputString
         * @param {SolidityParam} left-aligned hex representation of string
         * @returns {String} ascii string
         */
        var formatOutputString = function (param) {
          var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;
          return utils.toUtf8(param.dynamicPart().substr(64, length));
        };

        /**
         * Should be used to format output address
         *
         * @method formatOutputAddress
         * @param {SolidityParam} right-aligned input bytes
         * @returns {String} address
         */
        var formatOutputAddress = function (param) {
          var value = param.staticPart();
          return "0x" + value.slice(value.length - 40, value.length);
        };

        /**
         * Should be used to format output tuple
         * by adding field
         * Maps the correct tuple type and name when the simplified 
         * format in encode/decodeParameter is used
         * @method formatOutputTuple
         * @param {string} structName
         * @return {{type: string, name: *}}
         */
        var formatOutputTuple = function (structName) {
          // var value = param.staticPart();
          // return "0x" + value.slice(value.length - 40, value.length);
          var type = 'tuple';

          if (structName.toString().indexOf('[]') > -1) {
            type = 'tuple[]';
            structName = structName.slice(0, -2);
          }

          return { type: type, name: structName };
        };

        module.exports = {
          formatInputInt: formatInputInt,
          formatInputBytes: formatInputBytes,
          formatInputDynamicBytes: formatInputDynamicBytes,
          formatInputString: formatInputString,
          formatInputBool: formatInputBool,
          formatInputReal: formatInputReal,
          formatInputTuple: formatInputTuple,
          formatOutputInt: formatOutputInt,
          formatOutputUInt: formatOutputUInt,
          formatOutputReal: formatOutputReal,
          formatOutputUReal: formatOutputUReal,
          formatOutputBool: formatOutputBool,
          formatOutputBytes: formatOutputBytes,
          formatOutputDynamicBytes: formatOutputDynamicBytes,
          formatOutputString: formatOutputString,
          formatOutputAddress: formatOutputAddress,
          formatOutputTuple: formatOutputTuple
        };

        /***/
}),
/* 17 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = exports;
        var BN = __webpack_require__(11);
        var minAssert = __webpack_require__(37);
        var minUtils = __webpack_require__(212);

        utils.assert = minAssert;
        utils.toArray = minUtils.toArray;
        utils.zero2 = minUtils.zero2;
        utils.toHex = minUtils.toHex;
        utils.encode = minUtils.encode;

        // Represent num in a w-NAF form
        function getNAF(num, w, bits) {
          var naf = new Array(Math.max(num.bitLength(), bits) + 1);
          naf.fill(0);

          var ws = 1 << (w + 1);
          var k = num.clone();

          for (var i = 0; i < naf.length; i++) {
            var z;
            var mod = k.andln(ws - 1);
            if (k.isOdd()) {
              if (mod > (ws >> 1) - 1)
                z = (ws >> 1) - mod;
              else
                z = mod;
              k.isubn(z);
            } else {
              z = 0;
            }

            naf[i] = z;
            k.iushrn(1);
          }

          return naf;
        }
        utils.getNAF = getNAF;

        // Represent k1, k2 in a Joint Sparse Form
        function getJSF(k1, k2) {
          var jsf = [
            [],
            []
          ];

          k1 = k1.clone();
          k2 = k2.clone();
          var d1 = 0;
          var d2 = 0;
          while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

            // First phase
            var m14 = (k1.andln(3) + d1) & 3;
            var m24 = (k2.andln(3) + d2) & 3;
            if (m14 === 3)
              m14 = -1;
            if (m24 === 3)
              m24 = -1;
            var u1;
            if ((m14 & 1) === 0) {
              u1 = 0;
            } else {
              var m8 = (k1.andln(7) + d1) & 7;
              if ((m8 === 3 || m8 === 5) && m24 === 2)
                u1 = -m14;
              else
                u1 = m14;
            }
            jsf[0].push(u1);

            var u2;
            if ((m24 & 1) === 0) {
              u2 = 0;
            } else {
              var m8 = (k2.andln(7) + d2) & 7;
              if ((m8 === 3 || m8 === 5) && m14 === 2)
                u2 = -m24;
              else
                u2 = m24;
            }
            jsf[1].push(u2);

            // Second phase
            if (2 * d1 === u1 + 1)
              d1 = 1 - d1;
            if (2 * d2 === u2 + 1)
              d2 = 1 - d2;
            k1.iushrn(1);
            k2.iushrn(1);
          }

          return jsf;
        }
        utils.getJSF = getJSF;

        function cachedProperty(obj, name, computer) {
          var key = '_' + name;
          obj.prototype[name] = function cachedProperty() {
            return this[key] !== undefined ? this[key] :
              this[key] = computer.call(this);
          };
        }
        utils.cachedProperty = cachedProperty;

        function parseBytes(bytes) {
          return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
            bytes;
        }
        utils.parseBytes = parseBytes;

        function intFromLE(bytes) {
          return new BN(bytes, 'hex', 'le');
        }
        utils.intFromLE = intFromLE;



        /***/
}),
/* 18 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /** 
         * @file sha3.js
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var Hex = __webpack_require__(229);
        var sha3 = __webpack_require__(230);

        module.exports = function (value, options) {
          if (options && options.encoding === 'hex') {
            if (value.length > 2 && value.substr(0, 2) === '0x') {
              value = value.substr(2);
            }
            value = Hex.parse(value);
          }

          return sha3(value, {
            outputLength: 256
          }).toString();
        };

        /***/
}),
/* 19 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayPush = __webpack_require__(74),
          isFlattenable = __webpack_require__(258);

        /**
         * The base implementation of `_.flatten` with support for restricting flattening.
         *
         * @private
         * @param {Array} array The array to flatten.
         * @param {number} depth The maximum recursion depth.
         * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
         * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
         * @param {Array} [result=[]] The initial result value.
         * @returns {Array} Returns the new flattened array.
         */
        function baseFlatten(array, depth, predicate, isStrict, result) {
          var index = -1,
            length = array.length;

          predicate || (predicate = isFlattenable);
          result || (result = []);

          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                // Recursively flatten arrays (susceptible to call stack limits).
                baseFlatten(value, depth - 1, predicate, isStrict, result);
              } else {
                arrayPush(result, value);
              }
            } else if (!isStrict) {
              result[result.length] = value;
            }
          }
          return result;
        }

        module.exports = baseFlatten;


        /***/
}),
/* 20 */
/***/ (function (module, exports) {

        /**
         * Gets the last element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the last element of `array`.
         * @example
         *
         * _.last([1, 2, 3]);
         * // => 3
         */
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined;
        }

        module.exports = last;


        /***/
}),
/* 21 */
/***/ (function (module, exports) {

        var g;

        // This works in non-strict mode
        g = (function () {
          return this;
        })();

        try {
          // This works if eval is allowed (see CSP)
          g = g || Function("return this")() || (1, eval)("this");
        } catch (e) {
          // This works if the window reference is available
          if (typeof window === "object")
            g = window;
        }

        // g can still be undefined, but nothing to do about it...
        // We return undefined, instead of nothing here, so it's
        // easier to handle this case. if(!global) { ...}

        module.exports = g;


        /***/
}),
/* 22 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var assert = __webpack_require__(37);
        var inherits = __webpack_require__(6);

        exports.inherits = inherits;

        function isSurrogatePair(msg, i) {
          if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
            return false;
          }
          if (i < 0 || i + 1 >= msg.length) {
            return false;
          }
          return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
        }

        function toArray(msg, enc) {
          if (Array.isArray(msg))
            return msg.slice();
          if (!msg)
            return [];
          var res = [];
          if (typeof msg === 'string') {
            if (!enc) {
              // Inspired by stringToUtf8ByteArray() in closure-library by Google
              // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
              // Apache License 2.0
              // https://github.com/google/closure-library/blob/master/LICENSE
              var p = 0;
              for (var i = 0; i < msg.length; i++) {
                var c = msg.charCodeAt(i);
                if (c < 128) {
                  res[p++] = c;
                } else if (c < 2048) {
                  res[p++] = (c >> 6) | 192;
                  res[p++] = (c & 63) | 128;
                } else if (isSurrogatePair(msg, i)) {
                  c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                  res[p++] = (c >> 18) | 240;
                  res[p++] = ((c >> 12) & 63) | 128;
                  res[p++] = ((c >> 6) & 63) | 128;
                  res[p++] = (c & 63) | 128;
                } else {
                  res[p++] = (c >> 12) | 224;
                  res[p++] = ((c >> 6) & 63) | 128;
                  res[p++] = (c & 63) | 128;
                }
              }
            } else if (enc === 'hex') {
              msg = msg.replace(/[^a-z0-9]+/ig, '');
              if (msg.length % 2 !== 0)
                msg = '0' + msg;
              for (i = 0; i < msg.length; i += 2)
                res.push(parseInt(msg[i] + msg[i + 1], 16));
            }
          } else {
            for (i = 0; i < msg.length; i++)
              res[i] = msg[i] | 0;
          }
          return res;
        }
        exports.toArray = toArray;

        function toHex(msg) {
          var res = '';
          for (var i = 0; i < msg.length; i++)
            res += zero2(msg[i].toString(16));
          return res;
        }
        exports.toHex = toHex;

        function htonl(w) {
          var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
          return res >>> 0;
        }
        exports.htonl = htonl;

        function toHex32(msg, endian) {
          var res = '';
          for (var i = 0; i < msg.length; i++) {
            var w = msg[i];
            if (endian === 'little')
              w = htonl(w);
            res += zero8(w.toString(16));
          }
          return res;
        }
        exports.toHex32 = toHex32;

        function zero2(word) {
          if (word.length === 1)
            return '0' + word;
          else
            return word;
        }
        exports.zero2 = zero2;

        function zero8(word) {
          if (word.length === 7)
            return '0' + word;
          else if (word.length === 6)
            return '00' + word;
          else if (word.length === 5)
            return '000' + word;
          else if (word.length === 4)
            return '0000' + word;
          else if (word.length === 3)
            return '00000' + word;
          else if (word.length === 2)
            return '000000' + word;
          else if (word.length === 1)
            return '0000000' + word;
          else
            return word;
        }
        exports.zero8 = zero8;

        function join32(msg, start, end, endian) {
          var len = end - start;
          assert(len % 4 === 0);
          var res = new Array(len / 4);
          for (var i = 0, k = start; i < res.length; i++ , k += 4) {
            var w;
            if (endian === 'big')
              w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
            else
              w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
            res[i] = w >>> 0;
          }
          return res;
        }
        exports.join32 = join32;

        function split32(msg, endian) {
          var res = new Array(msg.length * 4);
          for (var i = 0, k = 0; i < msg.length; i++ , k += 4) {
            var m = msg[i];
            if (endian === 'big') {
              res[k] = m >>> 24;
              res[k + 1] = (m >>> 16) & 0xff;
              res[k + 2] = (m >>> 8) & 0xff;
              res[k + 3] = m & 0xff;
            } else {
              res[k + 3] = m >>> 24;
              res[k + 2] = (m >>> 16) & 0xff;
              res[k + 1] = (m >>> 8) & 0xff;
              res[k] = m & 0xff;
            }
          }
          return res;
        }
        exports.split32 = split32;

        function rotr32(w, b) {
          return (w >>> b) | (w << (32 - b));
        }
        exports.rotr32 = rotr32;

        function rotl32(w, b) {
          return (w << b) | (w >>> (32 - b));
        }
        exports.rotl32 = rotl32;

        function sum32(a, b) {
          return (a + b) >>> 0;
        }
        exports.sum32 = sum32;

        function sum32_3(a, b, c) {
          return (a + b + c) >>> 0;
        }
        exports.sum32_3 = sum32_3;

        function sum32_4(a, b, c, d) {
          return (a + b + c + d) >>> 0;
        }
        exports.sum32_4 = sum32_4;

        function sum32_5(a, b, c, d, e) {
          return (a + b + c + d + e) >>> 0;
        }
        exports.sum32_5 = sum32_5;

        function sum64(buf, pos, ah, al) {
          var bh = buf[pos];
          var bl = buf[pos + 1];

          var lo = (al + bl) >>> 0;
          var hi = (lo < al ? 1 : 0) + ah + bh;
          buf[pos] = hi >>> 0;
          buf[pos + 1] = lo;
        }
        exports.sum64 = sum64;

        function sum64_hi(ah, al, bh, bl) {
          var lo = (al + bl) >>> 0;
          var hi = (lo < al ? 1 : 0) + ah + bh;
          return hi >>> 0;
        }
        exports.sum64_hi = sum64_hi;

        function sum64_lo(ah, al, bh, bl) {
          var lo = al + bl;
          return lo >>> 0;
        }
        exports.sum64_lo = sum64_lo;

        function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
          var carry = 0;
          var lo = al;
          lo = (lo + bl) >>> 0;
          carry += lo < al ? 1 : 0;
          lo = (lo + cl) >>> 0;
          carry += lo < cl ? 1 : 0;
          lo = (lo + dl) >>> 0;
          carry += lo < dl ? 1 : 0;

          var hi = ah + bh + ch + dh + carry;
          return hi >>> 0;
        }
        exports.sum64_4_hi = sum64_4_hi;

        function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
          var lo = al + bl + cl + dl;
          return lo >>> 0;
        }
        exports.sum64_4_lo = sum64_4_lo;

        function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
          var carry = 0;
          var lo = al;
          lo = (lo + bl) >>> 0;
          carry += lo < al ? 1 : 0;
          lo = (lo + cl) >>> 0;
          carry += lo < cl ? 1 : 0;
          lo = (lo + dl) >>> 0;
          carry += lo < dl ? 1 : 0;
          lo = (lo + el) >>> 0;
          carry += lo < el ? 1 : 0;

          var hi = ah + bh + ch + dh + eh + carry;
          return hi >>> 0;
        }
        exports.sum64_5_hi = sum64_5_hi;

        function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
          var lo = al + bl + cl + dl + el;

          return lo >>> 0;
        }
        exports.sum64_5_lo = sum64_5_lo;

        function rotr64_hi(ah, al, num) {
          var r = (al << (32 - num)) | (ah >>> num);
          return r >>> 0;
        }
        exports.rotr64_hi = rotr64_hi;

        function rotr64_lo(ah, al, num) {
          var r = (ah << (32 - num)) | (al >>> num);
          return r >>> 0;
        }
        exports.rotr64_lo = rotr64_lo;

        function shr64_hi(ah, al, num) {
          return ah >>> num;
        }
        exports.shr64_hi = shr64_hi;

        function shr64_lo(ah, al, num) {
          var r = (ah << (32 - num)) | (al >>> num);
          return r >>> 0;
        }
        exports.shr64_lo = shr64_lo;


        /***/
}),
/* 23 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file coder.js
         * @author Marek Kotewicz <marek@ethdev.com>
         * @date 2015
         * @updated 2019 with tuple methods
         */


        // Load method categories.
        var isArray = __webpack_require__(4);// updated with new methods in lodash
        var array = __webpack_require__(250);
        var object = __webpack_require__(373);
        var f = __webpack_require__(16);

        var SolidityTypeAddress = __webpack_require__(464);
        var SolidityTypeBool = __webpack_require__(465);
        var SolidityTypeInt = __webpack_require__(466);
        var SolidityTypeUInt = __webpack_require__(467);
        var SolidityTypeDynamicBytes = __webpack_require__(468);
        var SolidityTypeString = __webpack_require__(469);
        var SolidityTypeReal = __webpack_require__(470);
        var SolidityTypeUReal = __webpack_require__(471);
        var SolidityTypeBytes = __webpack_require__(472);
        var SolidityTypeTuple = __webpack_require__(473);

        var isDynamic = function (solidityType, type) {
          return solidityType.isDynamicType(type) ||
            solidityType.isDynamicArray(type);
        };

        /**
         * SolidityCoder prototype should be used to encode/decode solidity params of any type
         */
        var SolidityCoder = function (types) {
          this._types = types;
        };

        /**
         * This method should be used to transform type to SolidityType
         *
         * @method _requireType
         * @param {String} type
         * @returns {SolidityType}
         * @throws {Error} throws if no matching type is found
         */
        SolidityCoder.prototype._requireType = function (type) {
          var solidityType = this._types.filter(function (t) {
            //call the method in each type
            return t.isType(type);
          })[0];

          if (!solidityType) {
            throw Error('invalid solidity type!: ' + type);
          }

          return solidityType;
        };

        /**
         * Map types if simplified format is used
         *
         * @method mapTypes
         * @param {Array} types
         * @return {Array}
         */
        SolidityCoder.prototype.mapTypes = function (types) {
          var self = this;
          var mappedTypes = [];
          types.forEach(function (type) {
            if (self.isSimplifiedStructFormat(type)) {
              var structName = Object.keys(type)[0];
              mappedTypes.push(
                Object.assign(
                  self.mapStructNameAndType(structName),
                  {
                    components: self.mapStructToCoderFormat(type[structName])
                  }
                )
              );

              return;
            }

            mappedTypes.push(type);
          });

          return mappedTypes;
        };

        /**
         * Should be used to encode plain param
         *
         * @method encodeParam
         * @param {String} type
         * @param {Object} plain param
         * @return {String} encoded plain param
         */
        SolidityCoder.prototype.encodeParam = function (type, param) {
          return this.encodeParams([type], [param]);
        };

        /**
         * Should be used to encode list of params
         *
         * @method encodeParams
         * @param {Array} types
         * @param {Array} params
         * @return {String} encoded list of params
         */
        SolidityCoder.prototype.encodeParams = function (types, params) {
          var solidityTypes = this.getSolidityTypes(types);

          var encodeds = solidityTypes.map(function (solidityType, index) {
            return solidityType.encode(params[index], types[index]);
          });

          var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {
            var staticPartLength = solidityType.staticPartLength(types[index]);
            var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;

            return acc + (isDynamic(solidityTypes[index], types[index]) ?
              32 :
              roundedStaticPartLength);
          }, 0);

          var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);

          return result;
        };

        SolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {
          var result = "";
          var self = this;

          types.forEach(function (type, i) {

            if (isDynamic(solidityTypes[i], types[i])) {
              result += f.formatInputInt(dynamicOffset).encode();
              var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
              dynamicOffset += e.length / 2;
            } else {
              // don't add length to dynamicOffset. it's already counted
              result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
            }

            // TODO: figure out nested arrays
          });

          types.forEach(function (type, i) {
            if (isDynamic(solidityTypes[i], types[i])) {
              var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
              dynamicOffset += e.length / 2;
              result += e;
            }
          });
          return result;
        };

        SolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {
          /* jshint maxcomplexity: 17 */
          /* jshint maxdepth: 5 */

          var self = this;
          var encodingMode = { dynamic: 1, static: 2, other: 3 };

          var mode = (solidityType.isDynamicArray(type) ? encodingMode.dynamic : (solidityType.isStaticArray(type) ? encodingMode.static : encodingMode.other));

          if (mode !== encodingMode.other) {
            var nestedName = solidityType.nestedName(type);
            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);
            var result = (mode === encodingMode.dynamic ? encoded[0] : '');

            if (solidityType.isDynamicArray(nestedName)) {
              var previousLength = (mode === encodingMode.dynamic ? 2 : 0);

              for (var i = 0; i < encoded.length; i++) {
                // calculate length of previous item
                if (mode === encodingMode.dynamic) {
                  previousLength += +(encoded[i - 1])[0] || 0;
                }
                else if (mode === encodingMode.static) {
                  previousLength += +(encoded[i - 1] || [])[0] || 0;
                }
                result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
              }
            }

            var len = (mode === encodingMode.dynamic ? encoded.length - 1 : encoded.length);
            for (var c = 0; c < len; c++) {
              var additionalOffset = result / 2;
              if (mode === encodingMode.dynamic) {
                result += self.encodeWithOffset(nestedName, solidityType, encoded[c + 1], offset + additionalOffset);
              }
              else if (mode === encodingMode.static) {
                result += self.encodeWithOffset(nestedName, solidityType, encoded[c], offset + additionalOffset);
              }
            }

            return result;
          }

          return encoded;
        };

        /**
         * Check if type is simplified struct format
         *
         * @method isSimplifiedStructFormat
         * @param {string | Object} type
         * @returns {boolean}
         */
        SolidityCoder.prototype.isSimplifiedStructFormat = function (type) {
          return typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined';
        };

        /**
         * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used
         *
         * @method mapStructNameAndType
         * @param {string} structName
         * @return {{type: string, name: *}}
         */
        SolidityCoder.prototype.mapStructNameAndType = function (structName) {
          var type = 'tuple';

          if (structName.indexOf('[]') > -1) {
            type = 'tuple[]';
            structName = structName.slice(0, -2);
          }

          return { type: type, name: structName };
        };

        /**
         * Returns an object of SolidityCoder
         * @method mapStructToCoderFormat
         * @param {Object} struct
         * @return {Array}
         */
        SolidityCoder.prototype.mapStructToCoderFormat = function (struct) {
          var self = this;
          var components = [];
          Object.keys(struct).forEach(function (key) {
            if (typeof struct[key] === 'object') {
              components.push(
                Object.assign(
                  self.mapStructNameAndType(key),
                  {
                    components: self.mapStructToCoderFormat(struct[key])
                  }
                )
              );

              return;
            }

            components.push({
              name: key,
              type: struct[key]
            });
          });

          return components;
        };

        /**
         * Should be used to decode bytes to plain param
         *
         * @method decodeParam
         * @param {String} type
         * @param {String} bytes
         * @return {Object} plain param
         */
        SolidityCoder.prototype.decodeParam = function (type, bytes) {
          return this.decodeParams([type], bytes)[0];
        };

        /**
         * Should be used to decode list of params
         * Update with web3-eth-abi algorithms
         *
         * @method decodeParam
         * @param {Array} inParms
         * @param {String} bytes
         * @return {Array} array of plain params
         */
        SolidityCoder.prototype.decodeParams = function (inParms, bytes) {

          // Cannot have these since the test won't pass
          // if (isArray(inParms) && inParms.length === 0) {
          //     console.log("Check:", inParms)
          //     throw new Error('Empty outputs array given!');
          // }

          // if (!bytes || bytes === '0x' || bytes === '0X') {
          //     throw new Error(`Invalid bytes string given: ${bytes}`);
          // }

          var solidityTypes = this.getSolidityTypes(inParms);
          var offsets = this.getOffsets(inParms, solidityTypes);

          return solidityTypes.map(function (solidityType, index) {
            return solidityType.decode(bytes, offsets[index], inParms[index], index);
          });
        };

        SolidityCoder.prototype.getOffsets = function (types, solidityTypes) {
          var lengths = solidityTypes.map(function (solidityType, index) {
            return solidityType.staticPartLength(types[index]);
          });

          for (var i = 1; i < lengths.length; i++) {
            // sum with length of previous element
            lengths[i] += lengths[i - 1];
          }

          return lengths.map(function (length, index) {
            // remove the current length, so the length is sum of previous elements
            var staticPartLength = solidityTypes[index].staticPartLength(types[index]);
            return length - staticPartLength;
          });
        };

        // Return the types in the code
        SolidityCoder.prototype.getSolidityTypes = function (types) {
          var self = this;

          return types.map(function (type) {
            return self._requireType(type);
          });
        };


        // Added SolidityTypeTuple
        var coder = new SolidityCoder([
          new SolidityTypeAddress(),
          new SolidityTypeBool(),
          new SolidityTypeInt(),
          new SolidityTypeUInt(),
          new SolidityTypeDynamicBytes(),
          new SolidityTypeBytes(),
          new SolidityTypeString(),
          new SolidityTypeReal(),
          new SolidityTypeUReal(),
          new SolidityTypeTuple(),
        ]);

        module.exports = coder;


        /***/
}),
/* 24 */
/***/ (function (module, exports) {

        /**
         * The base implementation of `_.slice` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseSlice(array, start, end) {
          var index = -1,
            length = array.length;

          if (start < 0) {
            start = -start > length ? 0 : (length + start);
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : ((end - start) >>> 0);
          start >>>= 0;

          var result = Array(length);
          while (++index < length) {
            result[index] = array[index + start];
          }
          return result;
        }

        module.exports = baseSlice;


        /***/
}),
/* 25 */
/***/ (function (module, exports, __webpack_require__) {

        var assignValue = __webpack_require__(68),
          baseAssignValue = __webpack_require__(69);

        /**
         * Copies properties of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy properties from.
         * @param {Array} props The property identifiers to copy.
         * @param {Object} [object={}] The object to copy properties to.
         * @param {Function} [customizer] The function to customize copied values.
         * @returns {Object} Returns `object`.
         */
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});

          var index = -1,
            length = props.length;

          while (++index < length) {
            var key = props[index];

            var newValue = customizer
              ? customizer(object[key], source[key], key, object, source)
              : undefined;

            if (newValue === undefined) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }

        module.exports = copyObject;


        /***/
}),
/* 26 */
/***/ (function (module, exports, __webpack_require__) {

        var f = __webpack_require__(16);
        var SolidityParam = __webpack_require__(208);
        var utils = __webpack_require__(0);

        /**
         * SolidityType prototype is used to encode/decode solidity params of certain type
         */
        var SolidityType = function (config) {
          this._inputFormatter = config.inputFormatter;
          this._outputFormatter = config.outputFormatter;
        };

        /**
         * Should be used to determine if this SolidityType do match given name
         *
         * @method isType
         * @param {String} name
         * @return {Bool} true if type match this SolidityType, otherwise false
         */
        SolidityType.prototype.isType = function (name) {
          throw "this method should be overrwritten for type " + name;
        };

        /**
         * Should be used to determine what is the length of static part in given type
         *
         * @method staticPartLength
         * @param {String} name
         * @return {Number} length of static part in bytes
         */
        SolidityType.prototype.staticPartLength = function (name) {
          // If name isn't an array then treat it like a single element array.
          return (this.nestedTypes(name) || ['[1]'])
            .map(function (type) {
              // the length of the nested array
              return parseInt(type.slice(1, -1), 10) || 1;
            })
            .reduce(function (previous, current) {
              return previous * current;
              // all basic types are 32 bytes long
            }, 32);
        };

        /**
         * Should be used to determine if type is dynamic array
         * eg:
         * "type[]" => true
         * "type[4]" => false
         *
         * @method isDynamicArray
         * @param {String} name
         * @return {Bool} true if the type is dynamic array
         */
        SolidityType.prototype.isDynamicArray = function (name) {
          var nestedTypes = this.nestedTypes(name);
          return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);
        };

        /**
         * Should be used to determine if type is static array
         * eg:
         * "type[]" => false
         * "type[4]" => true
         *
         * @method isStaticArray
         * @param {String} name
         * @return {Bool} true if the type is static array
         */
        SolidityType.prototype.isStaticArray = function (name) {
          var nestedTypes = this.nestedTypes(name);
          return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);
        };

        /**
         * Should return length of static array
         * eg.
         * "int[32]" => 32
         * "int256[14]" => 14
         * "int[2][3]" => 3
         * "int" => 1
         * "int[1]" => 1
         * "int[]" => 1
         *
         * @method staticArrayLength
         * @param {String} name
         * @return {Number} static array length
         */
        SolidityType.prototype.staticArrayLength = function (name) {
          var nestedTypes = this.nestedTypes(name);
          if (nestedTypes) {
            return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);
          }
          return 1;
        };

        /**
         * Should return nested type
         * eg.
         * "int[32]" => "int"
         * "int256[14]" => "int256"
         * "int[2][3]" => "int[2]"
         * "int" => "int"
         * "int[]" => "int"
         *
         * @method nestedName
         * @param {String} name
         * @return {String} nested name
         */
        SolidityType.prototype.nestedName = function (name) {
          // remove last [] in name
          var nestedTypes = this.nestedTypes(name);
          if (!nestedTypes) {
            return name;
          }

          return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);
        };

        /**
         * Should return true if type has dynamic size by default
         * such types are "string", "bytes"
         *
         * @method isDynamicType
         * @param {String} name
         * @return {Bool} true if is dynamic, otherwise false
         */
        SolidityType.prototype.isDynamicType = function () {
          return false;
        };

        /**
         * Should return array of nested types
         * eg.
         * "int[2][3][]" => ["[2]", "[3]", "[]"]
         * "int[] => ["[]"]
         * "int" => null
         *
         * @method nestedTypes
         * @param {String} name
         * @return {Array} array of nested types
         */
        SolidityType.prototype.nestedTypes = function (name) {
          // return list of strings eg. "[]", "[3]", "[]", "[2]"
          return name.match(/(\[[0-9]*\])/g);
        };

        /**
         * Should be used to encode the value to
         * byte string
         *
         * @method encode
         * @param {Object} value
         * @param {String} name
         * @return {String} encoded value
         */
        SolidityType.prototype.encode = function (value, name) {


          var self = this;
          if (this.isDynamicArray(name)) {

            return (function () {
              var length = value.length;                          // in int
              var nestedName = self.nestedName(name);

              var result = [];
              result.push(f.formatInputInt(length).encode());

              value.forEach(function (v) {
                result.push(self.encode(v, nestedName));
              });

              return result;
            })();

          } else if (this.isStaticArray(name)) {

            return (function () {
              var length = self.staticArrayLength(name);          // in int
              var nestedName = self.nestedName(name);

              var result = [];
              for (var i = 0; i < length; i++) {
                result.push(self.encode(value[i], nestedName));
              }

              return result;
            })();

          }


          return this._inputFormatter(value, name).encode();
        };

        /**
         * Should be used to decode value from bytes
         *
         * @method decode
         * @param {String} bytes
         * @param {Number} offset in bytes
         * @param {String} name type name
         * @returns {Object} decoded value
         */
        SolidityType.prototype.decode =async function (bytes, offset, name) { //contractdebug
          // bytes = "000000000000000000000000ad5632c0881358da28f852825c7202d060ec8a63";
          var self = this;
          await bytes.then(data=>{
            bytes = data;
          })
          console.log(bytes,offset,name)
          if (this.isDynamicArray(name)) {

            return (function () {
              var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes
              var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int
              var arrayStart = arrayOffset + 32; // array starts after length; // in bytes

              var nestedName = self.nestedName(name);
              var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes
              var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;
              var result = [];

              for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {
                result.push(self.decode(bytes, arrayStart + i, nestedName));
              }

              return result;
            })();

          } else if (this.isStaticArray(name)) {

            return (function () {
              var length = self.staticArrayLength(name);                      // in int
              var arrayStart = offset;                                        // in bytes

              var nestedName = self.nestedName(name);
              var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes
              var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;
              var result = [];

              for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {
                result.push(self.decode(bytes, arrayStart + i, nestedName));
              }

              return result;
            })();
          } else if (this.isDynamicType(name)) {

            return (function () {
              var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes
              var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes
              var roundedLength = Math.floor((length + 31) / 32);                     // in int
              var param = new SolidityParam(bytes.substr(dynamicOffset * 2, (1 + roundedLength) * 64), 0);
              return self._outputFormatter(param, name);
            })();
          }

          var length = this.staticPartLength(name);
          var param = new SolidityParam(bytes.substr(offset * 2, length * 2));
          return this._outputFormatter(param, name);
        };

        module.exports = SolidityType;


        /***/
}),
/* 27 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
/* WEBPACK VAR INJECTION */(function (global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
          /* eslint-disable no-proto */



          var base64 = __webpack_require__(243)
          var ieee754 = __webpack_require__(244)
          var isArray = __webpack_require__(138)

          exports.Buffer = Buffer
          exports.SlowBuffer = SlowBuffer
          exports.INSPECT_MAX_BYTES = 50

          /**
           * If `Buffer.TYPED_ARRAY_SUPPORT`:
           *   === true    Use Uint8Array implementation (fastest)
           *   === false   Use Object implementation (most compatible, even IE6)
           *
           * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
           * Opera 11.6+, iOS 4.2+.
           *
           * Due to various browser bugs, sometimes the Object implementation will be used even
           * when the browser supports typed arrays.
           *
           * Note:
           *
           *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
           *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
           *
           *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
           *
           *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
           *     incorrect length in some situations.
          
           * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
           * get the Object implementation, which is slower but behaves correctly.
           */
          Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
            ? global.TYPED_ARRAY_SUPPORT
            : typedArraySupport()

          /*
           * Export kMaxLength after typed array support is determined.
           */
          exports.kMaxLength = kMaxLength()

          function typedArraySupport() {
            try {
              var arr = new Uint8Array(1)
              arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
              return arr.foo() === 42 && // typed array instances can be augmented
                typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
                arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
            } catch (e) {
              return false
            }
          }

          function kMaxLength() {
            return Buffer.TYPED_ARRAY_SUPPORT
              ? 0x7fffffff
              : 0x3fffffff
          }

          function createBuffer(that, length) {
            if (kMaxLength() < length) {
              throw new RangeError('Invalid typed array length')
            }
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              // Return an augmented `Uint8Array` instance, for best performance
              that = new Uint8Array(length)
              that.__proto__ = Buffer.prototype
            } else {
              // Fallback: Return an object instance of the Buffer class
              if (that === null) {
                that = new Buffer(length)
              }
              that.length = length
            }

            return that
          }

          /**
           * The Buffer constructor returns instances of `Uint8Array` that have their
           * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
           * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
           * and the `Uint8Array` methods. Square bracket notation works as expected -- it
           * returns a single octet.
           *
           * The `Uint8Array` prototype remains unmodified.
           */

          function Buffer(arg, encodingOrOffset, length) {
            if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
              return new Buffer(arg, encodingOrOffset, length)
            }

            // Common case.
            if (typeof arg === 'number') {
              if (typeof encodingOrOffset === 'string') {
                throw new Error(
                  'If encoding is specified then the first argument must be a string'
                )
              }
              return allocUnsafe(this, arg)
            }
            return from(this, arg, encodingOrOffset, length)
          }

          Buffer.poolSize = 8192 // not used by this implementation

          // TODO: Legacy, not needed anymore. Remove in next major version.
          Buffer._augment = function (arr) {
            arr.__proto__ = Buffer.prototype
            return arr
          }

          function from(that, value, encodingOrOffset, length) {
            if (typeof value === 'number') {
              throw new TypeError('"value" argument must not be a number')
            }

            if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
              return fromArrayBuffer(that, value, encodingOrOffset, length)
            }

            if (typeof value === 'string') {
              return fromString(that, value, encodingOrOffset)
            }

            return fromObject(that, value)
          }

          /**
           * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
           * if value is a number.
           * Buffer.from(str[, encoding])
           * Buffer.from(array)
           * Buffer.from(buffer)
           * Buffer.from(arrayBuffer[, byteOffset[, length]])
           **/
          Buffer.from = function (value, encodingOrOffset, length) {
            return from(null, value, encodingOrOffset, length)
          }

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            Buffer.prototype.__proto__ = Uint8Array.prototype
            Buffer.__proto__ = Uint8Array
            if (typeof Symbol !== 'undefined' && Symbol.species &&
              Buffer[Symbol.species] === Buffer) {
              // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
              Object.defineProperty(Buffer, Symbol.species, {
                value: null,
                configurable: true
              })
            }
          }

          function assertSize(size) {
            if (typeof size !== 'number') {
              throw new TypeError('"size" argument must be a number')
            } else if (size < 0) {
              throw new RangeError('"size" argument must not be negative')
            }
          }

          function alloc(that, size, fill, encoding) {
            assertSize(size)
            if (size <= 0) {
              return createBuffer(that, size)
            }
            if (fill !== undefined) {
              // Only pay attention to encoding if it's a string. This
              // prevents accidentally sending in a number that would
              // be interpretted as a start offset.
              return typeof encoding === 'string'
                ? createBuffer(that, size).fill(fill, encoding)
                : createBuffer(that, size).fill(fill)
            }
            return createBuffer(that, size)
          }

          /**
           * Creates a new filled Buffer instance.
           * alloc(size[, fill[, encoding]])
           **/
          Buffer.alloc = function (size, fill, encoding) {
            return alloc(null, size, fill, encoding)
          }

          function allocUnsafe(that, size) {
            assertSize(size)
            that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
            if (!Buffer.TYPED_ARRAY_SUPPORT) {
              for (var i = 0; i < size; ++i) {
                that[i] = 0
              }
            }
            return that
          }

          /**
           * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
           * */
          Buffer.allocUnsafe = function (size) {
            return allocUnsafe(null, size)
          }
          /**
           * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
           */
          Buffer.allocUnsafeSlow = function (size) {
            return allocUnsafe(null, size)
          }

          function fromString(that, string, encoding) {
            if (typeof encoding !== 'string' || encoding === '') {
              encoding = 'utf8'
            }

            if (!Buffer.isEncoding(encoding)) {
              throw new TypeError('"encoding" must be a valid string encoding')
            }

            var length = byteLength(string, encoding) | 0
            that = createBuffer(that, length)

            var actual = that.write(string, encoding)

            if (actual !== length) {
              // Writing a hex string, for example, that contains invalid characters will
              // cause everything after the first invalid character to be ignored. (e.g.
              // 'abxxcd' will be treated as 'ab')
              that = that.slice(0, actual)
            }

            return that
          }

          function fromArrayLike(that, array) {
            var length = array.length < 0 ? 0 : checked(array.length) | 0
            that = createBuffer(that, length)
            for (var i = 0; i < length; i += 1) {
              that[i] = array[i] & 255
            }
            return that
          }

          function fromArrayBuffer(that, array, byteOffset, length) {
            array.byteLength // this throws if `array` is not a valid ArrayBuffer

            if (byteOffset < 0 || array.byteLength < byteOffset) {
              throw new RangeError('\'offset\' is out of bounds')
            }

            if (array.byteLength < byteOffset + (length || 0)) {
              throw new RangeError('\'length\' is out of bounds')
            }

            if (byteOffset === undefined && length === undefined) {
              array = new Uint8Array(array)
            } else if (length === undefined) {
              array = new Uint8Array(array, byteOffset)
            } else {
              array = new Uint8Array(array, byteOffset, length)
            }

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              // Return an augmented `Uint8Array` instance, for best performance
              that = array
              that.__proto__ = Buffer.prototype
            } else {
              // Fallback: Return an object instance of the Buffer class
              that = fromArrayLike(that, array)
            }
            return that
          }

          function fromObject(that, obj) {
            if (Buffer.isBuffer(obj)) {
              var len = checked(obj.length) | 0
              that = createBuffer(that, len)

              if (that.length === 0) {
                return that
              }

              obj.copy(that, 0, 0, len)
              return that
            }

            if (obj) {
              if ((typeof ArrayBuffer !== 'undefined' &&
                obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
                if (typeof obj.length !== 'number' || isnan(obj.length)) {
                  return createBuffer(that, 0)
                }
                return fromArrayLike(that, obj)
              }

              if (obj.type === 'Buffer' && isArray(obj.data)) {
                return fromArrayLike(that, obj.data)
              }
            }

            throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
          }

          function checked(length) {
            // Note: cannot use `length < kMaxLength()` here because that fails when
            // length is NaN (which is otherwise coerced to zero.)
            if (length >= kMaxLength()) {
              throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                'size: 0x' + kMaxLength().toString(16) + ' bytes')
            }
            return length | 0
          }

          function SlowBuffer(length) {
            if (+length != length) { // eslint-disable-line eqeqeq
              length = 0
            }
            return Buffer.alloc(+length)
          }

          Buffer.isBuffer = function isBuffer(b) {
            return !!(b != null && b._isBuffer)
          }

          Buffer.compare = function compare(a, b) {
            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
              throw new TypeError('Arguments must be Buffers')
            }

            if (a === b) return 0

            var x = a.length
            var y = b.length

            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
              if (a[i] !== b[i]) {
                x = a[i]
                y = b[i]
                break
              }
            }

            if (x < y) return -1
            if (y < x) return 1
            return 0
          }

          Buffer.isEncoding = function isEncoding(encoding) {
            switch (String(encoding).toLowerCase()) {
              case 'hex':
              case 'utf8':
              case 'utf-8':
              case 'ascii':
              case 'latin1':
              case 'binary':
              case 'base64':
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return true
              default:
                return false
            }
          }

          Buffer.concat = function concat(list, length) {
            if (!isArray(list)) {
              throw new TypeError('"list" argument must be an Array of Buffers')
            }

            if (list.length === 0) {
              return Buffer.alloc(0)
            }

            var i
            if (length === undefined) {
              length = 0
              for (i = 0; i < list.length; ++i) {
                length += list[i].length
              }
            }

            var buffer = Buffer.allocUnsafe(length)
            var pos = 0
            for (i = 0; i < list.length; ++i) {
              var buf = list[i]
              if (!Buffer.isBuffer(buf)) {
                throw new TypeError('"list" argument must be an Array of Buffers')
              }
              buf.copy(buffer, pos)
              pos += buf.length
            }
            return buffer
          }

          function byteLength(string, encoding) {
            if (Buffer.isBuffer(string)) {
              return string.length
            }
            if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
              (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
              return string.byteLength
            }
            if (typeof string !== 'string') {
              string = '' + string
            }

            var len = string.length
            if (len === 0) return 0

            // Use a for loop to avoid recursion
            var loweredCase = false
            for (; ;) {
              switch (encoding) {
                case 'ascii':
                case 'latin1':
                case 'binary':
                  return len
                case 'utf8':
                case 'utf-8':
                case undefined:
                  return utf8ToBytes(string).length
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return len * 2
                case 'hex':
                  return len >>> 1
                case 'base64':
                  return base64ToBytes(string).length
                default:
                  if (loweredCase) return utf8ToBytes(string).length // assume utf8
                  encoding = ('' + encoding).toLowerCase()
                  loweredCase = true
              }
            }
          }
          Buffer.byteLength = byteLength

          function slowToString(encoding, start, end) {
            var loweredCase = false

            // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
            // property of a typed array.

            // This behaves neither like String nor Uint8Array in that we set start/end
            // to their upper/lower bounds if the value passed is out of range.
            // undefined is handled specially as per ECMA-262 6th Edition,
            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
            if (start === undefined || start < 0) {
              start = 0
            }
            // Return early if start > this.length. Done here to prevent potential uint32
            // coercion fail below.
            if (start > this.length) {
              return ''
            }

            if (end === undefined || end > this.length) {
              end = this.length
            }

            if (end <= 0) {
              return ''
            }

            // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
            end >>>= 0
            start >>>= 0

            if (end <= start) {
              return ''
            }

            if (!encoding) encoding = 'utf8'

            while (true) {
              switch (encoding) {
                case 'hex':
                  return hexSlice(this, start, end)

                case 'utf8':
                case 'utf-8':
                  return utf8Slice(this, start, end)

                case 'ascii':
                  return asciiSlice(this, start, end)

                case 'latin1':
                case 'binary':
                  return latin1Slice(this, start, end)

                case 'base64':
                  return base64Slice(this, start, end)

                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return utf16leSlice(this, start, end)

                default:
                  if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                  encoding = (encoding + '').toLowerCase()
                  loweredCase = true
              }
            }
          }

          // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
          // Buffer instances.
          Buffer.prototype._isBuffer = true

          function swap(b, n, m) {
            var i = b[n]
            b[n] = b[m]
            b[m] = i
          }

          Buffer.prototype.swap16 = function swap16() {
            var len = this.length
            if (len % 2 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 16-bits')
            }
            for (var i = 0; i < len; i += 2) {
              swap(this, i, i + 1)
            }
            return this
          }

          Buffer.prototype.swap32 = function swap32() {
            var len = this.length
            if (len % 4 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 32-bits')
            }
            for (var i = 0; i < len; i += 4) {
              swap(this, i, i + 3)
              swap(this, i + 1, i + 2)
            }
            return this
          }

          Buffer.prototype.swap64 = function swap64() {
            var len = this.length
            if (len % 8 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 64-bits')
            }
            for (var i = 0; i < len; i += 8) {
              swap(this, i, i + 7)
              swap(this, i + 1, i + 6)
              swap(this, i + 2, i + 5)
              swap(this, i + 3, i + 4)
            }
            return this
          }

          Buffer.prototype.toString = function toString() {
            var length = this.length | 0
            if (length === 0) return ''
            if (arguments.length === 0) return utf8Slice(this, 0, length)
            return slowToString.apply(this, arguments)
          }

          Buffer.prototype.equals = function equals(b) {
            if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
            if (this === b) return true
            return Buffer.compare(this, b) === 0
          }

          Buffer.prototype.inspect = function inspect() {
            var str = ''
            var max = exports.INSPECT_MAX_BYTES
            if (this.length > 0) {
              str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
              if (this.length > max) str += ' ... '
            }
            return '<Buffer ' + str + '>'
          }

          Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
            if (!Buffer.isBuffer(target)) {
              throw new TypeError('Argument must be a Buffer')
            }

            if (start === undefined) {
              start = 0
            }
            if (end === undefined) {
              end = target ? target.length : 0
            }
            if (thisStart === undefined) {
              thisStart = 0
            }
            if (thisEnd === undefined) {
              thisEnd = this.length
            }

            if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
              throw new RangeError('out of range index')
            }

            if (thisStart >= thisEnd && start >= end) {
              return 0
            }
            if (thisStart >= thisEnd) {
              return -1
            }
            if (start >= end) {
              return 1
            }

            start >>>= 0
            end >>>= 0
            thisStart >>>= 0
            thisEnd >>>= 0

            if (this === target) return 0

            var x = thisEnd - thisStart
            var y = end - start
            var len = Math.min(x, y)

            var thisCopy = this.slice(thisStart, thisEnd)
            var targetCopy = target.slice(start, end)

            for (var i = 0; i < len; ++i) {
              if (thisCopy[i] !== targetCopy[i]) {
                x = thisCopy[i]
                y = targetCopy[i]
                break
              }
            }

            if (x < y) return -1
            if (y < x) return 1
            return 0
          }

          // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
          // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
          //
          // Arguments:
          // - buffer - a Buffer to search
          // - val - a string, Buffer, or number
          // - byteOffset - an index into `buffer`; will be clamped to an int32
          // - encoding - an optional encoding, relevant is val is a string
          // - dir - true for indexOf, false for lastIndexOf
          function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
            // Empty buffer means no match
            if (buffer.length === 0) return -1

            // Normalize byteOffset
            if (typeof byteOffset === 'string') {
              encoding = byteOffset
              byteOffset = 0
            } else if (byteOffset > 0x7fffffff) {
              byteOffset = 0x7fffffff
            } else if (byteOffset < -0x80000000) {
              byteOffset = -0x80000000
            }
            byteOffset = +byteOffset  // Coerce to Number.
            if (isNaN(byteOffset)) {
              // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
              byteOffset = dir ? 0 : (buffer.length - 1)
            }

            // Normalize byteOffset: negative offsets start from the end of the buffer
            if (byteOffset < 0) byteOffset = buffer.length + byteOffset
            if (byteOffset >= buffer.length) {
              if (dir) return -1
              else byteOffset = buffer.length - 1
            } else if (byteOffset < 0) {
              if (dir) byteOffset = 0
              else return -1
            }

            // Normalize val
            if (typeof val === 'string') {
              val = Buffer.from(val, encoding)
            }

            // Finally, search either indexOf (if dir is true) or lastIndexOf
            if (Buffer.isBuffer(val)) {
              // Special case: looking for empty string/buffer always fails
              if (val.length === 0) {
                return -1
              }
              return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
            } else if (typeof val === 'number') {
              val = val & 0xFF // Search for a byte value [0-255]
              if (Buffer.TYPED_ARRAY_SUPPORT &&
                typeof Uint8Array.prototype.indexOf === 'function') {
                if (dir) {
                  return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                } else {
                  return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                }
              }
              return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
            }

            throw new TypeError('val must be string, number or Buffer')
          }

          function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
            var indexSize = 1
            var arrLength = arr.length
            var valLength = val.length

            if (encoding !== undefined) {
              encoding = String(encoding).toLowerCase()
              if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                encoding === 'utf16le' || encoding === 'utf-16le') {
                if (arr.length < 2 || val.length < 2) {
                  return -1
                }
                indexSize = 2
                arrLength /= 2
                valLength /= 2
                byteOffset /= 2
              }
            }

            function read(buf, i) {
              if (indexSize === 1) {
                return buf[i]
              } else {
                return buf.readUInt16BE(i * indexSize)
              }
            }

            var i
            if (dir) {
              var foundIndex = -1
              for (i = byteOffset; i < arrLength; i++) {
                if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                  if (foundIndex === -1) foundIndex = i
                  if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                } else {
                  if (foundIndex !== -1) i -= i - foundIndex
                  foundIndex = -1
                }
              }
            } else {
              if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
              for (i = byteOffset; i >= 0; i--) {
                var found = true
                for (var j = 0; j < valLength; j++) {
                  if (read(arr, i + j) !== read(val, j)) {
                    found = false
                    break
                  }
                }
                if (found) return i
              }
            }

            return -1
          }

          Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
            return this.indexOf(val, byteOffset, encoding) !== -1
          }

          Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
          }

          Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
          }

          function hexWrite(buf, string, offset, length) {
            offset = Number(offset) || 0
            var remaining = buf.length - offset
            if (!length) {
              length = remaining
            } else {
              length = Number(length)
              if (length > remaining) {
                length = remaining
              }
            }

            // must be an even number of digits
            var strLen = string.length
            if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

            if (length > strLen / 2) {
              length = strLen / 2
            }
            for (var i = 0; i < length; ++i) {
              var parsed = parseInt(string.substr(i * 2, 2), 16)
              if (isNaN(parsed)) return i
              buf[offset + i] = parsed
            }
            return i
          }

          function utf8Write(buf, string, offset, length) {
            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
          }

          function asciiWrite(buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length)
          }

          function latin1Write(buf, string, offset, length) {
            return asciiWrite(buf, string, offset, length)
          }

          function base64Write(buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length)
          }

          function ucs2Write(buf, string, offset, length) {
            return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
          }

          Buffer.prototype.write = function write(string, offset, length, encoding) {
            // Buffer#write(string)
            if (offset === undefined) {
              encoding = 'utf8'
              length = this.length
              offset = 0
              // Buffer#write(string, encoding)
            } else if (length === undefined && typeof offset === 'string') {
              encoding = offset
              length = this.length
              offset = 0
              // Buffer#write(string, offset[, length][, encoding])
            } else if (isFinite(offset)) {
              offset = offset | 0
              if (isFinite(length)) {
                length = length | 0
                if (encoding === undefined) encoding = 'utf8'
              } else {
                encoding = length
                length = undefined
              }
              // legacy write(string, encoding, offset, length) - remove in v0.13
            } else {
              throw new Error(
                'Buffer.write(string, encoding, offset[, length]) is no longer supported'
              )
            }

            var remaining = this.length - offset
            if (length === undefined || length > remaining) length = remaining

            if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
              throw new RangeError('Attempt to write outside buffer bounds')
            }

            if (!encoding) encoding = 'utf8'

            var loweredCase = false
            for (; ;) {
              switch (encoding) {
                case 'hex':
                  return hexWrite(this, string, offset, length)

                case 'utf8':
                case 'utf-8':
                  return utf8Write(this, string, offset, length)

                case 'ascii':
                  return asciiWrite(this, string, offset, length)

                case 'latin1':
                case 'binary':
                  return latin1Write(this, string, offset, length)

                case 'base64':
                  // Warning: maxLength not taken into account in base64Write
                  return base64Write(this, string, offset, length)

                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return ucs2Write(this, string, offset, length)

                default:
                  if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                  encoding = ('' + encoding).toLowerCase()
                  loweredCase = true
              }
            }
          }

          Buffer.prototype.toJSON = function toJSON() {
            return {
              type: 'Buffer',
              data: Array.prototype.slice.call(this._arr || this, 0)
            }
          }

          function base64Slice(buf, start, end) {
            if (start === 0 && end === buf.length) {
              return base64.fromByteArray(buf)
            } else {
              return base64.fromByteArray(buf.slice(start, end))
            }
          }

          function utf8Slice(buf, start, end) {
            end = Math.min(buf.length, end)
            var res = []

            var i = start
            while (i < end) {
              var firstByte = buf[i]
              var codePoint = null
              var bytesPerSequence = (firstByte > 0xEF) ? 4
                : (firstByte > 0xDF) ? 3
                  : (firstByte > 0xBF) ? 2
                    : 1

              if (i + bytesPerSequence <= end) {
                var secondByte, thirdByte, fourthByte, tempCodePoint

                switch (bytesPerSequence) {
                  case 1:
                    if (firstByte < 0x80) {
                      codePoint = firstByte
                    }
                    break
                  case 2:
                    secondByte = buf[i + 1]
                    if ((secondByte & 0xC0) === 0x80) {
                      tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                      if (tempCodePoint > 0x7F) {
                        codePoint = tempCodePoint
                      }
                    }
                    break
                  case 3:
                    secondByte = buf[i + 1]
                    thirdByte = buf[i + 2]
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                      tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                      if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                        codePoint = tempCodePoint
                      }
                    }
                    break
                  case 4:
                    secondByte = buf[i + 1]
                    thirdByte = buf[i + 2]
                    fourthByte = buf[i + 3]
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                      tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                      if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                        codePoint = tempCodePoint
                      }
                    }
                }
              }

              if (codePoint === null) {
                // we did not generate a valid codePoint so insert a
                // replacement char (U+FFFD) and advance only 1 byte
                codePoint = 0xFFFD
                bytesPerSequence = 1
              } else if (codePoint > 0xFFFF) {
                // encode to utf16 (surrogate pair dance)
                codePoint -= 0x10000
                res.push(codePoint >>> 10 & 0x3FF | 0xD800)
                codePoint = 0xDC00 | codePoint & 0x3FF
              }

              res.push(codePoint)
              i += bytesPerSequence
            }

            return decodeCodePointsArray(res)
          }

          // Based on http://stackoverflow.com/a/22747272/680742, the browser with
          // the lowest limit is Chrome, with 0x10000 args.
          // We go 1 magnitude less, for safety
          var MAX_ARGUMENTS_LENGTH = 0x1000

          function decodeCodePointsArray(codePoints) {
            var len = codePoints.length
            if (len <= MAX_ARGUMENTS_LENGTH) {
              return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
            }

            // Decode in chunks to avoid "call stack size exceeded".
            var res = ''
            var i = 0
            while (i < len) {
              res += String.fromCharCode.apply(
                String,
                codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
              )
            }
            return res
          }

          function asciiSlice(buf, start, end) {
            var ret = ''
            end = Math.min(buf.length, end)

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i] & 0x7F)
            }
            return ret
          }

          function latin1Slice(buf, start, end) {
            var ret = ''
            end = Math.min(buf.length, end)

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i])
            }
            return ret
          }

          function hexSlice(buf, start, end) {
            var len = buf.length

            if (!start || start < 0) start = 0
            if (!end || end < 0 || end > len) end = len

            var out = ''
            for (var i = start; i < end; ++i) {
              out += toHex(buf[i])
            }
            return out
          }

          function utf16leSlice(buf, start, end) {
            var bytes = buf.slice(start, end)
            var res = ''
            for (var i = 0; i < bytes.length; i += 2) {
              res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
            }
            return res
          }

          Buffer.prototype.slice = function slice(start, end) {
            var len = this.length
            start = ~~start
            end = end === undefined ? len : ~~end

            if (start < 0) {
              start += len
              if (start < 0) start = 0
            } else if (start > len) {
              start = len
            }

            if (end < 0) {
              end += len
              if (end < 0) end = 0
            } else if (end > len) {
              end = len
            }

            if (end < start) end = start

            var newBuf
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              newBuf = this.subarray(start, end)
              newBuf.__proto__ = Buffer.prototype
            } else {
              var sliceLen = end - start
              newBuf = new Buffer(sliceLen, undefined)
              for (var i = 0; i < sliceLen; ++i) {
                newBuf[i] = this[i + start]
              }
            }

            return newBuf
          }

          /*
           * Need to make sure that buffer isn't trying to write out of bounds.
           */
          function checkOffset(offset, ext, length) {
            if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
            if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
          }

          Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var val = this[offset]
            var mul = 1
            var i = 0
            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul
            }

            return val
          }

          Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) {
              checkOffset(offset, byteLength, this.length)
            }

            var val = this[offset + --byteLength]
            var mul = 1
            while (byteLength > 0 && (mul *= 0x100)) {
              val += this[offset + --byteLength] * mul
            }

            return val
          }

          Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length)
            return this[offset]
          }

          Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length)
            return this[offset] | (this[offset + 1] << 8)
          }

          Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length)
            return (this[offset] << 8) | this[offset + 1]
          }

          Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)

            return ((this[offset]) |
              (this[offset + 1] << 8) |
              (this[offset + 2] << 16)) +
              (this[offset + 3] * 0x1000000)
          }

          Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (this[offset] * 0x1000000) +
              ((this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3])
          }

          Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var val = this[offset]
            var mul = 1
            var i = 0
            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul
            }
            mul *= 0x80

            if (val >= mul) val -= Math.pow(2, 8 * byteLength)

            return val
          }

          Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            var i = byteLength
            var mul = 1
            var val = this[offset + --i]
            while (i > 0 && (mul *= 0x100)) {
              val += this[offset + --i] * mul
            }
            mul *= 0x80

            if (val >= mul) val -= Math.pow(2, 8 * byteLength)

            return val
          }

          Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length)
            if (!(this[offset] & 0x80)) return (this[offset])
            return ((0xff - this[offset] + 1) * -1)
          }

          Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length)
            var val = this[offset] | (this[offset + 1] << 8)
            return (val & 0x8000) ? val | 0xFFFF0000 : val
          }

          Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length)
            var val = this[offset + 1] | (this[offset] << 8)
            return (val & 0x8000) ? val | 0xFFFF0000 : val
          }

          Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (this[offset]) |
              (this[offset + 1] << 8) |
              (this[offset + 2] << 16) |
              (this[offset + 3] << 24)
          }

          Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (this[offset] << 24) |
              (this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              (this[offset + 3])
          }

          Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)
            return ieee754.read(this, offset, true, 23, 4)
          }

          Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length)
            return ieee754.read(this, offset, false, 23, 4)
          }

          Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 8, this.length)
            return ieee754.read(this, offset, true, 52, 8)
          }

          Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 8, this.length)
            return ieee754.read(this, offset, false, 52, 8)
          }

          function checkInt(buf, value, offset, ext, max, min) {
            if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
            if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
            if (offset + ext > buf.length) throw new RangeError('Index out of range')
          }

          Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
            value = +value
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1
              checkInt(this, value, offset, byteLength, maxBytes, 0)
            }

            var mul = 1
            var i = 0
            this[offset] = value & 0xFF
            while (++i < byteLength && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xFF
            }

            return offset + byteLength
          }

          Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
            value = +value
            offset = offset | 0
            byteLength = byteLength | 0
            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1
              checkInt(this, value, offset, byteLength, maxBytes, 0)
            }

            var i = byteLength - 1
            var mul = 1
            this[offset + i] = value & 0xFF
            while (--i >= 0 && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xFF
            }

            return offset + byteLength
          }

          Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
            this[offset] = (value & 0xff)
            return offset + 1
          }

          function objectWriteUInt16(buf, value, offset, littleEndian) {
            if (value < 0) value = 0xffff + value + 1
            for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
              buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
                (littleEndian ? i : 1 - i) * 8
            }
          }

          Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = (value & 0xff)
              this[offset + 1] = (value >>> 8)
            } else {
              objectWriteUInt16(this, value, offset, true)
            }
            return offset + 2
          }

          Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = (value >>> 8)
              this[offset + 1] = (value & 0xff)
            } else {
              objectWriteUInt16(this, value, offset, false)
            }
            return offset + 2
          }

          function objectWriteUInt32(buf, value, offset, littleEndian) {
            if (value < 0) value = 0xffffffff + value + 1
            for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
              buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
            }
          }

          Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset + 3] = (value >>> 24)
              this[offset + 2] = (value >>> 16)
              this[offset + 1] = (value >>> 8)
              this[offset] = (value & 0xff)
            } else {
              objectWriteUInt32(this, value, offset, true)
            }
            return offset + 4
          }

          Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = (value >>> 24)
              this[offset + 1] = (value >>> 16)
              this[offset + 2] = (value >>> 8)
              this[offset + 3] = (value & 0xff)
            } else {
              objectWriteUInt32(this, value, offset, false)
            }
            return offset + 4
          }

          Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1)

              checkInt(this, value, offset, byteLength, limit - 1, -limit)
            }

            var i = 0
            var mul = 1
            var sub = 0
            this[offset] = value & 0xFF
            while (++i < byteLength && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                sub = 1
              }
              this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
            }

            return offset + byteLength
          }

          Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1)

              checkInt(this, value, offset, byteLength, limit - 1, -limit)
            }

            var i = byteLength - 1
            var mul = 1
            var sub = 0
            this[offset + i] = value & 0xFF
            while (--i >= 0 && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                sub = 1
              }
              this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
            }

            return offset + byteLength
          }

          Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
            if (value < 0) value = 0xff + value + 1
            this[offset] = (value & 0xff)
            return offset + 1
          }

          Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = (value & 0xff)
              this[offset + 1] = (value >>> 8)
            } else {
              objectWriteUInt16(this, value, offset, true)
            }
            return offset + 2
          }

          Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = (value >>> 8)
              this[offset + 1] = (value & 0xff)
            } else {
              objectWriteUInt16(this, value, offset, false)
            }
            return offset + 2
          }

          Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = (value & 0xff)
              this[offset + 1] = (value >>> 8)
              this[offset + 2] = (value >>> 16)
              this[offset + 3] = (value >>> 24)
            } else {
              objectWriteUInt32(this, value, offset, true)
            }
            return offset + 4
          }

          Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
            value = +value
            offset = offset | 0
            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
            if (value < 0) value = 0xffffffff + value + 1
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = (value >>> 24)
              this[offset + 1] = (value >>> 16)
              this[offset + 2] = (value >>> 8)
              this[offset + 3] = (value & 0xff)
            } else {
              objectWriteUInt32(this, value, offset, false)
            }
            return offset + 4
          }

          function checkIEEE754(buf, value, offset, ext, max, min) {
            if (offset + ext > buf.length) throw new RangeError('Index out of range')
            if (offset < 0) throw new RangeError('Index out of range')
          }

          function writeFloat(buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
              checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
            }
            ieee754.write(buf, value, offset, littleEndian, 23, 4)
            return offset + 4
          }

          Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
            return writeFloat(this, value, offset, true, noAssert)
          }

          Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
            return writeFloat(this, value, offset, false, noAssert)
          }

          function writeDouble(buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
              checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
            }
            ieee754.write(buf, value, offset, littleEndian, 52, 8)
            return offset + 8
          }

          Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
            return writeDouble(this, value, offset, true, noAssert)
          }

          Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
            return writeDouble(this, value, offset, false, noAssert)
          }

          // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
          Buffer.prototype.copy = function copy(target, targetStart, start, end) {
            if (!start) start = 0
            if (!end && end !== 0) end = this.length
            if (targetStart >= target.length) targetStart = target.length
            if (!targetStart) targetStart = 0
            if (end > 0 && end < start) end = start

            // Copy 0 bytes; we're done
            if (end === start) return 0
            if (target.length === 0 || this.length === 0) return 0

            // Fatal error conditions
            if (targetStart < 0) {
              throw new RangeError('targetStart out of bounds')
            }
            if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
            if (end < 0) throw new RangeError('sourceEnd out of bounds')

            // Are we oob?
            if (end > this.length) end = this.length
            if (target.length - targetStart < end - start) {
              end = target.length - targetStart + start
            }

            var len = end - start
            var i

            if (this === target && start < targetStart && targetStart < end) {
              // descending copy from end
              for (i = len - 1; i >= 0; --i) {
                target[i + targetStart] = this[i + start]
              }
            } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
              // ascending copy from start
              for (i = 0; i < len; ++i) {
                target[i + targetStart] = this[i + start]
              }
            } else {
              Uint8Array.prototype.set.call(
                target,
                this.subarray(start, start + len),
                targetStart
              )
            }

            return len
          }

          // Usage:
          //    buffer.fill(number[, offset[, end]])
          //    buffer.fill(buffer[, offset[, end]])
          //    buffer.fill(string[, offset[, end]][, encoding])
          Buffer.prototype.fill = function fill(val, start, end, encoding) {
            // Handle string cases:
            if (typeof val === 'string') {
              if (typeof start === 'string') {
                encoding = start
                start = 0
                end = this.length
              } else if (typeof end === 'string') {
                encoding = end
                end = this.length
              }
              if (val.length === 1) {
                var code = val.charCodeAt(0)
                if (code < 256) {
                  val = code
                }
              }
              if (encoding !== undefined && typeof encoding !== 'string') {
                throw new TypeError('encoding must be a string')
              }
              if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                throw new TypeError('Unknown encoding: ' + encoding)
              }
            } else if (typeof val === 'number') {
              val = val & 255
            }

            // Invalid ranges are not set to a default, so can range check early.
            if (start < 0 || this.length < start || this.length < end) {
              throw new RangeError('Out of range index')
            }

            if (end <= start) {
              return this
            }

            start = start >>> 0
            end = end === undefined ? this.length : end >>> 0

            if (!val) val = 0

            var i
            if (typeof val === 'number') {
              for (i = start; i < end; ++i) {
                this[i] = val
              }
            } else {
              var bytes = Buffer.isBuffer(val)
                ? val
                : utf8ToBytes(new Buffer(val, encoding).toString())
              var len = bytes.length
              for (i = 0; i < end - start; ++i) {
                this[i + start] = bytes[i % len]
              }
            }

            return this
          }

          // HELPER FUNCTIONS
          // ================

          var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

          function base64clean(str) {
            // Node strips out invalid characters like \n and \t from the string, base64-js does not
            str = stringtrim(str).replace(INVALID_BASE64_RE, '')
            // Node converts strings with length < 2 to ''
            if (str.length < 2) return ''
            // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
            while (str.length % 4 !== 0) {
              str = str + '='
            }
            return str
          }

          function stringtrim(str) {
            if (str.trim) return str.trim()
            return str.replace(/^\s+|\s+$/g, '')
          }

          function toHex(n) {
            if (n < 16) return '0' + n.toString(16)
            return n.toString(16)
          }

          function utf8ToBytes(string, units) {
            units = units || Infinity
            var codePoint
            var length = string.length
            var leadSurrogate = null
            var bytes = []

            for (var i = 0; i < length; ++i) {
              codePoint = string.charCodeAt(i)

              // is surrogate component
              if (codePoint > 0xD7FF && codePoint < 0xE000) {
                // last char was a lead
                if (!leadSurrogate) {
                  // no lead yet
                  if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                    continue
                  } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                    continue
                  }

                  // valid lead
                  leadSurrogate = codePoint

                  continue
                }

                // 2 leads in a row
                if (codePoint < 0xDC00) {
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                  leadSurrogate = codePoint
                  continue
                }

                // valid surrogate pair
                codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
              } else if (leadSurrogate) {
                // valid bmp char, but last char was a lead
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
              }

              leadSurrogate = null

              // encode utf8
              if (codePoint < 0x80) {
                if ((units -= 1) < 0) break
                bytes.push(codePoint)
              } else if (codePoint < 0x800) {
                if ((units -= 2) < 0) break
                bytes.push(
                  codePoint >> 0x6 | 0xC0,
                  codePoint & 0x3F | 0x80
                )
              } else if (codePoint < 0x10000) {
                if ((units -= 3) < 0) break
                bytes.push(
                  codePoint >> 0xC | 0xE0,
                  codePoint >> 0x6 & 0x3F | 0x80,
                  codePoint & 0x3F | 0x80
                )
              } else if (codePoint < 0x110000) {
                if ((units -= 4) < 0) break
                bytes.push(
                  codePoint >> 0x12 | 0xF0,
                  codePoint >> 0xC & 0x3F | 0x80,
                  codePoint >> 0x6 & 0x3F | 0x80,
                  codePoint & 0x3F | 0x80
                )
              } else {
                throw new Error('Invalid code point')
              }
            }

            return bytes
          }

          function asciiToBytes(str) {
            var byteArray = []
            for (var i = 0; i < str.length; ++i) {
              // Node's code seems to be doing this and not & 0x7F..
              byteArray.push(str.charCodeAt(i) & 0xFF)
            }
            return byteArray
          }

          function utf16leToBytes(str, units) {
            var c, hi, lo
            var byteArray = []
            for (var i = 0; i < str.length; ++i) {
              if ((units -= 2) < 0) break

              c = str.charCodeAt(i)
              hi = c >> 8
              lo = c % 256
              byteArray.push(lo)
              byteArray.push(hi)
            }

            return byteArray
          }

          function base64ToBytes(str) {
            return base64.toByteArray(base64clean(str))
          }

          function blitBuffer(src, dst, offset, length) {
            for (var i = 0; i < length; ++i) {
              if ((i + offset >= dst.length) || (i >= src.length)) break
              dst[i + offset] = src[i]
            }
            return i
          }

          function isnan(val) {
            return val !== val // eslint-disable-line no-self-compare
          }

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(21)))

        /***/
}),
/* 28 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file method.js
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var utils = __webpack_require__(0);
        var errors = __webpack_require__(32);

        var Method = function (options) {
          this.name = options.name;
          this.call = options.call;
          this.params = options.params || 0;
          this.inputFormatter = options.inputFormatter;
          this.outputFormatter = options.outputFormatter;
          this.requestManager = null;
        };

        Method.prototype.setRequestManager = function (rm) {
          this.requestManager = rm;
        };

        /**
         * Should be used to determine name of the jsonrpc method based on arguments
         *
         * @method getCall
         * @param {Array} arguments
         * @return {String} name of jsonrpc method
         */
        Method.prototype.getCall = function (args) {
          return utils.isFunction(this.call) ? this.call(args) : this.call;
        };

        /**
         * Should be used to extract callback from array of arguments. Modifies input param
         *
         * @method extractCallback
         * @param {Array} arguments
         * @return {Function|Null} callback, if exists
         */
        Method.prototype.extractCallback = function (args) {
          if (utils.isFunction(args[args.length - 1])) {
            return args.pop(); // modify the args array!
          }
        };

        /**
         * Should be called to check if the number of arguments is correct
         * 
         * @method validateArgs
         * @param {Array} arguments
         * @throws {Error} if it is not
         */
        Method.prototype.validateArgs = function (args) {
          if (args.length !== this.params) {
            throw errors.InvalidNumberOfRPCParams();
          }
        };

        /**
         * Should be called to format input args of method
         * 
         * @method formatInput
         * @param {Array}
         * @return {Array}
         */
        Method.prototype.formatInput = function (args) {
          if (!this.inputFormatter) {
            return args;
          }
          // console.log("Method.prototype.formatInput",args)
          return this.inputFormatter.map(function (formatter, index) {
            return formatter ? formatter(args[index]) : args[index];
          });
        };

        /**
         * Should be called to format output(result) of method
         *
         * @method formatOutput
         * @param {Object}
         * @return {Object}
         */
        Method.prototype.formatOutput = function (result) {
          return this.outputFormatter && result ? this.outputFormatter(result) : result;
        };

        /**
         * Should create payload from given input args
         *
         * @method toPayload
         * @param {Array} args
         * @return {Object}
         */
        Method.prototype.toPayload = function (args) {
          var call = this.getCall(args);
          var callback = this.extractCallback(args);
          var params = this.formatInput(args);
          this.validateArgs(params);

          return {
            method: call,
            params: params,
            callback: callback
          };
        };

        Method.prototype.attachToObject = function (obj) {
          var func = this.buildCall();
          func.call = this.call; // TODO!!! that's ugly. filter.js uses it
          var name = this.name.split('.');
          if (name.length > 1) {
            obj[name[0]] = obj[name[0]] || {};
            obj[name[0]][name[1]] = func;
          } else {
            obj[name[0]] = func;
          }
        };

        Method.prototype.buildCall = function () {
          var method = this;
          var send = function () {
            var payload = method.toPayload(Array.prototype.slice.call(arguments));
            if (payload.callback) {
              return method.requestManager.sendAsync(payload, function (err, result) {
                payload.callback(err, method.formatOutput(result));
              });
            }
            return method.formatOutput(method.requestManager.send(payload));
          };
          send.request = this.request.bind(this);
          return send;
        };

        /**
         * Should be called to create pure JSONRPC request which can be used in batch request
         *
         * @method request
         * @param {...} params
         * @return {Object} jsonrpc request
         */
        Method.prototype.request = function () {
          var payload = this.toPayload(Array.prototype.slice.call(arguments));
          payload.format = this.formatOutput.bind(this);
          return payload;
        };

        module.exports = Method;


        /***/
}),
/* 29 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file property.js
         * @author Fabian Vogelsteller <fabian@frozeman.de>
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var utils = __webpack_require__(0);

        var Property = function (options) {
          this.name = options.name;
          this.getter = options.getter;
          this.setter = options.setter;
          this.outputFormatter = options.outputFormatter;
          this.inputFormatter = options.inputFormatter;
          this.requestManager = null;
        };

        Property.prototype.setRequestManager = function (rm) {
          this.requestManager = rm;
        };

        /**
         * Should be called to format input args of method
         *
         * @method formatInput
         * @param {Array}
         * @return {Array}
         */
        Property.prototype.formatInput = function (arg) {
          return this.inputFormatter ? this.inputFormatter(arg) : arg;
        };

        /**
         * Should be called to format output(result) of method
         *
         * @method formatOutput
         * @param {Object}
         * @return {Object}
         */
        Property.prototype.formatOutput = function (result) {
          return this.outputFormatter && result !== null && result !== undefined ? this.outputFormatter(result) : result;
        };

        /**
         * Should be used to extract callback from array of arguments. Modifies input param
         *
         * @method extractCallback
         * @param {Array} arguments
         * @return {Function|Null} callback, if exists
         */
        Property.prototype.extractCallback = function (args) {
          if (utils.isFunction(args[args.length - 1])) {
            return args.pop(); // modify the args array!
          }
        };


        /**
         * Should attach function to method
         *
         * @method attachToObject
         * @param {Object}
         * @param {Function}
         */
        Property.prototype.attachToObject = function (obj) {
          var proto = {
            get: this.buildGet(),
            enumerable: true
          };

          var names = this.name.split('.');
          var name = names[0];
          if (names.length > 1) {
            obj[names[0]] = obj[names[0]] || {};
            obj = obj[names[0]];
            name = names[1];
          }

          Object.defineProperty(obj, name, proto);
          obj[asyncGetterName(name)] = this.buildAsyncGet();
        };

        var asyncGetterName = function (name) {
          return 'get' + name.charAt(0).toUpperCase() + name.slice(1);
        };

        Property.prototype.buildGet = function () {
          var property = this;
          // console.log(property);
          return async function get() {
            var result;
            await property.requestManager.send({
              method: property.getter
            }).then(data => {
              // console.log("data", data)
              result = property.formatOutput(data)
            });
            return result;
          };
        };

        Property.prototype.buildAsyncGet = function () {
          var property = this;
          var get = function (callback) {
            property.requestManager.sendAsync({
              method: property.getter
            }, function (err, result) {
              callback(err, property.formatOutput(result));
            });
          };
          get.request = this.request.bind(this);
          return get;
        };

        /**
         * Should be called to create pure JSONRPC request which can be used in batch request
         *
         * @method request
         * @param {...} params
         * @return {Object} jsonrpc request
         */
        Property.prototype.request = function () {
          var payload = {
            method: this.getter,
            params: [],
            callback: this.extractCallback(Array.prototype.slice.call(arguments))
          };
          payload.format = this.formatOutput.bind(this);
          return payload;
        };

        module.exports = Property;



        /***/
}),
/* 30 */
/***/ (function (module, exports) {

        /**
         * Performs a
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * comparison between two values to determine if they are equivalent.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.eq(object, object);
         * // => true
         *
         * _.eq(object, other);
         * // => false
         *
         * _.eq('a', 'a');
         * // => true
         *
         * _.eq('a', Object('a'));
         * // => false
         *
         * _.eq(NaN, NaN);
         * // => true
         */
        function eq(value, other) {
          return value === other || (value !== value && other !== other);
        }

        module.exports = eq;


        /***/
}),
/* 31 */
/***/ (function (module, exports, __webpack_require__) {

        var isSymbol = __webpack_require__(34);

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0;

        /**
         * Converts `value` to a string key if it's not a string or symbol.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {string|symbol} Returns the key.
         */
        function toKey(value) {
          if (typeof value == 'string' || isSymbol(value)) {
            return value;
          }
          var result = (value + '');
          return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }

        module.exports = toKey;


        /***/
}),
/* 32 */
/***/ (function (module, exports) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /** 
         * @file errors.js
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC tech inc.
         * @date 2018
         */

        module.exports = {
          InvalidPublicAddress: function () {
            return new Error('Invalid public address');
          },
          InvalidNumberOfSolidityArgs: function () {
            return new Error('Invalid number of arguments to Solidity function');
          },
          InvalidNumberOfRPCParams: function () {
            return new Error('Invalid number of input parameters to RPC method');
          },
          InvalidConnection: function (host) {
            return new Error('CONNECTION ERROR: Couldn\'t connect to node ' + host + '.');
          },
          InvalidProvider: function () {
            return new Error('Provider not set or invalid');
          },
          InvalidResponse: function (result) {
            var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
            return new Error(message);
          },
          ConnectionTimeout: function (ms) {
            return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');
          }
        };


        /***/
}),
/* 33 */
/***/ (function (module, exports) {

        /** Used as references for various `Number` constants. */
        var MAX_SAFE_INTEGER = 9007199254740991;

        /** Used to detect unsigned integer values. */
        var reIsUint = /^(?:0|[1-9]\d*)$/;

        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;

          return !!length &&
            (type == 'number' ||
              (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
        }

        module.exports = isIndex;


        /***/
}),
/* 34 */
/***/ (function (module, exports, __webpack_require__) {

        var baseGetTag = __webpack_require__(39),
          isObjectLike = __webpack_require__(14);

        /** `Object#toString` result references. */
        var symbolTag = '[object Symbol]';

        /**
         * Checks if `value` is classified as a `Symbol` primitive or object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
         * @example
         *
         * _.isSymbol(Symbol.iterator);
         * // => true
         *
         * _.isSymbol('abc');
         * // => false
         */
        function isSymbol(value) {
          return typeof value == 'symbol' ||
            (isObjectLike(value) && baseGetTag(value) == symbolTag);
        }

        module.exports = isSymbol;


        /***/
}),
/* 35 */
/***/ (function (module, exports, __webpack_require__) {

        var isArray = __webpack_require__(4),
          isKey = __webpack_require__(106),
          stringToPath = __webpack_require__(161),
          toString = __webpack_require__(162);

        /**
         * Casts `value` to a path array if it's not one.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {Object} [object] The object to query keys on.
         * @returns {Array} Returns the cast property path array.
         */
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }

        module.exports = castPath;


        /***/
}),
/* 36 */
/***/ (function (module, exports) {

        module.exports = function (module) {
          if (!module.webpackPolyfill) {
            module.deprecate = function () { };
            module.paths = [];
            // module.parent = undefined by default
            if (!module.children) module.children = [];
            Object.defineProperty(module, "loaded", {
              enumerable: true,
              get: function () {
                return module.l;
              }
            });
            Object.defineProperty(module, "id", {
              enumerable: true,
              get: function () {
                return module.i;
              }
            });
            module.webpackPolyfill = 1;
          }
          return module;
        };


        /***/
}),
/* 37 */
/***/ (function (module, exports) {

        module.exports = assert;

        function assert(val, msg) {
          if (!val)
            throw new Error(msg || 'Assertion failed');
        }

        assert.equal = function assertEqual(l, r, msg) {
          if (l != r)
            throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
        };


        /***/
}),
/* 38 */
/***/ (function (module, exports, __webpack_require__) {

        var baseGetTag = __webpack_require__(39),
          isObject = __webpack_require__(9);

        /** `Object#toString` result references. */
        var asyncTag = '[object AsyncFunction]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          proxyTag = '[object Proxy]';

        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          // The use of `Object#toString` avoids issues with the `typeof` operator
          // in Safari 9 which returns 'object' for typed arrays and other constructors.
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }

        module.exports = isFunction;


        /***/
}),
/* 39 */
/***/ (function (module, exports, __webpack_require__) {

        var Symbol = __webpack_require__(48),
          getRawTag = __webpack_require__(252),
          objectToString = __webpack_require__(253);

        /** `Object#toString` result references. */
        var nullTag = '[object Null]',
          undefinedTag = '[object Undefined]';

        /** Built-in value references. */
        var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
          }
          return (symToStringTag && symToStringTag in Object(value))
            ? getRawTag(value)
            : objectToString(value);
        }

        module.exports = baseGetTag;


        /***/
}),
/* 40 */
/***/ (function (module, exports) {

        /**
         * Copies the values of `source` to `array`.
         *
         * @private
         * @param {Array} source The array to copy values from.
         * @param {Array} [array=[]] The array to copy values to.
         * @returns {Array} Returns `array`.
         */
        function copyArray(source, array) {
          var index = -1,
            length = source.length;

          array || (array = Array(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }

        module.exports = copyArray;


        /***/
}),
/* 41 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIsNative = __webpack_require__(264),
          getValue = __webpack_require__(267);

        /**
         * Gets the native function at `key` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the method to get.
         * @returns {*} Returns the function if it's native, else `undefined`.
         */
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined;
        }

        module.exports = getNative;


        /***/
}),
/* 42 */
/***/ (function (module, exports) {

        /**
         * This method returns the first argument it receives.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {*} value Any value.
         * @returns {*} Returns `value`.
         * @example
         *
         * var object = { 'a': 1 };
         *
         * console.log(_.identity(object) === object);
         * // => true
         */
        function identity(value) {
          return value;
        }

        module.exports = identity;


        /***/
}),
/* 43 */
/***/ (function (module, exports, __webpack_require__) {

        var SetCache = __webpack_require__(76),
          arrayIncludes = __webpack_require__(81),
          arrayIncludesWith = __webpack_require__(100),
          cacheHas = __webpack_require__(83),
          createSet = __webpack_require__(359),
          setToArray = __webpack_require__(102);

        /** Used as the size to enable large array optimizations. */
        var LARGE_ARRAY_SIZE = 200;

        /**
         * The base implementation of `_.uniqBy` without support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         */
        function baseUniq(array, iteratee, comparator) {
          var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

          if (comparator) {
            isCommon = false;
            includes = arrayIncludesWith;
          }
          else if (length >= LARGE_ARRAY_SIZE) {
            var set = iteratee ? null : createSet(array);
            if (set) {
              return setToArray(set);
            }
            isCommon = false;
            includes = cacheHas;
            seen = new SetCache;
          }
          else {
            seen = iteratee ? [] : result;
          }
          outer:
          while (++index < length) {
            var value = array[index],
              computed = iteratee ? iteratee(value) : value;

            value = (comparator || value !== 0) ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed);
              }
              result.push(value);
            }
            else if (!includes(seen, computed, comparator)) {
              if (seen !== result) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
          return result;
        }

        module.exports = baseUniq;


        /***/
}),
/* 44 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /** @file filter.js
         * @authors:
         *   Jeffrey Wilcke <jeff@ethdev.com>
         *   Marek Kotewicz <marek@ethdev.com>
         *   Marian Oancea <marian@ethdev.com>
         *   Fabian Vogelsteller <fabian@ethdev.com>
         *   Gav Wood <g@ethdev.com>
         *  @date 2014
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var formatters = __webpack_require__(3);
        var utils = __webpack_require__(0);

        /**
        * Converts a given topic to a hex string, but also allows null values.
        *
        * @param {Mixed} value
        * @return {String}
        */
        var toTopic = function (value) {

          if (value === null || typeof value === 'undefined')
            return null;

          value = String(value);

          if (value.indexOf('0x') === 0)
            return value;
          else
            return utils.fromUtf8(value);
        };

        /// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones
        /// @param should be string or object
        /// @returns options string or object
        var getOptions = function (options, type) {
          /*jshint maxcomplexity: 6 */

          if (utils.isString(options)) {
            return options;
          }

          options = options || {};


          switch (type) {
            case 'mc':

              // make sure topics, get converted to hex
              options.topics = options.topics || [];
              options.topics = options.topics.map(function (topic) {
                return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);
              });

              return {
                topics: options.topics,
                from: options.from,
                to: options.to,
                address: options.address,
                fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),
                toBlock: formatters.inputBlockNumberFormatter(options.toBlock)
              };
            case 'vnode':
              return options;
            default:
              //should not be here
              return options;

          }
        };

        /**
        Adds the callback and sets up the methods, to iterate over the results.
        
        @method getLogsAtStart
        @param {Object} self
        @param {function} callback
        */
        var getLogsAtStart = function (self, callback) {
          // call getFilterLogs for the first watch callback start
          if (!utils.isString(self.options)) {
            self.get(function (err, messages) {
              // don't send all the responses to all the watches again... just to self one
              if (err) {
                callback(err);
              }

              if (utils.isArray(messages)) {
                messages.forEach(function (message) {
                  callback(null, message);
                });
              }
            });
          }
        };

        /**
        Adds the callback and sets up the methods, to iterate over the results.
        
        @method pollFilter
        @param {Object} self
        */
        var pollFilter = function (self) {

          var onMessage = function (error, messages) {
            if (error) {
              return self.callbacks.forEach(function (callback) {
                callback(error);
              });
            }

            if (utils.isArray(messages)) {
              messages.forEach(function (message) {
                message = self.formatter ? self.formatter(message) : message;
                self.callbacks.forEach(function (callback) {
                  callback(null, message);
                });
              });
            }
          };

          self.requestManager.startPolling({
            method: self.implementation.poll.call,
            params: [self.filterId],
          }, self.filterId, onMessage, self.stopWatching.bind(self));

        };

        var Filter = function (options, type, requestManager, methods, formatter, callback, filterCreationErrorCallback) {
          var self = this;
          var implementation = {};
          methods.forEach(function (method) {
            method.setRequestManager(requestManager);
            method.attachToObject(implementation);
          });
          this.requestManager = requestManager;
          this.options = getOptions(options, type);
          this.implementation = implementation;
          this.filterId = null;
          this.callbacks = [];
          this.getLogsCallbacks = [];
          this.pollFilters = [];
          this.formatter = formatter;

          this.implementation.newFilter(this.options, function (error, id) {

            if (error) {
              self.callbacks.forEach(function (cb) {
                cb(error);
              });

              if (typeof filterCreationErrorCallback === 'function') {
                filterCreationErrorCallback(error);
              }
            } else {
              self.filterId = id;
              // check if there are get pending callbacks as a consequence
              // of calling get() with filterId unassigned.
              self.getLogsCallbacks.forEach(function (cb) {
                self.get(cb);
              });
              self.getLogsCallbacks = [];

              // get filter logs for the already existing watch calls
              self.callbacks.forEach(function (cb) {
                getLogsAtStart(self, cb);
              });
              if (self.callbacks.length > 0)
                pollFilter(self);

              // start to watch immediately
              if (typeof callback === 'function') {
                return self.watch(callback);
              }
            }
          });

          return this;
        };

        Filter.prototype.watch = function (callback) {
          this.callbacks.push(callback);

          if (this.filterId) {
            getLogsAtStart(this, callback);
            pollFilter(this);
          }

          return this;
        };

        Filter.prototype.stopWatching = function (callback) {
          this.requestManager.stopPolling(this.filterId);
          this.callbacks = [];
          // remove filter async
          if (callback) {
            this.implementation.uninstallFilter(this.filterId, callback);
          } else {
            return this.implementation.uninstallFilter(this.filterId);
          }
        };

        Filter.prototype.get = function (callback) {
          var self = this;
          if (utils.isFunction(callback)) {
            if (this.filterId === null) {
              // If filterId is not set yet, call it back
              // when newFilter() assigns it.
              this.getLogsCallbacks.push(callback);
            } else {
              this.implementation.getLogs(this.filterId, function (err, res) {
                if (err) {
                  callback(err);
                } else {
                  callback(null, res.map(function (log) {
                    return self.formatter ? self.formatter(log) : log;
                  }));
                }
              });
            }
          } else {
            if (this.filterId === null) {
              throw new Error('Filter ID Error: filter().get() can\'t be chained synchronous, please provide a callback for the get() method.');
            }
            var logs = this.implementation.getLogs(this.filterId);
            return logs.map(function (log) {
              return self.formatter ? self.formatter(log) : log;
            });
          }

          return this;
        };

        module.exports = Filter;



        /***/
}),
/* 45 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /** @file watches.js
         * @authors:
         *   Marek Kotewicz <marek@ethdev.com>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var Method = __webpack_require__(28);

        /// @returns an array of objects describing chain3.mc.filter api methods
        var mc = function () {
          var newFilterCall = function (args) {
            var type = args[0];

            switch (type) {
              case 'latest':
                args.shift();
                this.params = 0;
                return 'mc_newBlockFilter';
              case 'pending':
                args.shift();
                this.params = 0;
                return 'mc_newPendingTransactionFilter';
              default:
                return 'mc_newFilter';
            }
          };

          var newFilter = new Method({
            name: 'newFilter',
            call: newFilterCall,
            params: 1
          });

          var uninstallFilter = new Method({
            name: 'uninstallFilter',
            call: 'mc_uninstallFilter',
            params: 1
          });

          var getLogs = new Method({
            name: 'getLogs',
            call: 'mc_getFilterLogs',
            params: 1
          });

          var poll = new Method({
            name: 'poll',
            call: 'mc_getFilterChanges',
            params: 1
          });

          return [
            newFilter,
            uninstallFilter,
            getLogs,
            poll
          ];
        };

        // @returns an array of objects describing chain3.scs.filter api methods
        // @
        var scs = function () {
          var newFilterCall = function (args) {
            var type = args[0];

            switch (type) {
              case 'latest':
                args.shift();
                this.params = 1;
                return 'scs_newBlockFilter';
              case 'pending':
                args.shift();
                this.params = 1;
                return 'scs_newPendingTransactionFilter';
              default:
                return 'scs_newFilter';
            }
          };

          var newFilter = new Method({
            name: 'newFilter',
            call: newFilterCall,
            params: 1
          });

          var uninstallFilter = new Method({
            name: 'uninstallFilter',
            call: 'scs_uninstallFilter',
            params: 1
          });

          var getLogs = new Method({
            name: 'getLogs',
            call: 'scs_getFilterLogs',
            params: 1
          });

          var poll = new Method({
            name: 'poll',
            call: 'scs_getFilterChanges',
            params: 1
          });

          return [
            newFilter,
            uninstallFilter,
            getLogs,
            poll
          ];
        };

        module.exports = {
          mc: mc,
          scs: scs
        };



        /***/
}),
/* 46 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // a duplex stream is just a stream that is both readable and writable.
        // Since JS doesn't have multiple prototypal inheritance, this class
        // prototypally inherits from Readable, and then parasitically from
        // Writable.



        /*<replacement>*/

        var pna = __webpack_require__(94);
        /*</replacement>*/

        /*<replacement>*/
        var objectKeys = Object.keys || function (obj) {
          var keys = [];
          for (var key in obj) {
            keys.push(key);
          } return keys;
        };
        /*</replacement>*/

        module.exports = Duplex;

        /*<replacement>*/
        var util = Object.create(__webpack_require__(71));
        util.inherits = __webpack_require__(57);
        /*</replacement>*/

        var Readable = __webpack_require__(219);
        var Writable = __webpack_require__(131);

        util.inherits(Duplex, Readable);

        {
          // avoid scope creep, the keys array can then be collected
          var keys = objectKeys(Writable.prototype);
          for (var v = 0; v < keys.length; v++) {
            var method = keys[v];
            if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
          }
        }

        function Duplex(options) {
          if (!(this instanceof Duplex)) return new Duplex(options);

          Readable.call(this, options);
          Writable.call(this, options);

          if (options && options.readable === false) this.readable = false;

          if (options && options.writable === false) this.writable = false;

          this.allowHalfOpen = true;
          if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

          this.once('end', onend);
        }

        Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function () {
            return this._writableState.highWaterMark;
          }
        });

        // the no-half-open enforcer
        function onend() {
          // if we allow half-open state, or if the writable side ended,
          // then we're ok.
          if (this.allowHalfOpen || this._writableState.ended) return;

          // no more data can be written.
          // But allow more writes to happen in this tick.
          pna.nextTick(onEndNT, this);
        }

        function onEndNT(self) {
          self.end();
        }

        Object.defineProperty(Duplex.prototype, 'destroyed', {
          get: function () {
            if (this._readableState === undefined || this._writableState === undefined) {
              return false;
            }
            return this._readableState.destroyed && this._writableState.destroyed;
          },
          set: function (value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (this._readableState === undefined || this._writableState === undefined) {
              return;
            }

            // backward compatibility, the user is explicitly
            // managing destroyed
            this._readableState.destroyed = value;
            this._writableState.destroyed = value;
          }
        });

        Duplex.prototype._destroy = function (err, cb) {
          this.push(null);
          this.end();

          pna.nextTick(cb, err);
        };

        /***/
}),
/* 47 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
           @file config.js
           @MOAC lab
           @date 2018
         */

        /**
         * Utils
         * 
         * @module utils
         */

        /**
         * Utility functions
         * 
         * @class [utils] config
         * @constructor
         */


        /// required to define MC_BIGNUMBER_ROUNDING_MODE
        var BigNumber = __webpack_require__(59);

        var MC_UNITS = [
          'sha',
          'ksha',
          'Msha',
          'Gsha',
          'femtomc',
          'picomc',
          'nanomc',
          'micromc',
          'millimc',
          'nano',
          'micro',
          'milli',
          'mc',
          'grand',
          'Mmc',
          'Gmc',
          'Tmc',
          'Pmc',
          'Emc',
          'Zmc',
          'Ymc',
          'Nmc',
          'Dmc',
          'Vmc',
          'Umc'
        ];

        // MC_POLLING_TIMEOUT: 1000/2,
        // Added defaultRecordIndex and defaultRecordSize
        // for scs exchange info extract.
        module.exports = {
          MC_PADDING: 32,
          MC_SIGNATURE_LENGTH: 4,
          MC_UNITS: MC_UNITS,
          MC_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },
          MC_POLLING_TIMEOUT: 500,
          defaultBlock: 'latest',
          defaultSCSId: undefined,
          defaultAccount: undefined,
          defaultRecordIndex: 0,
          defaultRecordSize: 20
        };



        /***/
}),
/* 48 */
/***/ (function (module, exports, __webpack_require__) {

        var root = __webpack_require__(8);

        /** Built-in value references. */
        var Symbol = root.Symbol;

        module.exports = Symbol;


        /***/
}),
/* 49 */
/***/ (function (module, exports) {

        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */
        function baseUnary(func) {
          return function (value) {
            return func(value);
          };
        }

        module.exports = baseUnary;


        /***/
}),
/* 50 */
/***/ (function (module, exports) {

        /**
         * A faster alternative to `Function#apply`, this function invokes `func`
         * with the `this` binding of `thisArg` and the arguments of `args`.
         *
         * @private
         * @param {Function} func The function to invoke.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} args The arguments to invoke `func` with.
         * @returns {*} Returns the result of `func`.
         */
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0: return func.call(thisArg);
            case 1: return func.call(thisArg, args[0]);
            case 2: return func.call(thisArg, args[0], args[1]);
            case 3: return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }

        module.exports = apply;


        /***/
}),
/* 51 */
/***/ (function (module, exports) {

        /**
         * A specialized version of `_.filter` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function arrayFilter(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }

        module.exports = arrayFilter;


        /***/
}),
/* 52 */
/***/ (function (module, exports, __webpack_require__) {

        var DataView = __webpack_require__(301),
          Map = __webpack_require__(98),
          Promise = __webpack_require__(302),
          Set = __webpack_require__(157),
          WeakMap = __webpack_require__(158),
          baseGetTag = __webpack_require__(39),
          toSource = __webpack_require__(140);

        /** `Object#toString` result references. */
        var mapTag = '[object Map]',
          objectTag = '[object Object]',
          promiseTag = '[object Promise]',
          setTag = '[object Set]',
          weakMapTag = '[object WeakMap]';

        var dataViewTag = '[object DataView]';

        /** Used to detect maps, sets, and weakmaps. */
        var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);

        /**
         * Gets the `toStringTag` of `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        var getTag = baseGetTag;

        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
          (Map && getTag(new Map) != mapTag) ||
          (Promise && getTag(Promise.resolve()) != promiseTag) ||
          (Set && getTag(new Set) != setTag) ||
          (WeakMap && getTag(new WeakMap) != weakMapTag)) {
          getTag = function (value) {
            var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : '';

            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString: return dataViewTag;
                case mapCtorString: return mapTag;
                case promiseCtorString: return promiseTag;
                case setCtorString: return setTag;
                case weakMapCtorString: return weakMapTag;
              }
            }
            return result;
          };
        }

        module.exports = getTag;


        /***/
}),
/* 53 */
/***/ (function (module, exports, __webpack_require__) {

        var isObject = __webpack_require__(9);

        /** Built-in value references. */
        var objectCreate = Object.create;

        /**
         * The base implementation of `_.create` without support for assigning
         * properties to the created object.
         *
         * @private
         * @param {Object} proto The object to inherit from.
         * @returns {Object} Returns the new object.
         */
        var baseCreate = (function () {
          function object() { }
          return function (proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object;
            object.prototype = undefined;
            return result;
          };
        }());

        module.exports = baseCreate;


        /***/
}),
/* 54 */
/***/ (function (module, exports, __webpack_require__) {

        var baseRest = __webpack_require__(2),
          isIterateeCall = __webpack_require__(62);

        /**
         * Creates a function like `_.assign`.
         *
         * @private
         * @param {Function} assigner The function to assign values.
         * @returns {Function} Returns the new assigner function.
         */
        function createAssigner(assigner) {
          return baseRest(function (object, sources) {
            var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;

            customizer = (assigner.length > 3 && typeof customizer == 'function')
              ? (length-- , customizer)
              : undefined;

            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined : customizer;
              length = 1;
            }
            object = Object(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }

        module.exports = createAssigner;


        /***/
}),
/* 55 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFor = __webpack_require__(125),
          keys = __webpack_require__(15);

        /**
         * The base implementation of `_.forOwn` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwn(object, iteratee) {
          return object && baseFor(object, iteratee, keys);
        }

        module.exports = baseForOwn;


        /***/
}),
/* 56 */
/***/ (function (module, exports, __webpack_require__) {

        var identity = __webpack_require__(42);

        /**
         * Casts `value` to `identity` if it's not a function.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {Function} Returns cast function.
         */
        function castFunction(value) {
          return typeof value == 'function' ? value : identity;
        }

        module.exports = castFunction;


        /***/
}),
/* 57 */
/***/ (function (module, exports) {

        if (typeof Object.create === 'function') {
          // implementation from standard node.js 'util' module
          module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              })
            }
          };
        } else {
          // old school shim for old browsers
          module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor
              var TempCtor = function () { }
              TempCtor.prototype = superCtor.prototype
              ctor.prototype = new TempCtor()
              ctor.prototype.constructor = ctor
            }
          }
        }


        /***/
}),
/* 58 */
/***/ (function (module, exports, __webpack_require__) {

        var Buffer = __webpack_require__(10).Buffer

        // prototype class for hash functions
        function Hash(blockSize, finalSize) {
          this._block = Buffer.alloc(blockSize)
          this._finalSize = finalSize
          this._blockSize = blockSize
          this._len = 0
        }

        Hash.prototype.update = function (data, enc) {
          if (typeof data === 'string') {
            enc = enc || 'utf8'
            data = Buffer.from(data, enc)
          }

          var block = this._block
          var blockSize = this._blockSize
          var length = data.length
          var accum = this._len

          for (var offset = 0; offset < length;) {
            var assigned = accum % blockSize
            var remainder = Math.min(length - offset, blockSize - assigned)

            for (var i = 0; i < remainder; i++) {
              block[assigned + i] = data[offset + i]
            }

            accum += remainder
            offset += remainder

            if ((accum % blockSize) === 0) {
              this._update(block)
            }
          }

          this._len += length
          return this
        }

        Hash.prototype.digest = function (enc) {
          var rem = this._len % this._blockSize

          this._block[rem] = 0x80

          // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
          // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
          this._block.fill(0, rem + 1)

          if (rem >= this._finalSize) {
            this._update(this._block)
            this._block.fill(0)
          }

          var bits = this._len * 8

          // uint32
          if (bits <= 0xffffffff) {
            this._block.writeUInt32BE(bits, this._blockSize - 4)

            // uint64
          } else {
            var lowBits = (bits & 0xffffffff) >>> 0
            var highBits = (bits - lowBits) / 0x100000000

            this._block.writeUInt32BE(highBits, this._blockSize - 8)
            this._block.writeUInt32BE(lowBits, this._blockSize - 4)
          }

          this._update(this._block)
          var hash = this._hash()

          return enc ? hash.toString(enc) : hash
        }

        Hash.prototype._update = function () {
          throw new Error('_update must be implemented by subclass')
        }

        module.exports = Hash


        /***/
}),
/* 59 */
/***/ (function (module, exports, __webpack_require__) {

        var __WEBPACK_AMD_DEFINE_RESULT__;; (function (globalObject) {
          'use strict';

          /*
           *      bignumber.js v8.1.1
           *      A JavaScript library for arbitrary-precision arithmetic.
           *      https://github.com/MikeMcl/bignumber.js
           *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>
           *      MIT Licensed.
           *
           *      BigNumber.prototype methods     |  BigNumber methods
           *                                      |
           *      absoluteValue            abs    |  clone
           *      comparedTo                      |  config               set
           *      decimalPlaces            dp     |      DECIMAL_PLACES
           *      dividedBy                div    |      ROUNDING_MODE
           *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
           *      exponentiatedBy          pow    |      RANGE
           *      integerValue                    |      CRYPTO
           *      isEqualTo                eq     |      MODULO_MODE
           *      isFinite                        |      POW_PRECISION
           *      isGreaterThan            gt     |      FORMAT
           *      isGreaterThanOrEqualTo   gte    |      ALPHABET
           *      isInteger                       |  isBigNumber
           *      isLessThan               lt     |  maximum              max
           *      isLessThanOrEqualTo      lte    |  minimum              min
           *      isNaN                           |  random
           *      isNegative                      |  sum
           *      isPositive                      |
           *      isZero                          |
           *      minus                           |
           *      modulo                   mod    |
           *      multipliedBy             times  |
           *      negated                         |
           *      plus                            |
           *      precision                sd     |
           *      shiftedBy                       |
           *      squareRoot               sqrt   |
           *      toExponential                   |
           *      toFixed                         |
           *      toFormat                        |
           *      toFraction                      |
           *      toJSON                          |
           *      toNumber                        |
           *      toPrecision                     |
           *      toString                        |
           *      valueOf                         |
           *
           */


          var BigNumber,
            isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
            hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',

            mathceil = Math.ceil,
            mathfloor = Math.floor,

            bignumberError = '[BigNumber Error] ',
            tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

            BASE = 1e14,
            LOG_BASE = 14,
            MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
            // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
            POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
            SQRT_BASE = 1e7,

            // EDITABLE
            // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
            // the arguments to toExponential, toFixed, toFormat, and toPrecision.
            MAX = 1E9;                                   // 0 to MAX_INT32


          /*
           * Create and return a BigNumber constructor.
           */
          function clone(configObject) {
            var div, convertBase, parseNumeric,
              P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
              ONE = new BigNumber(1),


              //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


              // The default values below must be integers within the inclusive ranges stated.
              // The values can also be changed at run-time using BigNumber.set.

              // The maximum number of decimal places for operations involving division.
              DECIMAL_PLACES = 20,                     // 0 to MAX

              // The rounding mode used when rounding to the above decimal places, and when using
              // toExponential, toFixed, toFormat and toPrecision, and round (default value).
              // UP         0 Away from zero.
              // DOWN       1 Towards zero.
              // CEIL       2 Towards +Infinity.
              // FLOOR      3 Towards -Infinity.
              // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
              // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
              // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
              // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
              // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
              ROUNDING_MODE = 4,                       // 0 to 8

              // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

              // The exponent value at and beneath which toString returns exponential notation.
              // Number type: -7
              TO_EXP_NEG = -7,                         // 0 to -MAX

              // The exponent value at and above which toString returns exponential notation.
              // Number type: 21
              TO_EXP_POS = 21,                         // 0 to MAX

              // RANGE : [MIN_EXP, MAX_EXP]

              // The minimum exponent value, beneath which underflow to zero occurs.
              // Number type: -324  (5e-324)
              MIN_EXP = -1e7,                          // -1 to -MAX

              // The maximum exponent value, above which overflow to Infinity occurs.
              // Number type:  308  (1.7976931348623157e+308)
              // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
              MAX_EXP = 1e7,                           // 1 to MAX

              // Whether to use cryptographically-secure random number generation, if available.
              CRYPTO = false,                          // true or false

              // The modulo mode used when calculating the modulus: a mod n.
              // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
              // The remainder (r) is calculated as: r = a - n * q.
              //
              // UP        0 The remainder is positive if the dividend is negative, else is negative.
              // DOWN      1 The remainder has the same sign as the dividend.
              //             This modulo mode is commonly known as 'truncated division' and is
              //             equivalent to (a % n) in JavaScript.
              // FLOOR     3 The remainder has the same sign as the divisor (Python %).
              // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
              // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
              //             The remainder is always positive.
              //
              // The truncated division, floored division, Euclidian division and IEEE 754 remainder
              // modes are commonly used for the modulus operation.
              // Although the other rounding modes can also be used, they may not give useful results.
              MODULO_MODE = 1,                         // 0 to 9

              // The maximum number of significant digits of the result of the exponentiatedBy operation.
              // If POW_PRECISION is 0, there will be unlimited significant digits.
              POW_PRECISION = 0,                    // 0 to MAX

              // The format specification used by the BigNumber.prototype.toFormat method.
              FORMAT = {
                prefix: '',
                groupSize: 3,
                secondaryGroupSize: 0,
                groupSeparator: ',',
                decimalSeparator: '.',
                fractionGroupSize: 0,
                fractionGroupSeparator: '\xA0',      // non-breaking space
                suffix: ''
              },

              // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
              // '-', '.', whitespace, or repeated character.
              // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
              ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';


            //------------------------------------------------------------------------------------------


            // CONSTRUCTOR


            /*
             * The BigNumber constructor and exported function.
             * Create and return a new instance of a BigNumber object.
             *
             * v {number|string|BigNumber} A numeric value.
             * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
             */
            function BigNumber(v, b) {
              var alphabet, c, caseChanged, e, i, isNum, len, str,
                x = this;

              // Enable constructor call without `new`.
              if (!(x instanceof BigNumber)) return new BigNumber(v, b);

              if (b == null) {

                if (v && v._isBigNumber === true) {
                  x.s = v.s;

                  if (!v.c || v.e > MAX_EXP) {
                    x.c = x.e = null;
                  } else if (v.e < MIN_EXP) {
                    x.c = [x.e = 0];
                  } else {
                    x.e = v.e;
                    x.c = v.c.slice();
                  }

                  return;
                }

                if ((isNum = typeof v == 'number') && v * 0 == 0) {

                  // Use `1 / n` to handle minus zero also.
                  x.s = 1 / v < 0 ? (v = -v, -1) : 1;

                  // Fast path for integers, where n < 2147483648 (2**31).
                  if (v === ~~v) {
                    for (e = 0, i = v; i >= 10; i /= 10, e++);

                    if (e > MAX_EXP) {
                      x.c = x.e = null;
                    } else {
                      x.e = e;
                      x.c = [v];
                    }

                    return;
                  }

                  str = String(v);
                } else {

                  if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

                  x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
                }

                // Decimal point?
                if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

                // Exponential form?
                if ((i = str.search(/e/i)) > 0) {

                  // Determine exponent.
                  if (e < 0) e = i;
                  e += +str.slice(i + 1);
                  str = str.substring(0, i);
                } else if (e < 0) {

                  // Integer.
                  e = str.length;
                }

              } else {

                // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
                intCheck(b, 2, ALPHABET.length, 'Base');

                // Allow exponential notation to be used with base 10 argument, while
                // also rounding to DECIMAL_PLACES as with other bases.
                if (b == 10) {
                  x = new BigNumber(v);
                  return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                }

                str = String(v);

                if (isNum = typeof v == 'number') {

                  // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                  if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

                  x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

                  // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                  if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
                    throw Error
                      (tooManyDigits + v);
                  }
                } else {
                  x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                }

                alphabet = ALPHABET.slice(0, b);
                e = i = 0;

                // Check that str is a valid base b number.
                // Don't use RegExp, so alphabet can contain special characters.
                for (len = str.length; i < len; i++) {
                  if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                    if (c == '.') {

                      // If '.' is not the first character and it has not be found before.
                      if (i > e) {
                        e = len;
                        continue;
                      }
                    } else if (!caseChanged) {

                      // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                      if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                        str == str.toLowerCase() && (str = str.toUpperCase())) {
                        caseChanged = true;
                        i = -1;
                        e = 0;
                        continue;
                      }
                    }

                    return parseNumeric(x, String(v), isNum, b);
                  }
                }

                // Prevent later check for length on converted number.
                isNum = false;
                str = convertBase(str, b, 10, x.s);

                // Decimal point?
                if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
                else e = str.length;
              }

              // Determine leading zeros.
              for (i = 0; str.charCodeAt(i) === 48; i++);

              // Determine trailing zeros.
              for (len = str.length; str.charCodeAt(--len) === 48;);

              if (str = str.slice(i, ++len)) {
                len -= i;

                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                if (isNum && BigNumber.DEBUG &&
                  len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
                  throw Error
                    (tooManyDigits + (x.s * v));
                }

                // Overflow?
                if ((e = e - i - 1) > MAX_EXP) {

                  // Infinity.
                  x.c = x.e = null;

                  // Underflow?
                } else if (e < MIN_EXP) {

                  // Zero.
                  x.c = [x.e = 0];
                } else {
                  x.e = e;
                  x.c = [];

                  // Transform base

                  // e is the base 10 exponent.
                  // i is where to slice str to get the first element of the coefficient array.
                  i = (e + 1) % LOG_BASE;
                  if (e < 0) i += LOG_BASE;  // i < 1

                  if (i < len) {
                    if (i) x.c.push(+str.slice(0, i));

                    for (len -= LOG_BASE; i < len;) {
                      x.c.push(+str.slice(i, i += LOG_BASE));
                    }

                    i = LOG_BASE - (str = str.slice(i)).length;
                  } else {
                    i -= len;
                  }

                  for (; i--; str += '0');
                  x.c.push(+str);
                }
              } else {

                // Zero.
                x.c = [x.e = 0];
              }
            }


            // CONSTRUCTOR PROPERTIES


            BigNumber.clone = clone;

            BigNumber.ROUND_UP = 0;
            BigNumber.ROUND_DOWN = 1;
            BigNumber.ROUND_CEIL = 2;
            BigNumber.ROUND_FLOOR = 3;
            BigNumber.ROUND_HALF_UP = 4;
            BigNumber.ROUND_HALF_DOWN = 5;
            BigNumber.ROUND_HALF_EVEN = 6;
            BigNumber.ROUND_HALF_CEIL = 7;
            BigNumber.ROUND_HALF_FLOOR = 8;
            BigNumber.EUCLID = 9;


            /*
             * Configure infrequently-changing library-wide settings.
             *
             * Accept an object with the following optional properties (if the value of a property is
             * a number, it must be an integer within the inclusive range stated):
             *
             *   DECIMAL_PLACES   {number}           0 to MAX
             *   ROUNDING_MODE    {number}           0 to 8
             *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
             *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
             *   CRYPTO           {boolean}          true or false
             *   MODULO_MODE      {number}           0 to 9
             *   POW_PRECISION       {number}           0 to MAX
             *   ALPHABET         {string}           A string of two or more unique characters which does
             *                                       not contain '.'.
             *   FORMAT           {object}           An object with some of the following properties:
             *     prefix                 {string}
             *     groupSize              {number}
             *     secondaryGroupSize     {number}
             *     groupSeparator         {string}
             *     decimalSeparator       {string}
             *     fractionGroupSize      {number}
             *     fractionGroupSeparator {string}
             *     suffix                 {string}
             *
             * (The values assigned to the above FORMAT object properties are not checked for validity.)
             *
             * E.g.
             * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
             *
             * Ignore properties/parameters set to null or undefined, except for ALPHABET.
             *
             * Return an object with the properties current values.
             */
            BigNumber.config = BigNumber.set = function (obj) {
              var p, v;

              if (obj != null) {

                if (typeof obj == 'object') {

                  // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                  // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
                  if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
                    v = obj[p];
                    intCheck(v, 0, MAX, p);
                    DECIMAL_PLACES = v;
                  }

                  // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                  // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
                  if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
                    v = obj[p];
                    intCheck(v, 0, 8, p);
                    ROUNDING_MODE = v;
                  }

                  // EXPONENTIAL_AT {number|number[]}
                  // Integer, -MAX to MAX inclusive or
                  // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                  // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
                  if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
                    v = obj[p];
                    if (v && v.pop) {
                      intCheck(v[0], -MAX, 0, p);
                      intCheck(v[1], 0, MAX, p);
                      TO_EXP_NEG = v[0];
                      TO_EXP_POS = v[1];
                    } else {
                      intCheck(v, -MAX, MAX, p);
                      TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                    }
                  }

                  // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                  // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                  // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
                  if (obj.hasOwnProperty(p = 'RANGE')) {
                    v = obj[p];
                    if (v && v.pop) {
                      intCheck(v[0], -MAX, -1, p);
                      intCheck(v[1], 1, MAX, p);
                      MIN_EXP = v[0];
                      MAX_EXP = v[1];
                    } else {
                      intCheck(v, -MAX, MAX, p);
                      if (v) {
                        MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                      } else {
                        throw Error
                          (bignumberError + p + ' cannot be zero: ' + v);
                      }
                    }
                  }

                  // CRYPTO {boolean} true or false.
                  // '[BigNumber Error] CRYPTO not true or false: {v}'
                  // '[BigNumber Error] crypto unavailable'
                  if (obj.hasOwnProperty(p = 'CRYPTO')) {
                    v = obj[p];
                    if (v === !!v) {
                      if (v) {
                        if (typeof crypto != 'undefined' && crypto &&
                          (crypto.getRandomValues || crypto.randomBytes)) {
                          CRYPTO = v;
                        } else {
                          CRYPTO = !v;
                          throw Error
                            (bignumberError + 'crypto unavailable');
                        }
                      } else {
                        CRYPTO = v;
                      }
                    } else {
                      throw Error
                        (bignumberError + p + ' not true or false: ' + v);
                    }
                  }

                  // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                  // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
                  if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
                    v = obj[p];
                    intCheck(v, 0, 9, p);
                    MODULO_MODE = v;
                  }

                  // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                  // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
                  if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
                    v = obj[p];
                    intCheck(v, 0, MAX, p);
                    POW_PRECISION = v;
                  }

                  // FORMAT {object}
                  // '[BigNumber Error] FORMAT not an object: {v}'
                  if (obj.hasOwnProperty(p = 'FORMAT')) {
                    v = obj[p];
                    if (typeof v == 'object') FORMAT = v;
                    else throw Error
                      (bignumberError + p + ' not an object: ' + v);
                  }

                  // ALPHABET {string}
                  // '[BigNumber Error] ALPHABET invalid: {v}'
                  if (obj.hasOwnProperty(p = 'ALPHABET')) {
                    v = obj[p];

                    // Disallow if only one character,
                    // or if it contains '+', '-', '.', whitespace, or a repeated character.
                    if (typeof v == 'string' && !/^.$|[+-.\s]|(.).*\1/.test(v)) {
                      ALPHABET = v;
                    } else {
                      throw Error
                        (bignumberError + p + ' invalid: ' + v);
                    }
                  }

                } else {

                  // '[BigNumber Error] Object expected: {v}'
                  throw Error
                    (bignumberError + 'Object expected: ' + obj);
                }
              }

              return {
                DECIMAL_PLACES: DECIMAL_PLACES,
                ROUNDING_MODE: ROUNDING_MODE,
                EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
                RANGE: [MIN_EXP, MAX_EXP],
                CRYPTO: CRYPTO,
                MODULO_MODE: MODULO_MODE,
                POW_PRECISION: POW_PRECISION,
                FORMAT: FORMAT,
                ALPHABET: ALPHABET
              };
            };


            /*
             * Return true if v is a BigNumber instance, otherwise return false.
             *
             * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
             *
             * v {any}
             *
             * '[BigNumber Error] Invalid BigNumber: {v}'
             */
            BigNumber.isBigNumber = function (v) {
              if (!v || v._isBigNumber !== true) return false;
              if (!BigNumber.DEBUG) return true;

              var i, n,
                c = v.c,
                e = v.e,
                s = v.s;

              out: if ({}.toString.call(c) == '[object Array]') {

                if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

                  // If the first element is zero, the BigNumber value must be zero.
                  if (c[0] === 0) {
                    if (e === 0 && c.length === 1) return true;
                    break out;
                  }

                  // Calculate number of digits that c[0] should have, based on the exponent.
                  i = (e + 1) % LOG_BASE;
                  if (i < 1) i += LOG_BASE;

                  // Calculate number of digits of c[0].
                  //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
                  if (String(c[0]).length == i) {

                    for (i = 0; i < c.length; i++) {
                      n = c[i];
                      if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                    }

                    // Last element cannot be zero, unless it is the only element.
                    if (n !== 0) return true;
                  }
                }

                // Infinity/NaN
              } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
                return true;
              }

              throw Error
                (bignumberError + 'Invalid BigNumber: ' + v);
            };


            /*
             * Return a new BigNumber whose value is the maximum of the arguments.
             *
             * arguments {number|string|BigNumber}
             */
            BigNumber.maximum = BigNumber.max = function () {
              return maxOrMin(arguments, P.lt);
            };


            /*
             * Return a new BigNumber whose value is the minimum of the arguments.
             *
             * arguments {number|string|BigNumber}
             */
            BigNumber.minimum = BigNumber.min = function () {
              return maxOrMin(arguments, P.gt);
            };


            /*
             * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
             * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
             * zeros are produced).
             *
             * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
             *
             * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
             * '[BigNumber Error] crypto unavailable'
             */
            BigNumber.random = (function () {
              var pow2_53 = 0x20000000000000;

              // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
              // Check if Math.random() produces more than 32 bits of randomness.
              // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
              // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
              var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
                ? function () { return mathfloor(Math.random() * pow2_53); }
                : function () {
                  return ((Math.random() * 0x40000000 | 0) * 0x800000) +
                    (Math.random() * 0x800000 | 0);
                };

              return function (dp) {
                var a, b, e, k, v,
                  i = 0,
                  c = [],
                  rand = new BigNumber(ONE);

                if (dp == null) dp = DECIMAL_PLACES;
                else intCheck(dp, 0, MAX);

                k = mathceil(dp / LOG_BASE);

                if (CRYPTO) {

                  // Browsers supporting crypto.getRandomValues.
                  if (crypto.getRandomValues) {

                    a = crypto.getRandomValues(new Uint32Array(k *= 2));

                    for (; i < k;) {

                      // 53 bits:
                      // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                      // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                      // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                      //                                     11111 11111111 11111111
                      // 0x20000 is 2^21.
                      v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                      // Rejection sampling:
                      // 0 <= v < 9007199254740992
                      // Probability that v >= 9e15, is
                      // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                      if (v >= 9e15) {
                        b = crypto.getRandomValues(new Uint32Array(2));
                        a[i] = b[0];
                        a[i + 1] = b[1];
                      } else {

                        // 0 <= v <= 8999999999999999
                        // 0 <= (v % 1e14) <= 99999999999999
                        c.push(v % 1e14);
                        i += 2;
                      }
                    }
                    i = k / 2;

                    // Node.js supporting crypto.randomBytes.
                  } else if (crypto.randomBytes) {

                    // buffer
                    a = crypto.randomBytes(k *= 7);

                    for (; i < k;) {

                      // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                      // 0x100000000 is 2^32, 0x1000000 is 2^24
                      // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                      // 0 <= v < 9007199254740992
                      v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                        (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                        (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

                      if (v >= 9e15) {
                        crypto.randomBytes(7).copy(a, i);
                      } else {

                        // 0 <= (v % 1e14) <= 99999999999999
                        c.push(v % 1e14);
                        i += 7;
                      }
                    }
                    i = k / 7;
                  } else {
                    CRYPTO = false;
                    throw Error
                      (bignumberError + 'crypto unavailable');
                  }
                }

                // Use Math.random.
                if (!CRYPTO) {

                  for (; i < k;) {
                    v = random53bitInt();
                    if (v < 9e15) c[i++] = v % 1e14;
                  }
                }

                k = c[--i];
                dp %= LOG_BASE;

                // Convert trailing digits to zeros according to dp.
                if (k && dp) {
                  v = POWS_TEN[LOG_BASE - dp];
                  c[i] = mathfloor(k / v) * v;
                }

                // Remove trailing elements which are zero.
                for (; c[i] === 0; c.pop(), i--);

                // Zero?
                if (i < 0) {
                  c = [e = 0];
                } else {

                  // Remove leading elements which are zero and adjust exponent accordingly.
                  for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

                  // Count the digits of the first element of c to determine leading zeros, and...
                  for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

                  // adjust the exponent accordingly.
                  if (i < LOG_BASE) e -= LOG_BASE - i;
                }

                rand.e = e;
                rand.c = c;
                return rand;
              };
            })();


            /*
             * Return a BigNumber whose value is the sum of the arguments.
             *
             * arguments {number|string|BigNumber}
             */
            BigNumber.sum = function () {
              var i = 1,
                args = arguments,
                sum = new BigNumber(args[0]);
              for (; i < args.length;) sum = sum.plus(args[i++]);
              return sum;
            };


            // PRIVATE FUNCTIONS


            // Called by BigNumber and BigNumber.prototype.toString.
            convertBase = (function () {
              var decimal = '0123456789';

              /*
               * Convert string of baseIn to an array of numbers of baseOut.
               * Eg. toBaseOut('255', 10, 16) returns [15, 15].
               * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
               */
              function toBaseOut(str, baseIn, baseOut, alphabet) {
                var j,
                  arr = [0],
                  arrL,
                  i = 0,
                  len = str.length;

                for (; i < len;) {
                  for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

                  arr[0] += alphabet.indexOf(str.charAt(i++));

                  for (j = 0; j < arr.length; j++) {

                    if (arr[j] > baseOut - 1) {
                      if (arr[j + 1] == null) arr[j + 1] = 0;
                      arr[j + 1] += arr[j] / baseOut | 0;
                      arr[j] %= baseOut;
                    }
                  }
                }

                return arr.reverse();
              }

              // Convert a numeric string of baseIn to a numeric string of baseOut.
              // If the caller is toString, we are converting from base 10 to baseOut.
              // If the caller is BigNumber, we are converting from baseIn to base 10.
              return function (str, baseIn, baseOut, sign, callerIsToString) {
                var alphabet, d, e, k, r, x, xc, y,
                  i = str.indexOf('.'),
                  dp = DECIMAL_PLACES,
                  rm = ROUNDING_MODE;

                // Non-integer.
                if (i >= 0) {
                  k = POW_PRECISION;

                  // Unlimited precision.
                  POW_PRECISION = 0;
                  str = str.replace('.', '');
                  y = new BigNumber(baseIn);
                  x = y.pow(str.length - i);
                  POW_PRECISION = k;

                  // Convert str as if an integer, then restore the fraction part by dividing the
                  // result by its base raised to a power.

                  y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
                    10, baseOut, decimal);
                  y.e = y.c.length;
                }

                // Convert the number as integer.

                xc = toBaseOut(str, baseIn, baseOut, callerIsToString
                  ? (alphabet = ALPHABET, decimal)
                  : (alphabet = decimal, ALPHABET));

                // xc now represents str as an integer and converted to baseOut. e is the exponent.
                e = k = xc.length;

                // Remove trailing zeros.
                for (; xc[--k] == 0; xc.pop());

                // Zero?
                if (!xc[0]) return alphabet.charAt(0);

                // Does str represent an integer? If so, no need for the division.
                if (i < 0) {
                  --e;
                } else {
                  x.c = xc;
                  x.e = e;

                  // The sign is needed for correct rounding.
                  x.s = sign;
                  x = div(x, y, dp, rm, baseOut);
                  xc = x.c;
                  r = x.r;
                  e = x.e;
                }

                // xc now represents str converted to baseOut.

                // THe index of the rounding digit.
                d = e + dp + 1;

                // The rounding digit: the digit to the right of the digit that may be rounded up.
                i = xc[d];

                // Look at the rounding digits and mode to determine whether to round up.

                k = baseOut / 2;
                r = r || d < 0 || xc[d + 1] != null;

                r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                  : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                    rm == (x.s < 0 ? 8 : 7));

                // If the index of the rounding digit is not greater than zero, or xc represents
                // zero, then the result of the base conversion is zero or, if rounding up, a value
                // such as 0.00001.
                if (d < 1 || !xc[0]) {

                  // 1^-dp or 0
                  str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
                } else {

                  // Truncate xc to the required number of decimal places.
                  xc.length = d;

                  // Round up?
                  if (r) {

                    // Rounding up may mean the previous digit has to be rounded up and so on.
                    for (--baseOut; ++xc[--d] > baseOut;) {
                      xc[d] = 0;

                      if (!d) {
                        ++e;
                        xc = [1].concat(xc);
                      }
                    }
                  }

                  // Determine trailing zeros.
                  for (k = xc.length; !xc[--k];);

                  // E.g. [4, 11, 15] becomes 4bf.
                  for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

                  // Add leading zeros, decimal point and trailing zeros as required.
                  str = toFixedPoint(str, e, alphabet.charAt(0));
                }

                // The caller will add the sign.
                return str;
              };
            })();


            // Perform division in the specified base. Called by div and convertBase.
            div = (function () {

              // Assume non-zero x and k.
              function multiply(x, k, base) {
                var m, temp, xlo, xhi,
                  carry = 0,
                  i = x.length,
                  klo = k % SQRT_BASE,
                  khi = k / SQRT_BASE | 0;

                for (x = x.slice(); i--;) {
                  xlo = x[i] % SQRT_BASE;
                  xhi = x[i] / SQRT_BASE | 0;
                  m = khi * xlo + xhi * klo;
                  temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
                  carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                  x[i] = temp % base;
                }

                if (carry) x = [carry].concat(x);

                return x;
              }

              function compare(a, b, aL, bL) {
                var i, cmp;

                if (aL != bL) {
                  cmp = aL > bL ? 1 : -1;
                } else {

                  for (i = cmp = 0; i < aL; i++) {

                    if (a[i] != b[i]) {
                      cmp = a[i] > b[i] ? 1 : -1;
                      break;
                    }
                  }
                }

                return cmp;
              }

              function subtract(a, b, aL, base) {
                var i = 0;

                // Subtract b from a.
                for (; aL--;) {
                  a[aL] -= i;
                  i = a[aL] < b[aL] ? 1 : 0;
                  a[aL] = i * base + a[aL] - b[aL];
                }

                // Remove leading zeros.
                for (; !a[0] && a.length > 1; a.splice(0, 1));
              }

              // x: dividend, y: divisor.
              return function (x, y, dp, rm, base) {
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
                  yL, yz,
                  s = x.s == y.s ? 1 : -1,
                  xc = x.c,
                  yc = y.c;

                // Either NaN, Infinity or 0?
                if (!xc || !xc[0] || !yc || !yc[0]) {

                  return new BigNumber(

                    // Return NaN if either NaN, or both Infinity or 0.
                    !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

                      // Return Â±0 if x is Â±0 or y is Â±Infinity, or return Â±Infinity as y is Â±0.
                      xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                  );
                }

                q = new BigNumber(s);
                qc = q.c = [];
                e = x.e - y.e;
                s = dp + e + 1;

                if (!base) {
                  base = BASE;
                  e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                  s = s / LOG_BASE | 0;
                }

                // Result exponent may be one less then the current value of e.
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                for (i = 0; yc[i] == (xc[i] || 0); i++);

                if (yc[i] > (xc[i] || 0)) e--;

                if (s < 0) {
                  qc.push(1);
                  more = true;
                } else {
                  xL = xc.length;
                  yL = yc.length;
                  i = 0;
                  s += 2;

                  // Normalise xc and yc so highest order digit of yc is >= base / 2.

                  n = mathfloor(base / (yc[0] + 1));

                  // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
                  // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
                  if (n > 1) {
                    yc = multiply(yc, n, base);
                    xc = multiply(xc, n, base);
                    yL = yc.length;
                    xL = xc.length;
                  }

                  xi = yL;
                  rem = xc.slice(0, yL);
                  remL = rem.length;

                  // Add zeros to make remainder as long as divisor.
                  for (; remL < yL; rem[remL++] = 0);
                  yz = yc.slice();
                  yz = [0].concat(yz);
                  yc0 = yc[0];
                  if (yc[1] >= base / 2) yc0++;
                  // Not necessary, but to prevent trial digit n > base, when using base 3.
                  // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

                  do {
                    n = 0;

                    // Compare divisor and remainder.
                    cmp = compare(yc, rem, yL, remL);

                    // If divisor < remainder.
                    if (cmp < 0) {

                      // Calculate trial digit, n.

                      rem0 = rem[0];
                      if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                      // n is how many times the divisor goes into the current remainder.
                      n = mathfloor(rem0 / yc0);

                      //  Algorithm:
                      //  product = divisor multiplied by trial digit (n).
                      //  Compare product and remainder.
                      //  If product is greater than remainder:
                      //    Subtract divisor from product, decrement trial digit.
                      //  Subtract product from remainder.
                      //  If product was less than remainder at the last compare:
                      //    Compare new remainder and divisor.
                      //    If remainder is greater than divisor:
                      //      Subtract divisor from remainder, increment trial digit.

                      if (n > 1) {

                        // n may be > base only when base is 3.
                        if (n >= base) n = base - 1;

                        // product = divisor * trial digit.
                        prod = multiply(yc, n, base);
                        prodL = prod.length;
                        remL = rem.length;

                        // Compare product and remainder.
                        // If product > remainder then trial digit n too high.
                        // n is 1 too high about 5% of the time, and is not known to have
                        // ever been more than 1 too high.
                        while (compare(prod, rem, prodL, remL) == 1) {
                          n--;

                          // Subtract divisor from product.
                          subtract(prod, yL < prodL ? yz : yc, prodL, base);
                          prodL = prod.length;
                          cmp = 1;
                        }
                      } else {

                        // n is 0 or 1, cmp is -1.
                        // If n is 0, there is no need to compare yc and rem again below,
                        // so change cmp to 1 to avoid it.
                        // If n is 1, leave cmp as -1, so yc and rem are compared again.
                        if (n == 0) {

                          // divisor < remainder, so n must be at least 1.
                          cmp = n = 1;
                        }

                        // product = divisor
                        prod = yc.slice();
                        prodL = prod.length;
                      }

                      if (prodL < remL) prod = [0].concat(prod);

                      // Subtract product from remainder.
                      subtract(rem, prod, remL, base);
                      remL = rem.length;

                      // If product was < remainder.
                      if (cmp == -1) {

                        // Compare divisor and new remainder.
                        // If divisor < new remainder, subtract divisor from remainder.
                        // Trial digit n too low.
                        // n is 1 too low about 5% of the time, and very rarely 2 too low.
                        while (compare(yc, rem, yL, remL) < 1) {
                          n++;

                          // Subtract divisor from remainder.
                          subtract(rem, yL < remL ? yz : yc, remL, base);
                          remL = rem.length;
                        }
                      }
                    } else if (cmp === 0) {
                      n++;
                      rem = [0];
                    } // else cmp === 1 and n will be 0

                    // Add the next digit, n, to the result array.
                    qc[i++] = n;

                    // Update the remainder.
                    if (rem[0]) {
                      rem[remL++] = xc[xi] || 0;
                    } else {
                      rem = [xc[xi]];
                      remL = 1;
                    }
                  } while ((xi++ < xL || rem[0] != null) && s--);

                  more = rem[0] != null;

                  // Leading zero?
                  if (!qc[0]) qc.splice(0, 1);
                }

                if (base == BASE) {

                  // To calculate q.e, first get the number of digits of qc[0].
                  for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

                  round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

                  // Caller is convertBase.
                } else {
                  q.e = e;
                  q.r = +more;
                }

                return q;
              };
            })();


            /*
             * Return a string representing the value of BigNumber n in fixed-point or exponential
             * notation rounded to the specified decimal places or significant digits.
             *
             * n: a BigNumber.
             * i: the index of the last digit required (i.e. the digit that may be rounded up).
             * rm: the rounding mode.
             * id: 1 (toExponential) or 2 (toPrecision).
             */
            function format(n, i, rm, id) {
              var c0, e, ne, len, str;

              if (rm == null) rm = ROUNDING_MODE;
              else intCheck(rm, 0, 8);

              if (!n.c) return n.toString();

              c0 = n.c[0];
              ne = n.e;

              if (i == null) {
                str = coeffToString(n.c);
                str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
                  ? toExponential(str, ne)
                  : toFixedPoint(str, ne, '0');
              } else {
                n = round(new BigNumber(n), i, rm);

                // n.e may have changed if the value was rounded up.
                e = n.e;

                str = coeffToString(n.c);
                len = str.length;

                // toPrecision returns exponential notation if the number of significant digits
                // specified is less than the number of digits necessary to represent the integer
                // part of the value in fixed-point notation.

                // Exponential notation.
                if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

                  // Append zeros?
                  for (; len < i; str += '0', len++);
                  str = toExponential(str, e);

                  // Fixed-point notation.
                } else {
                  i -= ne;
                  str = toFixedPoint(str, e, '0');

                  // Append zeros?
                  if (e + 1 > len) {
                    if (--i > 0) for (str += '.'; i--; str += '0');
                  } else {
                    i += e - len;
                    if (i > 0) {
                      if (e + 1 == len) str += '.';
                      for (; i--; str += '0');
                    }
                  }
                }
              }

              return n.s < 0 && c0 ? '-' + str : str;
            }


            // Handle BigNumber.max and BigNumber.min.
            function maxOrMin(args, method) {
              var n,
                i = 1,
                m = new BigNumber(args[0]);

              for (; i < args.length; i++) {
                n = new BigNumber(args[i]);

                // If any number is NaN, return NaN.
                if (!n.s) {
                  m = n;
                  break;
                } else if (method.call(m, n)) {
                  m = n;
                }
              }

              return m;
            }


            /*
             * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
             * Called by minus, plus and times.
             */
            function normalise(n, c, e) {
              var i = 1,
                j = c.length;

              // Remove trailing zeros.
              for (; !c[--j]; c.pop());

              // Calculate the base 10 exponent. First get the number of digits of c[0].
              for (j = c[0]; j >= 10; j /= 10, i++);

              // Overflow?
              if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

                // Infinity.
                n.c = n.e = null;

                // Underflow?
              } else if (e < MIN_EXP) {

                // Zero.
                n.c = [n.e = 0];
              } else {
                n.e = e;
                n.c = c;
              }

              return n;
            }


            // Handle values that fail the validity test in BigNumber.
            parseNumeric = (function () {
              var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
                dotAfter = /^([^.]+)\.$/,
                dotBefore = /^\.([^.]+)$/,
                isInfinityOrNaN = /^-?(Infinity|NaN)$/,
                whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

              return function (x, str, isNum, b) {
                var base,
                  s = isNum ? str : str.replace(whitespaceOrPlus, '');

                // No exception on Â±Infinity or NaN.
                if (isInfinityOrNaN.test(s)) {
                  x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                } else {
                  if (!isNum) {

                    // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                    s = s.replace(basePrefix, function (m, p1, p2) {
                      base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                      return !b || b == base ? p1 : m;
                    });

                    if (b) {
                      base = b;

                      // E.g. '1.' to '1', '.1' to '0.1'
                      s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                    }

                    if (str != s) return new BigNumber(s, base);
                  }

                  // '[BigNumber Error] Not a number: {n}'
                  // '[BigNumber Error] Not a base {b} number: {n}'
                  if (BigNumber.DEBUG) {
                    throw Error
                      (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
                  }

                  // NaN
                  x.s = null;
                }

                x.c = x.e = null;
              }
            })();


            /*
             * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
             * If r is truthy, it is known that there are more digits after the rounding digit.
             */
            function round(x, sd, rm, r) {
              var d, i, j, k, n, ni, rd,
                xc = x.c,
                pows10 = POWS_TEN;

              // if x is not Infinity or NaN...
              if (xc) {

                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                // n is a base 1e14 number, the value of the element of array x.c containing rd.
                // ni is the index of n within x.c.
                // d is the number of digits of n.
                // i is the index of rd within n including leading zeros.
                // j is the actual index of rd within n (if < 0, rd is a leading zero).
                out: {

                  // Get the number of digits of the first element of xc.
                  for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
                  i = sd - d;

                  // If the rounding digit is in the first element of xc...
                  if (i < 0) {
                    i += LOG_BASE;
                    j = sd;
                    n = xc[ni = 0];

                    // Get the rounding digit at index j of n.
                    rd = n / pows10[d - j - 1] % 10 | 0;
                  } else {
                    ni = mathceil((i + 1) / LOG_BASE);

                    if (ni >= xc.length) {

                      if (r) {

                        // Needed by sqrt.
                        for (; xc.length <= ni; xc.push(0));
                        n = rd = 0;
                        d = 1;
                        i %= LOG_BASE;
                        j = i - LOG_BASE + 1;
                      } else {
                        break out;
                      }
                    } else {
                      n = k = xc[ni];

                      // Get the number of digits of n.
                      for (d = 1; k >= 10; k /= 10, d++);

                      // Get the index of rd within n.
                      i %= LOG_BASE;

                      // Get the index of rd within n, adjusted for leading zeros.
                      // The number of leading zeros of n is given by LOG_BASE - d.
                      j = i - LOG_BASE + d;

                      // Get the rounding digit at index j of n.
                      rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                    }
                  }

                  r = r || sd < 0 ||

                    // Are there any non-zero digits after the rounding digit?
                    // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                    xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

                  r = rm < 4
                    ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                    : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

                      // Check whether the digit to the left of the rounding digit is odd.
                      ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
                      rm == (x.s < 0 ? 8 : 7));

                  if (sd < 1 || !xc[0]) {
                    xc.length = 0;

                    if (r) {

                      // Convert sd to decimal places.
                      sd -= x.e + 1;

                      // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                      xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                      x.e = -sd || 0;
                    } else {

                      // Zero.
                      xc[0] = x.e = 0;
                    }

                    return x;
                  }

                  // Remove excess digits.
                  if (i == 0) {
                    xc.length = ni;
                    k = 1;
                    ni--;
                  } else {
                    xc.length = ni + 1;
                    k = pows10[LOG_BASE - i];

                    // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                    // j > 0 means i > number of leading zeros of n.
                    xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                  }

                  // Round up?
                  if (r) {

                    for (; ;) {

                      // If the digit to be rounded up is in the first element of xc...
                      if (ni == 0) {

                        // i will be the length of xc[0] before k is added.
                        for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                        j = xc[0] += k;
                        for (k = 1; j >= 10; j /= 10, k++);

                        // if i != k the length has increased.
                        if (i != k) {
                          x.e++;
                          if (xc[0] == BASE) xc[0] = 1;
                        }

                        break;
                      } else {
                        xc[ni] += k;
                        if (xc[ni] != BASE) break;
                        xc[ni--] = 0;
                        k = 1;
                      }
                    }
                  }

                  // Remove trailing zeros.
                  for (i = xc.length; xc[--i] === 0; xc.pop());
                }

                // Overflow? Infinity.
                if (x.e > MAX_EXP) {
                  x.c = x.e = null;

                  // Underflow? Zero.
                } else if (x.e < MIN_EXP) {
                  x.c = [x.e = 0];
                }
              }

              return x;
            }


            function valueOf(n) {
              var str,
                e = n.e;

              if (e === null) return n.toString();

              str = coeffToString(n.c);

              str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                ? toExponential(str, e)
                : toFixedPoint(str, e, '0');

              return n.s < 0 ? '-' + str : str;
            }


            // PROTOTYPE/INSTANCE METHODS


            /*
             * Return a new BigNumber whose value is the absolute value of this BigNumber.
             */
            P.absoluteValue = P.abs = function () {
              var x = new BigNumber(this);
              if (x.s < 0) x.s = 1;
              return x;
            };


            /*
             * Return
             *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
             *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
             *   0 if they have the same value,
             *   or null if the value of either is NaN.
             */
            P.comparedTo = function (y, b) {
              return compare(this, new BigNumber(y, b));
            };


            /*
             * If dp is undefined or null or true or false, return the number of decimal places of the
             * value of this BigNumber, or null if the value of this BigNumber is Â±Infinity or NaN.
             *
             * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
             * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
             * ROUNDING_MODE if rm is omitted.
             *
             * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
             * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
             *
             * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
             */
            P.decimalPlaces = P.dp = function (dp, rm) {
              var c, n, v,
                x = this;

              if (dp != null) {
                intCheck(dp, 0, MAX);
                if (rm == null) rm = ROUNDING_MODE;
                else intCheck(rm, 0, 8);

                return round(new BigNumber(x), dp + x.e + 1, rm);
              }

              if (!(c = x.c)) return null;
              n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

              // Subtract the number of trailing zeros of the last number.
              if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
              if (n < 0) n = 0;

              return n;
            };


            /*
             *  n / 0 = I
             *  n / N = N
             *  n / I = 0
             *  0 / n = 0
             *  0 / 0 = N
             *  0 / N = N
             *  0 / I = 0
             *  N / n = N
             *  N / 0 = N
             *  N / N = N
             *  N / I = N
             *  I / n = I
             *  I / 0 = I
             *  I / N = N
             *  I / I = N
             *
             * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
             * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
             */
            P.dividedBy = P.div = function (y, b) {
              return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
            };


            /*
             * Return a new BigNumber whose value is the integer part of dividing the value of this
             * BigNumber by the value of BigNumber(y, b).
             */
            P.dividedToIntegerBy = P.idiv = function (y, b) {
              return div(this, new BigNumber(y, b), 0, 1);
            };


            /*
             * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
             *
             * If m is present, return the result modulo m.
             * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
             * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
             *
             * The modular power operation works efficiently when x, n, and m are integers, otherwise it
             * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
             *
             * n {number|string|BigNumber} The exponent. An integer.
             * [m] {number|string|BigNumber} The modulus.
             *
             * '[BigNumber Error] Exponent not an integer: {n}'
             */
            P.exponentiatedBy = P.pow = function (n, m) {
              var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
                x = this;

              n = new BigNumber(n);

              // Allow NaN and Â±Infinity, but not other non-integers.
              if (n.c && !n.isInteger()) {
                throw Error
                  (bignumberError + 'Exponent not an integer: ' + valueOf(n));
              }

              if (m != null) m = new BigNumber(m);

              // Exponent of MAX_SAFE_INTEGER is 15.
              nIsBig = n.e > 14;

              // If x is NaN, Â±Infinity, Â±0 or Â±1, or n is Â±Infinity, NaN or Â±0.
              if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

                // The sign of the result of pow when x is negative depends on the evenness of n.
                // If +n overflows to Â±Infinity, the evenness of n would be not be known.
                y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
                return m ? y.mod(m) : y;
              }

              nIsNeg = n.s < 0;

              if (m) {

                // x % m returns NaN if abs(m) is zero, or m is NaN.
                if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

                isModExp = !nIsNeg && x.isInteger() && m.isInteger();

                if (isModExp) x = x.mod(m);

                // Overflow to Â±Infinity: >=2**1e10 or >=1.0000024**1e15.
                // Underflow to Â±0: <=0.79**1e10 or <=0.9999975**1e15.
              } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
                // [1, 240000000]
                ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
                // [80000000000000]  [99999750000000]
                : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

                // If x is negative and n is odd, k = -0, else k = 0.
                k = x.s < 0 && isOdd(n) ? -0 : 0;

                // If x >= 1, k = Â±Infinity.
                if (x.e > -1) k = 1 / k;

                // If n is negative return Â±0, else return Â±Infinity.
                return new BigNumber(nIsNeg ? 1 / k : k);

              } else if (POW_PRECISION) {

                // Truncating each coefficient array to a length of k after each multiplication
                // equates to truncating significant digits to POW_PRECISION + [28, 41],
                // i.e. there will be a minimum of 28 guard digits retained.
                k = mathceil(POW_PRECISION / LOG_BASE + 2);
              }

              if (nIsBig) {
                half = new BigNumber(0.5);
                if (nIsNeg) n.s = 1;
                nIsOdd = isOdd(n);
              } else {
                i = Math.abs(+valueOf(n));
                nIsOdd = i % 2;
              }

              y = new BigNumber(ONE);

              // Performs 54 loop iterations for n of 9007199254740991.
              for (; ;) {

                if (nIsOdd) {
                  y = y.times(x);
                  if (!y.c) break;

                  if (k) {
                    if (y.c.length > k) y.c.length = k;
                  } else if (isModExp) {
                    y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
                  }
                }

                if (i) {
                  i = mathfloor(i / 2);
                  if (i === 0) break;
                  nIsOdd = i % 2;
                } else {
                  n = n.times(half);
                  round(n, n.e + 1, 1);

                  if (n.e > 14) {
                    nIsOdd = isOdd(n);
                  } else {
                    i = +valueOf(n);
                    if (i === 0) break;
                    nIsOdd = i % 2;
                  }
                }

                x = x.times(x);

                if (k) {
                  if (x.c && x.c.length > k) x.c.length = k;
                } else if (isModExp) {
                  x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
                }
              }

              if (isModExp) return y;
              if (nIsNeg) y = ONE.div(y);

              return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
            };


            /*
             * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
             * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
             *
             * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
             *
             * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
             */
            P.integerValue = function (rm) {
              var n = new BigNumber(this);
              if (rm == null) rm = ROUNDING_MODE;
              else intCheck(rm, 0, 8);
              return round(n, n.e + 1, rm);
            };


            /*
             * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
             * otherwise return false.
             */
            P.isEqualTo = P.eq = function (y, b) {
              return compare(this, new BigNumber(y, b)) === 0;
            };


            /*
             * Return true if the value of this BigNumber is a finite number, otherwise return false.
             */
            P.isFinite = function () {
              return !!this.c;
            };


            /*
             * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
             * otherwise return false.
             */
            P.isGreaterThan = P.gt = function (y, b) {
              return compare(this, new BigNumber(y, b)) > 0;
            };


            /*
             * Return true if the value of this BigNumber is greater than or equal to the value of
             * BigNumber(y, b), otherwise return false.
             */
            P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
              return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

            };


            /*
             * Return true if the value of this BigNumber is an integer, otherwise return false.
             */
            P.isInteger = function () {
              return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
            };


            /*
             * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
             * otherwise return false.
             */
            P.isLessThan = P.lt = function (y, b) {
              return compare(this, new BigNumber(y, b)) < 0;
            };


            /*
             * Return true if the value of this BigNumber is less than or equal to the value of
             * BigNumber(y, b), otherwise return false.
             */
            P.isLessThanOrEqualTo = P.lte = function (y, b) {
              return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
            };


            /*
             * Return true if the value of this BigNumber is NaN, otherwise return false.
             */
            P.isNaN = function () {
              return !this.s;
            };


            /*
             * Return true if the value of this BigNumber is negative, otherwise return false.
             */
            P.isNegative = function () {
              return this.s < 0;
            };


            /*
             * Return true if the value of this BigNumber is positive, otherwise return false.
             */
            P.isPositive = function () {
              return this.s > 0;
            };


            /*
             * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
             */
            P.isZero = function () {
              return !!this.c && this.c[0] == 0;
            };


            /*
             *  n - 0 = n
             *  n - N = N
             *  n - I = -I
             *  0 - n = -n
             *  0 - 0 = 0
             *  0 - N = N
             *  0 - I = -I
             *  N - n = N
             *  N - 0 = N
             *  N - N = N
             *  N - I = N
             *  I - n = I
             *  I - 0 = I
             *  I - N = N
             *  I - I = N
             *
             * Return a new BigNumber whose value is the value of this BigNumber minus the value of
             * BigNumber(y, b).
             */
            P.minus = function (y, b) {
              var i, j, t, xLTy,
                x = this,
                a = x.s;

              y = new BigNumber(y, b);
              b = y.s;

              // Either NaN?
              if (!a || !b) return new BigNumber(NaN);

              // Signs differ?
              if (a != b) {
                y.s = -b;
                return x.plus(y);
              }

              var xe = x.e / LOG_BASE,
                ye = y.e / LOG_BASE,
                xc = x.c,
                yc = y.c;

              if (!xe || !ye) {

                // Either Infinity?
                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

                // Either zero?
                if (!xc[0] || !yc[0]) {

                  // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                  return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

                    // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                    ROUNDING_MODE == 3 ? -0 : 0);
                }
              }

              xe = bitFloor(xe);
              ye = bitFloor(ye);
              xc = xc.slice();

              // Determine which is the bigger number.
              if (a = xe - ye) {

                if (xLTy = a < 0) {
                  a = -a;
                  t = xc;
                } else {
                  ye = xe;
                  t = yc;
                }

                t.reverse();

                // Prepend zeros to equalise exponents.
                for (b = a; b--; t.push(0));
                t.reverse();
              } else {

                // Exponents equal. Check digit by digit.
                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

                for (a = b = 0; b < j; b++) {

                  if (xc[b] != yc[b]) {
                    xLTy = xc[b] < yc[b];
                    break;
                  }
                }
              }

              // x < y? Point xc to the array of the bigger number.
              if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

              b = (j = yc.length) - (i = xc.length);

              // Append zeros to xc if shorter.
              // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
              if (b > 0) for (; b--; xc[i++] = 0);
              b = BASE - 1;

              // Subtract yc from xc.
              for (; j > a;) {

                if (xc[--j] < yc[j]) {
                  for (i = j; i && !xc[--i]; xc[i] = b);
                  --xc[i];
                  xc[j] += BASE;
                }

                xc[j] -= yc[j];
              }

              // Remove leading zeros and adjust exponent accordingly.
              for (; xc[0] == 0; xc.splice(0, 1), --ye);

              // Zero?
              if (!xc[0]) {

                // Following IEEE 754 (2008) 6.3,
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                y.s = ROUNDING_MODE == 3 ? -1 : 1;
                y.c = [y.e = 0];
                return y;
              }

              // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
              // for finite x and y.
              return normalise(y, xc, ye);
            };


            /*
             *   n % 0 =  N
             *   n % N =  N
             *   n % I =  n
             *   0 % n =  0
             *  -0 % n = -0
             *   0 % 0 =  N
             *   0 % N =  N
             *   0 % I =  0
             *   N % n =  N
             *   N % 0 =  N
             *   N % N =  N
             *   N % I =  N
             *   I % n =  N
             *   I % 0 =  N
             *   I % N =  N
             *   I % I =  N
             *
             * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
             * BigNumber(y, b). The result depends on the value of MODULO_MODE.
             */
            P.modulo = P.mod = function (y, b) {
              var q, s,
                x = this;

              y = new BigNumber(y, b);

              // Return NaN if x is Infinity or NaN, or y is NaN or zero.
              if (!x.c || !y.s || y.c && !y.c[0]) {
                return new BigNumber(NaN);

                // Return x if y is Infinity or x is zero.
              } else if (!y.c || x.c && !x.c[0]) {
                return new BigNumber(x);
              }

              if (MODULO_MODE == 9) {

                // Euclidian division: q = sign(y) * floor(x / abs(y))
                // r = x - qy    where  0 <= r < abs(y)
                s = y.s;
                y.s = 1;
                q = div(x, y, 0, 3);
                y.s = s;
                q.s *= s;
              } else {
                q = div(x, y, 0, MODULO_MODE);
              }

              y = x.minus(q.times(y));

              // To match JavaScript %, ensure sign of zero is sign of dividend.
              if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

              return y;
            };


            /*
             *  n * 0 = 0
             *  n * N = N
             *  n * I = I
             *  0 * n = 0
             *  0 * 0 = 0
             *  0 * N = N
             *  0 * I = N
             *  N * n = N
             *  N * 0 = N
             *  N * N = N
             *  N * I = N
             *  I * n = I
             *  I * 0 = N
             *  I * N = N
             *  I * I = I
             *
             * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
             * of BigNumber(y, b).
             */
            P.multipliedBy = P.times = function (y, b) {
              var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
                base, sqrtBase,
                x = this,
                xc = x.c,
                yc = (y = new BigNumber(y, b)).c;

              // Either NaN, Â±Infinity or Â±0?
              if (!xc || !yc || !xc[0] || !yc[0]) {

                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
                  y.c = y.e = y.s = null;
                } else {
                  y.s *= x.s;

                  // Return Â±Infinity if either is Â±Infinity.
                  if (!xc || !yc) {
                    y.c = y.e = null;

                    // Return Â±0 if either is Â±0.
                  } else {
                    y.c = [0];
                    y.e = 0;
                  }
                }

                return y;
              }

              e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
              y.s *= x.s;
              xcL = xc.length;
              ycL = yc.length;

              // Ensure xc points to longer array and xcL to its length.
              if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

              // Initialise the result array with zeros.
              for (i = xcL + ycL, zc = []; i--; zc.push(0));

              base = BASE;
              sqrtBase = SQRT_BASE;

              for (i = ycL; --i >= 0;) {
                c = 0;
                ylo = yc[i] % sqrtBase;
                yhi = yc[i] / sqrtBase | 0;

                for (k = xcL, j = i + k; j > i;) {
                  xlo = xc[--k] % sqrtBase;
                  xhi = xc[k] / sqrtBase | 0;
                  m = yhi * xlo + xhi * ylo;
                  xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
                  c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                  zc[j--] = xlo % base;
                }

                zc[j] = c;
              }

              if (c) {
                ++e;
              } else {
                zc.splice(0, 1);
              }

              return normalise(y, zc, e);
            };


            /*
             * Return a new BigNumber whose value is the value of this BigNumber negated,
             * i.e. multiplied by -1.
             */
            P.negated = function () {
              var x = new BigNumber(this);
              x.s = -x.s || null;
              return x;
            };


            /*
             *  n + 0 = n
             *  n + N = N
             *  n + I = I
             *  0 + n = n
             *  0 + 0 = 0
             *  0 + N = N
             *  0 + I = I
             *  N + n = N
             *  N + 0 = N
             *  N + N = N
             *  N + I = N
             *  I + n = I
             *  I + 0 = I
             *  I + N = N
             *  I + I = I
             *
             * Return a new BigNumber whose value is the value of this BigNumber plus the value of
             * BigNumber(y, b).
             */
            P.plus = function (y, b) {
              var t,
                x = this,
                a = x.s;

              y = new BigNumber(y, b);
              b = y.s;

              // Either NaN?
              if (!a || !b) return new BigNumber(NaN);

              // Signs differ?
              if (a != b) {
                y.s = -b;
                return x.minus(y);
              }

              var xe = x.e / LOG_BASE,
                ye = y.e / LOG_BASE,
                xc = x.c,
                yc = y.c;

              if (!xe || !ye) {

                // Return Â±Infinity if either Â±Infinity.
                if (!xc || !yc) return new BigNumber(a / 0);

                // Either zero?
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
              }

              xe = bitFloor(xe);
              ye = bitFloor(ye);
              xc = xc.slice();

              // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
              if (a = xe - ye) {
                if (a > 0) {
                  ye = xe;
                  t = yc;
                } else {
                  a = -a;
                  t = xc;
                }

                t.reverse();
                for (; a--; t.push(0));
                t.reverse();
              }

              a = xc.length;
              b = yc.length;

              // Point xc to the longer array, and b to the shorter length.
              if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

              // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
              for (a = 0; b;) {
                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
              }

              if (a) {
                xc = [a].concat(xc);
                ++ye;
              }

              // No need to check for zero, as +x + +y != 0 && -x + -y != 0
              // ye = MAX_EXP + 1 possible
              return normalise(y, xc, ye);
            };


            /*
             * If sd is undefined or null or true or false, return the number of significant digits of
             * the value of this BigNumber, or null if the value of this BigNumber is Â±Infinity or NaN.
             * If sd is true include integer-part trailing zeros in the count.
             *
             * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
             * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
             * ROUNDING_MODE if rm is omitted.
             *
             * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
             *                     boolean: whether to count integer-part trailing zeros: true or false.
             * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
             *
             * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
             */
            P.precision = P.sd = function (sd, rm) {
              var c, n, v,
                x = this;

              if (sd != null && sd !== !!sd) {
                intCheck(sd, 1, MAX);
                if (rm == null) rm = ROUNDING_MODE;
                else intCheck(rm, 0, 8);

                return round(new BigNumber(x), sd, rm);
              }

              if (!(c = x.c)) return null;
              v = c.length - 1;
              n = v * LOG_BASE + 1;

              if (v = c[v]) {

                // Subtract the number of trailing zeros of the last element.
                for (; v % 10 == 0; v /= 10, n--);

                // Add the number of digits of the first element.
                for (v = c[0]; v >= 10; v /= 10, n++);
              }

              if (sd && x.e + 1 > n) n = x.e + 1;

              return n;
            };


            /*
             * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
             * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
             *
             * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
             *
             * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
             */
            P.shiftedBy = function (k) {
              intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
              return this.times('1e' + k);
            };


            /*
             *  sqrt(-n) =  N
             *  sqrt(N) =  N
             *  sqrt(-I) =  N
             *  sqrt(I) =  I
             *  sqrt(0) =  0
             *  sqrt(-0) = -0
             *
             * Return a new BigNumber whose value is the square root of the value of this BigNumber,
             * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
             */
            P.squareRoot = P.sqrt = function () {
              var m, n, r, rep, t,
                x = this,
                c = x.c,
                s = x.s,
                e = x.e,
                dp = DECIMAL_PLACES + 4,
                half = new BigNumber('0.5');

              // Negative/NaN/Infinity/zero?
              if (s !== 1 || !c || !c[0]) {
                return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
              }

              // Initial estimate.
              s = Math.sqrt(+valueOf(x));

              // Math.sqrt underflow/overflow?
              // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
              if (s == 0 || s == 1 / 0) {
                n = coeffToString(c);
                if ((n.length + e) % 2 == 0) n += '0';
                s = Math.sqrt(+n);
                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

                if (s == 1 / 0) {
                  n = '1e' + e;
                } else {
                  n = s.toExponential();
                  n = n.slice(0, n.indexOf('e') + 1) + e;
                }

                r = new BigNumber(n);
              } else {
                r = new BigNumber(s + '');
              }

              // Check for zero.
              // r could be zero if MIN_EXP is changed after the this value was created.
              // This would cause a division by zero (x/t) and hence Infinity below, which would cause
              // coeffToString to throw.
              if (r.c[0]) {
                e = r.e;
                s = e + dp;
                if (s < 3) s = 0;

                // Newton-Raphson iteration.
                for (; ;) {
                  t = r;
                  r = half.times(t.plus(div(x, t, dp, 1)));

                  if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

                    // The exponent of r may here be one less than the final result exponent,
                    // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                    // are indexed correctly.
                    if (r.e < e)--s;
                    n = n.slice(s - 3, s + 1);

                    // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                    // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                    // iteration.
                    if (n == '9999' || !rep && n == '4999') {

                      // On the first iteration only, check to see if rounding up gives the
                      // exact result as the nines may infinitely repeat.
                      if (!rep) {
                        round(t, t.e + DECIMAL_PLACES + 2, 0);

                        if (t.times(t).eq(x)) {
                          r = t;
                          break;
                        }
                      }

                      dp += 4;
                      s += 4;
                      rep = 1;
                    } else {

                      // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                      // result. If not, then there are further digits and m will be truthy.
                      if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                        // Truncate to the first rounding digit.
                        round(r, r.e + DECIMAL_PLACES + 2, 1);
                        m = !r.times(r).eq(x);
                      }

                      break;
                    }
                  }
                }
              }

              return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
            };


            /*
             * Return a string representing the value of this BigNumber in exponential notation and
             * rounded using ROUNDING_MODE to dp fixed decimal places.
             *
             * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
             * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
             *
             * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
             */
            P.toExponential = function (dp, rm) {
              if (dp != null) {
                intCheck(dp, 0, MAX);
                dp++;
              }
              return format(this, dp, rm, 1);
            };


            /*
             * Return a string representing the value of this BigNumber in fixed-point notation rounding
             * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
             *
             * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
             * but e.g. (-0.00001).toFixed(0) is '-0'.
             *
             * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
             * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
             *
             * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
             */
            P.toFixed = function (dp, rm) {
              if (dp != null) {
                intCheck(dp, 0, MAX);
                dp = dp + this.e + 1;
              }
              return format(this, dp, rm);
            };


            /*
             * Return a string representing the value of this BigNumber in fixed-point notation rounded
             * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
             * of the format or FORMAT object (see BigNumber.set).
             *
             * The formatting object may contain some or all of the properties shown below.
             *
             * FORMAT = {
             *   prefix: '',
             *   groupSize: 3,
             *   secondaryGroupSize: 0,
             *   groupSeparator: ',',
             *   decimalSeparator: '.',
             *   fractionGroupSize: 0,
             *   fractionGroupSeparator: '\xA0',      // non-breaking space
             *   suffix: ''
             * };
             *
             * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
             * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
             * [format] {object} Formatting options. See FORMAT pbject above.
             *
             * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
             * '[BigNumber Error] Argument not an object: {format}'
             */
            P.toFormat = function (dp, rm, format) {
              var str,
                x = this;

              if (format == null) {
                if (dp != null && rm && typeof rm == 'object') {
                  format = rm;
                  rm = null;
                } else if (dp && typeof dp == 'object') {
                  format = dp;
                  dp = rm = null;
                } else {
                  format = FORMAT;
                }
              } else if (typeof format != 'object') {
                throw Error
                  (bignumberError + 'Argument not an object: ' + format);
              }

              str = x.toFixed(dp, rm);

              if (x.c) {
                var i,
                  arr = str.split('.'),
                  g1 = +format.groupSize,
                  g2 = +format.secondaryGroupSize,
                  groupSeparator = format.groupSeparator || '',
                  intPart = arr[0],
                  fractionPart = arr[1],
                  isNeg = x.s < 0,
                  intDigits = isNeg ? intPart.slice(1) : intPart,
                  len = intDigits.length;

                if (g2) i = g1, g1 = g2, g2 = i, len -= i;

                if (g1 > 0 && len > 0) {
                  i = len % g1 || g1;
                  intPart = intDigits.substr(0, i);
                  for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
                  if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                  if (isNeg) intPart = '-' + intPart;
                }

                str = fractionPart
                  ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
                    ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
                      '$&' + (format.fractionGroupSeparator || ''))
                    : fractionPart)
                  : intPart;
              }

              return (format.prefix || '') + str + (format.suffix || '');
            };


            /*
             * Return an array of two BigNumbers representing the value of this BigNumber as a simple
             * fraction with an integer numerator and an integer denominator.
             * The denominator will be a positive non-zero value less than or equal to the specified
             * maximum denominator. If a maximum denominator is not specified, the denominator will be
             * the lowest value necessary to represent the number exactly.
             *
             * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
             *
             * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
             */
            P.toFraction = function (md) {
              var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
                x = this,
                xc = x.c;

              if (md != null) {
                n = new BigNumber(md);

                // Throw if md is less than one or is not an integer, unless it is Infinity.
                if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
                  throw Error
                    (bignumberError + 'Argument ' +
                    (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
                }
              }

              if (!xc) return new BigNumber(x);

              d = new BigNumber(ONE);
              n1 = d0 = new BigNumber(ONE);
              d1 = n0 = new BigNumber(ONE);
              s = coeffToString(xc);

              // Determine initial denominator.
              // d is a power of 10 and the minimum max denominator that specifies the value exactly.
              e = d.e = s.length - x.e - 1;
              d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
              md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

              exp = MAX_EXP;
              MAX_EXP = 1 / 0;
              n = new BigNumber(s);

              // n0 = d1 = 0
              n0.c[0] = 0;

              for (; ;) {
                q = div(n, d, 0, 1);
                d2 = d0.plus(q.times(d1));
                if (d2.comparedTo(md) == 1) break;
                d0 = d1;
                d1 = d2;
                n1 = n0.plus(q.times(d2 = n1));
                n0 = d2;
                d = n.minus(q.times(d2 = d));
                n = d2;
              }

              d2 = div(md.minus(d0), d1, 0, 1);
              n0 = n0.plus(d2.times(n1));
              d0 = d0.plus(d2.times(d1));
              n0.s = n1.s = x.s;
              e = e * 2;

              // Determine which fraction is closer to x, n0/d0 or n1/d1
              r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
                div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

              MAX_EXP = exp;

              return r;
            };


            /*
             * Return the value of this BigNumber converted to a number primitive.
             */
            P.toNumber = function () {
              return +valueOf(this);
            };


            /*
             * Return a string representing the value of this BigNumber rounded to sd significant digits
             * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
             * necessary to represent the integer part of the value in fixed-point notation, then use
             * exponential notation.
             *
             * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
             * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
             *
             * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
             */
            P.toPrecision = function (sd, rm) {
              if (sd != null) intCheck(sd, 1, MAX);
              return format(this, sd, rm, 2);
            };


            /*
             * Return a string representing the value of this BigNumber in base b, or base 10 if b is
             * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
             * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
             * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
             * TO_EXP_NEG, return exponential notation.
             *
             * [b] {number} Integer, 2 to ALPHABET.length inclusive.
             *
             * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
             */
            P.toString = function (b) {
              var str,
                n = this,
                s = n.s,
                e = n.e;

              // Infinity or NaN?
              if (e === null) {
                if (s) {
                  str = 'Infinity';
                  if (s < 0) str = '-' + str;
                } else {
                  str = 'NaN';
                }
              } else {
                if (b == null) {
                  str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                    ? toExponential(coeffToString(n.c), e)
                    : toFixedPoint(coeffToString(n.c), e, '0');
                } else if (b === 10) {
                  n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
                  str = toFixedPoint(coeffToString(n.c), n.e, '0');
                } else {
                  intCheck(b, 2, ALPHABET.length, 'Base');
                  str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
                }

                if (s < 0 && n.c[0]) str = '-' + str;
              }

              return str;
            };


            /*
             * Return as toString, but do not accept a base argument, and include the minus sign for
             * negative zero.
             */
            P.valueOf = P.toJSON = function () {
              return valueOf(this);
            };


            P._isBigNumber = true;

            if (hasSymbol) {
              P[Symbol.toStringTag] = 'BigNumber';

              // Node.js v10.12.0+
              P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;
            }

            if (configObject != null) BigNumber.set(configObject);

            return BigNumber;
          }


          // PRIVATE HELPER FUNCTIONS

          // These functions don't need access to variables,
          // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


          function bitFloor(n) {
            var i = n | 0;
            return n > 0 || n === i ? i : i - 1;
          }


          // Return a coefficient array as a string of base 10 digits.
          function coeffToString(a) {
            var s, z,
              i = 1,
              j = a.length,
              r = a[0] + '';

            for (; i < j;) {
              s = a[i++] + '';
              z = LOG_BASE - s.length;
              for (; z--; s = '0' + s);
              r += s;
            }

            // Determine trailing zeros.
            for (j = r.length; r.charCodeAt(--j) === 48;);

            return r.slice(0, j + 1 || 1);
          }


          // Compare the value of BigNumbers x and y.
          function compare(x, y) {
            var a, b,
              xc = x.c,
              yc = y.c,
              i = x.s,
              j = y.s,
              k = x.e,
              l = y.e;

            // Either NaN?
            if (!i || !j) return null;

            a = xc && !xc[0];
            b = yc && !yc[0];

            // Either zero?
            if (a || b) return a ? b ? 0 : -j : i;

            // Signs differ?
            if (i != j) return i;

            a = i < 0;
            b = k == l;

            // Either Infinity?
            if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

            // Compare exponents.
            if (!b) return k > l ^ a ? 1 : -1;

            j = (k = xc.length) < (l = yc.length) ? k : l;

            // Compare digit by digit.
            for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

            // Compare lengths.
            return k == l ? 0 : k > l ^ a ? 1 : -1;
          }


          /*
           * Check that n is a primitive number, an integer, and in range, otherwise throw.
           */
          function intCheck(n, min, max, name) {
            if (n < min || n > max || n !== mathfloor(n)) {
              throw Error
                (bignumberError + (name || 'Argument') + (typeof n == 'number'
                  ? n < min || n > max ? ' out of range: ' : ' not an integer: '
                  : ' not a primitive number: ') + String(n));
            }
          }


          // Assumes finite n.
          function isOdd(n) {
            var k = n.c.length - 1;
            return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
          }


          function toExponential(str, e) {
            return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
              (e < 0 ? 'e' : 'e+') + e;
          }


          function toFixedPoint(str, e, z) {
            var len, zs;

            // Negative exponent?
            if (e < 0) {

              // Prepend zeros.
              for (zs = z + '.'; ++e; zs += z);
              str = zs + str;

              // Positive exponent
            } else {
              len = str.length;

              // Append zeros.
              if (++e > len) {
                for (zs = z, e -= len; --e; zs += z);
                str += zs;
              } else if (e < len) {
                str = str.slice(0, e) + '.' + str.slice(e);
              }
            }

            return str;
          }


          // EXPORT


          BigNumber = clone();
          BigNumber['default'] = BigNumber.BigNumber = BigNumber;

          // AMD.
          if (true) {
            !(__WEBPACK_AMD_DEFINE_RESULT__ = function () { return BigNumber; }.call(exports, __webpack_require__, exports, module),
              __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

            // Node.js and other environments that support module.exports.
          } else if (typeof module != 'undefined' && module.exports) {
            module.exports = BigNumber;

            // Browser.
          } else {
            if (!globalObject) {
              globalObject = typeof self != 'undefined' && self ? self : window;
            }

            globalObject.BigNumber = BigNumber;
          }
        })(this);


        /***/
}),
/* 60 */
/***/ (function (module, exports) {

        // shim for using process in browser
        var process = module.exports = {};

        // cached from whatever global is present so that test runners that stub it
        // don't break things.  But we need to wrap it in a try catch in case it is
        // wrapped in strict mode code which doesn't define any globals.  It's inside a
        // function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
          throw new Error('setTimeout has not been defined');
        }
        function defaultClearTimeout() {
          throw new Error('clearTimeout has not been defined');
        }
        (function () {
          try {
            if (typeof setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        }())
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
          }
          // if setTimeout wasn't available but was latter defined
          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
            }
          }


        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
          }
          // if clearTimeout wasn't available but was latter defined
          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
            }
          }



        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }

        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;

          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }

        process.nextTick = function (fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };

        // v8 likes predictible objects
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function () {
          this.fun.apply(null, this.array);
        };
        process.title = 'browser';
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ''; // empty string to avoid regexp issues
        process.versions = {};

        function noop() { }

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function (name) { return [] }

        process.binding = function (name) {
          throw new Error('process.binding is not supported');
        };

        process.cwd = function () { return '/' };
        process.chdir = function (dir) {
          throw new Error('process.chdir is not supported');
        };
        process.umask = function () { return 0; };


        /***/
}),
/* 61 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(22);
        var assert = __webpack_require__(37);

        function BlockHash() {
          this.pending = null;
          this.pendingTotal = 0;
          this.blockSize = this.constructor.blockSize;
          this.outSize = this.constructor.outSize;
          this.hmacStrength = this.constructor.hmacStrength;
          this.padLength = this.constructor.padLength / 8;
          this.endian = 'big';

          this._delta8 = this.blockSize / 8;
          this._delta32 = this.blockSize / 32;
        }
        exports.BlockHash = BlockHash;

        BlockHash.prototype.update = function update(msg, enc) {
          // Convert message to array, pad it, and join into 32bit blocks
          msg = utils.toArray(msg, enc);
          if (!this.pending)
            this.pending = msg;
          else
            this.pending = this.pending.concat(msg);
          this.pendingTotal += msg.length;

          // Enough data, try updating
          if (this.pending.length >= this._delta8) {
            msg = this.pending;

            // Process pending data in blocks
            var r = msg.length % this._delta8;
            this.pending = msg.slice(msg.length - r, msg.length);
            if (this.pending.length === 0)
              this.pending = null;

            msg = utils.join32(msg, 0, msg.length - r, this.endian);
            for (var i = 0; i < msg.length; i += this._delta32)
              this._update(msg, i, i + this._delta32);
          }

          return this;
        };

        BlockHash.prototype.digest = function digest(enc) {
          this.update(this._pad());
          assert(this.pending === null);

          return this._digest(enc);
        };

        BlockHash.prototype._pad = function pad() {
          var len = this.pendingTotal;
          var bytes = this._delta8;
          var k = bytes - ((len + this.padLength) % bytes);
          var res = new Array(k + this.padLength);
          res[0] = 0x80;
          for (var i = 1; i < k; i++)
            res[i] = 0;

          // Append length
          len <<= 3;
          if (this.endian === 'big') {
            for (var t = 8; t < this.padLength; t++)
              res[i++] = 0;

            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = (len >>> 24) & 0xff;
            res[i++] = (len >>> 16) & 0xff;
            res[i++] = (len >>> 8) & 0xff;
            res[i++] = len & 0xff;
          } else {
            res[i++] = len & 0xff;
            res[i++] = (len >>> 8) & 0xff;
            res[i++] = (len >>> 16) & 0xff;
            res[i++] = (len >>> 24) & 0xff;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;

            for (t = 8; t < this.padLength; t++)
              res[i++] = 0;
          }

          return res;
        };


        /***/
}),
/* 62 */
/***/ (function (module, exports, __webpack_require__) {

        var eq = __webpack_require__(30),
          isArrayLike = __webpack_require__(63),
          isIndex = __webpack_require__(33),
          isObject = __webpack_require__(9);

        /**
         * Checks if the given arguments are from an iteratee call.
         *
         * @private
         * @param {*} value The potential iteratee value argument.
         * @param {*} index The potential iteratee index or key argument.
         * @param {*} object The potential iteratee object argument.
         * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
         *  else `false`.
         */
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
            return eq(object[index], value);
          }
          return false;
        }

        module.exports = isIterateeCall;


        /***/
}),
/* 63 */
/***/ (function (module, exports, __webpack_require__) {

        var isFunction = __webpack_require__(38),
          isLength = __webpack_require__(96);

        /**
         * Checks if `value` is array-like. A value is considered array-like if it's
         * not a function and has a `value.length` that's an integer greater than or
         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         * @example
         *
         * _.isArrayLike([1, 2, 3]);
         * // => true
         *
         * _.isArrayLike(document.body.children);
         * // => true
         *
         * _.isArrayLike('abc');
         * // => true
         *
         * _.isArrayLike(_.noop);
         * // => false
         */
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }

        module.exports = isArrayLike;


        /***/
}),
/* 64 */
/***/ (function (module, exports, __webpack_require__) {

        var SetCache = __webpack_require__(76),
          arrayIncludes = __webpack_require__(81),
          arrayIncludesWith = __webpack_require__(100),
          arrayMap = __webpack_require__(7),
          baseUnary = __webpack_require__(49),
          cacheHas = __webpack_require__(83);

        /** Used as the size to enable large array optimizations. */
        var LARGE_ARRAY_SIZE = 200;

        /**
         * The base implementation of methods like `_.difference` without support
         * for excluding multiple arrays or iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Array} values The values to exclude.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         */
        function baseDifference(array, values, iteratee, comparator) {
          var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

          if (!length) {
            return result;
          }
          if (iteratee) {
            values = arrayMap(values, baseUnary(iteratee));
          }
          if (comparator) {
            includes = arrayIncludesWith;
            isCommon = false;
          }
          else if (values.length >= LARGE_ARRAY_SIZE) {
            includes = cacheHas;
            isCommon = false;
            values = new SetCache(values);
          }
          outer:
          while (++index < length) {
            var value = array[index],
              computed = iteratee == null ? value : iteratee(value);

            value = (comparator || value !== 0) ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result.push(value);
            }
            else if (!includes(values, computed, comparator)) {
              result.push(value);
            }
          }
          return result;
        }

        module.exports = baseDifference;


        /***/
}),
/* 65 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (module) {
          var root = __webpack_require__(8),
          stubFalse = __webpack_require__(298);

          /** Detect free variable `exports`. */
          var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

          /** Detect free variable `module`. */
          var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

          /** Detect the popular CommonJS extension `module.exports`. */
          var moduleExports = freeModule && freeModule.exports === freeExports;

          /** Built-in value references. */
          var Buffer = moduleExports ? root.Buffer : undefined;

          /* Built-in method references for those with the same name as other `lodash` methods. */
          var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

          /**
           * Checks if `value` is a buffer.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
           * @example
           *
           * _.isBuffer(new Buffer(2));
           * // => true
           *
           * _.isBuffer(new Uint8Array(2));
           * // => false
           */
          var isBuffer = nativeIsBuffer || stubFalse;

          module.exports = isBuffer;

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(36)(module)))

        /***/
}),
/* 66 */
/***/ (function (module, exports, __webpack_require__) {

        var castPath = __webpack_require__(35),
          toKey = __webpack_require__(31);

        /**
         * The base implementation of `_.get` without support for default values.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @returns {*} Returns the resolved value.
         */
        function baseGet(object, path) {
          path = castPath(path, object);

          var index = 0,
            length = path.length;

          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return (index && index == length) ? object : undefined;
        }

        module.exports = baseGet;


        /***/
}),
/* 67 */
/***/ (function (module, exports, __webpack_require__) {

        var flatten = __webpack_require__(166),
          overRest = __webpack_require__(142),
          setToString = __webpack_require__(101);

        /**
         * A specialized version of `baseRest` which flattens the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @returns {Function} Returns the new function.
         */
        function flatRest(func) {
          return setToString(overRest(func, undefined, flatten), func + '');
        }

        module.exports = flatRest;


        /***/
}),
/* 68 */
/***/ (function (module, exports, __webpack_require__) {

        var baseAssignValue = __webpack_require__(69),
          eq = __webpack_require__(30);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Assigns `value` to `key` of `object` if the existing value is not equivalent
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
            (value === undefined && !(key in object))) {
            baseAssignValue(object, key, value);
          }
        }

        module.exports = assignValue;


        /***/
}),
/* 69 */
/***/ (function (module, exports, __webpack_require__) {

        var defineProperty = __webpack_require__(144);

        /**
         * The base implementation of `assignValue` and `assignMergeValue` without
         * value checks.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function baseAssignValue(object, key, value) {
          if (key == '__proto__' && defineProperty) {
            defineProperty(object, key, {
              'configurable': true,
              'enumerable': true,
              'value': value,
              'writable': true
            });
          } else {
            object[key] = value;
          }
        }

        module.exports = baseAssignValue;


        /***/
}),
/* 70 */
/***/ (function (module, exports, __webpack_require__) {

        var assignValue = __webpack_require__(68),
          castPath = __webpack_require__(35),
          isIndex = __webpack_require__(33),
          isObject = __webpack_require__(9),
          toKey = __webpack_require__(31);

        /**
         * The base implementation of `_.set`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @param {Function} [customizer] The function to customize path creation.
         * @returns {Object} Returns `object`.
         */
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);

          var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

          while (nested != null && ++index < length) {
            var key = toKey(path[index]),
              newValue = value;

            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined;
              if (newValue === undefined) {
                newValue = isObject(objValue)
                  ? objValue
                  : (isIndex(path[index + 1]) ? [] : {});
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }

        module.exports = baseSet;


        /***/
}),
/* 71 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {// Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          // NOTE: These type checking functions intentionally don't use `instanceof`
          // because it is fragile and can be easily faked with `Object.create()`.

          function isArray(arg) {
            if (Array.isArray) {
              return Array.isArray(arg);
            }
            return objectToString(arg) === '[object Array]';
          }
          exports.isArray = isArray;

          function isBoolean(arg) {
            return typeof arg === 'boolean';
          }
          exports.isBoolean = isBoolean;

          function isNull(arg) {
            return arg === null;
          }
          exports.isNull = isNull;

          function isNullOrUndefined(arg) {
            return arg == null;
          }
          exports.isNullOrUndefined = isNullOrUndefined;

          function isNumber(arg) {
            return typeof arg === 'number';
          }
          exports.isNumber = isNumber;

          function isString(arg) {
            return typeof arg === 'string';
          }
          exports.isString = isString;

          function isSymbol(arg) {
            return typeof arg === 'symbol';
          }
          exports.isSymbol = isSymbol;

          function isUndefined(arg) {
            return arg === void 0;
          }
          exports.isUndefined = isUndefined;

          function isRegExp(re) {
            return objectToString(re) === '[object RegExp]';
          }
          exports.isRegExp = isRegExp;

          function isObject(arg) {
            return typeof arg === 'object' && arg !== null;
          }
          exports.isObject = isObject;

          function isDate(d) {
            return objectToString(d) === '[object Date]';
          }
          exports.isDate = isDate;

          function isError(e) {
            return (objectToString(e) === '[object Error]' || e instanceof Error);
          }
          exports.isError = isError;

          function isFunction(arg) {
            return typeof arg === 'function';
          }
          exports.isFunction = isFunction;

          function isPrimitive(arg) {
            return arg === null ||
              typeof arg === 'boolean' ||
              typeof arg === 'number' ||
              typeof arg === 'string' ||
              typeof arg === 'symbol' ||  // ES6 symbol
              typeof arg === 'undefined';
          }
          exports.isPrimitive = isPrimitive;

          exports.isBuffer = Buffer.isBuffer;

          function objectToString(o) {
            return Object.prototype.toString.call(o);
          }

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(27).Buffer))

        /***/
}),
/* 72 */
/***/ (function (module, exports, __webpack_require__) {

        var hash = exports;

        hash.utils = __webpack_require__(22);
        hash.common = __webpack_require__(61);
        hash.sha = __webpack_require__(237);
        hash.ripemd = __webpack_require__(241);
        hash.hmac = __webpack_require__(242);

        // Proxy hash functions to the main object
        hash.sha1 = hash.sha.sha1;
        hash.sha256 = hash.sha.sha256;
        hash.sha224 = hash.sha.sha224;
        hash.sha384 = hash.sha.sha384;
        hash.sha512 = hash.sha.sha512;
        hash.ripemd160 = hash.ripemd.ripemd160;


        /***/
}),
/* 73 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /** 
         * @file iban.js
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var BigNumber = __webpack_require__(59);

        var padLeft = function (string, bytes) {
          var result = string;
          while (result.length < bytes * 2) {
            result = '0' + result;
          }
          return result;
        };

        /**
         * An IBAN code consists of up to 34 case insensitive alpha-numeric characters. It contains three pieces of information:
         * The country code; a top-level identifier for the context of the following (ISO 3166-1 alpha-2);
         * The error-detection code; uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003);
         * The basic bank account number (BBAN); an identifier of the institution, branch and client account, whose composition 
         * is dependent on the aforementioned country.
         * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
         * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
         *
         * @method iso13616Prepare
         * @param {String} iban the IBAN
         * @returns {String} the prepared IBAN
         */
        var iso13616Prepare = function (iban) {
          var A = 'A'.charCodeAt(0);
          var Z = 'Z'.charCodeAt(0);

          iban = iban.toUpperCase();
          iban = iban.substr(4) + iban.substr(0, 4);

          return iban.split('').map(function (n) {
            var code = n.charCodeAt(0);
            if (code >= A && code <= Z) {
              // A = 10, B = 11, ... Z = 35
              return code - A + 10;
            } else {
              return n;
            }
          }).join('');
        };

        /**
         * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
         *
         * @method mod9710
         * @param {String} iban
         * @returns {Number}
         */
        var mod9710 = function (iban) {
          var remainder = iban,
            block;

          while (remainder.length > 2) {
            block = remainder.slice(0, 9);
            remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
          }

          return parseInt(remainder, 10) % 97;
        };

        /**
         * This prototype should be used to create iban object from iban correct string
         *
         * @param {String} iban
         */
        var Iban = function (iban) {
          this._iban = iban;
        };

        /**
         * This method should be used to create iban object from MOAC address
         *
         * @method fromAddress
         * @param {String} address
         * @return {Iban} the IBAN object
         */
        Iban.fromAddress = function (address) {
          var asBn = new BigNumber(address, 16);
          var base36 = asBn.toString(36);
          var padded = padLeft(base36, 15);
          return Iban.fromBban(padded.toUpperCase());
        };

        /**
         * Convert the passed BBAN to an IBAN for this country specification.
         * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
         * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
         *
         * @method fromBban
         * @param {String} bban the BBAN to convert to IBAN
         * @returns {Iban} the IBAN object
         */
        Iban.fromBban = function (bban) {
          var countryCode = 'XE';

          var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));
          var checkDigit = ('0' + (98 - remainder)).slice(-2);

          return new Iban(countryCode + checkDigit + bban);
        };

        /**
         * Should be used to create IBAN object for given institution and identifier
         *
         * @method createIndirect
         * @param {Object} options, required options are "institution" and "identifier"
         * @return {Iban} the IBAN object
         */
        Iban.createIndirect = function (options) {
          return Iban.fromBban('MOAC' + options.institution + options.identifier);
        };

        /**
         * Thos method should be used to check if given string is valid iban object
         *
         * @method isValid
         * @param {String} iban string
         * @return {Boolean} true if it is valid IBAN
         */
        Iban.isValid = function (iban) {
          var i = new Iban(iban);
          return i.isValid();
        };

        /**
         * Should be called to check if iban is correct
         *
         * @method isValid
         * @returns {Boolean} true if it is, otherwise false
         */
        Iban.prototype.isValid = function () {
          return /^XE[0-9]{2}(MOAC[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&
            mod9710(iso13616Prepare(this._iban)) === 1;
        };

        /**
         * Should be called to check if iban number is direct
         *
         * @method isDirect
         * @returns {Boolean} true if it is, otherwise false
         */
        Iban.prototype.isDirect = function () {
          return this._iban.length === 34 || this._iban.length === 35;
        };

        /**
         * Should be called to check if iban number if indirect
         *
         * @method isIndirect
         * @returns {Boolean} true if it is, otherwise false
         */
        Iban.prototype.isIndirect = function () {
          return this._iban.length === 21;//original 20 for ETH, MOAC has 1 char long
        };

        /**
         * Should be called to get iban checksum
         * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)
         *
         * @method checksum
         * @returns {String} checksum
         */
        Iban.prototype.checksum = function () {
          return this._iban.substr(2, 2);
        };

        /**
         * Should be called to get institution identifier
         * eg. XREG
         *
         * @method institution
         * @returns {String} institution identifier
         */
        Iban.prototype.institution = function () {
          //ETH to MOAC, move the pos from 7 to 8
          // return this.isIndirect() ? this._iban.substr(7, 4) : '';
          // console.log("institution:", this._iban.substr(8, 4));
          return this.isIndirect() ? this._iban.substr(8, 4) : '';
        };

        /**
         * Should be called to get client identifier within institution
         * eg. GAVOFYORK
         *
         * @method client
         * @returns {String} client identifier
         */
        Iban.prototype.client = function () {
          // console.log("client:", this._iban.substr(12));
          // return this.isIndirect() ? this._iban.substr(11) : '';
          return this.isIndirect() ? this._iban.substr(12) : '';
        };

        /**
         * Should be called to get client direct address
         *
         * @method address
         * @returns {String} client direct address
         */
        Iban.prototype.address = function () {
          if (this.isDirect()) {
            var base36 = this._iban.substr(4);
            var asBn = new BigNumber(base36, 36);
            return padLeft(asBn.toString(16), 20);
          }

          return '';
        };

        Iban.prototype.toString = function () {
          return this._iban;
        };

        module.exports = Iban;



        /***/
}),
/* 74 */
/***/ (function (module, exports) {

        /**
         * Appends the elements of `values` to `array`.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to append.
         * @returns {Array} Returns `array`.
         */
        function arrayPush(array, values) {
          var index = -1,
            length = values.length,
            offset = array.length;

          while (++index < length) {
            array[offset + index] = values[index];
          }
          return array;
        }

        module.exports = arrayPush;


        /***/
}),
/* 75 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIsArguments = __webpack_require__(259),
          isObjectLike = __webpack_require__(14);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Built-in value references. */
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;

        /**
         * Checks if `value` is likely an `arguments` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         *  else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */
        var isArguments = baseIsArguments(function () { return arguments; }()) ? baseIsArguments : function (value) {
          return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
            !propertyIsEnumerable.call(value, 'callee');
        };

        module.exports = isArguments;


        /***/
}),
/* 76 */
/***/ (function (module, exports, __webpack_require__) {

        var MapCache = __webpack_require__(97),
          setCacheAdd = __webpack_require__(282),
          setCacheHas = __webpack_require__(283);

        /**
         *
         * Creates an array cache object to store unique values.
         *
         * @private
         * @constructor
         * @param {Array} [values] The values to cache.
         */
        function SetCache(values) {
          var index = -1,
            length = values == null ? 0 : values.length;

          this.__data__ = new MapCache;
          while (++index < length) {
            this.add(values[index]);
          }
        }

        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;

        module.exports = SetCache;


        /***/
}),
/* 77 */
/***/ (function (module, exports, __webpack_require__) {

        var getNative = __webpack_require__(41);

        /* Built-in method references that are verified to be native. */
        var nativeCreate = getNative(Object, 'create');

        module.exports = nativeCreate;


        /***/
}),
/* 78 */
/***/ (function (module, exports, __webpack_require__) {

        var listCacheClear = __webpack_require__(272),
          listCacheDelete = __webpack_require__(273),
          listCacheGet = __webpack_require__(274),
          listCacheHas = __webpack_require__(275),
          listCacheSet = __webpack_require__(276);

        /**
         * Creates an list cache object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function ListCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;

        module.exports = ListCache;


        /***/
}),
/* 79 */
/***/ (function (module, exports, __webpack_require__) {

        var eq = __webpack_require__(30);

        /**
         * Gets the index at which the `key` is found in `array` of key-value pairs.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} key The key to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }

        module.exports = assocIndexOf;


        /***/
}),
/* 80 */
/***/ (function (module, exports, __webpack_require__) {

        var isKeyable = __webpack_require__(278);

        /**
         * Gets the data for `map`.
         *
         * @private
         * @param {Object} map The map to query.
         * @param {string} key The reference key.
         * @returns {*} Returns the map data.
         */
        function getMapData(map, key) {
          var data = map.__data__;
          return isKeyable(key)
            ? data[typeof key == 'string' ? 'string' : 'hash']
            : data.map;
        }

        module.exports = getMapData;


        /***/
}),
/* 81 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIndexOf = __webpack_require__(99);

        /**
         * A specialized version of `_.includes` for arrays without support for
         * specifying an index to search from.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }

        module.exports = arrayIncludes;


        /***/
}),
/* 82 */
/***/ (function (module, exports) {

        /**
         * The base implementation of `_.findIndex` and `_.findLastIndex` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {number} fromIndex The index to search from.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length,
            index = fromIndex + (fromRight ? 1 : -1);

          while ((fromRight ? index-- : ++index < length)) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }
          return -1;
        }

        module.exports = baseFindIndex;


        /***/
}),
/* 83 */
/***/ (function (module, exports) {

        /**
         * Checks if a `cache` value for `key` exists.
         *
         * @private
         * @param {Object} cache The cache to query.
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function cacheHas(cache, key) {
          return cache.has(key);
        }

        module.exports = cacheHas;


        /***/
}),
/* 84 */
/***/ (function (module, exports, __webpack_require__) {

        var ListCache = __webpack_require__(78),
          stackClear = __webpack_require__(289),
          stackDelete = __webpack_require__(290),
          stackGet = __webpack_require__(291),
          stackHas = __webpack_require__(292),
          stackSet = __webpack_require__(293);

        /**
         * Creates a stack cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }

        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;

        module.exports = Stack;


        /***/
}),
/* 85 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIsTypedArray = __webpack_require__(299),
          baseUnary = __webpack_require__(49),
          nodeUtil = __webpack_require__(104);

        /* Node.js helper references. */
        var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

        module.exports = isTypedArray;


        /***/
}),
/* 86 */
/***/ (function (module, exports) {

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /**
         * Checks if `value` is likely a prototype object.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
         */
        function isPrototype(value) {
          var Ctor = value && value.constructor,
            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

          return value === proto;
        }

        module.exports = isPrototype;


        /***/
}),
/* 87 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSlice = __webpack_require__(24);

        /**
         * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
         * without support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to query.
         * @param {Function} predicate The function invoked per iteration.
         * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length,
            index = fromRight ? length : -1;

          while ((fromRight ? index-- : ++index < length) &&
            predicate(array[index], index, array)) { }

          return isDrop
            ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
            : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
        }

        module.exports = baseWhile;


        /***/
}),
/* 88 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSortedIndexBy = __webpack_require__(112),
          identity = __webpack_require__(42),
          isSymbol = __webpack_require__(34);

        /** Used as references for the maximum length and index of an array. */
        var MAX_ARRAY_LENGTH = 4294967295,
          HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

        /**
         * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
         * performs a binary search of `array` to determine the index at which `value`
         * should be inserted into `array` in order to maintain its sort order.
         *
         * @private
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         */
        function baseSortedIndex(array, value, retHighest) {
          var low = 0,
            high = array == null ? low : array.length;

          if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = (low + high) >>> 1,
                computed = array[mid];

              if (computed !== null && !isSymbol(computed) &&
                (retHighest ? (computed <= value) : (computed < value))) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }

        module.exports = baseSortedIndex;


        /***/
}),
/* 89 */
/***/ (function (module, exports, __webpack_require__) {

        var baseCreate = __webpack_require__(53),
          isObject = __webpack_require__(9);

        /**
         * Creates a function that produces an instance of `Ctor` regardless of
         * whether it was invoked as part of a `new` expression or by `call` or `apply`.
         *
         * @private
         * @param {Function} Ctor The constructor to wrap.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCtor(Ctor) {
          return function () {
            // Use a `switch` statement to work with class constructors. See
            // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
            // for more details.
            var args = arguments;
            switch (args.length) {
              case 0: return new Ctor;
              case 1: return new Ctor(args[0]);
              case 2: return new Ctor(args[0], args[1]);
              case 3: return new Ctor(args[0], args[1], args[2]);
              case 4: return new Ctor(args[0], args[1], args[2], args[3]);
              case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);

            // Mimic the constructor's `return` behavior.
            // See https://es5.github.io/#x13.2.2 for more details.
            return isObject(result) ? result : thisBinding;
          };
        }

        module.exports = createCtor;


        /***/
}),
/* 90 */
/***/ (function (module, exports) {

        /**
         * A specialized version of `_.forEach` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEach(array, iteratee) {
          var index = -1,
            length = array == null ? 0 : array.length;

          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }

        module.exports = arrayEach;


        /***/
}),
/* 91 */
/***/ (function (module, exports, __webpack_require__) {

        var overArg = __webpack_require__(156);

        /** Built-in value references. */
        var getPrototype = overArg(Object.getPrototypeOf, Object);

        module.exports = getPrototype;


        /***/
}),
/* 92 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file event.js
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2014
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var utils = __webpack_require__(0);
        var coder = __webpack_require__(23);
        var formatters = __webpack_require__(3);
        var sha3 = __webpack_require__(18);
        var Filter = __webpack_require__(44);
        var watches = __webpack_require__(45);

        /**
         * This prototype should be used to create event filters
         */
        var SolidityEvent = function (requestManager, json, address) {
          this._requestManager = requestManager;
          this._params = json.inputs;
          this._name = utils.transformToFullName(json);
          this._address = address;
          this._anonymous = json.anonymous;
        };

        /**
         * Should be used to get filtered param types
         *
         * @method types
         * @param {Bool} decide if returned typed should be indexed
         * @return {Array} array of types
         */
        SolidityEvent.prototype.types = function (indexed) {
          return this._params.filter(function (i) {
            return i.indexed === indexed;
          }).map(function (i) {
            return i.type;
          });
        };

        /**
         * Should be used to get event display name
         *
         * @method displayName
         * @return {String} event display name
         */
        SolidityEvent.prototype.displayName = function () {
          return utils.extractDisplayName(this._name);
        };

        /**
         * Should be used to get event type name
         *
         * @method typeName
         * @return {String} event type name
         */
        SolidityEvent.prototype.typeName = function () {
          return utils.extractTypeName(this._name);
        };

        /**
         * Should be used to get event signature
         *
         * @method signature
         * @return {String} event signature
         */
        SolidityEvent.prototype.signature = function () {
          return sha3(this._name);
        };

        /**
         * Should be used to encode indexed params and options to one final object
         *
         * @method encode
         * @param {Object} indexed
         * @param {Object} options
         * @return {Object} everything combined together and encoded
         */
        SolidityEvent.prototype.encode = function (indexed, options) {
          indexed = indexed || {};
          options = options || {};
          var result = {};

          ['fromBlock', 'toBlock'].filter(function (f) {
            return options[f] !== undefined;
          }).forEach(function (f) {
            result[f] = formatters.inputBlockNumberFormatter(options[f]);
          });

          result.topics = [];

          result.address = this._address;
          if (!this._anonymous) {
            result.topics.push('0x' + this.signature());
          }

          var indexedTopics = this._params.filter(function (i) {
            return i.indexed === true;
          }).map(function (i) {
            var value = indexed[i.name];
            if (value === undefined || value === null) {
              return null;
            }

            if (utils.isArray(value)) {
              return value.map(function (v) {
                return '0x' + coder.encodeParam(i.type, v);
              });
            }
            return '0x' + coder.encodeParam(i.type, value);
          });

          result.topics = result.topics.concat(indexedTopics);

          return result;
        };

        /**
         * Should be used to decode indexed params and options
         *
         * @method decode
         * @param {Object} data
         * @return {Object} result object with decoded indexed && not indexed params
         */
        SolidityEvent.prototype.decode = function (data) {

          //MOAC returned the data in TxData, ETH is in data
          data.data = data.TxData || data.data;
          //If both are undefined, set it to null
          data.data = data.data || '';
          data.topics = data.topics || [];

          var argTopics = this._anonymous ? data.topics : data.topics.slice(1);
          var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join("");
          var indexedParams = coder.decodeParams(this.types(true), indexedData);

          var notIndexedData = data.data.slice(2);
          var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);

          var result = formatters.outputLogFormatter(data);
          result.event = this.displayName();
          result.address = data.address;

          result.args = this._params.reduce(function (acc, current) {
            acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();
            return acc;
          }, {});

          delete result.data;
          delete result.topics;

          return result;
        };

        /**
         * Should be used to create new filter object from event
         *
         * @method execute
         * @param {Object} indexed
         * @param {Object} options
         * @return {Object} filter object
         */
        SolidityEvent.prototype.execute = function (indexed, options, callback) {

          if (utils.isFunction(arguments[arguments.length - 1])) {
            callback = arguments[arguments.length - 1];
            if (arguments.length === 2)
              options = null;
            if (arguments.length === 1) {
              options = null;
              indexed = {};
            }
          }

          var o = this.encode(indexed, options);
          var formatter = this.decode.bind(this);
          return new Filter(o, 'mc', this._requestManager, watches.mc(), formatter, callback);
        };

        /**
         * Should be used to attach event to contract object
         *
         * @method attachToContract
         * @param {Contract}
         */
        SolidityEvent.prototype.attachToContract = function (contract) {
          var execute = this.execute.bind(this);
          var displayName = this.displayName();
          if (!contract[displayName]) {
            contract[displayName] = execute;
          }
          contract[displayName][this.typeName()] = this.execute.bind(this, contract);
        };

        module.exports = SolidityEvent;



        /***/
}),
/* 93 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var BN = __webpack_require__(11);
        var utils = __webpack_require__(17);
        var getNAF = utils.getNAF;
        var getJSF = utils.getJSF;
        var assert = utils.assert;

        function BaseCurve(type, conf) {
          this.type = type;
          this.p = new BN(conf.p, 16);

          // Use Montgomery, when there is no fast reduction for the prime
          this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

          // Useful for many curves
          this.zero = new BN(0).toRed(this.red);
          this.one = new BN(1).toRed(this.red);
          this.two = new BN(2).toRed(this.red);

          // Curve configuration, optional
          this.n = conf.n && new BN(conf.n, 16);
          this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

          // Temporary arrays
          this._wnafT1 = new Array(4);
          this._wnafT2 = new Array(4);
          this._wnafT3 = new Array(4);
          this._wnafT4 = new Array(4);

          this._bitLength = this.n ? this.n.bitLength() : 0;

          // Generalized Greg Maxwell's trick
          var adjustCount = this.n && this.p.div(this.n);
          if (!adjustCount || adjustCount.cmpn(100) > 0) {
            this.redN = null;
          } else {
            this._maxwellTrick = true;
            this.redN = this.n.toRed(this.red);
          }
        }
        module.exports = BaseCurve;

        BaseCurve.prototype.point = function point() {
          throw new Error('Not implemented');
        };

        BaseCurve.prototype.validate = function validate() {
          throw new Error('Not implemented');
        };

        BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
          assert(p.precomputed);
          var doubles = p._getDoubles();

          var naf = getNAF(k, 1, this._bitLength);
          var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
          I /= 3;

          // Translate into more windowed form
          var repr = [];
          for (var j = 0; j < naf.length; j += doubles.step) {
            var nafW = 0;
            for (var k = j + doubles.step - 1; k >= j; k--)
              nafW = (nafW << 1) + naf[k];
            repr.push(nafW);
          }

          var a = this.jpoint(null, null, null);
          var b = this.jpoint(null, null, null);
          for (var i = I; i > 0; i--) {
            for (var j = 0; j < repr.length; j++) {
              var nafW = repr[j];
              if (nafW === i)
                b = b.mixedAdd(doubles.points[j]);
              else if (nafW === -i)
                b = b.mixedAdd(doubles.points[j].neg());
            }
            a = a.add(b);
          }
          return a.toP();
        };

        BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
          var w = 4;

          // Precompute window
          var nafPoints = p._getNAFPoints(w);
          w = nafPoints.wnd;
          var wnd = nafPoints.points;

          // Get NAF form
          var naf = getNAF(k, w, this._bitLength);

          // Add `this`*(N+1) for every w-NAF index
          var acc = this.jpoint(null, null, null);
          for (var i = naf.length - 1; i >= 0; i--) {
            // Count zeroes
            for (var k = 0; i >= 0 && naf[i] === 0; i--)
              k++;
            if (i >= 0)
              k++;
            acc = acc.dblp(k);

            if (i < 0)
              break;
            var z = naf[i];
            assert(z !== 0);
            if (p.type === 'affine') {
              // J +- P
              if (z > 0)
                acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
              else
                acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
            } else {
              // J +- J
              if (z > 0)
                acc = acc.add(wnd[(z - 1) >> 1]);
              else
                acc = acc.add(wnd[(-z - 1) >> 1].neg());
            }
          }
          return p.type === 'affine' ? acc.toP() : acc;
        };

        BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
          points,
          coeffs,
          len,
          jacobianResult) {
          var wndWidth = this._wnafT1;
          var wnd = this._wnafT2;
          var naf = this._wnafT3;

          // Fill all arrays
          var max = 0;
          for (var i = 0; i < len; i++) {
            var p = points[i];
            var nafPoints = p._getNAFPoints(defW);
            wndWidth[i] = nafPoints.wnd;
            wnd[i] = nafPoints.points;
          }

          // Comb small window NAFs
          for (var i = len - 1; i >= 1; i -= 2) {
            var a = i - 1;
            var b = i;
            if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
              naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
              naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
              max = Math.max(naf[a].length, max);
              max = Math.max(naf[b].length, max);
              continue;
            }

            var comb = [
              points[a], /* 1 */
              null, /* 3 */
              null, /* 5 */
              points[b] /* 7 */
            ];

            // Try to avoid Projective points, if possible
            if (points[a].y.cmp(points[b].y) === 0) {
              comb[1] = points[a].add(points[b]);
              comb[2] = points[a].toJ().mixedAdd(points[b].neg());
            } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
              comb[1] = points[a].toJ().mixedAdd(points[b]);
              comb[2] = points[a].add(points[b].neg());
            } else {
              comb[1] = points[a].toJ().mixedAdd(points[b]);
              comb[2] = points[a].toJ().mixedAdd(points[b].neg());
            }

            var index = [
              -3, /* -1 -1 */
              -1, /* -1 0 */
              -5, /* -1 1 */
              -7, /* 0 -1 */
              0, /* 0 0 */
              7, /* 0 1 */
              5, /* 1 -1 */
              1, /* 1 0 */
              3  /* 1 1 */
            ];

            var jsf = getJSF(coeffs[a], coeffs[b]);
            max = Math.max(jsf[0].length, max);
            naf[a] = new Array(max);
            naf[b] = new Array(max);
            for (var j = 0; j < max; j++) {
              var ja = jsf[0][j] | 0;
              var jb = jsf[1][j] | 0;

              naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
              naf[b][j] = 0;
              wnd[a] = comb;
            }
          }

          var acc = this.jpoint(null, null, null);
          var tmp = this._wnafT4;
          for (var i = max; i >= 0; i--) {
            var k = 0;

            while (i >= 0) {
              var zero = true;
              for (var j = 0; j < len; j++) {
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0)
                  zero = false;
              }
              if (!zero)
                break;
              k++;
              i--;
            }
            if (i >= 0)
              k++;
            acc = acc.dblp(k);
            if (i < 0)
              break;

            for (var j = 0; j < len; j++) {
              var z = tmp[j];
              var p;
              if (z === 0)
                continue;
              else if (z > 0)
                p = wnd[j][(z - 1) >> 1];
              else if (z < 0)
                p = wnd[j][(-z - 1) >> 1].neg();

              if (p.type === 'affine')
                acc = acc.mixedAdd(p);
              else
                acc = acc.add(p);
            }
          }
          // Zeroify references
          for (var i = 0; i < len; i++)
            wnd[i] = null;

          if (jacobianResult)
            return acc;
          else
            return acc.toP();
        };

        function BasePoint(curve, type) {
          this.curve = curve;
          this.type = type;
          this.precomputed = null;
        }
        BaseCurve.BasePoint = BasePoint;

        BasePoint.prototype.eq = function eq(/*other*/) {
          throw new Error('Not implemented');
        };

        BasePoint.prototype.validate = function validate() {
          return this.curve.validate(this);
        };

        BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
          bytes = utils.toArray(bytes, enc);

          var len = this.p.byteLength();

          // uncompressed, hybrid-odd, hybrid-even
          if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
            bytes.length - 1 === 2 * len) {
            if (bytes[0] === 0x06)
              assert(bytes[bytes.length - 1] % 2 === 0);
            else if (bytes[0] === 0x07)
              assert(bytes[bytes.length - 1] % 2 === 1);

            var res = this.point(bytes.slice(1, 1 + len),
              bytes.slice(1 + len, 1 + 2 * len));

            return res;
          } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
            bytes.length - 1 === len) {
            return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
          }
          throw new Error('Unknown point format');
        };

        BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
          return this.encode(enc, true);
        };

        BasePoint.prototype._encode = function _encode(compact) {
          var len = this.curve.p.byteLength();
          var x = this.getX().toArray('be', len);

          if (compact)
            return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

          return [0x04].concat(x, this.getY().toArray('be', len));
        };

        BasePoint.prototype.encode = function encode(enc, compact) {
          return utils.encode(this._encode(compact), enc);
        };

        BasePoint.prototype.precompute = function precompute(power) {
          if (this.precomputed)
            return this;

          var precomputed = {
            doubles: null,
            naf: null,
            beta: null
          };
          precomputed.naf = this._getNAFPoints(8);
          precomputed.doubles = this._getDoubles(4, power);
          precomputed.beta = this._getBeta();
          this.precomputed = precomputed;

          return this;
        };

        BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
          if (!this.precomputed)
            return false;

          var doubles = this.precomputed.doubles;
          if (!doubles)
            return false;

          return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
        };

        BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
          if (this.precomputed && this.precomputed.doubles)
            return this.precomputed.doubles;

          var doubles = [this];
          var acc = this;
          for (var i = 0; i < power; i += step) {
            for (var j = 0; j < step; j++)
              acc = acc.dbl();
            doubles.push(acc);
          }
          return {
            step: step,
            points: doubles
          };
        };

        BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
          if (this.precomputed && this.precomputed.naf)
            return this.precomputed.naf;

          var res = [this];
          var max = (1 << wnd) - 1;
          var dbl = max === 1 ? null : this.dbl();
          for (var i = 1; i < max; i++)
            res[i] = res[i - 1].add(dbl);
          return {
            wnd: wnd,
            points: res
          };
        };

        BasePoint.prototype._getBeta = function _getBeta() {
          return null;
        };

        BasePoint.prototype.dblp = function dblp(k) {
          var r = this;
          for (var i = 0; i < k; i++)
            r = r.dbl();
          return r;
        };


        /***/
}),
/* 94 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
/* WEBPACK VAR INJECTION */(function (process) {

          if (typeof process === 'undefined' ||
            !process.version ||
            process.version.indexOf('v0.') === 0 ||
            process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
            module.exports = { nextTick: nextTick };
          } else {
            module.exports = process
          }

          function nextTick(fn, arg1, arg2, arg3) {
            if (typeof fn !== 'function') {
              throw new TypeError('"callback" argument must be a function');
            }
            var len = arguments.length;
            var args, i;
            switch (len) {
              case 0:
              case 1:
                return process.nextTick(fn);
              case 2:
                return process.nextTick(function afterTickOne() {
                  fn.call(null, arg1);
                });
              case 3:
                return process.nextTick(function afterTickTwo() {
                  fn.call(null, arg1, arg2);
                });
              case 4:
                return process.nextTick(function afterTickThree() {
                  fn.call(null, arg1, arg2, arg3);
                });
              default:
                args = new Array(len - 1);
                i = 0;
                while (i < args.length) {
                  args[i++] = arguments[i];
                }
                return process.nextTick(function afterTick() {
                  fn.apply(null, args);
                });
            }
          }


          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(60)))

        /***/
}),
/* 95 */
/***/ (function (module, exports, __webpack_require__) {

        ; (function (root, factory) {
          if (true) {
            // CommonJS
            module.exports = exports = factory();
          }
          else if (typeof define === "function" && define.amd) {
            // AMD
            define([], factory);
          }
          else {
            // Global (browser)
            root.CryptoJS = factory();
          }
        }(this, function () {

          /**
           * CryptoJS core components.
           */
          var CryptoJS = CryptoJS || (function (Math, undefined) {
            /*
             * Local polyfil of Object.create
             */
            var create = Object.create || (function () {
              function F() { };

              return function (obj) {
                var subtype;

                F.prototype = obj;

                subtype = new F();

                F.prototype = null;

                return subtype;
              };
            }())

            /**
             * CryptoJS namespace.
             */
            var C = {};

            /**
             * Library namespace.
             */
            var C_lib = C.lib = {};

            /**
             * Base object for prototypal inheritance.
             */
            var Base = C_lib.Base = (function () {


              return {
                /**
                 * Creates a new object that inherits from this object.
                 *
                 * @param {Object} overrides Properties to copy into the new object.
                 *
                 * @return {Object} The new object.
                 *
                 * @static
                 *
                 * @example
                 *
                 *     var MyType = CryptoJS.lib.Base.extend({
                 *         field: 'value',
                 *
                 *         method: function () {
                 *         }
                 *     });
                 */
                extend: function (overrides) {
                  // Spawn
                  var subtype = create(this);

                  // Augment
                  if (overrides) {
                    subtype.mixIn(overrides);
                  }

                  // Create default initializer
                  if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
                    subtype.init = function () {
                      subtype.$super.init.apply(this, arguments);
                    };
                  }

                  // Initializer's prototype is the subtype object
                  subtype.init.prototype = subtype;

                  // Reference supertype
                  subtype.$super = this;

                  return subtype;
                },

                /**
                 * Extends this object and runs the init method.
                 * Arguments to create() will be passed to init().
                 *
                 * @return {Object} The new object.
                 *
                 * @static
                 *
                 * @example
                 *
                 *     var instance = MyType.create();
                 */
                create: function () {
                  var instance = this.extend();
                  instance.init.apply(instance, arguments);

                  return instance;
                },

                /**
                 * Initializes a newly created object.
                 * Override this method to add some logic when your objects are created.
                 *
                 * @example
                 *
                 *     var MyType = CryptoJS.lib.Base.extend({
                 *         init: function () {
                 *             // ...
                 *         }
                 *     });
                 */
                init: function () {
                },

                /**
                 * Copies properties into this object.
                 *
                 * @param {Object} properties The properties to mix in.
                 *
                 * @example
                 *
                 *     MyType.mixIn({
                 *         field: 'value'
                 *     });
                 */
                mixIn: function (properties) {
                  for (var propertyName in properties) {
                    if (properties.hasOwnProperty(propertyName)) {
                      this[propertyName] = properties[propertyName];
                    }
                  }

                  // IE won't copy toString using the loop above
                  if (properties.hasOwnProperty('toString')) {
                    this.toString = properties.toString;
                  }
                },

                /**
                 * Creates a copy of this object.
                 *
                 * @return {Object} The clone.
                 *
                 * @example
                 *
                 *     var clone = instance.clone();
                 */
                clone: function () {
                  return this.init.prototype.extend(this);
                }
              };
            }());

            /**
             * An array of 32-bit words.
             *
             * @property {Array} words The array of 32-bit words.
             * @property {number} sigBytes The number of significant bytes in this word array.
             */
            var WordArray = C_lib.WordArray = Base.extend({
              /**
               * Initializes a newly created word array.
               *
               * @param {Array} words (Optional) An array of 32-bit words.
               * @param {number} sigBytes (Optional) The number of significant bytes in the words.
               *
               * @example
               *
               *     var wordArray = CryptoJS.lib.WordArray.create();
               *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
               *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
               */
              init: function (words, sigBytes) {
                words = this.words = words || [];

                if (sigBytes != undefined) {
                  this.sigBytes = sigBytes;
                } else {
                  this.sigBytes = words.length * 4;
                }
              },

              /**
               * Converts this word array to a string.
               *
               * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
               *
               * @return {string} The stringified word array.
               *
               * @example
               *
               *     var string = wordArray + '';
               *     var string = wordArray.toString();
               *     var string = wordArray.toString(CryptoJS.enc.Utf8);
               */
              toString: function (encoder) {
                return (encoder || Hex).stringify(this);
              },

              /**
               * Concatenates a word array to this word array.
               *
               * @param {WordArray} wordArray The word array to append.
               *
               * @return {WordArray} This word array.
               *
               * @example
               *
               *     wordArray1.concat(wordArray2);
               */
              concat: function (wordArray) {
                // Shortcuts
                var thisWords = this.words;
                var thatWords = wordArray.words;
                var thisSigBytes = this.sigBytes;
                var thatSigBytes = wordArray.sigBytes;

                // Clamp excess bits
                this.clamp();

                // Concat
                if (thisSigBytes % 4) {
                  // Copy one byte at a time
                  for (var i = 0; i < thatSigBytes; i++) {
                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
                  }
                } else {
                  // Copy one word at a time
                  for (var i = 0; i < thatSigBytes; i += 4) {
                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
                  }
                }
                this.sigBytes += thatSigBytes;

                // Chainable
                return this;
              },

              /**
               * Removes insignificant bits.
               *
               * @example
               *
               *     wordArray.clamp();
               */
              clamp: function () {
                // Shortcuts
                var words = this.words;
                var sigBytes = this.sigBytes;

                // Clamp
                words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
                words.length = Math.ceil(sigBytes / 4);
              },

              /**
               * Creates a copy of this word array.
               *
               * @return {WordArray} The clone.
               *
               * @example
               *
               *     var clone = wordArray.clone();
               */
              clone: function () {
                var clone = Base.clone.call(this);
                clone.words = this.words.slice(0);

                return clone;
              },

              /**
               * Creates a word array filled with random bytes.
               *
               * @param {number} nBytes The number of random bytes to generate.
               *
               * @return {WordArray} The random word array.
               *
               * @static
               *
               * @example
               *
               *     var wordArray = CryptoJS.lib.WordArray.random(16);
               */
              random: function (nBytes) {
                var words = [];

                var r = (function (m_w) {
                  var m_w = m_w;
                  var m_z = 0x3ade68b1;
                  var mask = 0xffffffff;

                  return function () {
                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
                    var result = ((m_z << 0x10) + m_w) & mask;
                    result /= 0x100000000;
                    result += 0.5;
                    return result * (Math.random() > .5 ? 1 : -1);
                  }
                });

                for (var i = 0, rcache; i < nBytes; i += 4) {
                  var _r = r((rcache || Math.random()) * 0x100000000);

                  rcache = _r() * 0x3ade67b7;
                  words.push((_r() * 0x100000000) | 0);
                }

                return new WordArray.init(words, nBytes);
              }
            });

            /**
             * Encoder namespace.
             */
            var C_enc = C.enc = {};

            /**
             * Hex encoding strategy.
             */
            var Hex = C_enc.Hex = {
              /**
               * Converts a word array to a hex string.
               *
               * @param {WordArray} wordArray The word array.
               *
               * @return {string} The hex string.
               *
               * @static
               *
               * @example
               *
               *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
               */
              stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;

                // Convert
                var hexChars = [];
                for (var i = 0; i < sigBytes; i++) {
                  var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                  hexChars.push((bite >>> 4).toString(16));
                  hexChars.push((bite & 0x0f).toString(16));
                }

                return hexChars.join('');
              },

              /**
               * Converts a hex string to a word array.
               *
               * @param {string} hexStr The hex string.
               *
               * @return {WordArray} The word array.
               *
               * @static
               *
               * @example
               *
               *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
               */
              parse: function (hexStr) {
                // Shortcut
                var hexStrLength = hexStr.length;

                // Convert
                var words = [];
                for (var i = 0; i < hexStrLength; i += 2) {
                  words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
                }

                return new WordArray.init(words, hexStrLength / 2);
              }
            };

            /**
             * Latin1 encoding strategy.
             */
            var Latin1 = C_enc.Latin1 = {
              /**
               * Converts a word array to a Latin1 string.
               *
               * @param {WordArray} wordArray The word array.
               *
               * @return {string} The Latin1 string.
               *
               * @static
               *
               * @example
               *
               *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
               */
              stringify: function (wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;

                // Convert
                var latin1Chars = [];
                for (var i = 0; i < sigBytes; i++) {
                  var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                  latin1Chars.push(String.fromCharCode(bite));
                }

                return latin1Chars.join('');
              },

              /**
               * Converts a Latin1 string to a word array.
               *
               * @param {string} latin1Str The Latin1 string.
               *
               * @return {WordArray} The word array.
               *
               * @static
               *
               * @example
               *
               *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
               */
              parse: function (latin1Str) {
                // Shortcut
                var latin1StrLength = latin1Str.length;

                // Convert
                var words = [];
                for (var i = 0; i < latin1StrLength; i++) {
                  words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
                }

                return new WordArray.init(words, latin1StrLength);
              }
            };

            /**
             * UTF-8 encoding strategy.
             */
            var Utf8 = C_enc.Utf8 = {
              /**
               * Converts a word array to a UTF-8 string.
               *
               * @param {WordArray} wordArray The word array.
               *
               * @return {string} The UTF-8 string.
               *
               * @static
               *
               * @example
               *
               *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
               */
              stringify: function (wordArray) {
                try {
                  return decodeURIComponent(escape(Latin1.stringify(wordArray)));
                } catch (e) {
                  throw new Error('Malformed UTF-8 data');
                }
              },

              /**
               * Converts a UTF-8 string to a word array.
               *
               * @param {string} utf8Str The UTF-8 string.
               *
               * @return {WordArray} The word array.
               *
               * @static
               *
               * @example
               *
               *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
               */
              parse: function (utf8Str) {
                return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
              }
            };

            /**
             * Abstract buffered block algorithm template.
             *
             * The property blockSize must be implemented in a concrete subtype.
             *
             * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
             */
            var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
              /**
               * Resets this block algorithm's data buffer to its initial state.
               *
               * @example
               *
               *     bufferedBlockAlgorithm.reset();
               */
              reset: function () {
                // Initial values
                this._data = new WordArray.init();
                this._nDataBytes = 0;
              },

              /**
               * Adds new data to this block algorithm's buffer.
               *
               * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
               *
               * @example
               *
               *     bufferedBlockAlgorithm._append('data');
               *     bufferedBlockAlgorithm._append(wordArray);
               */
              _append: function (data) {
                // Convert string to WordArray, else assume WordArray already
                if (typeof data == 'string') {
                  data = Utf8.parse(data);
                }

                // Append
                this._data.concat(data);
                this._nDataBytes += data.sigBytes;
              },

              /**
               * Processes available data blocks.
               *
               * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
               *
               * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
               *
               * @return {WordArray} The processed data.
               *
               * @example
               *
               *     var processedData = bufferedBlockAlgorithm._process();
               *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
               */
              _process: function (doFlush) {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var dataSigBytes = data.sigBytes;
                var blockSize = this.blockSize;
                var blockSizeBytes = blockSize * 4;

                // Count blocks ready
                var nBlocksReady = dataSigBytes / blockSizeBytes;
                if (doFlush) {
                  // Round up to include partial blocks
                  nBlocksReady = Math.ceil(nBlocksReady);
                } else {
                  // Round down to include only full blocks,
                  // less the number of blocks that must remain in the buffer
                  nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
                }

                // Count words ready
                var nWordsReady = nBlocksReady * blockSize;

                // Count bytes ready
                var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

                // Process blocks
                if (nWordsReady) {
                  for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                    // Perform concrete-algorithm logic
                    this._doProcessBlock(dataWords, offset);
                  }

                  // Remove processed words
                  var processedWords = dataWords.splice(0, nWordsReady);
                  data.sigBytes -= nBytesReady;
                }

                // Return processed words
                return new WordArray.init(processedWords, nBytesReady);
              },

              /**
               * Creates a copy of this object.
               *
               * @return {Object} The clone.
               *
               * @example
               *
               *     var clone = bufferedBlockAlgorithm.clone();
               */
              clone: function () {
                var clone = Base.clone.call(this);
                clone._data = this._data.clone();

                return clone;
              },

              _minBufferSize: 0
            });

            /**
             * Abstract hasher template.
             *
             * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
             */
            var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
              /**
               * Configuration options.
               */
              cfg: Base.extend(),

              /**
               * Initializes a newly created hasher.
               *
               * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
               *
               * @example
               *
               *     var hasher = CryptoJS.algo.SHA256.create();
               */
              init: function (cfg) {
                // Apply config defaults
                this.cfg = this.cfg.extend(cfg);

                // Set initial values
                this.reset();
              },

              /**
               * Resets this hasher to its initial state.
               *
               * @example
               *
               *     hasher.reset();
               */
              reset: function () {
                // Reset data buffer
                BufferedBlockAlgorithm.reset.call(this);

                // Perform concrete-hasher logic
                this._doReset();
              },

              /**
               * Updates this hasher with a message.
               *
               * @param {WordArray|string} messageUpdate The message to append.
               *
               * @return {Hasher} This hasher.
               *
               * @example
               *
               *     hasher.update('message');
               *     hasher.update(wordArray);
               */
              update: function (messageUpdate) {
                // Append
                this._append(messageUpdate);

                // Update the hash
                this._process();

                // Chainable
                return this;
              },

              /**
               * Finalizes the hash computation.
               * Note that the finalize operation is effectively a destructive, read-once operation.
               *
               * @param {WordArray|string} messageUpdate (Optional) A final message update.
               *
               * @return {WordArray} The hash.
               *
               * @example
               *
               *     var hash = hasher.finalize();
               *     var hash = hasher.finalize('message');
               *     var hash = hasher.finalize(wordArray);
               */
              finalize: function (messageUpdate) {
                // Final message update
                if (messageUpdate) {
                  this._append(messageUpdate);
                }

                // Perform concrete-hasher logic
                var hash = this._doFinalize();

                return hash;
              },

              blockSize: 512 / 32,

              /**
               * Creates a shortcut function to a hasher's object interface.
               *
               * @param {Hasher} hasher The hasher to create a helper for.
               *
               * @return {Function} The shortcut function.
               *
               * @static
               *
               * @example
               *
               *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
               */
              _createHelper: function (hasher) {
                return function (message, cfg) {
                  return new hasher.init(cfg).finalize(message);
                };
              },

              /**
               * Creates a shortcut function to the HMAC's object interface.
               *
               * @param {Hasher} hasher The hasher to use in this HMAC helper.
               *
               * @return {Function} The shortcut function.
               *
               * @static
               *
               * @example
               *
               *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
               */
              _createHmacHelper: function (hasher) {
                return function (message, key) {
                  return new C_algo.HMAC.init(hasher, key).finalize(message);
                };
              }
            });

            /**
             * Algorithm namespace.
             */
            var C_algo = C.algo = {};

            return C;
          }(Math));


          return CryptoJS;

        }));

        /***/
}),
/* 96 */
/***/ (function (module, exports) {

        /** Used as references for various `Number` constants. */
        var MAX_SAFE_INTEGER = 9007199254740991;

        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This method is loosely based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         * @example
         *
         * _.isLength(3);
         * // => true
         *
         * _.isLength(Number.MIN_VALUE);
         * // => false
         *
         * _.isLength(Infinity);
         * // => false
         *
         * _.isLength('3');
         * // => false
         */
        function isLength(value) {
          return typeof value == 'number' &&
            value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }

        module.exports = isLength;


        /***/
}),
/* 97 */
/***/ (function (module, exports, __webpack_require__) {

        var mapCacheClear = __webpack_require__(261),
          mapCacheDelete = __webpack_require__(277),
          mapCacheGet = __webpack_require__(279),
          mapCacheHas = __webpack_require__(280),
          mapCacheSet = __webpack_require__(281);

        /**
         * Creates a map cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function MapCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;

        module.exports = MapCache;


        /***/
}),
/* 98 */
/***/ (function (module, exports, __webpack_require__) {

        var getNative = __webpack_require__(41),
          root = __webpack_require__(8);

        /* Built-in method references that are verified to be native. */
        var Map = getNative(root, 'Map');

        module.exports = Map;


        /***/
}),
/* 99 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFindIndex = __webpack_require__(82),
          baseIsNaN = __webpack_require__(141),
          strictIndexOf = __webpack_require__(284);

        /**
         * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseIndexOf(array, value, fromIndex) {
          return value === value
            ? strictIndexOf(array, value, fromIndex)
            : baseFindIndex(array, baseIsNaN, fromIndex);
        }

        module.exports = baseIndexOf;


        /***/
}),
/* 100 */
/***/ (function (module, exports) {

        /**
         * This function is like `arrayIncludes` except that it accepts a comparator.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @param {Function} comparator The comparator invoked per element.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */
        function arrayIncludesWith(array, value, comparator) {
          var index = -1,
            length = array == null ? 0 : array.length;

          while (++index < length) {
            if (comparator(value, array[index])) {
              return true;
            }
          }
          return false;
        }

        module.exports = arrayIncludesWith;


        /***/
}),
/* 101 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSetToString = __webpack_require__(285),
          shortOut = __webpack_require__(145);

        /**
         * Sets the `toString` method of `func` to return `string`.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var setToString = shortOut(baseSetToString);

        module.exports = setToString;


        /***/
}),
/* 102 */
/***/ (function (module, exports) {

        /**
         * Converts `set` to an array of its values.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the values.
         */
        function setToArray(set) {
          var index = -1,
            result = Array(set.size);

          set.forEach(function (value) {
            result[++index] = value;
          });
          return result;
        }

        module.exports = setToArray;


        /***/
}),
/* 103 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayFilter = __webpack_require__(51),
          stubArray = __webpack_require__(152);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Built-in value references. */
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeGetSymbols = Object.getOwnPropertySymbols;

        /**
         * Creates an array of the own enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
          if (object == null) {
            return [];
          }
          object = Object(object);
          return arrayFilter(nativeGetSymbols(object), function (symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };

        module.exports = getSymbols;


        /***/
}),
/* 104 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (module) {
          var freeGlobal = __webpack_require__(139);

          /** Detect free variable `exports`. */
          var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

          /** Detect free variable `module`. */
          var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

          /** Detect the popular CommonJS extension `module.exports`. */
          var moduleExports = freeModule && freeModule.exports === freeExports;

          /** Detect free variable `process` from Node.js. */
          var freeProcess = moduleExports && freeGlobal.process;

          /** Used to access faster Node.js helpers. */
          var nodeUtil = (function () {
            try {
              // Use `util.types` for Node.js 10+.
              var types = freeModule && freeModule.require && freeModule.require('util').types;

              if (types) {
                return types;
              }

              // Legacy `process.binding('util')` for Node.js < 10.
              return freeProcess && freeProcess.binding && freeProcess.binding('util');
            } catch (e) { }
          }());

          module.exports = nodeUtil;

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(36)(module)))

        /***/
}),
/* 105 */
/***/ (function (module, exports, __webpack_require__) {

        var baseGet = __webpack_require__(66);

        /**
         * Gets the value at `path` of `object`. If the resolved value is
         * `undefined`, the `defaultValue` is returned in its place.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.get(object, 'a[0].b.c');
         * // => 3
         *
         * _.get(object, ['a', '0', 'b', 'c']);
         * // => 3
         *
         * _.get(object, 'a.b.c', 'default');
         * // => 'default'
         */
        function get(object, path, defaultValue) {
          var result = object == null ? undefined : baseGet(object, path);
          return result === undefined ? defaultValue : result;
        }

        module.exports = get;


        /***/
}),
/* 106 */
/***/ (function (module, exports, __webpack_require__) {

        var isArray = __webpack_require__(4),
          isSymbol = __webpack_require__(34);

        /** Used to match property names within property paths. */
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          reIsPlainProp = /^\w*$/;

        /**
         * Checks if `value` is a property name and not a property path.
         *
         * @private
         * @param {*} value The value to check.
         * @param {Object} [object] The object to query keys on.
         * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
         */
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == 'number' || type == 'symbol' || type == 'boolean' ||
            value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
            (object != null && value in Object(object));
        }

        module.exports = isKey;


        /***/
}),
/* 107 */
/***/ (function (module, exports, __webpack_require__) {

        var baseHasIn = __webpack_require__(308),
          hasPath = __webpack_require__(163);

        /**
         * Checks if `path` is a direct or inherited property of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.hasIn(object, 'a');
         * // => true
         *
         * _.hasIn(object, 'a.b');
         * // => true
         *
         * _.hasIn(object, ['a', 'b']);
         * // => true
         *
         * _.hasIn(object, 'b');
         * // => false
         */
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }

        module.exports = hasIn;


        /***/
}),
/* 108 */
/***/ (function (module, exports, __webpack_require__) {

        var SetCache = __webpack_require__(76),
          arrayIncludes = __webpack_require__(81),
          arrayIncludesWith = __webpack_require__(100),
          arrayMap = __webpack_require__(7),
          baseUnary = __webpack_require__(49),
          cacheHas = __webpack_require__(83);

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMin = Math.min;

        /**
         * The base implementation of methods like `_.intersection`, without support
         * for iteratee shorthands, that accepts an array of arrays to inspect.
         *
         * @private
         * @param {Array} arrays The arrays to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of shared values.
         */
        function baseIntersection(arrays, iteratee, comparator) {
          var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee) {
              array = arrayMap(array, baseUnary(iteratee));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
              ? new SetCache(othIndex && array)
              : undefined;
          }
          array = arrays[0];

          var index = -1,
            seen = caches[0];

          outer:
          while (++index < length && result.length < maxLength) {
            var value = array[index],
              computed = iteratee ? iteratee(value) : value;

            value = (comparator || value !== 0) ? value : 0;
            if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
          return result;
        }

        module.exports = baseIntersection;


        /***/
}),
/* 109 */
/***/ (function (module, exports, __webpack_require__) {

        var isArrayLikeObject = __webpack_require__(12);

        /**
         * Casts `value` to an empty array if it's not an array like object.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {Array|Object} Returns the cast array-like object.
         */
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }

        module.exports = castArrayLikeObject;


        /***/
}),
/* 110 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayMap = __webpack_require__(7),
          baseIndexOf = __webpack_require__(99),
          baseIndexOfWith = __webpack_require__(337),
          baseUnary = __webpack_require__(49),
          copyArray = __webpack_require__(40);

        /** Used for built-in method references. */
        var arrayProto = Array.prototype;

        /** Built-in value references. */
        var splice = arrayProto.splice;

        /**
         * The base implementation of `_.pullAllBy` without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns `array`.
         */
        function basePullAll(array, values, iteratee, comparator) {
          var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

          if (array === values) {
            values = copyArray(values);
          }
          if (iteratee) {
            seen = arrayMap(array, baseUnary(iteratee));
          }
          while (++index < length) {
            var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

            while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }

        module.exports = basePullAll;


        /***/
}),
/* 111 */
/***/ (function (module, exports, __webpack_require__) {

        var castPath = __webpack_require__(35),
          last = __webpack_require__(20),
          parent = __webpack_require__(170),
          toKey = __webpack_require__(31);

        /**
         * The base implementation of `_.unset`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The property path to unset.
         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
         */
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }

        module.exports = baseUnset;


        /***/
}),
/* 112 */
/***/ (function (module, exports, __webpack_require__) {

        var isSymbol = __webpack_require__(34);

        /** Used as references for the maximum length and index of an array. */
        var MAX_ARRAY_LENGTH = 4294967295,
          MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeFloor = Math.floor,
          nativeMin = Math.min;

        /**
         * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
         * which invokes `iteratee` for `value` and each element of `array` to compute
         * their sort ranking. The iteratee is invoked with one argument; (value).
         *
         * @private
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} iteratee The iteratee invoked per element.
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         */
        function baseSortedIndexBy(array, value, iteratee, retHighest) {
          value = iteratee(value);

          var low = 0,
            high = array == null ? 0 : array.length,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined;

          while (low < high) {
            var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? (computed <= value) : (computed < value);
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }

        module.exports = baseSortedIndexBy;


        /***/
}),
/* 113 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayFilter = __webpack_require__(51),
          arrayMap = __webpack_require__(7),
          baseProperty = __webpack_require__(164),
          baseTimes = __webpack_require__(154),
          isArrayLikeObject = __webpack_require__(12);

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * This method is like `_.zip` except that it accepts an array of grouped
         * elements and creates an array regrouping the elements to their pre-zip
         * configuration.
         *
         * @static
         * @memberOf _
         * @since 1.2.0
         * @category Array
         * @param {Array} array The array of grouped elements to process.
         * @returns {Array} Returns the new array of regrouped elements.
         * @example
         *
         * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
         * // => [['a', 1, true], ['b', 2, false]]
         *
         * _.unzip(zipped);
         * // => [['a', 'b'], [1, 2], [true, false]]
         */
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function (group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function (index) {
            return arrayMap(array, baseProperty(index));
          });
        }

        module.exports = unzip;


        /***/
}),
/* 114 */
/***/ (function (module, exports, __webpack_require__) {

        var baseDifference = __webpack_require__(64),
          baseFlatten = __webpack_require__(19),
          baseUniq = __webpack_require__(43);

        /**
         * The base implementation of methods like `_.xor`, without support for
         * iteratee shorthands, that accepts an array of arrays to inspect.
         *
         * @private
         * @param {Array} arrays The arrays to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of values.
         */
        function baseXor(arrays, iteratee, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1,
            result = Array(length);

          while (++index < length) {
            var array = arrays[index],
              othIndex = -1;

            while (++othIndex < length) {
              if (othIndex != index) {
                result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }

        module.exports = baseXor;


        /***/
}),
/* 115 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSetData = __webpack_require__(175),
          createBind = __webpack_require__(380),
          createCurry = __webpack_require__(381),
          createHybrid = __webpack_require__(177),
          createPartial = __webpack_require__(392),
          getData = __webpack_require__(181),
          mergeData = __webpack_require__(393),
          setData = __webpack_require__(183),
          setWrapToString = __webpack_require__(184),
          toInteger = __webpack_require__(5);

        /** Error message constants. */
        var FUNC_ERROR_TEXT = 'Expected a function';

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_FLAG = 8,
          WRAP_CURRY_RIGHT_FLAG = 16,
          WRAP_PARTIAL_FLAG = 32,
          WRAP_PARTIAL_RIGHT_FLAG = 64;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * Creates a function that either curries or invokes `func` with optional
         * `this` binding and partially applied arguments.
         *
         * @private
         * @param {Function|string} func The function or method name to wrap.
         * @param {number} bitmask The bitmask flags.
         *    1 - `_.bind`
         *    2 - `_.bindKey`
         *    4 - `_.curry` or `_.curryRight` of a bound function
         *    8 - `_.curry`
         *   16 - `_.curryRight`
         *   32 - `_.partial`
         *   64 - `_.partialRight`
         *  128 - `_.rearg`
         *  256 - `_.ary`
         *  512 - `_.flip`
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to be partially applied.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined;
          }
          ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
          arity = arity === undefined ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;

          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials,
              holdersRight = holders;

            partials = holders = undefined;
          }
          var data = isBindKey ? undefined : getData(func);

          var newData = [
            func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
            argPos, ary, arity
          ];

          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined
            ? (isBindKey ? 0 : func.length)
            : nativeMax(newData[9] - length, 0);

          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result = createPartial(func, bitmask, thisArg, partials);
          } else {
            result = createHybrid.apply(undefined, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result, newData), func, bitmask);
        }

        module.exports = createWrap;


        /***/
}),
/* 116 */
/***/ (function (module, exports, __webpack_require__) {

        var baseCreate = __webpack_require__(53),
          baseLodash = __webpack_require__(117);

        /** Used as references for the maximum length and index of an array. */
        var MAX_ARRAY_LENGTH = 4294967295;

        /**
         * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
         *
         * @private
         * @constructor
         * @param {*} value The value to wrap.
         */
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }

        // Ensure `LazyWrapper` is an instance of `baseLodash`.
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;

        module.exports = LazyWrapper;


        /***/
}),
/* 117 */
/***/ (function (module, exports) {

        /**
         * The function whose prototype chain sequence wrappers inherit from.
         *
         * @private
         */
        function baseLodash() {
          // No operation performed.
        }

        module.exports = baseLodash;


        /***/
}),
/* 118 */
/***/ (function (module, exports) {

        /** Used as the internal argument placeholder. */
        var PLACEHOLDER = '__lodash_placeholder__';

        /**
         * Replaces all `placeholder` elements in `array` with an internal placeholder
         * and returns an array of their indexes.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {*} placeholder The placeholder to replace.
         * @returns {Array} Returns the new array of placeholder indexes.
         */
        function replaceHolders(array, placeholder) {
          var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

          while (++index < length) {
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
              array[index] = PLACEHOLDER;
              result[resIndex++] = index;
            }
          }
          return result;
        }

        module.exports = replaceHolders;


        /***/
}),
/* 119 */
/***/ (function (module, exports, __webpack_require__) {

        var copyObject = __webpack_require__(25),
          keys = __webpack_require__(15);

        /**
         * The base implementation of `_.assign` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }

        module.exports = baseAssign;


        /***/
}),
/* 120 */
/***/ (function (module, exports, __webpack_require__) {

        var Stack = __webpack_require__(84),
          arrayEach = __webpack_require__(90),
          assignValue = __webpack_require__(68),
          baseAssign = __webpack_require__(119),
          baseAssignIn = __webpack_require__(395),
          cloneBuffer = __webpack_require__(186),
          copyArray = __webpack_require__(40),
          copySymbols = __webpack_require__(398),
          copySymbolsIn = __webpack_require__(399),
          getAllKeys = __webpack_require__(150),
          getAllKeysIn = __webpack_require__(121),
          getTag = __webpack_require__(52),
          initCloneArray = __webpack_require__(400),
          initCloneByTag = __webpack_require__(401),
          initCloneObject = __webpack_require__(189),
          isArray = __webpack_require__(4),
          isBuffer = __webpack_require__(65),
          isMap = __webpack_require__(405),
          isObject = __webpack_require__(9),
          isSet = __webpack_require__(407),
          keys = __webpack_require__(15);

        /** Used to compose bitmasks for cloning. */
        var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4;

        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]',
          arrayTag = '[object Array]',
          boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          errorTag = '[object Error]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          objectTag = '[object Object]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          symbolTag = '[object Symbol]',
          weakMapTag = '[object WeakMap]';

        var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]';

        /** Used to identify `toStringTag` values supported by `_.clone`. */
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] =
          cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
          cloneableTags[boolTag] = cloneableTags[dateTag] =
          cloneableTags[float32Tag] = cloneableTags[float64Tag] =
          cloneableTags[int8Tag] = cloneableTags[int16Tag] =
          cloneableTags[int32Tag] = cloneableTags[mapTag] =
          cloneableTags[numberTag] = cloneableTags[objectTag] =
          cloneableTags[regexpTag] = cloneableTags[setTag] =
          cloneableTags[stringTag] = cloneableTags[symbolTag] =
          cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
          cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] =
          cloneableTags[weakMapTag] = false;

        /**
         * The base implementation of `_.clone` and `_.cloneDeep` which tracks
         * traversed objects.
         *
         * @private
         * @param {*} value The value to clone.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Deep clone
         *  2 - Flatten inherited properties
         *  4 - Clone symbols
         * @param {Function} [customizer] The function to customize cloning.
         * @param {string} [key] The key of `value`.
         * @param {Object} [object] The parent object of `value`.
         * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
         * @returns {*} Returns the cloned value.
         */
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

          if (customizer) {
            result = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result !== undefined) {
            return result;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result);
            }
          } else {
            var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
              result = (isFlat || isFunc) ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat
                  ? copySymbolsIn(value, baseAssignIn(result, value))
                  : copySymbols(value, baseAssign(result, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result = initCloneByTag(value, tag, isDeep);
            }
          }
          // Check for circular references and return its corresponding clone.
          stack || (stack = new Stack);
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result);

          if (isSet(value)) {
            value.forEach(function (subValue) {
              result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function (subValue, key) {
              result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
          }

          var keysFunc = isFull
            ? (isFlat ? getAllKeysIn : getAllKeys)
            : (isFlat ? keysIn : keys);

          var props = isArr ? undefined : keysFunc(value);
          arrayEach(props || value, function (subValue, key) {
            if (props) {
              key = subValue;
              subValue = value[key];
            }
            // Recursively populate clone (susceptible to call stack limits).
            assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
          return result;
        }

        module.exports = baseClone;


        /***/
}),
/* 121 */
/***/ (function (module, exports, __webpack_require__) {

        var baseGetAllKeys = __webpack_require__(151),
          getSymbolsIn = __webpack_require__(187),
          keysIn = __webpack_require__(13);

        /**
         * Creates an array of own and inherited enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }

        module.exports = getAllKeysIn;


        /***/
}),
/* 122 */
/***/ (function (module, exports, __webpack_require__) {

        var Uint8Array = __webpack_require__(148);

        /**
         * Creates a clone of `arrayBuffer`.
         *
         * @private
         * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
         * @returns {ArrayBuffer} Returns the cloned array buffer.
         */
        function cloneArrayBuffer(arrayBuffer) {
          var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result).set(new Uint8Array(arrayBuffer));
          return result;
        }

        module.exports = cloneArrayBuffer;


        /***/
}),
/* 123 */
/***/ (function (module, exports, __webpack_require__) {

        var baseGetTag = __webpack_require__(39),
          getPrototype = __webpack_require__(91),
          isObjectLike = __webpack_require__(14);

        /** `Object#toString` result references. */
        var objectTag = '[object Object]';

        /** Used for built-in method references. */
        var funcProto = Function.prototype,
          objectProto = Object.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Used to infer the `Object` constructor. */
        var objectCtorString = funcToString.call(Object);

        /**
         * Checks if `value` is a plain object, that is, an object created by the
         * `Object` constructor or one with a `[[Prototype]]` of `null`.
         *
         * @static
         * @memberOf _
         * @since 0.8.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * _.isPlainObject(new Foo);
         * // => false
         *
         * _.isPlainObject([1, 2, 3]);
         * // => false
         *
         * _.isPlainObject({ 'x': 0, 'y': 0 });
         * // => true
         *
         * _.isPlainObject(Object.create(null));
         * // => true
         */
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
          return typeof Ctor == 'function' && Ctor instanceof Ctor &&
            funcToString.call(Ctor) == objectCtorString;
        }

        module.exports = isPlainObject;


        /***/
}),
/* 124 */
/***/ (function (module, exports, __webpack_require__) {

        var Stack = __webpack_require__(84),
          assignMergeValue = __webpack_require__(192),
          baseFor = __webpack_require__(125),
          baseMergeDeep = __webpack_require__(423),
          isObject = __webpack_require__(9),
          keysIn = __webpack_require__(13),
          safeGet = __webpack_require__(194);

        /**
         * The base implementation of `_.merge` without support for multiple sources.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {number} srcIndex The index of `source`.
         * @param {Function} [customizer] The function to customize merged values.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         */
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function (srcValue, key) {
            stack || (stack = new Stack);
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            }
            else {
              var newValue = customizer
                ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
                : undefined;

              if (newValue === undefined) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }

        module.exports = baseMerge;


        /***/
}),
/* 125 */
/***/ (function (module, exports, __webpack_require__) {

        var createBaseFor = __webpack_require__(193);

        /**
         * The base implementation of `baseForOwn` which iterates over `object`
         * properties returned by `keysFunc` and invokes `iteratee` for each property.
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseFor = createBaseFor();

        module.exports = baseFor;


        /***/
}),
/* 126 */
/***/ (function (module, exports) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
         
          Adopt from eth-lib with some minor modifications and pruning. 
          eth-lib is licensed under MIT:
          https://github.com/maiavictor/eth-lib
          
        */

        var at = function at(bytes, index) {
          return parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);
        };

        var length = function length(a) {
          return (a.length - 2) / 2;
        };

        var flatten = function flatten(a) {
          return "0x" + a.reduce(function (r, s) {
            return r + s.slice(2);
          }, "");
        };

        var slice = function slice(i, j, bs) {
          return "0x" + bs.slice(i * 2 + 2, j * 2 + 2);
        };

        var reverse = function reverse(hex) {
          var rev = "0x";
          for (var i = 0, l = length(hex); i < l; ++i) {
            rev += hex.slice((l - i) * 2, (l - i + 1) * 2);
          }
          return rev;
        };

        var pad = function pad(l, hex) {
          return hex.length === l * 2 + 2 ? hex : pad(l, "0x" + "0" + hex.slice(2));
        };

        var padRight = function padRight(l, hex) {
          return hex.length === l * 2 + 2 ? hex : padRight(l, hex + "0");
        };

        var toArray = function toArray(hex) {
          var arr = [];
          for (var i = 2, l = hex.length; i < l; i += 2) {
            arr.push(parseInt(hex.slice(i, i + 2), 16));
          }
          return arr;
        };

        var fromArray = function fromArray(arr) {
          var hex = "0x";
          for (var i = 0, l = arr.length; i < l; ++i) {
            var b = arr[i];
            hex += (b < 16 ? "0" : "") + b.toString(16);
          }
          return hex;
        };

        var toUint8Array = function toUint8Array(hex) {
          return new Uint8Array(toArray(hex));
        };

        var fromUint8Array = function fromUint8Array(arr) {
          return fromArray([].slice.call(arr, 0));
        };

        var fromNumber = function fromNumber(num) {
          var hex = num.toString(16);
          return hex.length % 2 === 0 ? "0x" + hex : "0x0" + hex;
        };

        var toNumber = function toNumber(hex) {
          return parseInt(hex.slice(2), 16);
        };

        var concat = function concat(a, b) {
          return a.concat(b.slice(2));
        };

        var fromNat = function fromNat(bn) {
          return bn === "0x0" ? "0x" : bn.length % 2 === 0 ? bn : "0x0" + bn.slice(2);
        };

        var toNat = function toNat(bn) {
          return bn[2] === "0" ? "0x" + bn.slice(3) : bn;
        };

        var fromAscii = function fromAscii(ascii) {
          var hex = "0x";
          for (var i = 0; i < ascii.length; ++i) {
            hex += ("00" + ascii.charCodeAt(i).toString(16)).slice(-2);
          }
          return hex;
        };

        var toAscii = function toAscii(hex) {
          var ascii = "";
          for (var i = 2; i < hex.length; i += 2) {
            ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));
          }
          return ascii;
        };

        // From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330
        var fromString = function fromString(s) {
          var makeByte = function makeByte(uint8) {
            var b = uint8.toString(16);
            return b.length < 2 ? "0" + b : b;
          };
          var bytes = "0x";
          for (var ci = 0; ci != s.length; ci++) {
            var c = s.charCodeAt(ci);
            if (c < 128) {
              bytes += makeByte(c);
              continue;
            }
            if (c < 2048) {
              bytes += makeByte(c >> 6 | 192);
            } else {
              if (c > 0xd7ff && c < 0xdc00) {
                if (++ci == s.length) return null;
                var c2 = s.charCodeAt(ci);
                if (c2 < 0xdc00 || c2 > 0xdfff) return null;
                c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
                bytes += makeByte(c >> 18 | 240);
                bytes += makeByte(c >> 12 & 63 | 128);
              } else {
                // c <= 0xffff
                bytes += makeByte(c >> 12 | 224);
              }
              bytes += makeByte(c >> 6 & 63 | 128);
            }
            bytes += makeByte(c & 63 | 128);
          }
          return bytes;
        };

        var toString = function toString(bytes) {
          var s = '';
          var i = 0;
          var l = length(bytes);
          while (i < l) {
            var c = at(bytes, i++);
            if (c > 127) {
              if (c > 191 && c < 224) {
                if (i >= l) return null;
                c = (c & 31) << 6 | at(bytes, i) & 63;
              } else if (c > 223 && c < 240) {
                if (i + 1 >= l) return null;
                c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;
              } else if (c > 239 && c < 248) {
                if (i + 2 >= l) return null;
                c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;
              } else return null;
              ++i;
            }
            if (c <= 0xffff) s += String.fromCharCode(c);
            else if (c <= 0x10ffff) {
              c -= 0x10000;
              s += String.fromCharCode(c >> 10 | 0xd800);
              s += String.fromCharCode(c & 0x3FF | 0xdc00);
            } else return null;
          }
          return s;
        };

        module.exports = {
          length: length,
          concat: concat,
          flatten: flatten,
          slice: slice,
          reverse: reverse,
          pad: pad,
          padRight: padRight,
          fromAscii: fromAscii,
          toAscii: toAscii,
          fromString: fromString,
          toString: toString,
          fromNumber: fromNumber,
          toNumber: toNumber,
          fromNat: fromNat,
          toNat: toNat,
          fromArray: fromArray,
          toArray: toArray,
          fromUint8Array: fromUint8Array,
          toUint8Array: toUint8Array
        };

        /***/
}),
/* 127 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var curves = exports;

        var hash = __webpack_require__(72);
        var curve = __webpack_require__(214);
        var utils = __webpack_require__(17);

        var assert = utils.assert;

        function PresetCurve(options) {
          if (options.type === 'short')
            this.curve = new curve.short(options);
          else if (options.type === 'edwards')
            this.curve = new curve.edwards(options);
          else
            this.curve = new curve.mont(options);
          this.g = this.curve.g;
          this.n = this.curve.n;
          this.hash = options.hash;

          assert(this.g.validate(), 'Invalid curve');
          assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
        }
        curves.PresetCurve = PresetCurve;

        function defineCurve(name, options) {
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            get: function () {
              var curve = new PresetCurve(options);
              Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                value: curve
              });
              return curve;
            }
          });
        }

        defineCurve('p192', {
          type: 'short',
          prime: 'p192',
          p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
          a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
          b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
          n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
          hash: hash.sha256,
          gRed: false,
          g: [
            '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
            '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
          ]
        });

        defineCurve('p224', {
          type: 'short',
          prime: 'p224',
          p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
          a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
          b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
          n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
          hash: hash.sha256,
          gRed: false,
          g: [
            'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
            'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
          ]
        });

        defineCurve('p256', {
          type: 'short',
          prime: null,
          p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
          a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
          b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
          n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
          hash: hash.sha256,
          gRed: false,
          g: [
            '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
            '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
          ]
        });

        defineCurve('p384', {
          type: 'short',
          prime: null,
          p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
            'fffffffe ffffffff 00000000 00000000 ffffffff',
          a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
            'fffffffe ffffffff 00000000 00000000 fffffffc',
          b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
            '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
          n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
            'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
          hash: hash.sha384,
          gRed: false,
          g: [
            'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
            '5502f25d bf55296c 3a545e38 72760ab7',
            '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
            '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
          ]
        });

        defineCurve('p521', {
          type: 'short',
          prime: null,
          p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
            'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
            'ffffffff ffffffff ffffffff ffffffff ffffffff',
          a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
            'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
            'ffffffff ffffffff ffffffff ffffffff fffffffc',
          b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
            '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
            '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
          n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
            'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
            'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
          hash: hash.sha512,
          gRed: false,
          g: [
            '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
            '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
            'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
            '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
            '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
            '3fad0761 353c7086 a272c240 88be9476 9fd16650'
          ]
        });

        defineCurve('curve25519', {
          type: 'mont',
          prime: 'p25519',
          p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
          a: '76d06',
          b: '1',
          n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
          hash: hash.sha256,
          gRed: false,
          g: [
            '9'
          ]
        });

        defineCurve('ed25519', {
          type: 'edwards',
          prime: 'p25519',
          p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
          a: '-1',
          c: '1',
          // -121665 * (121666^(-1)) (mod P)
          d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
          n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
          hash: hash.sha256,
          gRed: false,
          g: [
            '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

            // 4/5
            '6666666666666666666666666666666666666666666666666666666666666658'
          ]
        });

        var pre;
        try {
          pre = __webpack_require__(508);
        } catch (e) {
          pre = undefined;
        }

        defineCurve('secp256k1', {
          type: 'short',
          prime: 'k256',
          p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
          a: '0',
          b: '7',
          n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
          h: '1',
          hash: hash.sha256,

          // Precomputed endomorphism
          beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
          lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
          basis: [
            {
              a: '3086d221a7d46bcde86c90e49284eb15',
              b: '-e4437ed6010e88286f547fa90abfe4c3'
            },
            {
              a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
              b: '3086d221a7d46bcde86c90e49284eb15'
            }
          ],

          gRed: false,
          g: [
            '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
            '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
            pre
          ]
        });


        /***/
}),
/* 128 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.



        var R = typeof Reflect === 'object' ? Reflect : null
        var ReflectApply = R && typeof R.apply === 'function'
          ? R.apply
          : function ReflectApply(target, receiver, args) {
            return Function.prototype.apply.call(target, receiver, args);
          }

        var ReflectOwnKeys
        if (R && typeof R.ownKeys === 'function') {
          ReflectOwnKeys = R.ownKeys
        } else if (Object.getOwnPropertySymbols) {
          ReflectOwnKeys = function ReflectOwnKeys(target) {
            return Object.getOwnPropertyNames(target)
              .concat(Object.getOwnPropertySymbols(target));
          };
        } else {
          ReflectOwnKeys = function ReflectOwnKeys(target) {
            return Object.getOwnPropertyNames(target);
          };
        }

        function ProcessEmitWarning(warning) {
          if (console && console.warn) console.warn(warning);
        }

        var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
          return value !== value;
        }

        function EventEmitter() {
          EventEmitter.init.call(this);
        }
        module.exports = EventEmitter;

        // Backwards-compat with node 0.10.x
        EventEmitter.EventEmitter = EventEmitter;

        EventEmitter.prototype._events = undefined;
        EventEmitter.prototype._eventsCount = 0;
        EventEmitter.prototype._maxListeners = undefined;

        // By default EventEmitters will print a warning if more than 10 listeners are
        // added to it. This is a useful default which helps finding memory leaks.
        var defaultMaxListeners = 10;

        function checkListener(listener) {
          if (typeof listener !== 'function') {
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
          }
        }

        Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
          enumerable: true,
          get: function () {
            return defaultMaxListeners;
          },
          set: function (arg) {
            if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
              throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
            }
            defaultMaxListeners = arg;
          }
        });

        EventEmitter.init = function () {

          if (this._events === undefined ||
            this._events === Object.getPrototypeOf(this)._events) {
            this._events = Object.create(null);
            this._eventsCount = 0;
          }

          this._maxListeners = this._maxListeners || undefined;
        };

        // Obviously not all Emitters should be limited to 10. This function allows
        // that to be increased. Set to zero for unlimited.
        EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
          if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
          }
          this._maxListeners = n;
          return this;
        };

        function _getMaxListeners(that) {
          if (that._maxListeners === undefined)
            return EventEmitter.defaultMaxListeners;
          return that._maxListeners;
        }

        EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
          return _getMaxListeners(this);
        };

        EventEmitter.prototype.emit = function emit(type) {
          var args = [];
          for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
          var doError = (type === 'error');

          var events = this._events;
          if (events !== undefined)
            doError = (doError && events.error === undefined);
          else if (!doError)
            return false;

          // If there is no 'error' event listener then throw.
          if (doError) {
            var er;
            if (args.length > 0)
              er = args[0];
            if (er instanceof Error) {
              // Note: The comments on the `throw` lines are intentional, they show
              // up in Node's output if this results in an unhandled exception.
              throw er; // Unhandled 'error' event
            }
            // At least give some kind of context to the user
            var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
            err.context = er;
            throw err; // Unhandled 'error' event
          }

          var handler = events[type];

          if (handler === undefined)
            return false;

          if (typeof handler === 'function') {
            ReflectApply(handler, this, args);
          } else {
            var len = handler.length;
            var listeners = arrayClone(handler, len);
            for (var i = 0; i < len; ++i)
              ReflectApply(listeners[i], this, args);
          }

          return true;
        };

        function _addListener(target, type, listener, prepend) {
          var m;
          var events;
          var existing;

          checkListener(listener);

          events = target._events;
          if (events === undefined) {
            events = target._events = Object.create(null);
            target._eventsCount = 0;
          } else {
            // To avoid recursion in the case that type === "newListener"! Before
            // adding it to the listeners, first emit "newListener".
            if (events.newListener !== undefined) {
              target.emit('newListener', type,
                listener.listener ? listener.listener : listener);

              // Re-assign `events` because a newListener handler could have caused the
              // this._events to be assigned to a new object
              events = target._events;
            }
            existing = events[type];
          }

          if (existing === undefined) {
            // Optimize the case of one listener. Don't need the extra array object.
            existing = events[type] = listener;
            ++target._eventsCount;
          } else {
            if (typeof existing === 'function') {
              // Adding the second element, need to change to array.
              existing = events[type] =
                prepend ? [listener, existing] : [existing, listener];
              // If we've already got an array, just append.
            } else if (prepend) {
              existing.unshift(listener);
            } else {
              existing.push(listener);
            }

            // Check for listener leak
            m = _getMaxListeners(target);
            if (m > 0 && existing.length > m && !existing.warned) {
              existing.warned = true;
              // No error code for this since it is a Warning
              // eslint-disable-next-line no-restricted-syntax
              var w = new Error('Possible EventEmitter memory leak detected. ' +
                existing.length + ' ' + String(type) + ' listeners ' +
                'added. Use emitter.setMaxListeners() to ' +
                'increase limit');
              w.name = 'MaxListenersExceededWarning';
              w.emitter = target;
              w.type = type;
              w.count = existing.length;
              ProcessEmitWarning(w);
            }
          }

          return target;
        }

        EventEmitter.prototype.addListener = function addListener(type, listener) {
          return _addListener(this, type, listener, false);
        };

        EventEmitter.prototype.on = EventEmitter.prototype.addListener;

        EventEmitter.prototype.prependListener =
          function prependListener(type, listener) {
            return _addListener(this, type, listener, true);
          };

        function onceWrapper() {
          if (!this.fired) {
            this.target.removeListener(this.type, this.wrapFn);
            this.fired = true;
            if (arguments.length === 0)
              return this.listener.call(this.target);
            return this.listener.apply(this.target, arguments);
          }
        }

        function _onceWrap(target, type, listener) {
          var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
          var wrapped = onceWrapper.bind(state);
          wrapped.listener = listener;
          state.wrapFn = wrapped;
          return wrapped;
        }

        EventEmitter.prototype.once = function once(type, listener) {
          checkListener(listener);
          this.on(type, _onceWrap(this, type, listener));
          return this;
        };

        EventEmitter.prototype.prependOnceListener =
          function prependOnceListener(type, listener) {
            checkListener(listener);
            this.prependListener(type, _onceWrap(this, type, listener));
            return this;
          };

        // Emits a 'removeListener' event if and only if the listener was removed.
        EventEmitter.prototype.removeListener =
          function removeListener(type, listener) {
            var list, events, position, i, originalListener;

            checkListener(listener);

            events = this._events;
            if (events === undefined)
              return this;

            list = events[type];
            if (list === undefined)
              return this;

            if (list === listener || list.listener === listener) {
              if (--this._eventsCount === 0)
                this._events = Object.create(null);
              else {
                delete events[type];
                if (events.removeListener)
                  this.emit('removeListener', type, list.listener || listener);
              }
            } else if (typeof list !== 'function') {
              position = -1;

              for (i = list.length - 1; i >= 0; i--) {
                if (list[i] === listener || list[i].listener === listener) {
                  originalListener = list[i].listener;
                  position = i;
                  break;
                }
              }

              if (position < 0)
                return this;

              if (position === 0)
                list.shift();
              else {
                spliceOne(list, position);
              }

              if (list.length === 1)
                events[type] = list[0];

              if (events.removeListener !== undefined)
                this.emit('removeListener', type, originalListener || listener);
            }

            return this;
          };

        EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

        EventEmitter.prototype.removeAllListeners =
          function removeAllListeners(type) {
            var listeners, events, i;

            events = this._events;
            if (events === undefined)
              return this;

            // not listening for removeListener, no need to emit
            if (events.removeListener === undefined) {
              if (arguments.length === 0) {
                this._events = Object.create(null);
                this._eventsCount = 0;
              } else if (events[type] !== undefined) {
                if (--this._eventsCount === 0)
                  this._events = Object.create(null);
                else
                  delete events[type];
              }
              return this;
            }

            // emit removeListener for all listeners on all events
            if (arguments.length === 0) {
              var keys = Object.keys(events);
              var key;
              for (i = 0; i < keys.length; ++i) {
                key = keys[i];
                if (key === 'removeListener') continue;
                this.removeAllListeners(key);
              }
              this.removeAllListeners('removeListener');
              this._events = Object.create(null);
              this._eventsCount = 0;
              return this;
            }

            listeners = events[type];

            if (typeof listeners === 'function') {
              this.removeListener(type, listeners);
            } else if (listeners !== undefined) {
              // LIFO order
              for (i = listeners.length - 1; i >= 0; i--) {
                this.removeListener(type, listeners[i]);
              }
            }

            return this;
          };

        function _listeners(target, type, unwrap) {
          var events = target._events;

          if (events === undefined)
            return [];

          var evlistener = events[type];
          if (evlistener === undefined)
            return [];

          if (typeof evlistener === 'function')
            return unwrap ? [evlistener.listener || evlistener] : [evlistener];

          return unwrap ?
            unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
        }

        EventEmitter.prototype.listeners = function listeners(type) {
          return _listeners(this, type, true);
        };

        EventEmitter.prototype.rawListeners = function rawListeners(type) {
          return _listeners(this, type, false);
        };

        EventEmitter.listenerCount = function (emitter, type) {
          if (typeof emitter.listenerCount === 'function') {
            return emitter.listenerCount(type);
          } else {
            return listenerCount.call(emitter, type);
          }
        };

        EventEmitter.prototype.listenerCount = listenerCount;
        function listenerCount(type) {
          var events = this._events;

          if (events !== undefined) {
            var evlistener = events[type];

            if (typeof evlistener === 'function') {
              return 1;
            } else if (evlistener !== undefined) {
              return evlistener.length;
            }
          }

          return 0;
        }

        EventEmitter.prototype.eventNames = function eventNames() {
          return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
        };

        function arrayClone(arr, n) {
          var copy = new Array(n);
          for (var i = 0; i < n; ++i)
            copy[i] = arr[i];
          return copy;
        }

        function spliceOne(list, index) {
          for (; index + 1 < list.length; index++)
            list[index] = list[index + 1];
          list.pop();
        }

        function unwrapListeners(arr) {
          var ret = new Array(arr.length);
          for (var i = 0; i < ret.length; ++i) {
            ret[i] = arr[i].listener || arr[i];
          }
          return ret;
        }


        /***/
}),
/* 129 */
/***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(219);
        exports.Stream = exports;
        exports.Readable = exports;
        exports.Writable = __webpack_require__(131);
        exports.Duplex = __webpack_require__(46);
        exports.Transform = __webpack_require__(222);
        exports.PassThrough = __webpack_require__(532);


        /***/
}),
/* 130 */
/***/ (function (module, exports, __webpack_require__) {

        /* eslint-disable node/no-deprecated-api */
        var buffer = __webpack_require__(27)
        var Buffer = buffer.Buffer

        // alternative to using Object.keys for old browsers
        function copyProps(src, dst) {
          for (var key in src) {
            dst[key] = src[key]
          }
        }
        if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
          module.exports = buffer
        } else {
          // Copy properties from require('buffer')
          copyProps(buffer, exports)
          exports.Buffer = SafeBuffer
        }

        function SafeBuffer(arg, encodingOrOffset, length) {
          return Buffer(arg, encodingOrOffset, length)
        }

        // Copy static methods from Buffer
        copyProps(Buffer, SafeBuffer)

        SafeBuffer.from = function (arg, encodingOrOffset, length) {
          if (typeof arg === 'number') {
            throw new TypeError('Argument must not be a number')
          }
          return Buffer(arg, encodingOrOffset, length)
        }

        SafeBuffer.alloc = function (size, fill, encoding) {
          if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number')
          }
          var buf = Buffer(size)
          if (fill !== undefined) {
            if (typeof encoding === 'string') {
              buf.fill(fill, encoding)
            } else {
              buf.fill(fill)
            }
          } else {
            buf.fill(0)
          }
          return buf
        }

        SafeBuffer.allocUnsafe = function (size) {
          if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number')
          }
          return Buffer(size)
        }

        SafeBuffer.allocUnsafeSlow = function (size) {
          if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number')
          }
          return buffer.SlowBuffer(size)
        }


        /***/
}),
/* 131 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
/* WEBPACK VAR INJECTION */(function (process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          // A bit simpler than readable streams.
          // Implement an async ._write(chunk, encoding, cb), and it'll handle all
          // the drain event emission and buffering.



          /*<replacement>*/

          var pna = __webpack_require__(94);
          /*</replacement>*/

          module.exports = Writable;

          /* <replacement> */
          function WriteReq(chunk, encoding, cb) {
            this.chunk = chunk;
            this.encoding = encoding;
            this.callback = cb;
            this.next = null;
          }

          // It seems a linked list but it is not
          // there will be only 2 of these for each stream
          function CorkedRequest(state) {
            var _this = this;

            this.next = null;
            this.entry = null;
            this.finish = function () {
              onCorkedFinish(_this, state);
            };
          }
          /* </replacement> */

          /*<replacement>*/
          var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
          /*</replacement>*/

          /*<replacement>*/
          var Duplex;
          /*</replacement>*/

          Writable.WritableState = WritableState;

          /*<replacement>*/
          var util = Object.create(__webpack_require__(71));
          util.inherits = __webpack_require__(57);
          /*</replacement>*/

          /*<replacement>*/
          var internalUtil = {
            deprecate: __webpack_require__(530)
          };
          /*</replacement>*/

          /*<replacement>*/
          var Stream = __webpack_require__(220);
          /*</replacement>*/

          /*<replacement>*/

          var Buffer = __webpack_require__(130).Buffer;
          var OurUint8Array = global.Uint8Array || function () { };
          function _uint8ArrayToBuffer(chunk) {
            return Buffer.from(chunk);
          }
          function _isUint8Array(obj) {
            return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
          }

          /*</replacement>*/

          var destroyImpl = __webpack_require__(221);

          util.inherits(Writable, Stream);

          function nop() { }

          function WritableState(options, stream) {
            Duplex = Duplex || __webpack_require__(46);

            options = options || {};

            // Duplex streams are both readable and writable, but share
            // the same options object.
            // However, some cases require setting options to different
            // values for the readable and the writable sides of the duplex stream.
            // These options can be provided separately as readableXXX and writableXXX.
            var isDuplex = stream instanceof Duplex;

            // object stream flag to indicate whether or not this stream
            // contains buffers or objects.
            this.objectMode = !!options.objectMode;

            if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

            // the point at which write() starts returning false
            // Note: 0 is a valid value, means that we always return false if
            // the entire buffer is not flushed immediately on write()
            var hwm = options.highWaterMark;
            var writableHwm = options.writableHighWaterMark;
            var defaultHwm = this.objectMode ? 16 : 16 * 1024;

            if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm; else this.highWaterMark = defaultHwm;

            // cast to ints.
            this.highWaterMark = Math.floor(this.highWaterMark);

            // if _final has been called
            this.finalCalled = false;

            // drain event flag.
            this.needDrain = false;
            // at the start of calling end()
            this.ending = false;
            // when end() has been called, and returned
            this.ended = false;
            // when 'finish' is emitted
            this.finished = false;

            // has it been destroyed
            this.destroyed = false;

            // should we decode strings into buffers before passing to _write?
            // this is here so that some node-core streams can optimize string
            // handling at a lower level.
            var noDecode = options.decodeStrings === false;
            this.decodeStrings = !noDecode;

            // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || 'utf8';

            // not an actual buffer we keep track of, but a measurement
            // of how much we're waiting to get pushed to some underlying
            // socket or file.
            this.length = 0;

            // a flag to see when we're in the middle of a write.
            this.writing = false;

            // when true all writes will be buffered until .uncork() call
            this.corked = 0;

            // a flag to be able to tell if the onwrite cb is called immediately,
            // or on a later tick.  We set this to true at first, because any
            // actions that shouldn't happen until "later" should generally also
            // not happen before the first write call.
            this.sync = true;

            // a flag to know if we're processing previously buffered items, which
            // may call the _write() callback in the same tick, so that we don't
            // end up in an overlapped onwrite situation.
            this.bufferProcessing = false;

            // the callback that's passed to _write(chunk,cb)
            this.onwrite = function (er) {
              onwrite(stream, er);
            };

            // the callback that the user supplies to write(chunk,encoding,cb)
            this.writecb = null;

            // the amount that is being written when _write is called.
            this.writelen = 0;

            this.bufferedRequest = null;
            this.lastBufferedRequest = null;

            // number of pending user-supplied write callbacks
            // this must be 0 before 'finish' can be emitted
            this.pendingcb = 0;

            // emit prefinish if the only thing we're waiting for is _write cbs
            // This is relevant for synchronous Transform streams
            this.prefinished = false;

            // True if the error was already emitted and should not be thrown again
            this.errorEmitted = false;

            // count buffered requests
            this.bufferedRequestCount = 0;

            // allocate the first CorkedRequest, there is always
            // one allocated and free to use, and we maintain at most two
            this.corkedRequestsFree = new CorkedRequest(this);
          }

          WritableState.prototype.getBuffer = function getBuffer() {
            var current = this.bufferedRequest;
            var out = [];
            while (current) {
              out.push(current);
              current = current.next;
            }
            return out;
          };

          (function () {
            try {
              Object.defineProperty(WritableState.prototype, 'buffer', {
                get: internalUtil.deprecate(function () {
                  return this.getBuffer();
                }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
              });
            } catch (_) { }
          })();

          // Test _writableState for inheritance to account for Duplex streams,
          // whose prototype chain only points to Readable.
          var realHasInstance;
          if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
            realHasInstance = Function.prototype[Symbol.hasInstance];
            Object.defineProperty(Writable, Symbol.hasInstance, {
              value: function (object) {
                if (realHasInstance.call(this, object)) return true;
                if (this !== Writable) return false;

                return object && object._writableState instanceof WritableState;
              }
            });
          } else {
            realHasInstance = function (object) {
              return object instanceof this;
            };
          }

          function Writable(options) {
            Duplex = Duplex || __webpack_require__(46);

            // Writable ctor is applied to Duplexes, too.
            // `realHasInstance` is necessary because using plain `instanceof`
            // would return false, as no `_writableState` property is attached.

            // Trying to use the custom `instanceof` for Writable here will also break the
            // Node.js LazyTransform implementation, which has a non-trivial getter for
            // `_writableState` that would lead to infinite recursion.
            if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
              return new Writable(options);
            }

            this._writableState = new WritableState(options, this);

            // legacy.
            this.writable = true;

            if (options) {
              if (typeof options.write === 'function') this._write = options.write;

              if (typeof options.writev === 'function') this._writev = options.writev;

              if (typeof options.destroy === 'function') this._destroy = options.destroy;

              if (typeof options.final === 'function') this._final = options.final;
            }

            Stream.call(this);
          }

          // Otherwise people can pipe Writable streams, which is just wrong.
          Writable.prototype.pipe = function () {
            this.emit('error', new Error('Cannot pipe, not readable'));
          };

          function writeAfterEnd(stream, cb) {
            var er = new Error('write after end');
            // TODO: defer error events consistently everywhere, not just the cb
            stream.emit('error', er);
            pna.nextTick(cb, er);
          }

          // Checks that a user-supplied chunk is valid, especially for the particular
          // mode the stream is in. Currently this means that `null` is never accepted
          // and undefined/non-string values are only allowed in object mode.
          function validChunk(stream, state, chunk, cb) {
            var valid = true;
            var er = false;

            if (chunk === null) {
              er = new TypeError('May not write null values to stream');
            } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
              er = new TypeError('Invalid non-string/buffer chunk');
            }
            if (er) {
              stream.emit('error', er);
              pna.nextTick(cb, er);
              valid = false;
            }
            return valid;
          }

          Writable.prototype.write = function (chunk, encoding, cb) {
            var state = this._writableState;
            var ret = false;
            var isBuf = !state.objectMode && _isUint8Array(chunk);

            if (isBuf && !Buffer.isBuffer(chunk)) {
              chunk = _uint8ArrayToBuffer(chunk);
            }

            if (typeof encoding === 'function') {
              cb = encoding;
              encoding = null;
            }

            if (isBuf) encoding = 'buffer'; else if (!encoding) encoding = state.defaultEncoding;

            if (typeof cb !== 'function') cb = nop;

            if (state.ended) writeAfterEnd(this, cb); else if (isBuf || validChunk(this, state, chunk, cb)) {
              state.pendingcb++;
              ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
            }

            return ret;
          };

          Writable.prototype.cork = function () {
            var state = this._writableState;

            state.corked++;
          };

          Writable.prototype.uncork = function () {
            var state = this._writableState;

            if (state.corked) {
              state.corked--;

              if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
            }
          };

          Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
            // node::ParseEncoding() requires lower case.
            if (typeof encoding === 'string') encoding = encoding.toLowerCase();
            if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
            this._writableState.defaultEncoding = encoding;
            return this;
          };

          function decodeChunk(state, chunk, encoding) {
            if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
              chunk = Buffer.from(chunk, encoding);
            }
            return chunk;
          }

          Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function () {
              return this._writableState.highWaterMark;
            }
          });

          // if we're already writing something, then just put this
          // in the queue, and wait our turn.  Otherwise, call _write
          // If we return false, then we need a drain event, so set that flag.
          function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
            if (!isBuf) {
              var newChunk = decodeChunk(state, chunk, encoding);
              if (chunk !== newChunk) {
                isBuf = true;
                encoding = 'buffer';
                chunk = newChunk;
              }
            }
            var len = state.objectMode ? 1 : chunk.length;

            state.length += len;

            var ret = state.length < state.highWaterMark;
            // we must ensure that previous needDrain will not be reset to false.
            if (!ret) state.needDrain = true;

            if (state.writing || state.corked) {
              var last = state.lastBufferedRequest;
              state.lastBufferedRequest = {
                chunk: chunk,
                encoding: encoding,
                isBuf: isBuf,
                callback: cb,
                next: null
              };
              if (last) {
                last.next = state.lastBufferedRequest;
              } else {
                state.bufferedRequest = state.lastBufferedRequest;
              }
              state.bufferedRequestCount += 1;
            } else {
              doWrite(stream, state, false, len, chunk, encoding, cb);
            }

            return ret;
          }

          function doWrite(stream, state, writev, len, chunk, encoding, cb) {
            state.writelen = len;
            state.writecb = cb;
            state.writing = true;
            state.sync = true;
            if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
            state.sync = false;
          }

          function onwriteError(stream, state, sync, er, cb) {
            --state.pendingcb;

            if (sync) {
              // defer the callback if we are being called synchronously
              // to avoid piling up things on the stack
              pna.nextTick(cb, er);
              // this can emit finish, and it will always happen
              // after error
              pna.nextTick(finishMaybe, stream, state);
              stream._writableState.errorEmitted = true;
              stream.emit('error', er);
            } else {
              // the caller expect this to happen before if
              // it is async
              cb(er);
              stream._writableState.errorEmitted = true;
              stream.emit('error', er);
              // this can emit finish, but finish must
              // always follow error
              finishMaybe(stream, state);
            }
          }

          function onwriteStateUpdate(state) {
            state.writing = false;
            state.writecb = null;
            state.length -= state.writelen;
            state.writelen = 0;
          }

          function onwrite(stream, er) {
            var state = stream._writableState;
            var sync = state.sync;
            var cb = state.writecb;

            onwriteStateUpdate(state);

            if (er) onwriteError(stream, state, sync, er, cb); else {
              // Check if we're actually ready to finish, but don't emit yet
              var finished = needFinish(state);

              if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                clearBuffer(stream, state);
              }

              if (sync) {
                /*<replacement>*/
                asyncWrite(afterWrite, stream, state, finished, cb);
                /*</replacement>*/
              } else {
                afterWrite(stream, state, finished, cb);
              }
            }
          }

          function afterWrite(stream, state, finished, cb) {
            if (!finished) onwriteDrain(stream, state);
            state.pendingcb--;
            cb();
            finishMaybe(stream, state);
          }

          // Must force callback to be called on nextTick, so that we don't
          // emit 'drain' before the write() consumer gets the 'false' return
          // value, and has a chance to attach a 'drain' listener.
          function onwriteDrain(stream, state) {
            if (state.length === 0 && state.needDrain) {
              state.needDrain = false;
              stream.emit('drain');
            }
          }

          // if there's something in the buffer waiting, then process it
          function clearBuffer(stream, state) {
            state.bufferProcessing = true;
            var entry = state.bufferedRequest;

            if (stream._writev && entry && entry.next) {
              // Fast case, write everything using _writev()
              var l = state.bufferedRequestCount;
              var buffer = new Array(l);
              var holder = state.corkedRequestsFree;
              holder.entry = entry;

              var count = 0;
              var allBuffers = true;
              while (entry) {
                buffer[count] = entry;
                if (!entry.isBuf) allBuffers = false;
                entry = entry.next;
                count += 1;
              }
              buffer.allBuffers = allBuffers;

              doWrite(stream, state, true, state.length, buffer, '', holder.finish);

              // doWrite is almost always async, defer these to save a bit of time
              // as the hot path ends with doWrite
              state.pendingcb++;
              state.lastBufferedRequest = null;
              if (holder.next) {
                state.corkedRequestsFree = holder.next;
                holder.next = null;
              } else {
                state.corkedRequestsFree = new CorkedRequest(state);
              }
              state.bufferedRequestCount = 0;
            } else {
              // Slow case, write chunks one-by-one
              while (entry) {
                var chunk = entry.chunk;
                var encoding = entry.encoding;
                var cb = entry.callback;
                var len = state.objectMode ? 1 : chunk.length;

                doWrite(stream, state, false, len, chunk, encoding, cb);
                entry = entry.next;
                state.bufferedRequestCount--;
                // if we didn't call the onwrite immediately, then
                // it means that we need to wait until it does.
                // also, that means that the chunk and cb are currently
                // being processed, so move the buffer counter past them.
                if (state.writing) {
                  break;
                }
              }

              if (entry === null) state.lastBufferedRequest = null;
            }

            state.bufferedRequest = entry;
            state.bufferProcessing = false;
          }

          Writable.prototype._write = function (chunk, encoding, cb) {
            cb(new Error('_write() is not implemented'));
          };

          Writable.prototype._writev = null;

          Writable.prototype.end = function (chunk, encoding, cb) {
            var state = this._writableState;

            if (typeof chunk === 'function') {
              cb = chunk;
              chunk = null;
              encoding = null;
            } else if (typeof encoding === 'function') {
              cb = encoding;
              encoding = null;
            }

            if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

            // .end() fully uncorks
            if (state.corked) {
              state.corked = 1;
              this.uncork();
            }

            // ignore unnecessary end() calls.
            if (!state.ending && !state.finished) endWritable(this, state, cb);
          };

          function needFinish(state) {
            return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
          }
          function callFinal(stream, state) {
            stream._final(function (err) {
              state.pendingcb--;
              if (err) {
                stream.emit('error', err);
              }
              state.prefinished = true;
              stream.emit('prefinish');
              finishMaybe(stream, state);
            });
          }
          function prefinish(stream, state) {
            if (!state.prefinished && !state.finalCalled) {
              if (typeof stream._final === 'function') {
                state.pendingcb++;
                state.finalCalled = true;
                pna.nextTick(callFinal, stream, state);
              } else {
                state.prefinished = true;
                stream.emit('prefinish');
              }
            }
          }

          function finishMaybe(stream, state) {
            var need = needFinish(state);
            if (need) {
              prefinish(stream, state);
              if (state.pendingcb === 0) {
                state.finished = true;
                stream.emit('finish');
              }
            }
            return need;
          }

          function endWritable(stream, state, cb) {
            state.ending = true;
            finishMaybe(stream, state);
            if (cb) {
              if (state.finished) pna.nextTick(cb); else stream.once('finish', cb);
            }
            state.ended = true;
            stream.writable = false;
          }

          function onCorkedFinish(corkReq, state, err) {
            var entry = corkReq.entry;
            corkReq.entry = null;
            while (entry) {
              var cb = entry.callback;
              state.pendingcb--;
              cb(err);
              entry = entry.next;
            }
            if (state.corkedRequestsFree) {
              state.corkedRequestsFree.next = corkReq;
            } else {
              state.corkedRequestsFree = corkReq;
            }
          }

          Object.defineProperty(Writable.prototype, 'destroyed', {
            get: function () {
              if (this._writableState === undefined) {
                return false;
              }
              return this._writableState.destroyed;
            },
            set: function (value) {
              // we ignore the value if the stream
              // has not been initialized yet
              if (!this._writableState) {
                return;
              }

              // backward compatibility, the user is explicitly
              // managing destroyed
              this._writableState.destroyed = value;
            }
          });

          Writable.prototype.destroy = destroyImpl.destroy;
          Writable.prototype._undestroy = destroyImpl.undestroy;
          Writable.prototype._destroy = function (err, cb) {
            this.end();
            cb(err);
          };
          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(60), __webpack_require__(528).setImmediate, __webpack_require__(21)))

        /***/
}),
/* 132 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.



        /*<replacement>*/

        var Buffer = __webpack_require__(531).Buffer;
        /*</replacement>*/

        var isEncoding = Buffer.isEncoding || function (encoding) {
          encoding = '' + encoding;
          switch (encoding && encoding.toLowerCase()) {
            case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw':
              return true;
            default:
              return false;
          }
        };

        function _normalizeEncoding(enc) {
          if (!enc) return 'utf8';
          var retried;
          while (true) {
            switch (enc) {
              case 'utf8':
              case 'utf-8':
                return 'utf8';
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return 'utf16le';
              case 'latin1':
              case 'binary':
                return 'latin1';
              case 'base64':
              case 'ascii':
              case 'hex':
                return enc;
              default:
                if (retried) return; // undefined
                enc = ('' + enc).toLowerCase();
                retried = true;
            }
          }
        };

        // Do not cache `Buffer.isEncoding` when checking encoding names as some
        // modules monkey-patch it to support additional encodings
        function normalizeEncoding(enc) {
          var nenc = _normalizeEncoding(enc);
          if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
          return nenc || enc;
        }

        // StringDecoder provides an interface for efficiently splitting a series of
        // buffers into a series of JS strings without breaking apart multi-byte
        // characters.
        exports.StringDecoder = StringDecoder;
        function StringDecoder(encoding) {
          this.encoding = normalizeEncoding(encoding);
          var nb;
          switch (this.encoding) {
            case 'utf16le':
              this.text = utf16Text;
              this.end = utf16End;
              nb = 4;
              break;
            case 'utf8':
              this.fillLast = utf8FillLast;
              nb = 4;
              break;
            case 'base64':
              this.text = base64Text;
              this.end = base64End;
              nb = 3;
              break;
            default:
              this.write = simpleWrite;
              this.end = simpleEnd;
              return;
          }
          this.lastNeed = 0;
          this.lastTotal = 0;
          this.lastChar = Buffer.allocUnsafe(nb);
        }

        StringDecoder.prototype.write = function (buf) {
          if (buf.length === 0) return '';
          var r;
          var i;
          if (this.lastNeed) {
            r = this.fillLast(buf);
            if (r === undefined) return '';
            i = this.lastNeed;
            this.lastNeed = 0;
          } else {
            i = 0;
          }
          if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
          return r || '';
        };

        StringDecoder.prototype.end = utf8End;

        // Returns only complete characters in a Buffer
        StringDecoder.prototype.text = utf8Text;

        // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
        StringDecoder.prototype.fillLast = function (buf) {
          if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
          }
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
          this.lastNeed -= buf.length;
        };

        // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
        // continuation byte. If an invalid byte is detected, -2 is returned.
        function utf8CheckByte(byte) {
          if (byte <= 0x7F) return 0; else if (byte >> 5 === 0x06) return 2; else if (byte >> 4 === 0x0E) return 3; else if (byte >> 3 === 0x1E) return 4;
          return byte >> 6 === 0x02 ? -1 : -2;
        }

        // Checks at most 3 bytes at the end of a Buffer in order to detect an
        // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
        // needed to complete the UTF-8 character (if applicable) are returned.
        function utf8CheckIncomplete(self, buf, i) {
          var j = buf.length - 1;
          if (j < i) return 0;
          var nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0) self.lastNeed = nb - 1;
            return nb;
          }
          if (--j < i || nb === -2) return 0;
          nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0) self.lastNeed = nb - 2;
            return nb;
          }
          if (--j < i || nb === -2) return 0;
          nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0) {
              if (nb === 2) nb = 0; else self.lastNeed = nb - 3;
            }
            return nb;
          }
          return 0;
        }

        // Validates as many continuation bytes for a multi-byte UTF-8 character as
        // needed or are available. If we see a non-continuation byte where we expect
        // one, we "replace" the validated continuation bytes we've seen so far with
        // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
        // behavior. The continuation byte check is included three times in the case
        // where all of the continuation bytes for a character exist in the same buffer.
        // It is also done this way as a slight performance increase instead of using a
        // loop.
        function utf8CheckExtraBytes(self, buf, p) {
          if ((buf[0] & 0xC0) !== 0x80) {
            self.lastNeed = 0;
            return '\ufffd';
          }
          if (self.lastNeed > 1 && buf.length > 1) {
            if ((buf[1] & 0xC0) !== 0x80) {
              self.lastNeed = 1;
              return '\ufffd';
            }
            if (self.lastNeed > 2 && buf.length > 2) {
              if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return '\ufffd';
              }
            }
          }
        }

        // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
        function utf8FillLast(buf) {
          var p = this.lastTotal - this.lastNeed;
          var r = utf8CheckExtraBytes(this, buf, p);
          if (r !== undefined) return r;
          if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, p, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
          }
          buf.copy(this.lastChar, p, 0, buf.length);
          this.lastNeed -= buf.length;
        }

        // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
        // partial character, the character's bytes are buffered until the required
        // number of bytes are available.
        function utf8Text(buf, i) {
          var total = utf8CheckIncomplete(this, buf, i);
          if (!this.lastNeed) return buf.toString('utf8', i);
          this.lastTotal = total;
          var end = buf.length - (total - this.lastNeed);
          buf.copy(this.lastChar, 0, end);
          return buf.toString('utf8', i, end);
        }

        // For UTF-8, a replacement character is added when ending on a partial
        // character.
        function utf8End(buf) {
          var r = buf && buf.length ? this.write(buf) : '';
          if (this.lastNeed) return r + '\ufffd';
          return r;
        }

        // UTF-16LE typically needs two bytes per character, but even if we have an even
        // number of bytes available, we need to check if we end on a leading/high
        // surrogate. In that case, we need to wait for the next two bytes in order to
        // decode the last character properly.
        function utf16Text(buf, i) {
          if ((buf.length - i) % 2 === 0) {
            var r = buf.toString('utf16le', i);
            if (r) {
              var c = r.charCodeAt(r.length - 1);
              if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
              }
            }
            return r;
          }
          this.lastNeed = 1;
          this.lastTotal = 2;
          this.lastChar[0] = buf[buf.length - 1];
          return buf.toString('utf16le', i, buf.length - 1);
        }

        // For UTF-16LE we do not explicitly append special replacement characters if we
        // end on a partial character, we simply let v8 handle that.
        function utf16End(buf) {
          var r = buf && buf.length ? this.write(buf) : '';
          if (this.lastNeed) {
            var end = this.lastTotal - this.lastNeed;
            return r + this.lastChar.toString('utf16le', 0, end);
          }
          return r;
        }

        function base64Text(buf, i) {
          var n = (buf.length - i) % 3;
          if (n === 0) return buf.toString('base64', i);
          this.lastNeed = 3 - n;
          this.lastTotal = 3;
          if (n === 1) {
            this.lastChar[0] = buf[buf.length - 1];
          } else {
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
          }
          return buf.toString('base64', i, buf.length - n);
        }

        function base64End(buf) {
          var r = buf && buf.length ? this.write(buf) : '';
          if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
          return r;
        }

        // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
        function simpleWrite(buf) {
          return buf.toString(this.encoding);
        }

        function simpleEnd(buf) {
          return buf && buf.length ? this.write(buf) : '';
        }

        /***/
}),
/* 133 */
/***/ (function (module, exports) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /** @file jsonrpc.js
         * @authors:
         *   Marek Kotewicz <marek@ethdev.com>
         *   Aaron Kumavis <aaron@kumavis.me>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        // Initialize Jsonrpc as a simple object with utility functions.
        var Jsonrpc = {
          messageId: 0
        };

        /**
         * Should be called to valid json create payload object
         * Need to is 2.0
         *
         * @method toPayload
         * @param {Function} method of jsonrpc call, required
         * @param {Array} params, an array of method params, optional
         * @returns {Object} valid jsonrpc payload object
         */
        Jsonrpc.toPayload = function (method, params) {
          if (!method)
            console.error('jsonrpc method should be specified!');

          // advance message ID
          Jsonrpc.messageId++;

          return {
            jsonrpc: '2.0',
            id: Jsonrpc.messageId,
            method: method,
            params: params || []
          };
        };

        /**
         * Should be called to check if jsonrpc response is valid
         *
         * @method isValidResponse
         * @param {Object}
         * @returns {Boolean} true if response is valid, otherwise false
         */
        Jsonrpc.isValidResponse = function (response) {
          // console.log("Check valid res!");

          return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);

          function validateSingleMessage(message) {
            return !!message &&
              !message.error &&
              message.jsonrpc === '2.0' &&
              typeof message.id === 'number' &&
              message.result !== undefined; // only undefined is not valid json object
          }
        };

        /**
         * Should be called to create batch payload object
         *
         * @method toBatchPayload
         * @param {Array} messages, an array of objects with method (required) and params (optional) fields
         * @returns {Array} batch payload
         */
        Jsonrpc.toBatchPayload = function (messages) {
          return messages.map(function (message) {
            return Jsonrpc.toPayload(message.method, message.params);
          });
        };

        module.exports = Jsonrpc;



        /***/
}),
/* 134 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
/* WEBPACK VAR INJECTION */(function (global) {

          var objectAssign = __webpack_require__(233);

          // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
          // original notice:

          /*!
           * The buffer module from node.js, for the browser.
           *
           * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
           * @license  MIT
           */
          function compare(a, b) {
            if (a === b) {
              return 0;
            }

            var x = a.length;
            var y = b.length;

            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
              if (a[i] !== b[i]) {
                x = a[i];
                y = b[i];
                break;
              }
            }

            if (x < y) {
              return -1;
            }
            if (y < x) {
              return 1;
            }
            return 0;
          }
          function isBuffer(b) {
            if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
              return global.Buffer.isBuffer(b);
            }
            return !!(b != null && b._isBuffer);
          }

          // based on node assert, original notice:
          // NB: The URL to the CommonJS spec is kept just for tradition.
          //     node-assert has evolved a lot since then, both in API and behavior.

          // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
          //
          // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
          //
          // Originally from narwhal.js (http://narwhaljs.org)
          // Copyright (c) 2009 Thomas Robinson <280north.com>
          //
          // Permission is hereby granted, free of charge, to any person obtaining a copy
          // of this software and associated documentation files (the 'Software'), to
          // deal in the Software without restriction, including without limitation the
          // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
          // sell copies of the Software, and to permit persons to whom the Software is
          // furnished to do so, subject to the following conditions:
          //
          // The above copyright notice and this permission notice shall be included in
          // all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
          // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
          // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

          var util = __webpack_require__(234);
          var hasOwn = Object.prototype.hasOwnProperty;
          var pSlice = Array.prototype.slice;
          var functionsHaveNames = (function () {
            return function foo() { }.name === 'foo';
          }());
          function pToString(obj) {
            return Object.prototype.toString.call(obj);
          }
          function isView(arrbuf) {
            if (isBuffer(arrbuf)) {
              return false;
            }
            if (typeof global.ArrayBuffer !== 'function') {
              return false;
            }
            if (typeof ArrayBuffer.isView === 'function') {
              return ArrayBuffer.isView(arrbuf);
            }
            if (!arrbuf) {
              return false;
            }
            if (arrbuf instanceof DataView) {
              return true;
            }
            if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
              return true;
            }
            return false;
          }
          // 1. The assert module provides functions that throw
          // AssertionError's when particular conditions are not met. The
          // assert module must conform to the following interface.

          var assert = module.exports = ok;

          // 2. The AssertionError is defined in assert.
          // new assert.AssertionError({ message: message,
          //                             actual: actual,
          //                             expected: expected })

          var regex = /\s*function\s+([^\(\s]*)\s*/;
          // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
          function getName(func) {
            if (!util.isFunction(func)) {
              return;
            }
            if (functionsHaveNames) {
              return func.name;
            }
            var str = func.toString();
            var match = str.match(regex);
            return match && match[1];
          }
          assert.AssertionError = function AssertionError(options) {
            this.name = 'AssertionError';
            this.actual = options.actual;
            this.expected = options.expected;
            this.operator = options.operator;
            if (options.message) {
              this.message = options.message;
              this.generatedMessage = false;
            } else {
              this.message = getMessage(this);
              this.generatedMessage = true;
            }
            var stackStartFunction = options.stackStartFunction || fail;
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, stackStartFunction);
            } else {
              // non v8 browsers so we can have a stacktrace
              var err = new Error();
              if (err.stack) {
                var out = err.stack;

                // try to strip useless frames
                var fn_name = getName(stackStartFunction);
                var idx = out.indexOf('\n' + fn_name);
                if (idx >= 0) {
                  // once we have located the function frame
                  // we need to strip out everything before it (and its line)
                  var next_line = out.indexOf('\n', idx + 1);
                  out = out.substring(next_line + 1);
                }

                this.stack = out;
              }
            }
          };

          // assert.AssertionError instanceof Error
          util.inherits(assert.AssertionError, Error);

          function truncate(s, n) {
            if (typeof s === 'string') {
              return s.length < n ? s : s.slice(0, n);
            } else {
              return s;
            }
          }
          function inspect(something) {
            if (functionsHaveNames || !util.isFunction(something)) {
              return util.inspect(something);
            }
            var rawname = getName(something);
            var name = rawname ? ': ' + rawname : '';
            return '[Function' + name + ']';
          }
          function getMessage(self) {
            return truncate(inspect(self.actual), 128) + ' ' +
              self.operator + ' ' +
              truncate(inspect(self.expected), 128);
          }

          // At present only the three keys mentioned above are used and
          // understood by the spec. Implementations or sub modules can pass
          // other keys to the AssertionError's constructor - they will be
          // ignored.

          // 3. All of the following functions must throw an AssertionError
          // when a corresponding condition is not met, with a message that
          // may be undefined if not provided.  All assertion methods provide
          // both the actual and expected values to the assertion error for
          // display purposes.

          function fail(actual, expected, message, operator, stackStartFunction) {
            throw new assert.AssertionError({
              message: message,
              actual: actual,
              expected: expected,
              operator: operator,
              stackStartFunction: stackStartFunction
            });
          }

          // EXTENSION! allows for well behaved errors defined elsewhere.
          assert.fail = fail;

          // 4. Pure assertion tests whether a value is truthy, as determined
          // by !!guard.
          // assert.ok(guard, message_opt);
          // This statement is equivalent to assert.equal(true, !!guard,
          // message_opt);. To test strictly for the value true, use
          // assert.strictEqual(true, guard, message_opt);.

          function ok(value, message) {
            if (!value) fail(value, true, message, '==', assert.ok);
          }
          assert.ok = ok;

          // 5. The equality assertion tests shallow, coercive equality with
          // ==.
          // assert.equal(actual, expected, message_opt);

          assert.equal = function equal(actual, expected, message) {
            if (actual != expected) fail(actual, expected, message, '==', assert.equal);
          };

          // 6. The non-equality assertion tests for whether two objects are not equal
          // with != assert.notEqual(actual, expected, message_opt);

          assert.notEqual = function notEqual(actual, expected, message) {
            if (actual == expected) {
              fail(actual, expected, message, '!=', assert.notEqual);
            }
          };

          // 7. The equivalence assertion tests a deep equality relation.
          // assert.deepEqual(actual, expected, message_opt);

          assert.deepEqual = function deepEqual(actual, expected, message) {
            if (!_deepEqual(actual, expected, false)) {
              fail(actual, expected, message, 'deepEqual', assert.deepEqual);
            }
          };

          assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
            if (!_deepEqual(actual, expected, true)) {
              fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
            }
          };

          function _deepEqual(actual, expected, strict, memos) {
            // 7.1. All identical values are equivalent, as determined by ===.
            if (actual === expected) {
              return true;
            } else if (isBuffer(actual) && isBuffer(expected)) {
              return compare(actual, expected) === 0;

              // 7.2. If the expected value is a Date object, the actual value is
              // equivalent if it is also a Date object that refers to the same time.
            } else if (util.isDate(actual) && util.isDate(expected)) {
              return actual.getTime() === expected.getTime();

              // 7.3 If the expected value is a RegExp object, the actual value is
              // equivalent if it is also a RegExp object with the same source and
              // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
            } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
              return actual.source === expected.source &&
                actual.global === expected.global &&
                actual.multiline === expected.multiline &&
                actual.lastIndex === expected.lastIndex &&
                actual.ignoreCase === expected.ignoreCase;

              // 7.4. Other pairs that do not both pass typeof value == 'object',
              // equivalence is determined by ==.
            } else if ((actual === null || typeof actual !== 'object') &&
              (expected === null || typeof expected !== 'object')) {
              return strict ? actual === expected : actual == expected;

              // If both values are instances of typed arrays, wrap their underlying
              // ArrayBuffers in a Buffer each to increase performance
              // This optimization requires the arrays to have the same type as checked by
              // Object.prototype.toString (aka pToString). Never perform binary
              // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
              // bit patterns are not identical.
            } else if (isView(actual) && isView(expected) &&
              pToString(actual) === pToString(expected) &&
              !(actual instanceof Float32Array ||
                actual instanceof Float64Array)) {
              return compare(new Uint8Array(actual.buffer),
                new Uint8Array(expected.buffer)) === 0;

              // 7.5 For all other Object pairs, including Array objects, equivalence is
              // determined by having the same number of owned properties (as verified
              // with Object.prototype.hasOwnProperty.call), the same set of keys
              // (although not necessarily the same order), equivalent values for every
              // corresponding key, and an identical 'prototype' property. Note: this
              // accounts for both named and indexed properties on Arrays.
            } else if (isBuffer(actual) !== isBuffer(expected)) {
              return false;
            } else {
              memos = memos || { actual: [], expected: [] };

              var actualIndex = memos.actual.indexOf(actual);
              if (actualIndex !== -1) {
                if (actualIndex === memos.expected.indexOf(expected)) {
                  return true;
                }
              }

              memos.actual.push(actual);
              memos.expected.push(expected);

              return objEquiv(actual, expected, strict, memos);
            }
          }

          function isArguments(object) {
            return Object.prototype.toString.call(object) == '[object Arguments]';
          }

          function objEquiv(a, b, strict, actualVisitedObjects) {
            if (a === null || a === undefined || b === null || b === undefined)
              return false;
            // if one is a primitive, the other must be same
            if (util.isPrimitive(a) || util.isPrimitive(b))
              return a === b;
            if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
              return false;
            var aIsArgs = isArguments(a);
            var bIsArgs = isArguments(b);
            if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
              return false;
            if (aIsArgs) {
              a = pSlice.call(a);
              b = pSlice.call(b);
              return _deepEqual(a, b, strict);
            }
            var ka = objectKeys(a);
            var kb = objectKeys(b);
            var key, i;
            // having the same number of owned properties (keys incorporates
            // hasOwnProperty)
            if (ka.length !== kb.length)
              return false;
            //the same set of keys (although not necessarily the same order),
            ka.sort();
            kb.sort();
            //~~~cheap key test
            for (i = ka.length - 1; i >= 0; i--) {
              if (ka[i] !== kb[i])
                return false;
            }
            //equivalent values for every corresponding key, and
            //~~~possibly expensive deep test
            for (i = ka.length - 1; i >= 0; i--) {
              key = ka[i];
              if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
                return false;
            }
            return true;
          }

          // 8. The non-equivalence assertion tests for any deep inequality.
          // assert.notDeepEqual(actual, expected, message_opt);

          assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
            if (_deepEqual(actual, expected, false)) {
              fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
            }
          };

          assert.notDeepStrictEqual = notDeepStrictEqual;
          function notDeepStrictEqual(actual, expected, message) {
            if (_deepEqual(actual, expected, true)) {
              fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
            }
          }


          // 9. The strict equality assertion tests strict equality, as determined by ===.
          // assert.strictEqual(actual, expected, message_opt);

          assert.strictEqual = function strictEqual(actual, expected, message) {
            if (actual !== expected) {
              fail(actual, expected, message, '===', assert.strictEqual);
            }
          };

          // 10. The strict non-equality assertion tests for strict inequality, as
          // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

          assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
            if (actual === expected) {
              fail(actual, expected, message, '!==', assert.notStrictEqual);
            }
          };

          function expectedException(actual, expected) {
            if (!actual || !expected) {
              return false;
            }

            if (Object.prototype.toString.call(expected) == '[object RegExp]') {
              return expected.test(actual);
            }

            try {
              if (actual instanceof expected) {
                return true;
              }
            } catch (e) {
              // Ignore.  The instanceof check doesn't work for arrow functions.
            }

            if (Error.isPrototypeOf(expected)) {
              return false;
            }

            return expected.call({}, actual) === true;
          }

          function _tryBlock(block) {
            var error;
            try {
              block();
            } catch (e) {
              error = e;
            }
            return error;
          }

          function _throws(shouldThrow, block, expected, message) {
            var actual;

            if (typeof block !== 'function') {
              throw new TypeError('"block" argument must be a function');
            }

            if (typeof expected === 'string') {
              message = expected;
              expected = null;
            }

            actual = _tryBlock(block);

            message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
              (message ? ' ' + message : '.');

            if (shouldThrow && !actual) {
              fail(actual, expected, 'Missing expected exception' + message);
            }

            var userProvidedMessage = typeof message === 'string';
            var isUnwantedException = !shouldThrow && util.isError(actual);
            var isUnexpectedException = !shouldThrow && actual && !expected;

            if ((isUnwantedException &&
              userProvidedMessage &&
              expectedException(actual, expected)) ||
              isUnexpectedException) {
              fail(actual, expected, 'Got unwanted exception' + message);
            }

            if ((shouldThrow && actual && expected &&
              !expectedException(actual, expected)) || (!shouldThrow && actual)) {
              throw actual;
            }
          }

          // 11. Expected to throw an error:
          // assert.throws(block, Error_opt, message_opt);

          assert.throws = function (block, /*optional*/error, /*optional*/message) {
            _throws(true, block, error, message);
          };

          // EXTENSION! This is annoying to write outside this module.
          assert.doesNotThrow = function (block, /*optional*/error, /*optional*/message) {
            _throws(false, block, error, message);
          };

          assert.ifError = function (err) { if (err) throw err; };

          // Expose a strict only variant of assert
          function strict(value, message) {
            if (!value) fail(value, true, message, '==', strict);
          }
          assert.strict = objectAssign(strict, assert, {
            equal: assert.strictEqual,
            deepEqual: assert.deepStrictEqual,
            notEqual: assert.notStrictEqual,
            notDeepEqual: assert.notDeepStrictEqual
          });
          assert.strict.strict = assert.strict;

          var objectKeys = Object.keys || function (obj) {
            var keys = [];
            for (var key in obj) {
              if (hasOwn.call(obj, key)) keys.push(key);
            }
            return keys;
          };

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(21)))

        /***/
}),
/* 135 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(22);
        var rotr32 = utils.rotr32;

        function ft_1(s, x, y, z) {
          if (s === 0)
            return ch32(x, y, z);
          if (s === 1 || s === 3)
            return p32(x, y, z);
          if (s === 2)
            return maj32(x, y, z);
        }
        exports.ft_1 = ft_1;

        function ch32(x, y, z) {
          return (x & y) ^ ((~x) & z);
        }
        exports.ch32 = ch32;

        function maj32(x, y, z) {
          return (x & y) ^ (x & z) ^ (y & z);
        }
        exports.maj32 = maj32;

        function p32(x, y, z) {
          return x ^ y ^ z;
        }
        exports.p32 = p32;

        function s0_256(x) {
          return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
        }
        exports.s0_256 = s0_256;

        function s1_256(x) {
          return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
        }
        exports.s1_256 = s1_256;

        function g0_256(x) {
          return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
        }
        exports.g0_256 = g0_256;

        function g1_256(x) {
          return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
        }
        exports.g1_256 = g1_256;


        /***/
}),
/* 136 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(22);
        var common = __webpack_require__(61);
        var shaCommon = __webpack_require__(135);
        var assert = __webpack_require__(37);

        var sum32 = utils.sum32;
        var sum32_4 = utils.sum32_4;
        var sum32_5 = utils.sum32_5;
        var ch32 = shaCommon.ch32;
        var maj32 = shaCommon.maj32;
        var s0_256 = shaCommon.s0_256;
        var s1_256 = shaCommon.s1_256;
        var g0_256 = shaCommon.g0_256;
        var g1_256 = shaCommon.g1_256;

        var BlockHash = common.BlockHash;

        var sha256_K = [
          0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
          0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
          0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
          0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
          0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
          0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
          0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
          0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
          0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
          0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
          0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
          0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
          0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
          0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
          0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
          0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ];

        function SHA256() {
          if (!(this instanceof SHA256))
            return new SHA256();

          BlockHash.call(this);
          this.h = [
            0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
            0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
          ];
          this.k = sha256_K;
          this.W = new Array(64);
        }
        utils.inherits(SHA256, BlockHash);
        module.exports = SHA256;

        SHA256.blockSize = 512;
        SHA256.outSize = 256;
        SHA256.hmacStrength = 192;
        SHA256.padLength = 64;

        SHA256.prototype._update = function _update(msg, start) {
          var W = this.W;

          for (var i = 0; i < 16; i++)
            W[i] = msg[start + i];
          for (; i < W.length; i++)
            W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

          var a = this.h[0];
          var b = this.h[1];
          var c = this.h[2];
          var d = this.h[3];
          var e = this.h[4];
          var f = this.h[5];
          var g = this.h[6];
          var h = this.h[7];

          assert(this.k.length === W.length);
          for (i = 0; i < W.length; i++) {
            var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
            var T2 = sum32(s0_256(a), maj32(a, b, c));
            h = g;
            g = f;
            f = e;
            e = sum32(d, T1);
            d = c;
            c = b;
            b = a;
            a = sum32(T1, T2);
          }

          this.h[0] = sum32(this.h[0], a);
          this.h[1] = sum32(this.h[1], b);
          this.h[2] = sum32(this.h[2], c);
          this.h[3] = sum32(this.h[3], d);
          this.h[4] = sum32(this.h[4], e);
          this.h[5] = sum32(this.h[5], f);
          this.h[6] = sum32(this.h[6], g);
          this.h[7] = sum32(this.h[7], h);
        };

        SHA256.prototype._digest = function digest(enc) {
          if (enc === 'hex')
            return utils.toHex32(this.h, 'big');
          else
            return utils.split32(this.h, 'big');
        };


        /***/
}),
/* 137 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(22);
        var common = __webpack_require__(61);
        var assert = __webpack_require__(37);

        var rotr64_hi = utils.rotr64_hi;
        var rotr64_lo = utils.rotr64_lo;
        var shr64_hi = utils.shr64_hi;
        var shr64_lo = utils.shr64_lo;
        var sum64 = utils.sum64;
        var sum64_hi = utils.sum64_hi;
        var sum64_lo = utils.sum64_lo;
        var sum64_4_hi = utils.sum64_4_hi;
        var sum64_4_lo = utils.sum64_4_lo;
        var sum64_5_hi = utils.sum64_5_hi;
        var sum64_5_lo = utils.sum64_5_lo;

        var BlockHash = common.BlockHash;

        var sha512_K = [
          0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
          0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
          0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
          0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
          0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
          0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
          0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
          0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
          0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
          0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
          0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
          0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
          0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
          0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
          0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
          0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
          0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
          0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
          0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
          0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
          0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
          0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
          0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
          0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
          0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
          0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
          0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
          0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
          0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
          0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
          0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
          0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
          0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
          0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
          0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
          0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
          0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
          0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
          0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
          0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
        ];

        function SHA512() {
          if (!(this instanceof SHA512))
            return new SHA512();

          BlockHash.call(this);
          this.h = [
            0x6a09e667, 0xf3bcc908,
            0xbb67ae85, 0x84caa73b,
            0x3c6ef372, 0xfe94f82b,
            0xa54ff53a, 0x5f1d36f1,
            0x510e527f, 0xade682d1,
            0x9b05688c, 0x2b3e6c1f,
            0x1f83d9ab, 0xfb41bd6b,
            0x5be0cd19, 0x137e2179];
          this.k = sha512_K;
          this.W = new Array(160);
        }
        utils.inherits(SHA512, BlockHash);
        module.exports = SHA512;

        SHA512.blockSize = 1024;
        SHA512.outSize = 512;
        SHA512.hmacStrength = 192;
        SHA512.padLength = 128;

        SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
          var W = this.W;

          // 32 x 32bit words
          for (var i = 0; i < 32; i++)
            W[i] = msg[start + i];
          for (; i < W.length; i += 2) {
            var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
            var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
            var c1_hi = W[i - 14];  // i - 7
            var c1_lo = W[i - 13];
            var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
            var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
            var c3_hi = W[i - 32];  // i - 16
            var c3_lo = W[i - 31];

            W[i] = sum64_4_hi(
              c0_hi, c0_lo,
              c1_hi, c1_lo,
              c2_hi, c2_lo,
              c3_hi, c3_lo);
            W[i + 1] = sum64_4_lo(
              c0_hi, c0_lo,
              c1_hi, c1_lo,
              c2_hi, c2_lo,
              c3_hi, c3_lo);
          }
        };

        SHA512.prototype._update = function _update(msg, start) {
          this._prepareBlock(msg, start);

          var W = this.W;

          var ah = this.h[0];
          var al = this.h[1];
          var bh = this.h[2];
          var bl = this.h[3];
          var ch = this.h[4];
          var cl = this.h[5];
          var dh = this.h[6];
          var dl = this.h[7];
          var eh = this.h[8];
          var el = this.h[9];
          var fh = this.h[10];
          var fl = this.h[11];
          var gh = this.h[12];
          var gl = this.h[13];
          var hh = this.h[14];
          var hl = this.h[15];

          assert(this.k.length === W.length);
          for (var i = 0; i < W.length; i += 2) {
            var c0_hi = hh;
            var c0_lo = hl;
            var c1_hi = s1_512_hi(eh, el);
            var c1_lo = s1_512_lo(eh, el);
            var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
            var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
            var c3_hi = this.k[i];
            var c3_lo = this.k[i + 1];
            var c4_hi = W[i];
            var c4_lo = W[i + 1];

            var T1_hi = sum64_5_hi(
              c0_hi, c0_lo,
              c1_hi, c1_lo,
              c2_hi, c2_lo,
              c3_hi, c3_lo,
              c4_hi, c4_lo);
            var T1_lo = sum64_5_lo(
              c0_hi, c0_lo,
              c1_hi, c1_lo,
              c2_hi, c2_lo,
              c3_hi, c3_lo,
              c4_hi, c4_lo);

            c0_hi = s0_512_hi(ah, al);
            c0_lo = s0_512_lo(ah, al);
            c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
            c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

            var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
            var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

            hh = gh;
            hl = gl;

            gh = fh;
            gl = fl;

            fh = eh;
            fl = el;

            eh = sum64_hi(dh, dl, T1_hi, T1_lo);
            el = sum64_lo(dl, dl, T1_hi, T1_lo);

            dh = ch;
            dl = cl;

            ch = bh;
            cl = bl;

            bh = ah;
            bl = al;

            ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
            al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
          }

          sum64(this.h, 0, ah, al);
          sum64(this.h, 2, bh, bl);
          sum64(this.h, 4, ch, cl);
          sum64(this.h, 6, dh, dl);
          sum64(this.h, 8, eh, el);
          sum64(this.h, 10, fh, fl);
          sum64(this.h, 12, gh, gl);
          sum64(this.h, 14, hh, hl);
        };

        SHA512.prototype._digest = function digest(enc) {
          if (enc === 'hex')
            return utils.toHex32(this.h, 'big');
          else
            return utils.split32(this.h, 'big');
        };

        function ch64_hi(xh, xl, yh, yl, zh) {
          var r = (xh & yh) ^ ((~xh) & zh);
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function ch64_lo(xh, xl, yh, yl, zh, zl) {
          var r = (xl & yl) ^ ((~xl) & zl);
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function maj64_hi(xh, xl, yh, yl, zh) {
          var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function maj64_lo(xh, xl, yh, yl, zh, zl) {
          var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function s0_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 28);
          var c1_hi = rotr64_hi(xl, xh, 2);  // 34
          var c2_hi = rotr64_hi(xl, xh, 7);  // 39

          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function s0_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 28);
          var c1_lo = rotr64_lo(xl, xh, 2);  // 34
          var c2_lo = rotr64_lo(xl, xh, 7);  // 39

          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function s1_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 14);
          var c1_hi = rotr64_hi(xh, xl, 18);
          var c2_hi = rotr64_hi(xl, xh, 9);  // 41

          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function s1_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 14);
          var c1_lo = rotr64_lo(xh, xl, 18);
          var c2_lo = rotr64_lo(xl, xh, 9);  // 41

          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function g0_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 1);
          var c1_hi = rotr64_hi(xh, xl, 8);
          var c2_hi = shr64_hi(xh, xl, 7);

          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function g0_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 1);
          var c1_lo = rotr64_lo(xh, xl, 8);
          var c2_lo = shr64_lo(xh, xl, 7);

          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function g1_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 19);
          var c1_hi = rotr64_hi(xl, xh, 29);  // 61
          var c2_hi = shr64_hi(xh, xl, 6);

          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function g1_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 19);
          var c1_lo = rotr64_lo(xl, xh, 29);  // 61
          var c2_lo = shr64_lo(xh, xl, 6);

          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0)
            r += 0x100000000;
          return r;
        }


        /***/
}),
/* 138 */
/***/ (function (module, exports) {

        var toString = {}.toString;

        module.exports = Array.isArray || function (arr) {
          return toString.call(arr) == '[object Array]';
        };


        /***/
}),
/* 139 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (global) {/** Detect free variable `global` from Node.js. */
          var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

          module.exports = freeGlobal;

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(21)))

        /***/
}),
/* 140 */
/***/ (function (module, exports) {

        /** Used for built-in method references. */
        var funcProto = Function.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /**
         * Converts `func` to its source code.
         *
         * @private
         * @param {Function} func The function to convert.
         * @returns {string} Returns the source code.
         */
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) { }
            try {
              return (func + '');
            } catch (e) { }
          }
          return '';
        }

        module.exports = toSource;


        /***/
}),
/* 141 */
/***/ (function (module, exports) {

        /**
         * The base implementation of `_.isNaN` without support for number objects.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         */
        function baseIsNaN(value) {
          return value !== value;
        }

        module.exports = baseIsNaN;


        /***/
}),
/* 142 */
/***/ (function (module, exports, __webpack_require__) {

        var apply = __webpack_require__(50);

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * A specialized version of `baseRest` which transforms the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @param {Function} transform The rest array transform.
         * @returns {Function} Returns the new function.
         */
        function overRest(func, start, transform) {
          start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
          return function () {
            var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform(array);
            return apply(func, this, otherArgs);
          };
        }

        module.exports = overRest;


        /***/
}),
/* 143 */
/***/ (function (module, exports) {

        /**
         * Creates a function that returns `value`.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {*} value The value to return from the new function.
         * @returns {Function} Returns the new constant function.
         * @example
         *
         * var objects = _.times(2, _.constant({ 'a': 1 }));
         *
         * console.log(objects);
         * // => [{ 'a': 1 }, { 'a': 1 }]
         *
         * console.log(objects[0] === objects[1]);
         * // => true
         */
        function constant(value) {
          return function () {
            return value;
          };
        }

        module.exports = constant;


        /***/
}),
/* 144 */
/***/ (function (module, exports, __webpack_require__) {

        var getNative = __webpack_require__(41);

        var defineProperty = (function () {
          try {
            var func = getNative(Object, 'defineProperty');
            func({}, '', {});
            return func;
          } catch (e) { }
        }());

        module.exports = defineProperty;


        /***/
}),
/* 145 */
/***/ (function (module, exports) {

        /** Used to detect hot functions by number of calls within a span of milliseconds. */
        var HOT_COUNT = 800,
          HOT_SPAN = 16;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeNow = Date.now;

        /**
         * Creates a function that'll short out and invoke `identity` instead
         * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
         * milliseconds.
         *
         * @private
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new shortable function.
         */
        function shortOut(func) {
          var count = 0,
            lastCalled = 0;

          return function () {
            var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);

            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined, arguments);
          };
        }

        module.exports = shortOut;


        /***/
}),
/* 146 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIsEqualDeep = __webpack_require__(294),
          isObjectLike = __webpack_require__(14);

        /**
         * The base implementation of `_.isEqual` which supports partial comparisons
         * and tracks traversed objects.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Unordered comparison
         *  2 - Partial comparison
         * @param {Function} [customizer] The function to customize comparisons.
         * @param {Object} [stack] Tracks traversed `value` and `other` objects.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         */
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }

        module.exports = baseIsEqual;


        /***/
}),
/* 147 */
/***/ (function (module, exports, __webpack_require__) {

        var SetCache = __webpack_require__(76),
          arraySome = __webpack_require__(295),
          cacheHas = __webpack_require__(83);

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        /**
         * A specialized version of `baseIsEqualDeep` for arrays with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Array} array The array to compare.
         * @param {Array} other The other array to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `array` and `other` objects.
         * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
         */
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(array);
          if (stacked && stack.get(other)) {
            return stacked == other;
          }
          var index = -1,
            result = true,
            seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

          stack.set(array, other);
          stack.set(other, array);

          // Ignore non-index properties.
          while (++index < arrLength) {
            var arrValue = array[index],
              othValue = other[index];

            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, arrValue, index, other, array, stack)
                : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined) {
              if (compared) {
                continue;
              }
              result = false;
              break;
            }
            // Recursively compare arrays (susceptible to call stack limits).
            if (seen) {
              if (!arraySome(other, function (othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result = false;
                break;
              }
            } else if (!(
              arrValue === othValue ||
              equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
              result = false;
              break;
            }
          }
          stack['delete'](array);
          stack['delete'](other);
          return result;
        }

        module.exports = equalArrays;


        /***/
}),
/* 148 */
/***/ (function (module, exports, __webpack_require__) {

        var root = __webpack_require__(8);

        /** Built-in value references. */
        var Uint8Array = root.Uint8Array;

        module.exports = Uint8Array;


        /***/
}),
/* 149 */
/***/ (function (module, exports) {

        /**
         * Converts `map` to its key-value pairs.
         *
         * @private
         * @param {Object} map The map to convert.
         * @returns {Array} Returns the key-value pairs.
         */
        function mapToArray(map) {
          var index = -1,
            result = Array(map.size);

          map.forEach(function (value, key) {
            result[++index] = [key, value];
          });
          return result;
        }

        module.exports = mapToArray;


        /***/
}),
/* 150 */
/***/ (function (module, exports, __webpack_require__) {

        var baseGetAllKeys = __webpack_require__(151),
          getSymbols = __webpack_require__(103),
          keys = __webpack_require__(15);

        /**
         * Creates an array of own enumerable property names and symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }

        module.exports = getAllKeys;


        /***/
}),
/* 151 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayPush = __webpack_require__(74),
          isArray = __webpack_require__(4);

        /**
         * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
         * `keysFunc` and `symbolsFunc` to get the enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @param {Function} symbolsFunc The function to get the symbols of `object`.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result = keysFunc(object);
          return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }

        module.exports = baseGetAllKeys;


        /***/
}),
/* 152 */
/***/ (function (module, exports) {

        /**
         * This method returns a new empty array.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Array} Returns the new empty array.
         * @example
         *
         * var arrays = _.times(2, _.stubArray);
         *
         * console.log(arrays);
         * // => [[], []]
         *
         * console.log(arrays[0] === arrays[1]);
         * // => false
         */
        function stubArray() {
          return [];
        }

        module.exports = stubArray;


        /***/
}),
/* 153 */
/***/ (function (module, exports, __webpack_require__) {

        var baseTimes = __webpack_require__(154),
          isArguments = __webpack_require__(75),
          isArray = __webpack_require__(4),
          isBuffer = __webpack_require__(65),
          isIndex = __webpack_require__(33),
          isTypedArray = __webpack_require__(85);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Creates an array of the enumerable property names of the array-like `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @param {boolean} inherited Specify returning inherited property names.
         * @returns {Array} Returns the array of property names.
         */
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) &&
              !(skipIndexes && (
                // Safari 9 has enumerable `arguments.length` in strict mode.
                key == 'length' ||
                // Node.js 0.10 has enumerable non-index properties on buffers.
                (isBuff && (key == 'offset' || key == 'parent')) ||
                // PhantomJS 2 has enumerable non-index properties on typed arrays.
                (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                // Skip index properties.
                isIndex(key, length)
              ))) {
              result.push(key);
            }
          }
          return result;
        }

        module.exports = arrayLikeKeys;


        /***/
}),
/* 154 */
/***/ (function (module, exports) {

        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */
        function baseTimes(n, iteratee) {
          var index = -1,
            result = Array(n);

          while (++index < n) {
            result[index] = iteratee(index);
          }
          return result;
        }

        module.exports = baseTimes;


        /***/
}),
/* 155 */
/***/ (function (module, exports, __webpack_require__) {

        var isPrototype = __webpack_require__(86),
          nativeKeys = __webpack_require__(300);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result = [];
          for (var key in Object(object)) {
            if (hasOwnProperty.call(object, key) && key != 'constructor') {
              result.push(key);
            }
          }
          return result;
        }

        module.exports = baseKeys;


        /***/
}),
/* 156 */
/***/ (function (module, exports) {

        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */
        function overArg(func, transform) {
          return function (arg) {
            return func(transform(arg));
          };
        }

        module.exports = overArg;


        /***/
}),
/* 157 */
/***/ (function (module, exports, __webpack_require__) {

        var getNative = __webpack_require__(41),
          root = __webpack_require__(8);

        /* Built-in method references that are verified to be native. */
        var Set = getNative(root, 'Set');

        module.exports = Set;


        /***/
}),
/* 158 */
/***/ (function (module, exports, __webpack_require__) {

        var getNative = __webpack_require__(41),
          root = __webpack_require__(8);

        /* Built-in method references that are verified to be native. */
        var WeakMap = getNative(root, 'WeakMap');

        module.exports = WeakMap;


        /***/
}),
/* 159 */
/***/ (function (module, exports, __webpack_require__) {

        var isObject = __webpack_require__(9);

        /**
         * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` if suitable for strict
         *  equality comparisons, else `false`.
         */
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }

        module.exports = isStrictComparable;


        /***/
}),
/* 160 */
/***/ (function (module, exports) {

        /**
         * A specialized version of `matchesProperty` for source values suitable
         * for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function matchesStrictComparable(key, srcValue) {
          return function (object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue &&
              (srcValue !== undefined || (key in Object(object)));
          };
        }

        module.exports = matchesStrictComparable;


        /***/
}),
/* 161 */
/***/ (function (module, exports, __webpack_require__) {

        var memoizeCapped = __webpack_require__(305);

        /** Used to match property names within property paths. */
        var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

        /** Used to match backslashes in property paths. */
        var reEscapeChar = /\\(\\)?/g;

        /**
         * Converts `string` to a property path array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the property path array.
         */
        var stringToPath = memoizeCapped(function (string) {
          var result = [];
          if (string.charCodeAt(0) === 46 /* . */) {
            result.push('');
          }
          string.replace(rePropName, function (match, number, quote, subString) {
            result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
          });
          return result;
        });

        module.exports = stringToPath;


        /***/
}),
/* 162 */
/***/ (function (module, exports, __webpack_require__) {

        var baseToString = __webpack_require__(307);

        /**
         * Converts `value` to a string. An empty string is returned for `null`
         * and `undefined` values. The sign of `-0` is preserved.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.toString(null);
         * // => ''
         *
         * _.toString(-0);
         * // => '-0'
         *
         * _.toString([1, 2, 3]);
         * // => '1,2,3'
         */
        function toString(value) {
          return value == null ? '' : baseToString(value);
        }

        module.exports = toString;


        /***/
}),
/* 163 */
/***/ (function (module, exports, __webpack_require__) {

        var castPath = __webpack_require__(35),
          isArguments = __webpack_require__(75),
          isArray = __webpack_require__(4),
          isIndex = __webpack_require__(33),
          isLength = __webpack_require__(96),
          toKey = __webpack_require__(31);

        /**
         * Checks if `path` exists on `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @param {Function} hasFunc The function to check properties.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         */
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);

          var index = -1,
            length = path.length,
            result = false;

          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result || ++index != length) {
            return result;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) &&
            (isArray(object) || isArguments(object));
        }

        module.exports = hasPath;


        /***/
}),
/* 164 */
/***/ (function (module, exports) {

        /**
         * The base implementation of `_.property` without support for deep paths.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function baseProperty(key) {
          return function (object) {
            return object == null ? undefined : object[key];
          };
        }

        module.exports = baseProperty;


        /***/
}),
/* 165 */
/***/ (function (module, exports) {

        /**
         * Gets the first element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @alias first
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the first element of `array`.
         * @example
         *
         * _.head([1, 2, 3]);
         * // => 1
         *
         * _.head([]);
         * // => undefined
         */
        function head(array) {
          return (array && array.length) ? array[0] : undefined;
        }

        module.exports = head;


        /***/
}),
/* 166 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFlatten = __webpack_require__(19);

        /**
         * Flattens `array` a single level deep.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flatten([1, [2, [3, [4]], 5]]);
         * // => [1, 2, [3, [4]], 5]
         */
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }

        module.exports = flatten;


        /***/
}),
/* 167 */
/***/ (function (module, exports, __webpack_require__) {

        var basePullAll = __webpack_require__(110);

        /**
         * This method is like `_.pull` except that it accepts an array of values to remove.
         *
         * **Note:** Unlike `_.difference`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
         *
         * _.pullAll(array, ['a', 'c']);
         * console.log(array);
         * // => ['b', 'b']
         */
        function pullAll(array, values) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values)
            : array;
        }

        module.exports = pullAll;


        /***/
}),
/* 168 */
/***/ (function (module, exports, __webpack_require__) {

        var get = __webpack_require__(105);

        /**
         * The base implementation of `_.at` without support for individual paths.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {string[]} paths The property paths to pick.
         * @returns {Array} Returns the picked elements.
         */
        function baseAt(object, paths) {
          var index = -1,
            length = paths.length,
            result = Array(length),
            skip = object == null;

          while (++index < length) {
            result[index] = skip ? undefined : get(object, paths[index]);
          }
          return result;
        }

        module.exports = baseAt;


        /***/
}),
/* 169 */
/***/ (function (module, exports, __webpack_require__) {

        var baseUnset = __webpack_require__(111),
          isIndex = __webpack_require__(33);

        /** Used for built-in method references. */
        var arrayProto = Array.prototype;

        /** Built-in value references. */
        var splice = arrayProto.splice;

        /**
         * The base implementation of `_.pullAt` without support for individual
         * indexes or capturing the removed elements.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {number[]} indexes The indexes of elements to remove.
         * @returns {Array} Returns `array`.
         */
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0,
            lastIndex = length - 1;

          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }

        module.exports = basePullAt;


        /***/
}),
/* 170 */
/***/ (function (module, exports, __webpack_require__) {

        var baseGet = __webpack_require__(66),
          baseSlice = __webpack_require__(24);

        /**
         * Gets the parent value at `path` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} path The path to get the parent value of.
         * @returns {*} Returns the parent value.
         */
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }

        module.exports = parent;


        /***/
}),
/* 171 */
/***/ (function (module, exports, __webpack_require__) {

        var eq = __webpack_require__(30);

        /**
         * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         */
        function baseSortedUniq(array, iteratee) {
          var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

          while (++index < length) {
            var value = array[index],
              computed = iteratee ? iteratee(value) : value;

            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result;
        }

        module.exports = baseSortedUniq;


        /***/
}),
/* 172 */
/***/ (function (module, exports) {

        /**
         * This method returns `undefined`.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Util
         * @example
         *
         * _.times(2, _.noop);
         * // => [undefined, undefined]
         */
        function noop() {
          // No operation performed.
        }

        module.exports = noop;


        /***/
}),
/* 173 */
/***/ (function (module, exports, __webpack_require__) {

        var apply = __webpack_require__(50),
          arrayMap = __webpack_require__(7),
          unzip = __webpack_require__(113);

        /**
         * This method is like `_.unzip` except that it accepts `iteratee` to specify
         * how regrouped values should be combined. The iteratee is invoked with the
         * elements of each group: (...group).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Array
         * @param {Array} array The array of grouped elements to process.
         * @param {Function} [iteratee=_.identity] The function to combine
         *  regrouped values.
         * @returns {Array} Returns the new array of regrouped elements.
         * @example
         *
         * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
         * // => [[1, 10, 100], [2, 20, 200]]
         *
         * _.unzipWith(zipped, _.add);
         * // => [3, 30, 300]
         */
        function unzipWith(array, iteratee) {
          if (!(array && array.length)) {
            return [];
          }
          var result = unzip(array);
          if (iteratee == null) {
            return result;
          }
          return arrayMap(result, function (group) {
            return apply(iteratee, undefined, group);
          });
        }

        module.exports = unzipWith;


        /***/
}),
/* 174 */
/***/ (function (module, exports) {

        /**
         * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
         *
         * @private
         * @param {Array} props The property identifiers.
         * @param {Array} values The property values.
         * @param {Function} assignFunc The function to assign values.
         * @returns {Object} Returns the new object.
         */
        function baseZipObject(props, values, assignFunc) {
          var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

          while (++index < length) {
            var value = index < valsLength ? values[index] : undefined;
            assignFunc(result, props[index], value);
          }
          return result;
        }

        module.exports = baseZipObject;


        /***/
}),
/* 175 */
/***/ (function (module, exports, __webpack_require__) {

        var identity = __webpack_require__(42),
          metaMap = __webpack_require__(176);

        /**
         * The base implementation of `setData` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var baseSetData = !metaMap ? identity : function (func, data) {
          metaMap.set(func, data);
          return func;
        };

        module.exports = baseSetData;


        /***/
}),
/* 176 */
/***/ (function (module, exports, __webpack_require__) {

        var WeakMap = __webpack_require__(158);

        /** Used to store function metadata. */
        var metaMap = WeakMap && new WeakMap;

        module.exports = metaMap;


        /***/
}),
/* 177 */
/***/ (function (module, exports, __webpack_require__) {

        var composeArgs = __webpack_require__(178),
          composeArgsRight = __webpack_require__(179),
          countHolders = __webpack_require__(382),
          createCtor = __webpack_require__(89),
          createRecurry = __webpack_require__(180),
          getHolder = __webpack_require__(185),
          reorder = __webpack_require__(391),
          replaceHolders = __webpack_require__(118),
          root = __webpack_require__(8);

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_FLAG = 8,
          WRAP_CURRY_RIGHT_FLAG = 16,
          WRAP_ARY_FLAG = 128,
          WRAP_FLIP_FLAG = 512;

        /**
         * Creates a function that wraps `func` to invoke it with optional `this`
         * binding of `thisArg`, partial application, and currying.
         *
         * @private
         * @param {Function|string} func The function or method name to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to
         *  the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [partialsRight] The arguments to append to those provided
         *  to the new function.
         * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined : createCtor(func);

          function wrapper() {
            var length = arguments.length,
              args = Array(length),
              index = length;

            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                args, newHolders, argPos, ary, arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;

            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary < length) {
              args.length = ary;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }

        module.exports = createHybrid;


        /***/
}),
/* 178 */
/***/ (function (module, exports) {

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * Creates an array that is the composition of partially applied arguments,
         * placeholders, and provided arguments into a single array of arguments.
         *
         * @private
         * @param {Array} args The provided arguments.
         * @param {Array} partials The arguments to prepend to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @params {boolean} [isCurried] Specify composing for a curried function.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

          while (++leftIndex < leftLength) {
            result[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result[leftIndex++] = args[argsIndex++];
          }
          return result;
        }

        module.exports = composeArgs;


        /***/
}),
/* 179 */
/***/ (function (module, exports) {

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * This function is like `composeArgs` except that the arguments composition
         * is tailored for `_.partialRight`.
         *
         * @private
         * @param {Array} args The provided arguments.
         * @param {Array} partials The arguments to append to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @params {boolean} [isCurried] Specify composing for a curried function.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

          while (++argsIndex < rangeLength) {
            result[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result;
        }

        module.exports = composeArgsRight;


        /***/
}),
/* 180 */
/***/ (function (module, exports, __webpack_require__) {

        var isLaziable = __webpack_require__(383),
          setData = __webpack_require__(183),
          setWrapToString = __webpack_require__(184);

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_BOUND_FLAG = 4,
          WRAP_CURRY_FLAG = 8,
          WRAP_PARTIAL_FLAG = 32,
          WRAP_PARTIAL_RIGHT_FLAG = 64;

        /**
         * Creates a function that wraps `func` to continue currying.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {Function} wrapFunc The function to create the `func` wrapper.
         * @param {*} placeholder The placeholder value.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to
         *  the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined,
            newHoldersRight = isCurry ? undefined : holders,
            newPartials = isCurry ? partials : undefined,
            newPartialsRight = isCurry ? undefined : partials;

          bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
            newHoldersRight, argPos, ary, arity
          ];

          var result = wrapFunc.apply(undefined, newData);
          if (isLaziable(func)) {
            setData(result, newData);
          }
          result.placeholder = placeholder;
          return setWrapToString(result, func, bitmask);
        }

        module.exports = createRecurry;


        /***/
}),
/* 181 */
/***/ (function (module, exports, __webpack_require__) {

        var metaMap = __webpack_require__(176),
          noop = __webpack_require__(172);

        /**
         * Gets metadata for `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {*} Returns the metadata for `func`.
         */
        var getData = !metaMap ? noop : function (func) {
          return metaMap.get(func);
        };

        module.exports = getData;


        /***/
}),
/* 182 */
/***/ (function (module, exports, __webpack_require__) {

        var baseCreate = __webpack_require__(53),
          baseLodash = __webpack_require__(117);

        /**
         * The base constructor for creating `lodash` wrapper objects.
         *
         * @private
         * @param {*} value The value to wrap.
         * @param {boolean} [chainAll] Enable explicit method chain sequences.
         */
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined;
        }

        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;

        module.exports = LodashWrapper;


        /***/
}),
/* 183 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSetData = __webpack_require__(175),
          shortOut = __webpack_require__(145);

        /**
         * Sets metadata for `func`.
         *
         * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
         * period of time, it will trip its breaker and transition to an identity
         * function to avoid garbage collection pauses in V8. See
         * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
         * for more details.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var setData = shortOut(baseSetData);

        module.exports = setData;


        /***/
}),
/* 184 */
/***/ (function (module, exports, __webpack_require__) {

        var getWrapDetails = __webpack_require__(388),
          insertWrapDetails = __webpack_require__(389),
          setToString = __webpack_require__(101),
          updateWrapDetails = __webpack_require__(390);

        /**
         * Sets the `toString` method of `wrapper` to mimic the source of `reference`
         * with wrapper details in a comment at the top of the source body.
         *
         * @private
         * @param {Function} wrapper The function to modify.
         * @param {Function} reference The reference function.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @returns {Function} Returns `wrapper`.
         */
        function setWrapToString(wrapper, reference, bitmask) {
          var source = (reference + '');
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }

        module.exports = setWrapToString;


        /***/
}),
/* 185 */
/***/ (function (module, exports) {

        /**
         * Gets the argument placeholder value for `func`.
         *
         * @private
         * @param {Function} func The function to inspect.
         * @returns {*} Returns the placeholder value.
         */
        function getHolder(func) {
          var object = func;
          return object.placeholder;
        }

        module.exports = getHolder;


        /***/
}),
/* 186 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (module) {
          var root = __webpack_require__(8);

          /** Detect free variable `exports`. */
          var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

          /** Detect free variable `module`. */
          var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

          /** Detect the popular CommonJS extension `module.exports`. */
          var moduleExports = freeModule && freeModule.exports === freeExports;

          /** Built-in value references. */
          var Buffer = moduleExports ? root.Buffer : undefined,
            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

          /**
           * Creates a clone of  `buffer`.
           *
           * @private
           * @param {Buffer} buffer The buffer to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Buffer} Returns the cloned buffer.
           */
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length,
              result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

            buffer.copy(result);
            return result;
          }

          module.exports = cloneBuffer;

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(36)(module)))

        /***/
}),
/* 187 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayPush = __webpack_require__(74),
          getPrototype = __webpack_require__(91),
          getSymbols = __webpack_require__(103),
          stubArray = __webpack_require__(152);

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeGetSymbols = Object.getOwnPropertySymbols;

        /**
         * Creates an array of the own and inherited enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
          var result = [];
          while (object) {
            arrayPush(result, getSymbols(object));
            object = getPrototype(object);
          }
          return result;
        };

        module.exports = getSymbolsIn;


        /***/
}),
/* 188 */
/***/ (function (module, exports, __webpack_require__) {

        var cloneArrayBuffer = __webpack_require__(122);

        /**
         * Creates a clone of `typedArray`.
         *
         * @private
         * @param {Object} typedArray The typed array to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned typed array.
         */
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }

        module.exports = cloneTypedArray;


        /***/
}),
/* 189 */
/***/ (function (module, exports, __webpack_require__) {

        var baseCreate = __webpack_require__(53),
          getPrototype = __webpack_require__(91),
          isPrototype = __webpack_require__(86);

        /**
         * Initializes an object clone.
         *
         * @private
         * @param {Object} object The object to clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneObject(object) {
          return (typeof object.constructor == 'function' && !isPrototype(object))
            ? baseCreate(getPrototype(object))
            : {};
        }

        module.exports = initCloneObject;


        /***/
}),
/* 190 */
/***/ (function (module, exports, __webpack_require__) {

        var copyObject = __webpack_require__(25),
          createAssigner = __webpack_require__(54),
          keysIn = __webpack_require__(13);

        /**
         * This method is like `_.assign` except that it iterates over own and
         * inherited source properties.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias extend
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.assign
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * function Bar() {
         *   this.c = 3;
         * }
         *
         * Foo.prototype.b = 2;
         * Bar.prototype.d = 4;
         *
         * _.assignIn({ 'a': 0 }, new Foo, new Bar);
         * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
         */
        var assignIn = createAssigner(function (object, source) {
          copyObject(source, keysIn(source), object);
        });

        module.exports = assignIn;


        /***/
}),
/* 191 */
/***/ (function (module, exports, __webpack_require__) {

        var copyObject = __webpack_require__(25),
          createAssigner = __webpack_require__(54),
          keysIn = __webpack_require__(13);

        /**
         * This method is like `_.assignIn` except that it accepts `customizer`
         * which is invoked to produce the assigned values. If `customizer` returns
         * `undefined`, assignment is handled by the method instead. The `customizer`
         * is invoked with five arguments: (objValue, srcValue, key, object, source).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias extendWith
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @see _.assignWith
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   return _.isUndefined(objValue) ? srcValue : objValue;
         * }
         *
         * var defaults = _.partialRight(_.assignInWith, customizer);
         *
         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });

        module.exports = assignInWith;


        /***/
}),
/* 192 */
/***/ (function (module, exports, __webpack_require__) {

        var baseAssignValue = __webpack_require__(69),
          eq = __webpack_require__(30);

        /**
         * This function is like `assignValue` except that it doesn't assign
         * `undefined` values.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignMergeValue(object, key, value) {
          if ((value !== undefined && !eq(object[key], value)) ||
            (value === undefined && !(key in object))) {
            baseAssignValue(object, key, value);
          }
        }

        module.exports = assignMergeValue;


        /***/
}),
/* 193 */
/***/ (function (module, exports) {

        /**
         * Creates a base function for methods like `_.forIn` and `_.forOwn`.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseFor(fromRight) {
          return function (object, iteratee, keysFunc) {
            var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }

        module.exports = createBaseFor;


        /***/
}),
/* 194 */
/***/ (function (module, exports) {

        /**
         * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function safeGet(object, key) {
          if (key === 'constructor' && typeof object[key] === 'function') {
            return;
          }

          if (key == '__proto__') {
            return;
          }

          return object[key];
        }

        module.exports = safeGet;


        /***/
}),
/* 195 */
/***/ (function (module, exports, __webpack_require__) {

        var baseMerge = __webpack_require__(124),
          createAssigner = __webpack_require__(54);

        /**
         * This method is like `_.merge` except that it accepts `customizer` which
         * is invoked to produce the merged values of the destination and source
         * properties. If `customizer` returns `undefined`, merging is handled by the
         * method instead. The `customizer` is invoked with six arguments:
         * (objValue, srcValue, key, object, source, stack).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} customizer The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   if (_.isArray(objValue)) {
         *     return objValue.concat(srcValue);
         *   }
         * }
         *
         * var object = { 'a': [1], 'b': [2] };
         * var other = { 'a': [3], 'b': [4] };
         *
         * _.mergeWith(object, other, customizer);
         * // => { 'a': [1, 3], 'b': [2, 4] }
         */
        var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });

        module.exports = mergeWith;


        /***/
}),
/* 196 */
/***/ (function (module, exports, __webpack_require__) {

        var createToPairs = __webpack_require__(197),
          keys = __webpack_require__(15);

        /**
         * Creates an array of own enumerable string keyed-value pairs for `object`
         * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
         * entries are returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias entries
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the key-value pairs.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.toPairs(new Foo);
         * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
         */
        var toPairs = createToPairs(keys);

        module.exports = toPairs;


        /***/
}),
/* 197 */
/***/ (function (module, exports, __webpack_require__) {

        var baseToPairs = __webpack_require__(426),
          getTag = __webpack_require__(52),
          mapToArray = __webpack_require__(149),
          setToPairs = __webpack_require__(427);

        /** `Object#toString` result references. */
        var mapTag = '[object Map]',
          setTag = '[object Set]';

        /**
         * Creates a `_.toPairs` or `_.toPairsIn` function.
         *
         * @private
         * @param {Function} keysFunc The function to get the keys of a given object.
         * @returns {Function} Returns the new pairs function.
         */
        function createToPairs(keysFunc) {
          return function (object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }

        module.exports = createToPairs;


        /***/
}),
/* 198 */
/***/ (function (module, exports, __webpack_require__) {

        var createToPairs = __webpack_require__(197),
          keysIn = __webpack_require__(13);

        /**
         * Creates an array of own and inherited enumerable string keyed-value pairs
         * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
         * or set, its entries are returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias entriesIn
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the key-value pairs.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.toPairsIn(new Foo);
         * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
         */
        var toPairsIn = createToPairs(keysIn);

        module.exports = toPairsIn;


        /***/
}),
/* 199 */
/***/ (function (module, exports) {

        /**
         * The base implementation of methods like `_.findKey` and `_.findLastKey`,
         * without support for iteratee shorthands, which iterates over `collection`
         * using `eachFunc`.
         *
         * @private
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @returns {*} Returns the found element or its key, else `undefined`.
         */
        function baseFindKey(collection, predicate, eachFunc) {
          var result;
          eachFunc(collection, function (value, key, collection) {
            if (predicate(value, key, collection)) {
              result = key;
              return false;
            }
          });
          return result;
        }

        module.exports = baseFindKey;


        /***/
}),
/* 200 */
/***/ (function (module, exports, __webpack_require__) {

        var baseForRight = __webpack_require__(201),
          keys = __webpack_require__(15);

        /**
         * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwnRight(object, iteratee) {
          return object && baseForRight(object, iteratee, keys);
        }

        module.exports = baseForOwnRight;


        /***/
}),
/* 201 */
/***/ (function (module, exports, __webpack_require__) {

        var createBaseFor = __webpack_require__(193);

        /**
         * This function is like `baseFor` except that it iterates over properties
         * in the opposite order.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseForRight = createBaseFor(true);

        module.exports = baseForRight;


        /***/
}),
/* 202 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayFilter = __webpack_require__(51),
          isFunction = __webpack_require__(38);

        /**
         * The base implementation of `_.functions` which creates an array of
         * `object` function property names filtered from `props`.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Array} props The property names to filter.
         * @returns {Array} Returns the function names.
         */
        function baseFunctions(object, props) {
          return arrayFilter(props, function (key) {
            return isFunction(object[key]);
          });
        }

        module.exports = baseFunctions;


        /***/
}),
/* 203 */
/***/ (function (module, exports, __webpack_require__) {

        var baseInverter = __webpack_require__(442);

        /**
         * Creates a function like `_.invertBy`.
         *
         * @private
         * @param {Function} setter The function to set accumulator values.
         * @param {Function} toIteratee The function to resolve iteratees.
         * @returns {Function} Returns the new inverter function.
         */
        function createInverter(setter, toIteratee) {
          return function (object, iteratee) {
            return baseInverter(object, setter, toIteratee(iteratee), {});
          };
        }

        module.exports = createInverter;


        /***/
}),
/* 204 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayMap = __webpack_require__(7),
          baseIteratee = __webpack_require__(1),
          basePickBy = __webpack_require__(205),
          getAllKeysIn = __webpack_require__(121);

        /**
         * Creates an object composed of the `object` properties `predicate` returns
         * truthy for. The predicate is invoked with two arguments: (value, key).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The source object.
         * @param {Function} [predicate=_.identity] The function invoked per property.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.pickBy(object, _.isNumber);
         * // => { 'a': 1, 'c': 3 }
         */
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function (prop) {
            return [prop];
          });
          predicate = baseIteratee(predicate);
          return basePickBy(object, props, function (value, path) {
            return predicate(value, path[0]);
          });
        }

        module.exports = pickBy;


        /***/
}),
/* 205 */
/***/ (function (module, exports, __webpack_require__) {

        var baseGet = __webpack_require__(66),
          baseSet = __webpack_require__(70),
          castPath = __webpack_require__(35);

        /**
         * The base implementation of  `_.pickBy` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} paths The property paths to pick.
         * @param {Function} predicate The function invoked per property.
         * @returns {Object} Returns the new object.
         */
        function basePickBy(object, paths, predicate) {
          var index = -1,
            length = paths.length,
            result = {};

          while (++index < length) {
            var path = paths[index],
              value = baseGet(object, path);

            if (predicate(value, path)) {
              baseSet(result, castPath(path, object), value);
            }
          }
          return result;
        }

        module.exports = basePickBy;


        /***/
}),
/* 206 */
/***/ (function (module, exports, __webpack_require__) {

        var baseGet = __webpack_require__(66),
          baseSet = __webpack_require__(70);

        /**
         * The base implementation of `_.update`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to update.
         * @param {Function} updater The function to produce the updated value.
         * @param {Function} [customizer] The function to customize path creation.
         * @returns {Object} Returns `object`.
         */
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }

        module.exports = baseUpdate;


        /***/
}),
/* 207 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayMap = __webpack_require__(7);

        /**
         * The base implementation of `_.values` and `_.valuesIn` which creates an
         * array of `object` property values corresponding to the property names
         * of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the array of property values.
         */
        function baseValues(object, props) {
          return arrayMap(props, function (key) {
            return object[key];
          });
        }

        module.exports = baseValues;


        /***/
}),
/* 208 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /** 
         * @file param.js
         * @author Marek Kotewicz <marek@ethdev.com>
         * @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var utils = __webpack_require__(0);

        /**
         * SolidityParam object prototype.
         * Should be used when encoding, decoding solidity bytes
         */
        var SolidityParam = function (value, offset) {
          this.value = value || '';
          this.offset = offset; // offset in bytes
        };

        /**
         * This method should be used to get length of params's dynamic part
         * 
         * @method dynamicPartLength
         * @returns {Number} length of dynamic part (in bytes)
         */
        SolidityParam.prototype.dynamicPartLength = function () {
          return this.dynamicPart().length / 2;
        };

        /**
         * This method should be used to create copy of solidity param with different offset
         *
         * @method withOffset
         * @param {Number} offset length in bytes
         * @returns {SolidityParam} new solidity param with applied offset
         */
        SolidityParam.prototype.withOffset = function (offset) {
          return new SolidityParam(this.value, offset);
        };

        /**
         * This method should be used to combine solidity params together
         * eg. when appending an array
         *
         * @method combine
         * @param {SolidityParam} param with which we should combine
         * @param {SolidityParam} result of combination
         */
        SolidityParam.prototype.combine = function (param) {
          return new SolidityParam(this.value + param.value);
        };

        /**
         * This method should be called to check if param has dynamic size.
         * If it has, it returns true, otherwise false
         *
         * @method isDynamic
         * @returns {Boolean}
         */
        SolidityParam.prototype.isDynamic = function () {
          return this.offset !== undefined;
        };

        /**
         * This method should be called to transform offset to bytes
         *
         * @method offsetAsBytes
         * @returns {String} bytes representation of offset
         */
        SolidityParam.prototype.offsetAsBytes = function () {
          return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);
        };

        /**
         * This method should be called to get static part of param
         *
         * @method staticPart
         * @returns {String} offset if it is a dynamic param, otherwise value
         */
        SolidityParam.prototype.staticPart = function () {
          if (!this.isDynamic()) {
            return this.value;
          }
          return this.offsetAsBytes();
        };

        /**
         * This method should be called to get dynamic part of param
         *
         * @method dynamicPart
         * @returns {String} returns a value if it is a dynamic param, otherwise empty string
         */
        SolidityParam.prototype.dynamicPart = function () {
          return this.isDynamic() ? this.value : '';
        };

        /**
         * This method should be called to encode param
         *
         * @method encode
         * @returns {String}
         */
        SolidityParam.prototype.encode = function () {
          return this.staticPart() + this.dynamicPart();
        };

        /**
         * This method should be called to encode array of params
         *
         * @method encodeList
         * @param {Array[SolidityParam]} params
         * @returns {String}
         */
        SolidityParam.encodeList = function (params) {

          // updating offsets
          var totalOffset = params.length * 32;
          var offsetParams = params.map(function (param) {
            if (!param.isDynamic()) {
              return param;
            }
            var offset = totalOffset;
            totalOffset += param.dynamicPartLength();
            return param.withOffset(offset);
          });

          // encode everything!
          return offsetParams.reduce(function (result, param) {
            return result + param.dynamicPart();
          }, offsetParams.reduce(function (result, param) {
            return result + param.staticPart();
          }, ''));
        };



        module.exports = SolidityParam;



        /***/
}),
/* 209 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file function.js
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var coder = __webpack_require__(23);
        var utils = __webpack_require__(0);
        var errors = __webpack_require__(32);
        var formatters = __webpack_require__(3);
        var sha3 = __webpack_require__(18);

        /**
         * This prototype should be used to call/sendTransaction to solidity functions
         */
        var SolidityFunction = function (mc, json, address) {
          this._mc = mc;
          this._inputTypes = json.inputs.map(function (i) {
            return i.type;
          });
          this._outputTypes = json.outputs.map(function (i) {
            return i.type;
          });
          this._constant = json.constant;
          this._payable = json.payable;
          this._name = utils.transformToFullName(json);
          this._address = address;
        };

        SolidityFunction.prototype.extractCallback = function (args) {
          if (utils.isFunction(args[args.length - 1])) {
            return args.pop(); // modify the args array!
          }
        };

        SolidityFunction.prototype.extractDefaultBlock = function (args) {
          if (args.length > this._inputTypes.length && !utils.isObject(args[args.length - 1])) {
            return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!
          }
        };

        /**
         * Should be called to check if the number of arguments is correct
         *
         * @method validateArgs
         * @param {Array} arguments
         * @throws {Error} if it is not
         */
        SolidityFunction.prototype.validateArgs = function (args) {
          var inputArgs = args.filter(function (a) {
            // filter the options object but not arguments that are arrays
            return !((utils.isObject(a) === true) &&
              (utils.isArray(a) === false) &&
              (utils.isBigNumber(a) === false)
            );
          });
          if (inputArgs.length !== this._inputTypes.length) {
            throw errors.InvalidNumberOfSolidityArgs();
          }
        };

        /**
         * Should be used to create payload from arguments
         *
         * @method toPayload
         * @param {Array} solidity function params
         * @param {Object} optional payload options
         */
        SolidityFunction.prototype.toPayload = function (args) {
          var options = {};
          if (args.length > this._inputTypes.length && utils.isObject(args[args.length - 1])) {
            options = args[args.length - 1];
          }
          this.validateArgs(args);
          options.to = this._address;
          options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);
          return options;
        };

        /**
         * Should be used to get function signature
         *
         * @method signature
         * @return {String} function signature
         */
        SolidityFunction.prototype.signature = function () {
          return sha3(this._name).slice(0, 8);
        };


        SolidityFunction.prototype.unpackOutput = function (output) {
          if (!output) {
            return;
          }

          output = output.length >= 2 ? output.slice(2) : output;
          var result = coder.decodeParams(this._outputTypes, output);
          return result.length === 1 ? result[0] : result;
        };

        /**
         * Calls a contract function.
         *
         * @method call
         * @param {...Object} Contract function arguments
         * @param {function} If the last argument is a function, the contract function
         *   call will be asynchronous, and the callback will be passed the
         *   error and result.
         * @return {String} output bytes
         */
        SolidityFunction.prototype.call = function () {
          var args = Array.prototype.slice.call(arguments).filter(function (a) { return a !== undefined; });
          var callback = this.extractCallback(args);
          var defaultBlock = this.extractDefaultBlock(args);
          var payload = this.toPayload(args);


          if (!callback) {
            var output = this._mc.call(payload, defaultBlock);
            return this.unpackOutput(output);
          }

          var self = this;
          this._mc.call(payload, defaultBlock, function (error, output) {
            if (error) return callback(error, null);

            callback(error, output);
          });
        };

        /**
         * Should be used to sendTransaction to solidity function
         *
         * @method sendTransaction
         */
        SolidityFunction.prototype.sendTransaction = function () {
          var args = Array.prototype.slice.call(arguments).filter(function (a) { return a !== undefined; });
          var callback = this.extractCallback(args);
          var payload = this.toPayload(args);

          if (payload.value > 0 && !this._payable) {
            throw new Error('Cannot send value to non-payable function');
          }

          if (!callback) {
            return this._mc.sendTransaction(payload);
          }

          this._mc.sendTransaction(payload, callback);
        };

        /**
         * Should be used to estimateGas of solidity function
         *
         * @method estimateGas
         */
        SolidityFunction.prototype.estimateGas = function () {
          var args = Array.prototype.slice.call(arguments);
          var callback = this.extractCallback(args);
          var payload = this.toPayload(args);

          if (!callback) {
            return this._mc.estimateGas(payload);
          }

          this._mc.estimateGas(payload, callback);
        };

        /**
         * Return the encoded data of the call
         *
         * @method getData
         * @return {String} the encoded data
         */
        SolidityFunction.prototype.getData = function () {
          var args = Array.prototype.slice.call(arguments);
          var payload = this.toPayload(args);

          return payload.data;
        };

        /**
         * Should be used to get function display name
         *
         * @method displayName
         * @return {String} display name of the function
         */
        SolidityFunction.prototype.displayName = function () {
          return utils.extractDisplayName(this._name);
        };

        /**
         * Should be used to get function type name
         *
         * @method typeName
         * @return {String} type name of the function
         */
        SolidityFunction.prototype.typeName = function () {
          return utils.extractTypeName(this._name);
        };

        /**
         * Should be called to get rpc requests from solidity function
         *
         * @method request
         * @returns {Object}
         */
        SolidityFunction.prototype.request = function () {
          var args = Array.prototype.slice.call(arguments);
          var callback = this.extractCallback(args);
          var payload = this.toPayload(args);
          var format = this.unpackOutput.bind(this);

          return {
            method: this._constant ? 'mc_call' : 'mc_sendTransaction',
            callback: callback,
            params: [payload],
            format: format
          };
        };

        /**
         * Should be called to execute function
         *
         * @method execute
         */
        SolidityFunction.prototype.execute = function () {
          var transaction = !this._constant;

          // send transaction
          if (transaction) {
            return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));
          }

          // call
          return this.call.apply(this, Array.prototype.slice.call(arguments));
        };

        /**
         * Should be called to attach function to contract
         *
         * @method attachToContract
         * @param {Contract}
         */
        SolidityFunction.prototype.attachToContract = function (contract) {
          var execute = this.execute.bind(this);
          execute.request = this.request.bind(this);
          execute.call = this.call.bind(this);
          execute.sendTransaction = this.sendTransaction.bind(this);
          execute.estimateGas = this.estimateGas.bind(this);
          execute.getData = this.getData.bind(this);
          var displayName = this.displayName();
          if (!contract[displayName]) {
            contract[displayName] = execute;
          }
          contract[displayName][this.typeName()] = execute; // circular!!!!
        };

        module.exports = SolidityFunction;


        /***/
}),
/* 210 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file microevent.js
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2014
         * @modified for MOAC project
         * @MOAC Tech Inc.
         * @date 2018
         * @provide access to MOAC microChain dapps events.
         * @as a replacement for event.js 
         */

        var utils = __webpack_require__(0);
        var coder = __webpack_require__(23);
        var formatters = __webpack_require__(3);
        var sha3 = __webpack_require__(18);
        var Filter = __webpack_require__(44);
        var watches = __webpack_require__(45);

        /**
         * This prototype should be used to create event filters
         * for DAPP on SCSs
         */
        var MicroEvent = function (requestManager, json, address) {
          this._requestManager = requestManager;
          this._params = json.inputs;
          this._name = utils.transformToFullName(json);
          this._address = address;
          this._anonymous = json.anonymous;
        };

        /**
         * Should be used to get filtered param types
         *
         * @method types
         * @param {Bool} decide if returned typed should be indexed
         * @return {Array} array of types
         */
        MicroEvent.prototype.types = function (indexed) {
          return this._params.filter(function (i) {
            return i.indexed === indexed;
          }).map(function (i) {
            return i.type;
          });
        };

        /**
         * Should be used to get event display name
         *
         * @method displayName
         * @return {String} event display name
         */
        MicroEvent.prototype.displayName = function () {
          return utils.extractDisplayName(this._name);
        };

        /**
         * Should be used to get event type name
         *
         * @method typeName
         * @return {String} event type name
         */
        MicroEvent.prototype.typeName = function () {
          return utils.extractTypeName(this._name);
        };

        /**
         * Should be used to get event signature
         *
         * @method signature
         * @return {String} event signature
         */
        MicroEvent.prototype.signature = function () {
          return sha3(this._name);
        };

        /**
         * Should be used to encode indexed params and options to one final object
         *
         * @method encode
         * @param {Object} indexed
         * @param {Object} options
         * @return {Object} everything combined together and encoded
         */
        MicroEvent.prototype.encode = function (indexed, options) {
          indexed = indexed || {};
          options = options || {};
          var result = {};

          ['fromBlock', 'toBlock'].filter(function (f) {
            return options[f] !== undefined;
          }).forEach(function (f) {
            result[f] = formatters.inputBlockNumberFormatter(options[f]);
          });

          result.topics = [];

          result.address = this._address;
          if (!this._anonymous) {
            result.topics.push('0x' + this.signature());
          }

          var indexedTopics = this._params.filter(function (i) {
            return i.indexed === true;
          }).map(function (i) {
            var value = indexed[i.name];
            if (value === undefined || value === null) {
              return null;
            }

            if (utils.isArray(value)) {
              return value.map(function (v) {
                return '0x' + coder.encodeParam(i.type, v);
              });
            }
            return '0x' + coder.encodeParam(i.type, value);
          });

          result.topics = result.topics.concat(indexedTopics);

          return result;
        };

        /**
         * Should be used to decode indexed params and options
         *
         * @method decode
         * @param {Object} data
         * @return {Object} result object with decoded indexed && not indexed params
         */
        MicroEvent.prototype.decode = function (data) {

          //MOAC returned the data in TxData, ETH is in data
          data.data = data.TxData || data.data;
          //If both are undefined, set it to null
          data.data = data.data || '';
          data.topics = data.topics || [];

          var argTopics = this._anonymous ? data.topics : data.topics.slice(1);
          var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join("");
          var indexedParams = coder.decodeParams(this.types(true), indexedData);

          var notIndexedData = data.data.slice(2);
          var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);

          var result = formatters.outputLogFormatter(data);
          result.event = this.displayName();
          result.address = data.address;

          result.args = this._params.reduce(function (acc, current) {
            acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();
            return acc;
          }, {});

          delete result.data;
          delete result.topics;

          return result;
        };

        /**
         * Should be used to create new filter object from event
         *
         * @method execute
         * @param {Object} indexed
         * @param {Object} options
         * @return {Object} filter object
         */
        MicroEvent.prototype.execute = function (indexed, options, callback) {

          if (utils.isFunction(arguments[arguments.length - 1])) {
            callback = arguments[arguments.length - 1];
            if (arguments.length === 2)
              options = null;
            if (arguments.length === 1) {
              options = null;
              indexed = {};
            }
          }

          var o = this.encode(indexed, options);
          var formatter = this.decode.bind(this);
          return new Filter(o, 'scs', this._requestManager, watches.scs(), formatter, callback);
        };

        /**
         * Should be used to attach event to contract object
         *
         * @method attachToContract
         * @param {Contract}
         */
        MicroEvent.prototype.attachToContract = function (contract) {
          var execute = this.execute.bind(this);
          var displayName = this.displayName();
          if (!contract[displayName]) {
            contract[displayName] = execute;
          }
          contract[displayName][this.typeName()] = this.execute.bind(this, contract);
        };

        module.exports = MicroEvent;



        /***/
}),
/* 211 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var elliptic = exports;

        elliptic.version = __webpack_require__(503).version;
        elliptic.utils = __webpack_require__(17);
        elliptic.rand = __webpack_require__(213);
        elliptic.curve = __webpack_require__(214);
        elliptic.curves = __webpack_require__(127);

        // Protocols
        elliptic.ec = __webpack_require__(509);
        elliptic.eddsa = __webpack_require__(513);


        /***/
}),
/* 212 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = exports;

        function toArray(msg, enc) {
          if (Array.isArray(msg))
            return msg.slice();
          if (!msg)
            return [];
          var res = [];
          if (typeof msg !== 'string') {
            for (var i = 0; i < msg.length; i++)
              res[i] = msg[i] | 0;
            return res;
          }
          if (enc === 'hex') {
            msg = msg.replace(/[^a-z0-9]+/ig, '');
            if (msg.length % 2 !== 0)
              msg = '0' + msg;
            for (var i = 0; i < msg.length; i += 2)
              res.push(parseInt(msg[i] + msg[i + 1], 16));
          } else {
            for (var i = 0; i < msg.length; i++) {
              var c = msg.charCodeAt(i);
              var hi = c >> 8;
              var lo = c & 0xff;
              if (hi)
                res.push(hi, lo);
              else
                res.push(lo);
            }
          }
          return res;
        }
        utils.toArray = toArray;

        function zero2(word) {
          if (word.length === 1)
            return '0' + word;
          else
            return word;
        }
        utils.zero2 = zero2;

        function toHex(msg) {
          var res = '';
          for (var i = 0; i < msg.length; i++)
            res += zero2(msg[i].toString(16));
          return res;
        }
        utils.toHex = toHex;

        utils.encode = function encode(arr, enc) {
          if (enc === 'hex')
            return toHex(arr);
          else
            return arr;
        };


        /***/
}),
/* 213 */
/***/ (function (module, exports, __webpack_require__) {

        var r;

        module.exports = function rand(len) {
          if (!r)
            r = new Rand(null);

          return r.generate(len);
        };

        function Rand(rand) {
          this.rand = rand;
        }
        module.exports.Rand = Rand;

        Rand.prototype.generate = function generate(len) {
          return this._rand(len);
        };

        // Emulate crypto API using randy
        Rand.prototype._rand = function _rand(n) {
          if (this.rand.getBytes)
            return this.rand.getBytes(n);

          var res = new Uint8Array(n);
          for (var i = 0; i < res.length; i++)
            res[i] = this.rand.getByte();
          return res;
        };

        if (typeof self === 'object') {
          if (self.crypto && self.crypto.getRandomValues) {
            // Modern browsers
            Rand.prototype._rand = function _rand(n) {
              var arr = new Uint8Array(n);
              self.crypto.getRandomValues(arr);
              return arr;
            };
          } else if (self.msCrypto && self.msCrypto.getRandomValues) {
            // IE
            Rand.prototype._rand = function _rand(n) {
              var arr = new Uint8Array(n);
              self.msCrypto.getRandomValues(arr);
              return arr;
            };

            // Safari's WebWorkers do not have `crypto`
          } else if (typeof window === 'object') {
            // Old junk
            Rand.prototype._rand = function () {
              throw new Error('Not implemented yet');
            };
          }
        } else {
          // Node.js or Web worker with no crypto support
          try {
            var crypto = __webpack_require__(504);
            if (typeof crypto.randomBytes !== 'function')
              throw new Error('Not supported');

            Rand.prototype._rand = function _rand(n) {
              return crypto.randomBytes(n);
            };
          } catch (e) {
          }
        }


        /***/
}),
/* 214 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var curve = exports;

        curve.base = __webpack_require__(93);
        curve.short = __webpack_require__(505);
        curve.mont = __webpack_require__(506);
        curve.edwards = __webpack_require__(507);


        /***/
}),
/* 215 */
/***/ (function (module, exports) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
         
          Adopt from eth-lib with some minor modifications and pruning. 
          eth-lib is licensed under MIT:
          https://github.com/maiavictor/eth-lib
          
        */
        // This was ported from https://github.com/emn178/js-sha3, with some minor
        // modifications and pruning. It is licensed under MIT:
        //
        // Copyright 2015-2016 Chen, Yi-Cyuan
        //  
        // Permission is hereby granted, free of charge, to any person obtaining
        // a copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to
        // permit persons to whom the Software is furnished to do so, subject to
        // the following conditions:
        // 
        // The above copyright notice and this permission notice shall be
        // included in all copies or substantial portions of the Software.
        // 
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
        // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
        // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
        // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
        // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
        // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

        var HEX_CHARS = '0123456789abcdef'.split('');
        var KECCAK_PADDING = [1, 256, 65536, 16777216];
        var SHIFT = [0, 8, 16, 24];
        var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

        var Keccak = function Keccak(bits) {
          return {
            blocks: [],
            reset: true,
            block: 0,
            start: 0,
            blockCount: 1600 - (bits << 1) >> 5,
            outputBlocks: bits >> 5,
            s: function (s) {
              return [].concat(s, s, s, s, s);
            }([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
          };
        };

        var update = function update(state, message) {
          var length = message.length,
            blocks = state.blocks,
            byteCount = state.blockCount << 2,
            blockCount = state.blockCount,
            outputBlocks = state.outputBlocks,
            s = state.s,
            index = 0,
            i,
            code;

          // update
          while (index < length) {
            if (state.reset) {
              state.reset = false;
              blocks[0] = state.block;
              for (i = 1; i < blockCount + 1; ++i) {
                blocks[i] = 0;
              }
            }
            if (typeof message !== "string") {
              for (i = state.start; index < length && i < byteCount; ++index) {
                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
              }
            } else {
              for (i = state.start; index < length && i < byteCount; ++index) {
                code = message.charCodeAt(index);
                if (code < 0x80) {
                  blocks[i >> 2] |= code << SHIFT[i++ & 3];
                } else if (code < 0x800) {
                  blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
                } else if (code < 0xd800 || code >= 0xe000) {
                  blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
                } else {
                  code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
                  blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
                }
              }
            }
            state.lastByteIndex = i;
            if (i >= byteCount) {
              state.start = i - byteCount;
              state.block = blocks[blockCount];
              for (i = 0; i < blockCount; ++i) {
                s[i] ^= blocks[i];
              }
              f(s);
              state.reset = true;
            } else {
              state.start = i;
            }
          }

          // finalize
          i = state.lastByteIndex;
          blocks[i >> 2] |= KECCAK_PADDING[i & 3];
          if (state.lastByteIndex === byteCount) {
            blocks[0] = blocks[blockCount];
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          blocks[blockCount - 1] |= 0x80000000;
          for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
          }
          f(s);

          // toString
          var hex = '',
            i = 0,
            j = 0,
            block;
          while (j < outputBlocks) {
            for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
              block = s[i];
              hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
            }
            if (j % blockCount === 0) {
              f(s);
              i = 0;
            }
          }
          return "0x" + hex;
        };

        var f = function f(s) {
          var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;

          for (n = 0; n < 48; n += 2) {
            c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
            c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
            c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
            c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
            c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
            c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
            c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
            c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
            c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
            c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

            h = c8 ^ (c2 << 1 | c3 >>> 31);
            l = c9 ^ (c3 << 1 | c2 >>> 31);
            s[0] ^= h;
            s[1] ^= l;
            s[10] ^= h;
            s[11] ^= l;
            s[20] ^= h;
            s[21] ^= l;
            s[30] ^= h;
            s[31] ^= l;
            s[40] ^= h;
            s[41] ^= l;
            h = c0 ^ (c4 << 1 | c5 >>> 31);
            l = c1 ^ (c5 << 1 | c4 >>> 31);
            s[2] ^= h;
            s[3] ^= l;
            s[12] ^= h;
            s[13] ^= l;
            s[22] ^= h;
            s[23] ^= l;
            s[32] ^= h;
            s[33] ^= l;
            s[42] ^= h;
            s[43] ^= l;
            h = c2 ^ (c6 << 1 | c7 >>> 31);
            l = c3 ^ (c7 << 1 | c6 >>> 31);
            s[4] ^= h;
            s[5] ^= l;
            s[14] ^= h;
            s[15] ^= l;
            s[24] ^= h;
            s[25] ^= l;
            s[34] ^= h;
            s[35] ^= l;
            s[44] ^= h;
            s[45] ^= l;
            h = c4 ^ (c8 << 1 | c9 >>> 31);
            l = c5 ^ (c9 << 1 | c8 >>> 31);
            s[6] ^= h;
            s[7] ^= l;
            s[16] ^= h;
            s[17] ^= l;
            s[26] ^= h;
            s[27] ^= l;
            s[36] ^= h;
            s[37] ^= l;
            s[46] ^= h;
            s[47] ^= l;
            h = c6 ^ (c0 << 1 | c1 >>> 31);
            l = c7 ^ (c1 << 1 | c0 >>> 31);
            s[8] ^= h;
            s[9] ^= l;
            s[18] ^= h;
            s[19] ^= l;
            s[28] ^= h;
            s[29] ^= l;
            s[38] ^= h;
            s[39] ^= l;
            s[48] ^= h;
            s[49] ^= l;

            b0 = s[0];
            b1 = s[1];
            b32 = s[11] << 4 | s[10] >>> 28;
            b33 = s[10] << 4 | s[11] >>> 28;
            b14 = s[20] << 3 | s[21] >>> 29;
            b15 = s[21] << 3 | s[20] >>> 29;
            b46 = s[31] << 9 | s[30] >>> 23;
            b47 = s[30] << 9 | s[31] >>> 23;
            b28 = s[40] << 18 | s[41] >>> 14;
            b29 = s[41] << 18 | s[40] >>> 14;
            b20 = s[2] << 1 | s[3] >>> 31;
            b21 = s[3] << 1 | s[2] >>> 31;
            b2 = s[13] << 12 | s[12] >>> 20;
            b3 = s[12] << 12 | s[13] >>> 20;
            b34 = s[22] << 10 | s[23] >>> 22;
            b35 = s[23] << 10 | s[22] >>> 22;
            b16 = s[33] << 13 | s[32] >>> 19;
            b17 = s[32] << 13 | s[33] >>> 19;
            b48 = s[42] << 2 | s[43] >>> 30;
            b49 = s[43] << 2 | s[42] >>> 30;
            b40 = s[5] << 30 | s[4] >>> 2;
            b41 = s[4] << 30 | s[5] >>> 2;
            b22 = s[14] << 6 | s[15] >>> 26;
            b23 = s[15] << 6 | s[14] >>> 26;
            b4 = s[25] << 11 | s[24] >>> 21;
            b5 = s[24] << 11 | s[25] >>> 21;
            b36 = s[34] << 15 | s[35] >>> 17;
            b37 = s[35] << 15 | s[34] >>> 17;
            b18 = s[45] << 29 | s[44] >>> 3;
            b19 = s[44] << 29 | s[45] >>> 3;
            b10 = s[6] << 28 | s[7] >>> 4;
            b11 = s[7] << 28 | s[6] >>> 4;
            b42 = s[17] << 23 | s[16] >>> 9;
            b43 = s[16] << 23 | s[17] >>> 9;
            b24 = s[26] << 25 | s[27] >>> 7;
            b25 = s[27] << 25 | s[26] >>> 7;
            b6 = s[36] << 21 | s[37] >>> 11;
            b7 = s[37] << 21 | s[36] >>> 11;
            b38 = s[47] << 24 | s[46] >>> 8;
            b39 = s[46] << 24 | s[47] >>> 8;
            b30 = s[8] << 27 | s[9] >>> 5;
            b31 = s[9] << 27 | s[8] >>> 5;
            b12 = s[18] << 20 | s[19] >>> 12;
            b13 = s[19] << 20 | s[18] >>> 12;
            b44 = s[29] << 7 | s[28] >>> 25;
            b45 = s[28] << 7 | s[29] >>> 25;
            b26 = s[38] << 8 | s[39] >>> 24;
            b27 = s[39] << 8 | s[38] >>> 24;
            b8 = s[48] << 14 | s[49] >>> 18;
            b9 = s[49] << 14 | s[48] >>> 18;

            s[0] = b0 ^ ~b2 & b4;
            s[1] = b1 ^ ~b3 & b5;
            s[10] = b10 ^ ~b12 & b14;
            s[11] = b11 ^ ~b13 & b15;
            s[20] = b20 ^ ~b22 & b24;
            s[21] = b21 ^ ~b23 & b25;
            s[30] = b30 ^ ~b32 & b34;
            s[31] = b31 ^ ~b33 & b35;
            s[40] = b40 ^ ~b42 & b44;
            s[41] = b41 ^ ~b43 & b45;
            s[2] = b2 ^ ~b4 & b6;
            s[3] = b3 ^ ~b5 & b7;
            s[12] = b12 ^ ~b14 & b16;
            s[13] = b13 ^ ~b15 & b17;
            s[22] = b22 ^ ~b24 & b26;
            s[23] = b23 ^ ~b25 & b27;
            s[32] = b32 ^ ~b34 & b36;
            s[33] = b33 ^ ~b35 & b37;
            s[42] = b42 ^ ~b44 & b46;
            s[43] = b43 ^ ~b45 & b47;
            s[4] = b4 ^ ~b6 & b8;
            s[5] = b5 ^ ~b7 & b9;
            s[14] = b14 ^ ~b16 & b18;
            s[15] = b15 ^ ~b17 & b19;
            s[24] = b24 ^ ~b26 & b28;
            s[25] = b25 ^ ~b27 & b29;
            s[34] = b34 ^ ~b36 & b38;
            s[35] = b35 ^ ~b37 & b39;
            s[44] = b44 ^ ~b46 & b48;
            s[45] = b45 ^ ~b47 & b49;
            s[6] = b6 ^ ~b8 & b0;
            s[7] = b7 ^ ~b9 & b1;
            s[16] = b16 ^ ~b18 & b10;
            s[17] = b17 ^ ~b19 & b11;
            s[26] = b26 ^ ~b28 & b20;
            s[27] = b27 ^ ~b29 & b21;
            s[36] = b36 ^ ~b38 & b30;
            s[37] = b37 ^ ~b39 & b31;
            s[46] = b46 ^ ~b48 & b40;
            s[47] = b47 ^ ~b49 & b41;
            s[8] = b8 ^ ~b0 & b2;
            s[9] = b9 ^ ~b1 & b3;
            s[18] = b18 ^ ~b10 & b12;
            s[19] = b19 ^ ~b11 & b13;
            s[28] = b28 ^ ~b20 & b22;
            s[29] = b29 ^ ~b21 & b23;
            s[38] = b38 ^ ~b30 & b32;
            s[39] = b39 ^ ~b31 & b33;
            s[48] = b48 ^ ~b40 & b42;
            s[49] = b49 ^ ~b41 & b43;

            s[0] ^= RC[n];
            s[1] ^= RC[n + 1];
          }
        };

        var keccak = function keccak(bits) {
          return function (str) {
            var msg;
            if (str.slice(0, 2) === "0x") {
              msg = [];
              for (var i = 2, l = str.length; i < l; i += 2) {
                msg.push(parseInt(str.slice(i, i + 2), 16));
              }
            } else {
              msg = str;
            }
            return update(Keccak(bits, bits), msg);
          };
        };

        module.exports = {
          keccak256: keccak(256),
          keccak512: keccak(512),
          keccak256s: keccak(256),
          keccak512s: keccak(512)
        };

        /***/
}),
/* 216 */
/***/ (function (module, exports) {

        module.exports = { "COMPRESSED_TYPE_INVALID": "compressed should be a boolean", "EC_PRIVATE_KEY_TYPE_INVALID": "private key should be a Buffer", "EC_PRIVATE_KEY_LENGTH_INVALID": "private key length is invalid", "EC_PRIVATE_KEY_RANGE_INVALID": "private key range is invalid", "EC_PRIVATE_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting private key is invalid", "EC_PRIVATE_KEY_TWEAK_MUL_FAIL": "tweak out of range", "EC_PRIVATE_KEY_EXPORT_DER_FAIL": "couldn't export to DER format", "EC_PRIVATE_KEY_IMPORT_DER_FAIL": "couldn't import from DER format", "EC_PUBLIC_KEYS_TYPE_INVALID": "public keys should be an Array", "EC_PUBLIC_KEYS_LENGTH_INVALID": "public keys Array should have at least 1 element", "EC_PUBLIC_KEY_TYPE_INVALID": "public key should be a Buffer", "EC_PUBLIC_KEY_LENGTH_INVALID": "public key length is invalid", "EC_PUBLIC_KEY_PARSE_FAIL": "the public key could not be parsed or is invalid", "EC_PUBLIC_KEY_CREATE_FAIL": "private was invalid, try again", "EC_PUBLIC_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting public key is invalid", "EC_PUBLIC_KEY_TWEAK_MUL_FAIL": "tweak out of range", "EC_PUBLIC_KEY_COMBINE_FAIL": "the sum of the public keys is not valid", "ECDH_FAIL": "scalar was invalid (zero or overflow)", "ECDSA_SIGNATURE_TYPE_INVALID": "signature should be a Buffer", "ECDSA_SIGNATURE_LENGTH_INVALID": "signature length is invalid", "ECDSA_SIGNATURE_PARSE_FAIL": "couldn't parse signature", "ECDSA_SIGNATURE_PARSE_DER_FAIL": "couldn't parse DER signature", "ECDSA_SIGNATURE_SERIALIZE_DER_FAIL": "couldn't serialize signature to DER format", "ECDSA_SIGN_FAIL": "nonce generation function failed or private key is invalid", "ECDSA_RECOVER_FAIL": "couldn't recover public key from signature", "MSG32_TYPE_INVALID": "message should be a Buffer", "MSG32_LENGTH_INVALID": "message length is invalid", "OPTIONS_TYPE_INVALID": "options should be an Object", "OPTIONS_DATA_TYPE_INVALID": "options.data should be a Buffer", "OPTIONS_DATA_LENGTH_INVALID": "options.data length is invalid", "OPTIONS_NONCEFN_TYPE_INVALID": "options.noncefn should be a Function", "RECOVERY_ID_TYPE_INVALID": "recovery should be a Number", "RECOVERY_ID_VALUE_INVALID": "recovery should have value between -1 and 4", "TWEAK_TYPE_INVALID": "tweak should be a Buffer", "TWEAK_LENGTH_INVALID": "tweak length is invalid" }

        /***/
}),
/* 217 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";

        var Buffer = __webpack_require__(10).Buffer
        var Transform = __webpack_require__(218).Transform
        var inherits = __webpack_require__(6)

        function throwIfNotStringOrBuffer(val, prefix) {
          if (!Buffer.isBuffer(val) && typeof val !== 'string') {
            throw new TypeError(prefix + ' must be a string or a buffer')
          }
        }

        function HashBase(blockSize) {
          Transform.call(this)

          this._block = Buffer.allocUnsafe(blockSize)
          this._blockSize = blockSize
          this._blockOffset = 0
          this._length = [0, 0, 0, 0]

          this._finalized = false
        }

        inherits(HashBase, Transform)

        HashBase.prototype._transform = function (chunk, encoding, callback) {
          var error = null
          try {
            this.update(chunk, encoding)
          } catch (err) {
            error = err
          }

          callback(error)
        }

        HashBase.prototype._flush = function (callback) {
          var error = null
          try {
            this.push(this.digest())
          } catch (err) {
            error = err
          }

          callback(error)
        }

        HashBase.prototype.update = function (data, encoding) {
          throwIfNotStringOrBuffer(data, 'Data')
          if (this._finalized) throw new Error('Digest already called')
          if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

          // consume data
          var block = this._block
          var offset = 0
          while (this._blockOffset + data.length - offset >= this._blockSize) {
            for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
            this._update()
            this._blockOffset = 0
          }
          while (offset < data.length) block[this._blockOffset++] = data[offset++]

          // update length
          for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
            this._length[j] += carry
            carry = (this._length[j] / 0x0100000000) | 0
            if (carry > 0) this._length[j] -= 0x0100000000 * carry
          }

          return this
        }

        HashBase.prototype._update = function () {
          throw new Error('_update is not implemented')
        }

        HashBase.prototype.digest = function (encoding) {
          if (this._finalized) throw new Error('Digest already called')
          this._finalized = true

          var digest = this._digest()
          if (encoding !== undefined) digest = digest.toString(encoding)

          // reset state
          this._block.fill(0)
          this._blockOffset = 0
          for (var i = 0; i < 4; ++i) this._length[i] = 0

          return digest
        }

        HashBase.prototype._digest = function () {
          throw new Error('_digest is not implemented')
        }

        module.exports = HashBase


        /***/
}),
/* 218 */
/***/ (function (module, exports, __webpack_require__) {

        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        module.exports = Stream;

        var EE = __webpack_require__(128).EventEmitter;
        var inherits = __webpack_require__(57);

        inherits(Stream, EE);
        Stream.Readable = __webpack_require__(129);
        Stream.Writable = __webpack_require__(533);
        Stream.Duplex = __webpack_require__(534);
        Stream.Transform = __webpack_require__(535);
        Stream.PassThrough = __webpack_require__(536);

        // Backwards-compat with node 0.4.x
        Stream.Stream = Stream;



        // old-style streams.  Note that the pipe method (the only relevant
        // part of this class) is overridden in the Readable class.

        function Stream() {
          EE.call(this);
        }

        Stream.prototype.pipe = function (dest, options) {
          var source = this;

          function ondata(chunk) {
            if (dest.writable) {
              if (false === dest.write(chunk) && source.pause) {
                source.pause();
              }
            }
          }

          source.on('data', ondata);

          function ondrain() {
            if (source.readable && source.resume) {
              source.resume();
            }
          }

          dest.on('drain', ondrain);

          // If the 'end' option is not supplied, dest.end() will be called when
          // source gets the 'end' or 'close' events.  Only dest.end() once.
          if (!dest._isStdio && (!options || options.end !== false)) {
            source.on('end', onend);
            source.on('close', onclose);
          }

          var didOnEnd = false;
          function onend() {
            if (didOnEnd) return;
            didOnEnd = true;

            dest.end();
          }


          function onclose() {
            if (didOnEnd) return;
            didOnEnd = true;

            if (typeof dest.destroy === 'function') dest.destroy();
          }

          // don't leave dangling pipes when there are errors.
          function onerror(er) {
            cleanup();
            if (EE.listenerCount(this, 'error') === 0) {
              throw er; // Unhandled stream error in pipe.
            }
          }

          source.on('error', onerror);
          dest.on('error', onerror);

          // remove all the event listeners that were added.
          function cleanup() {
            source.removeListener('data', ondata);
            dest.removeListener('drain', ondrain);

            source.removeListener('end', onend);
            source.removeListener('close', onclose);

            source.removeListener('error', onerror);
            dest.removeListener('error', onerror);

            source.removeListener('end', cleanup);
            source.removeListener('close', cleanup);

            dest.removeListener('close', cleanup);
          }

          source.on('end', cleanup);
          source.on('close', cleanup);

          dest.on('close', cleanup);

          dest.emit('pipe', source);

          // Allow for unix-like usage: A.pipe(B).pipe(C)
          return dest;
        };


        /***/
}),
/* 219 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
/* WEBPACK VAR INJECTION */(function (global, process) {// Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.



          /*<replacement>*/

          var pna = __webpack_require__(94);
          /*</replacement>*/

          module.exports = Readable;

          /*<replacement>*/
          var isArray = __webpack_require__(138);
          /*</replacement>*/

          /*<replacement>*/
          var Duplex;
          /*</replacement>*/

          Readable.ReadableState = ReadableState;

          /*<replacement>*/
          var EE = __webpack_require__(128).EventEmitter;

          var EElistenerCount = function (emitter, type) {
            return emitter.listeners(type).length;
          };
          /*</replacement>*/

          /*<replacement>*/
          var Stream = __webpack_require__(220);
          /*</replacement>*/

          /*<replacement>*/

          var Buffer = __webpack_require__(130).Buffer;
          var OurUint8Array = global.Uint8Array || function () { };
          function _uint8ArrayToBuffer(chunk) {
            return Buffer.from(chunk);
          }
          function _isUint8Array(obj) {
            return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
          }

          /*</replacement>*/

          /*<replacement>*/
          var util = Object.create(__webpack_require__(71));
          util.inherits = __webpack_require__(57);
          /*</replacement>*/

          /*<replacement>*/
          var debugUtil = __webpack_require__(525);
          var debug = void 0;
          if (debugUtil && debugUtil.debuglog) {
            debug = debugUtil.debuglog('stream');
          } else {
            debug = function () { };
          }
          /*</replacement>*/

          var BufferList = __webpack_require__(526);
          var destroyImpl = __webpack_require__(221);
          var StringDecoder;

          util.inherits(Readable, Stream);

          var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

          function prependListener(emitter, event, fn) {
            // Sadly this is not cacheable as some libraries bundle their own
            // event emitter implementation with them.
            if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

            // This is a hack to make sure that our error handler is attached before any
            // userland ones.  NEVER DO THIS. This is here only because this code needs
            // to continue to work with older versions of Node.js that do not include
            // the prependListener() method. The goal is to eventually remove this hack.
            if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [fn, emitter._events[event]];
          }

          function ReadableState(options, stream) {
            Duplex = Duplex || __webpack_require__(46);

            options = options || {};

            // Duplex streams are both readable and writable, but share
            // the same options object.
            // However, some cases require setting options to different
            // values for the readable and the writable sides of the duplex stream.
            // These options can be provided separately as readableXXX and writableXXX.
            var isDuplex = stream instanceof Duplex;

            // object stream flag. Used to make read(n) ignore n and to
            // make all the buffer merging and length checks go away
            this.objectMode = !!options.objectMode;

            if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

            // the point at which it stops calling _read() to fill the buffer
            // Note: 0 is a valid value, means "don't call _read preemptively ever"
            var hwm = options.highWaterMark;
            var readableHwm = options.readableHighWaterMark;
            var defaultHwm = this.objectMode ? 16 : 16 * 1024;

            if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm; else this.highWaterMark = defaultHwm;

            // cast to ints.
            this.highWaterMark = Math.floor(this.highWaterMark);

            // A linked list is used to store data chunks instead of an array because the
            // linked list can remove elements from the beginning faster than
            // array.shift()
            this.buffer = new BufferList();
            this.length = 0;
            this.pipes = null;
            this.pipesCount = 0;
            this.flowing = null;
            this.ended = false;
            this.endEmitted = false;
            this.reading = false;

            // a flag to be able to tell if the event 'readable'/'data' is emitted
            // immediately, or on a later tick.  We set this to true at first, because
            // any actions that shouldn't happen until "later" should generally also
            // not happen before the first read call.
            this.sync = true;

            // whenever we return null, then we set a flag to say
            // that we're awaiting a 'readable' event emission.
            this.needReadable = false;
            this.emittedReadable = false;
            this.readableListening = false;
            this.resumeScheduled = false;

            // has it been destroyed
            this.destroyed = false;

            // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || 'utf8';

            // the number of writers that are awaiting a drain event in .pipe()s
            this.awaitDrain = 0;

            // if true, a maybeReadMore has been scheduled
            this.readingMore = false;

            this.decoder = null;
            this.encoding = null;
            if (options.encoding) {
              if (!StringDecoder) StringDecoder = __webpack_require__(132).StringDecoder;
              this.decoder = new StringDecoder(options.encoding);
              this.encoding = options.encoding;
            }
          }

          function Readable(options) {
            Duplex = Duplex || __webpack_require__(46);

            if (!(this instanceof Readable)) return new Readable(options);

            this._readableState = new ReadableState(options, this);

            // legacy
            this.readable = true;

            if (options) {
              if (typeof options.read === 'function') this._read = options.read;

              if (typeof options.destroy === 'function') this._destroy = options.destroy;
            }

            Stream.call(this);
          }

          Object.defineProperty(Readable.prototype, 'destroyed', {
            get: function () {
              if (this._readableState === undefined) {
                return false;
              }
              return this._readableState.destroyed;
            },
            set: function (value) {
              // we ignore the value if the stream
              // has not been initialized yet
              if (!this._readableState) {
                return;
              }

              // backward compatibility, the user is explicitly
              // managing destroyed
              this._readableState.destroyed = value;
            }
          });

          Readable.prototype.destroy = destroyImpl.destroy;
          Readable.prototype._undestroy = destroyImpl.undestroy;
          Readable.prototype._destroy = function (err, cb) {
            this.push(null);
            cb(err);
          };

          // Manually shove something into the read() buffer.
          // This returns true if the highWaterMark has not been hit yet,
          // similar to how Writable.write() returns true if you should
          // write() some more.
          Readable.prototype.push = function (chunk, encoding) {
            var state = this._readableState;
            var skipChunkCheck;

            if (!state.objectMode) {
              if (typeof chunk === 'string') {
                encoding = encoding || state.defaultEncoding;
                if (encoding !== state.encoding) {
                  chunk = Buffer.from(chunk, encoding);
                  encoding = '';
                }
                skipChunkCheck = true;
              }
            } else {
              skipChunkCheck = true;
            }

            return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
          };

          // Unshift should *always* be something directly out of read()
          Readable.prototype.unshift = function (chunk) {
            return readableAddChunk(this, chunk, null, true, false);
          };

          function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
            var state = stream._readableState;
            if (chunk === null) {
              state.reading = false;
              onEofChunk(stream, state);
            } else {
              var er;
              if (!skipChunkCheck) er = chunkInvalid(state, chunk);
              if (er) {
                stream.emit('error', er);
              } else if (state.objectMode || chunk && chunk.length > 0) {
                if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                  chunk = _uint8ArrayToBuffer(chunk);
                }

                if (addToFront) {
                  if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event')); else addChunk(stream, state, chunk, true);
                } else if (state.ended) {
                  stream.emit('error', new Error('stream.push() after EOF'));
                } else {
                  state.reading = false;
                  if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false); else maybeReadMore(stream, state);
                  } else {
                    addChunk(stream, state, chunk, false);
                  }
                }
              } else if (!addToFront) {
                state.reading = false;
              }
            }

            return needMoreData(state);
          }

          function addChunk(stream, state, chunk, addToFront) {
            if (state.flowing && state.length === 0 && !state.sync) {
              stream.emit('data', chunk);
              stream.read(0);
            } else {
              // update the buffer info.
              state.length += state.objectMode ? 1 : chunk.length;
              if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);

              if (state.needReadable) emitReadable(stream);
            }
            maybeReadMore(stream, state);
          }

          function chunkInvalid(state, chunk) {
            var er;
            if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
              er = new TypeError('Invalid non-string/buffer chunk');
            }
            return er;
          }

          // if it's past the high water mark, we can push in some more.
          // Also, if we have no data yet, we can stand some
          // more bytes.  This is to work around cases where hwm=0,
          // such as the repl.  Also, if the push() triggered a
          // readable event, and the user called read(largeNumber) such that
          // needReadable was set, then we ought to push more, so that another
          // 'readable' event will be triggered.
          function needMoreData(state) {
            return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
          }

          Readable.prototype.isPaused = function () {
            return this._readableState.flowing === false;
          };

          // backwards compatibility.
          Readable.prototype.setEncoding = function (enc) {
            if (!StringDecoder) StringDecoder = __webpack_require__(132).StringDecoder;
            this._readableState.decoder = new StringDecoder(enc);
            this._readableState.encoding = enc;
            return this;
          };

          // Don't raise the hwm > 8MB
          var MAX_HWM = 0x800000;
          function computeNewHighWaterMark(n) {
            if (n >= MAX_HWM) {
              n = MAX_HWM;
            } else {
              // Get the next highest power of 2 to prevent increasing hwm excessively in
              // tiny amounts
              n--;
              n |= n >>> 1;
              n |= n >>> 2;
              n |= n >>> 4;
              n |= n >>> 8;
              n |= n >>> 16;
              n++;
            }
            return n;
          }

          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function howMuchToRead(n, state) {
            if (n <= 0 || state.length === 0 && state.ended) return 0;
            if (state.objectMode) return 1;
            if (n !== n) {
              // Only flow one buffer at a time
              if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
            }
            // If we're asking for more than the current hwm, then raise the hwm.
            if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
            if (n <= state.length) return n;
            // Don't have enough
            if (!state.ended) {
              state.needReadable = true;
              return 0;
            }
            return state.length;
          }

          // you can override either this method, or the async _read(n) below.
          Readable.prototype.read = function (n) {
            debug('read', n);
            n = parseInt(n, 10);
            var state = this._readableState;
            var nOrig = n;

            if (n !== 0) state.emittedReadable = false;

            // if we're doing read(0) to trigger a readable event, but we
            // already have a bunch of data in the buffer, then just trigger
            // the 'readable' event and move on.
            if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
              debug('read: emitReadable', state.length, state.ended);
              if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
              return null;
            }

            n = howMuchToRead(n, state);

            // if we've ended, and we're now clear, then finish it up.
            if (n === 0 && state.ended) {
              if (state.length === 0) endReadable(this);
              return null;
            }

            // All the actual chunk generation logic needs to be
            // *below* the call to _read.  The reason is that in certain
            // synthetic stream cases, such as passthrough streams, _read
            // may be a completely synchronous operation which may change
            // the state of the read buffer, providing enough data when
            // before there was *not* enough.
            //
            // So, the steps are:
            // 1. Figure out what the state of things will be after we do
            // a read from the buffer.
            //
            // 2. If that resulting state will trigger a _read, then call _read.
            // Note that this may be asynchronous, or synchronous.  Yes, it is
            // deeply ugly to write APIs this way, but that still doesn't mean
            // that the Readable class should behave improperly, as streams are
            // designed to be sync/async agnostic.
            // Take note if the _read call is sync or async (ie, if the read call
            // has returned yet), so that we know whether or not it's safe to emit
            // 'readable' etc.
            //
            // 3. Actually pull the requested chunks out of the buffer and return.

            // if we need a readable event, then we need to do some reading.
            var doRead = state.needReadable;
            debug('need readable', doRead);

            // if we currently have less than the highWaterMark, then also read some
            if (state.length === 0 || state.length - n < state.highWaterMark) {
              doRead = true;
              debug('length less than watermark', doRead);
            }

            // however, if we've ended, then there's no point, and if we're already
            // reading, then it's unnecessary.
            if (state.ended || state.reading) {
              doRead = false;
              debug('reading or ended', doRead);
            } else if (doRead) {
              debug('do read');
              state.reading = true;
              state.sync = true;
              // if the length is currently zero, then we *need* a readable event.
              if (state.length === 0) state.needReadable = true;
              // call internal read method
              this._read(state.highWaterMark);
              state.sync = false;
              // If _read pushed data synchronously, then `reading` will be false,
              // and we need to re-evaluate how much data we can return to the user.
              if (!state.reading) n = howMuchToRead(nOrig, state);
            }

            var ret;
            if (n > 0) ret = fromList(n, state); else ret = null;

            if (ret === null) {
              state.needReadable = true;
              n = 0;
            } else {
              state.length -= n;
            }

            if (state.length === 0) {
              // If we have nothing in the buffer, then we want to know
              // as soon as we *do* get something into the buffer.
              if (!state.ended) state.needReadable = true;

              // If we tried to read() past the EOF, then emit end on the next tick.
              if (nOrig !== n && state.ended) endReadable(this);
            }

            if (ret !== null) this.emit('data', ret);

            return ret;
          };

          function onEofChunk(stream, state) {
            if (state.ended) return;
            if (state.decoder) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) {
                state.buffer.push(chunk);
                state.length += state.objectMode ? 1 : chunk.length;
              }
            }
            state.ended = true;

            // emit 'readable' now to make sure it gets picked up.
            emitReadable(stream);
          }

          // Don't emit readable right away in sync mode, because this can trigger
          // another read() call => stack overflow.  This way, it might trigger
          // a nextTick recursion warning, but that's not so bad.
          function emitReadable(stream) {
            var state = stream._readableState;
            state.needReadable = false;
            if (!state.emittedReadable) {
              debug('emitReadable', state.flowing);
              state.emittedReadable = true;
              if (state.sync) pna.nextTick(emitReadable_, stream); else emitReadable_(stream);
            }
          }

          function emitReadable_(stream) {
            debug('emit readable');
            stream.emit('readable');
            flow(stream);
          }

          // at this point, the user has presumably seen the 'readable' event,
          // and called read() to consume some data.  that may have triggered
          // in turn another _read(n) call, in which case reading = true if
          // it's in progress.
          // However, if we're not ended, or reading, and the length < hwm,
          // then go ahead and try to read some more preemptively.
          function maybeReadMore(stream, state) {
            if (!state.readingMore) {
              state.readingMore = true;
              pna.nextTick(maybeReadMore_, stream, state);
            }
          }

          function maybeReadMore_(stream, state) {
            var len = state.length;
            while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
              debug('maybeReadMore read 0');
              stream.read(0);
              if (len === state.length)
                // didn't get any data, stop spinning.
                break; else len = state.length;
            }
            state.readingMore = false;
          }

          // abstract method.  to be overridden in specific implementation classes.
          // call cb(er, data) where data is <= n in length.
          // for virtual (non-string, non-buffer) streams, "length" is somewhat
          // arbitrary, and perhaps not very meaningful.
          Readable.prototype._read = function (n) {
            this.emit('error', new Error('_read() is not implemented'));
          };

          Readable.prototype.pipe = function (dest, pipeOpts) {
            var src = this;
            var state = this._readableState;

            switch (state.pipesCount) {
              case 0:
                state.pipes = dest;
                break;
              case 1:
                state.pipes = [state.pipes, dest];
                break;
              default:
                state.pipes.push(dest);
                break;
            }
            state.pipesCount += 1;
            debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

            var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

            var endFn = doEnd ? onend : unpipe;
            if (state.endEmitted) pna.nextTick(endFn); else src.once('end', endFn);

            dest.on('unpipe', onunpipe);
            function onunpipe(readable, unpipeInfo) {
              debug('onunpipe');
              if (readable === src) {
                if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                  unpipeInfo.hasUnpiped = true;
                  cleanup();
                }
              }
            }

            function onend() {
              debug('onend');
              dest.end();
            }

            // when the dest drains, it reduces the awaitDrain counter
            // on the source.  This would be more elegant with a .once()
            // handler in flow(), but adding and removing repeatedly is
            // too slow.
            var ondrain = pipeOnDrain(src);
            dest.on('drain', ondrain);

            var cleanedUp = false;
            function cleanup() {
              debug('cleanup');
              // cleanup event handlers once the pipe is broken
              dest.removeListener('close', onclose);
              dest.removeListener('finish', onfinish);
              dest.removeListener('drain', ondrain);
              dest.removeListener('error', onerror);
              dest.removeListener('unpipe', onunpipe);
              src.removeListener('end', onend);
              src.removeListener('end', unpipe);
              src.removeListener('data', ondata);

              cleanedUp = true;

              // if the reader is waiting for a drain event from this
              // specific writer, then it would cause it to never start
              // flowing again.
              // So, if this is awaiting a drain, then we just call it now.
              // If we don't know, then assume that we are waiting for one.
              if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
            }

            // If the user pushes more data while we're writing to dest then we'll end up
            // in ondata again. However, we only want to increase awaitDrain once because
            // dest will only emit one 'drain' event for the multiple writes.
            // => Introduce a guard on increasing awaitDrain.
            var increasedAwaitDrain = false;
            src.on('data', ondata);
            function ondata(chunk) {
              debug('ondata');
              increasedAwaitDrain = false;
              var ret = dest.write(chunk);
              if (false === ret && !increasedAwaitDrain) {
                // If the user unpiped during `dest.write()`, it is possible
                // to get stuck in a permanently paused state if that write
                // also returned false.
                // => Check whether `dest` is still a piping destination.
                if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                  debug('false write response, pause', src._readableState.awaitDrain);
                  src._readableState.awaitDrain++;
                  increasedAwaitDrain = true;
                }
                src.pause();
              }
            }

            // if the dest has an error, then stop piping into it.
            // however, don't suppress the throwing behavior for this.
            function onerror(er) {
              debug('onerror', er);
              unpipe();
              dest.removeListener('error', onerror);
              if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
            }

            // Make sure our error handler is attached before userland ones.
            prependListener(dest, 'error', onerror);

            // Both close and finish should trigger unpipe, but only once.
            function onclose() {
              dest.removeListener('finish', onfinish);
              unpipe();
            }
            dest.once('close', onclose);
            function onfinish() {
              debug('onfinish');
              dest.removeListener('close', onclose);
              unpipe();
            }
            dest.once('finish', onfinish);

            function unpipe() {
              debug('unpipe');
              src.unpipe(dest);
            }

            // tell the dest that it's being piped to
            dest.emit('pipe', src);

            // start the flow if it hasn't been started already.
            if (!state.flowing) {
              debug('pipe resume');
              src.resume();
            }

            return dest;
          };

          function pipeOnDrain(src) {
            return function () {
              var state = src._readableState;
              debug('pipeOnDrain', state.awaitDrain);
              if (state.awaitDrain) state.awaitDrain--;
              if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                state.flowing = true;
                flow(src);
              }
            };
          }

          Readable.prototype.unpipe = function (dest) {
            var state = this._readableState;
            var unpipeInfo = { hasUnpiped: false };

            // if we're not piping anywhere, then do nothing.
            if (state.pipesCount === 0) return this;

            // just one destination.  most common case.
            if (state.pipesCount === 1) {
              // passed in one, but it's not the right one.
              if (dest && dest !== state.pipes) return this;

              if (!dest) dest = state.pipes;

              // got a match.
              state.pipes = null;
              state.pipesCount = 0;
              state.flowing = false;
              if (dest) dest.emit('unpipe', this, unpipeInfo);
              return this;
            }

            // slow case. multiple pipe destinations.

            if (!dest) {
              // remove all.
              var dests = state.pipes;
              var len = state.pipesCount;
              state.pipes = null;
              state.pipesCount = 0;
              state.flowing = false;

              for (var i = 0; i < len; i++) {
                dests[i].emit('unpipe', this, unpipeInfo);
              } return this;
            }

            // try to find the right one.
            var index = indexOf(state.pipes, dest);
            if (index === -1) return this;

            state.pipes.splice(index, 1);
            state.pipesCount -= 1;
            if (state.pipesCount === 1) state.pipes = state.pipes[0];

            dest.emit('unpipe', this, unpipeInfo);

            return this;
          };

          // set up data events if they are asked for
          // Ensure readable listeners eventually get something
          Readable.prototype.on = function (ev, fn) {
            var res = Stream.prototype.on.call(this, ev, fn);

            if (ev === 'data') {
              // Start flowing on next tick if stream isn't explicitly paused
              if (this._readableState.flowing !== false) this.resume();
            } else if (ev === 'readable') {
              var state = this._readableState;
              if (!state.endEmitted && !state.readableListening) {
                state.readableListening = state.needReadable = true;
                state.emittedReadable = false;
                if (!state.reading) {
                  pna.nextTick(nReadingNextTick, this);
                } else if (state.length) {
                  emitReadable(this);
                }
              }
            }

            return res;
          };
          Readable.prototype.addListener = Readable.prototype.on;

          function nReadingNextTick(self) {
            debug('readable nexttick read 0');
            self.read(0);
          }

          // pause() and resume() are remnants of the legacy readable stream API
          // If the user uses them, then switch into old mode.
          Readable.prototype.resume = function () {
            var state = this._readableState;
            if (!state.flowing) {
              debug('resume');
              state.flowing = true;
              resume(this, state);
            }
            return this;
          };

          function resume(stream, state) {
            if (!state.resumeScheduled) {
              state.resumeScheduled = true;
              pna.nextTick(resume_, stream, state);
            }
          }

          function resume_(stream, state) {
            if (!state.reading) {
              debug('resume read 0');
              stream.read(0);
            }

            state.resumeScheduled = false;
            state.awaitDrain = 0;
            stream.emit('resume');
            flow(stream);
            if (state.flowing && !state.reading) stream.read(0);
          }

          Readable.prototype.pause = function () {
            debug('call pause flowing=%j', this._readableState.flowing);
            if (false !== this._readableState.flowing) {
              debug('pause');
              this._readableState.flowing = false;
              this.emit('pause');
            }
            return this;
          };

          function flow(stream) {
            var state = stream._readableState;
            debug('flow', state.flowing);
            while (state.flowing && stream.read() !== null) { }
          }

          // wrap an old-style stream as the async data source.
          // This is *not* part of the readable stream interface.
          // It is an ugly unfortunate mess of history.
          Readable.prototype.wrap = function (stream) {
            var _this = this;

            var state = this._readableState;
            var paused = false;

            stream.on('end', function () {
              debug('wrapped end');
              if (state.decoder && !state.ended) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) _this.push(chunk);
              }

              _this.push(null);
            });

            stream.on('data', function (chunk) {
              debug('wrapped data');
              if (state.decoder) chunk = state.decoder.write(chunk);

              // don't skip over falsy values in objectMode
              if (state.objectMode && (chunk === null || chunk === undefined)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;

              var ret = _this.push(chunk);
              if (!ret) {
                paused = true;
                stream.pause();
              }
            });

            // proxy all the other methods.
            // important when wrapping filters and duplexes.
            for (var i in stream) {
              if (this[i] === undefined && typeof stream[i] === 'function') {
                this[i] = function (method) {
                  return function () {
                    return stream[method].apply(stream, arguments);
                  };
                }(i);
              }
            }

            // proxy certain important events.
            for (var n = 0; n < kProxyEvents.length; n++) {
              stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
            }

            // when we try to consume some more bytes, simply unpause the
            // underlying stream.
            this._read = function (n) {
              debug('wrapped _read', n);
              if (paused) {
                paused = false;
                stream.resume();
              }
            };

            return this;
          };

          Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function () {
              return this._readableState.highWaterMark;
            }
          });

          // exposed for testing purposes only.
          Readable._fromList = fromList;

          // Pluck off n bytes from an array of buffers.
          // Length is the combined lengths of all the buffers in the list.
          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function fromList(n, state) {
            // nothing buffered
            if (state.length === 0) return null;

            var ret;
            if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
              // read it all, truncate the list
              if (state.decoder) ret = state.buffer.join(''); else if (state.buffer.length === 1) ret = state.buffer.head.data; else ret = state.buffer.concat(state.length);
              state.buffer.clear();
            } else {
              // read part of list
              ret = fromListPartial(n, state.buffer, state.decoder);
            }

            return ret;
          }

          // Extracts only enough buffered data to satisfy the amount requested.
          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function fromListPartial(n, list, hasStrings) {
            var ret;
            if (n < list.head.data.length) {
              // slice is the same for buffers and strings
              ret = list.head.data.slice(0, n);
              list.head.data = list.head.data.slice(n);
            } else if (n === list.head.data.length) {
              // first chunk is a perfect match
              ret = list.shift();
            } else {
              // result spans more than one buffer
              ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
            }
            return ret;
          }

          // Copies a specified amount of characters from the list of buffered data
          // chunks.
          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function copyFromBufferString(n, list) {
            var p = list.head;
            var c = 1;
            var ret = p.data;
            n -= ret.length;
            while (p = p.next) {
              var str = p.data;
              var nb = n > str.length ? str.length : n;
              if (nb === str.length) ret += str; else ret += str.slice(0, n);
              n -= nb;
              if (n === 0) {
                if (nb === str.length) {
                  ++c;
                  if (p.next) list.head = p.next; else list.head = list.tail = null;
                } else {
                  list.head = p;
                  p.data = str.slice(nb);
                }
                break;
              }
              ++c;
            }
            list.length -= c;
            return ret;
          }

          // Copies a specified amount of bytes from the list of buffered data chunks.
          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function copyFromBuffer(n, list) {
            var ret = Buffer.allocUnsafe(n);
            var p = list.head;
            var c = 1;
            p.data.copy(ret);
            n -= p.data.length;
            while (p = p.next) {
              var buf = p.data;
              var nb = n > buf.length ? buf.length : n;
              buf.copy(ret, ret.length - n, 0, nb);
              n -= nb;
              if (n === 0) {
                if (nb === buf.length) {
                  ++c;
                  if (p.next) list.head = p.next; else list.head = list.tail = null;
                } else {
                  list.head = p;
                  p.data = buf.slice(nb);
                }
                break;
              }
              ++c;
            }
            list.length -= c;
            return ret;
          }

          function endReadable(stream) {
            var state = stream._readableState;

            // If we get here before consuming all the bytes, then that is a
            // bug in node.  Should never happen.
            if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

            if (!state.endEmitted) {
              state.ended = true;
              pna.nextTick(endReadableNT, state, stream);
            }
          }

          function endReadableNT(state, stream) {
            // Check that we didn't get one last unshift.
            if (!state.endEmitted && state.length === 0) {
              state.endEmitted = true;
              stream.readable = false;
              stream.emit('end');
            }
          }

          function indexOf(xs, x) {
            for (var i = 0, l = xs.length; i < l; i++) {
              if (xs[i] === x) return i;
            }
            return -1;
          }
          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(21), __webpack_require__(60)))

        /***/
}),
/* 220 */
/***/ (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(128).EventEmitter;


        /***/
}),
/* 221 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        /*<replacement>*/

        var pna = __webpack_require__(94);
        /*</replacement>*/

        // undocumented cb() API, needed for core, not for public API
        function destroy(err, cb) {
          var _this = this;

          var readableDestroyed = this._readableState && this._readableState.destroyed;
          var writableDestroyed = this._writableState && this._writableState.destroyed;

          if (readableDestroyed || writableDestroyed) {
            if (cb) {
              cb(err);
            } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
              pna.nextTick(emitErrorNT, this, err);
            }
            return this;
          }

          // we set destroyed to true before firing error callbacks in order
          // to make it re-entrance safe in case destroy() is called within callbacks

          if (this._readableState) {
            this._readableState.destroyed = true;
          }

          // if this is a duplex stream mark the writable part as destroyed as well
          if (this._writableState) {
            this._writableState.destroyed = true;
          }

          this._destroy(err || null, function (err) {
            if (!cb && err) {
              pna.nextTick(emitErrorNT, _this, err);
              if (_this._writableState) {
                _this._writableState.errorEmitted = true;
              }
            } else if (cb) {
              cb(err);
            }
          });

          return this;
        }

        function undestroy() {
          if (this._readableState) {
            this._readableState.destroyed = false;
            this._readableState.reading = false;
            this._readableState.ended = false;
            this._readableState.endEmitted = false;
          }

          if (this._writableState) {
            this._writableState.destroyed = false;
            this._writableState.ended = false;
            this._writableState.ending = false;
            this._writableState.finished = false;
            this._writableState.errorEmitted = false;
          }
        }

        function emitErrorNT(self, err) {
          self.emit('error', err);
        }

        module.exports = {
          destroy: destroy,
          undestroy: undestroy
        };

        /***/
}),
/* 222 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // a transform stream is a readable/writable stream where you do
        // something with the data.  Sometimes it's called a "filter",
        // but that's not a great name for it, since that implies a thing where
        // some bits pass through, and others are simply ignored.  (That would
        // be a valid example of a transform, of course.)
        //
        // While the output is causally related to the input, it's not a
        // necessarily symmetric or synchronous transformation.  For example,
        // a zlib stream might take multiple plain-text writes(), and then
        // emit a single compressed chunk some time in the future.
        //
        // Here's how this works:
        //
        // The Transform stream has all the aspects of the readable and writable
        // stream classes.  When you write(chunk), that calls _write(chunk,cb)
        // internally, and returns false if there's a lot of pending writes
        // buffered up.  When you call read(), that calls _read(n) until
        // there's enough pending readable data buffered up.
        //
        // In a transform stream, the written data is placed in a buffer.  When
        // _read(n) is called, it transforms the queued up data, calling the
        // buffered _write cb's as it consumes chunks.  If consuming a single
        // written chunk would result in multiple output chunks, then the first
        // outputted bit calls the readcb, and subsequent chunks just go into
        // the read buffer, and will cause it to emit 'readable' if necessary.
        //
        // This way, back-pressure is actually determined by the reading side,
        // since _read has to be called to start processing a new chunk.  However,
        // a pathological inflate type of transform can cause excessive buffering
        // here.  For example, imagine a stream where every byte of input is
        // interpreted as an integer from 0-255, and then results in that many
        // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
        // 1kb of data being output.  In this case, you could write a very small
        // amount of input, and end up with a very large amount of output.  In
        // such a pathological inflating mechanism, there'd be no way to tell
        // the system to stop doing the transform.  A single 4MB write could
        // cause the system to run out of memory.
        //
        // However, even in such a pathological case, only a single written chunk
        // would be consumed, and then the rest would wait (un-transformed) until
        // the results of the previous transformed chunk were consumed.



        module.exports = Transform;

        var Duplex = __webpack_require__(46);

        /*<replacement>*/
        var util = Object.create(__webpack_require__(71));
        util.inherits = __webpack_require__(57);
        /*</replacement>*/

        util.inherits(Transform, Duplex);

        function afterTransform(er, data) {
          var ts = this._transformState;
          ts.transforming = false;

          var cb = ts.writecb;

          if (!cb) {
            return this.emit('error', new Error('write callback called multiple times'));
          }

          ts.writechunk = null;
          ts.writecb = null;

          if (data != null) // single equals check for both `null` and `undefined`
            this.push(data);

          cb(er);

          var rs = this._readableState;
          rs.reading = false;
          if (rs.needReadable || rs.length < rs.highWaterMark) {
            this._read(rs.highWaterMark);
          }
        }

        function Transform(options) {
          if (!(this instanceof Transform)) return new Transform(options);

          Duplex.call(this, options);

          this._transformState = {
            afterTransform: afterTransform.bind(this),
            needTransform: false,
            transforming: false,
            writecb: null,
            writechunk: null,
            writeencoding: null
          };

          // start out asking for a readable event once data is transformed.
          this._readableState.needReadable = true;

          // we have implemented the _read method, and done the other things
          // that Readable wants before the first _read call, so unset the
          // sync guard flag.
          this._readableState.sync = false;

          if (options) {
            if (typeof options.transform === 'function') this._transform = options.transform;

            if (typeof options.flush === 'function') this._flush = options.flush;
          }

          // When the writable side finishes, then flush out anything remaining.
          this.on('prefinish', prefinish);
        }

        function prefinish() {
          var _this = this;

          if (typeof this._flush === 'function') {
            this._flush(function (er, data) {
              done(_this, er, data);
            });
          } else {
            done(this, null, null);
          }
        }

        Transform.prototype.push = function (chunk, encoding) {
          this._transformState.needTransform = false;
          return Duplex.prototype.push.call(this, chunk, encoding);
        };

        // This is the part where you do stuff!
        // override this function in implementation classes.
        // 'chunk' is an input chunk.
        //
        // Call `push(newChunk)` to pass along transformed output
        // to the readable side.  You may call 'push' zero or more times.
        //
        // Call `cb(err)` when you are done with this chunk.  If you pass
        // an error, then that'll put the hurt on the whole operation.  If you
        // never call cb(), then you'll never get another chunk.
        Transform.prototype._transform = function (chunk, encoding, cb) {
          throw new Error('_transform() is not implemented');
        };

        Transform.prototype._write = function (chunk, encoding, cb) {
          var ts = this._transformState;
          ts.writecb = cb;
          ts.writechunk = chunk;
          ts.writeencoding = encoding;
          if (!ts.transforming) {
            var rs = this._readableState;
            if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
          }
        };

        // Doesn't matter what the args are here.
        // _transform does all the work.
        // That we got here means that the readable side wants more data.
        Transform.prototype._read = function (n) {
          var ts = this._transformState;

          if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
            ts.transforming = true;
            this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
          } else {
            // mark that we need a transform, so that any data that comes in
            // will get processed, now that we've asked for it.
            ts.needTransform = true;
          }
        };

        Transform.prototype._destroy = function (err, cb) {
          var _this2 = this;

          Duplex.prototype._destroy.call(this, err, function (err2) {
            cb(err2);
            _this2.emit('close');
          });
        };

        function done(stream, er, data) {
          if (er) return stream.emit('error', er);

          if (data != null) // single equals check for both `null` and `undefined`
            stream.push(data);

          // if there's nothing in the write buffer, then that means
          // that nothing more will ever be provided
          if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

          if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

          return stream.push(null);
        }

        /***/
}),
/* 223 */
/***/ (function (module, exports, __webpack_require__) {

        /**
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
         * in FIPS 180-2
         * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         *
         */

        var inherits = __webpack_require__(6)
        var Hash = __webpack_require__(58)
        var Buffer = __webpack_require__(10).Buffer

        var K = [
          0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
          0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
          0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
          0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
          0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
          0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
          0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
          0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
          0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
          0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
          0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
          0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
          0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
          0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
          0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
          0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
        ]

        var W = new Array(64)

        function Sha256() {
          this.init()

          this._w = W // new Array(64)

          Hash.call(this, 64, 56)
        }

        inherits(Sha256, Hash)

        Sha256.prototype.init = function () {
          this._a = 0x6a09e667
          this._b = 0xbb67ae85
          this._c = 0x3c6ef372
          this._d = 0xa54ff53a
          this._e = 0x510e527f
          this._f = 0x9b05688c
          this._g = 0x1f83d9ab
          this._h = 0x5be0cd19

          return this
        }

        function ch(x, y, z) {
          return z ^ (x & (y ^ z))
        }

        function maj(x, y, z) {
          return (x & y) | (z & (x | y))
        }

        function sigma0(x) {
          return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
        }

        function sigma1(x) {
          return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
        }

        function gamma0(x) {
          return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
        }

        function gamma1(x) {
          return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
        }

        Sha256.prototype._update = function (M) {
          var W = this._w

          var a = this._a | 0
          var b = this._b | 0
          var c = this._c | 0
          var d = this._d | 0
          var e = this._e | 0
          var f = this._f | 0
          var g = this._g | 0
          var h = this._h | 0

          for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
          for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

          for (var j = 0; j < 64; ++j) {
            var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
            var T2 = (sigma0(a) + maj(a, b, c)) | 0

            h = g
            g = f
            f = e
            e = (d + T1) | 0
            d = c
            c = b
            b = a
            a = (T1 + T2) | 0
          }

          this._a = (a + this._a) | 0
          this._b = (b + this._b) | 0
          this._c = (c + this._c) | 0
          this._d = (d + this._d) | 0
          this._e = (e + this._e) | 0
          this._f = (f + this._f) | 0
          this._g = (g + this._g) | 0
          this._h = (h + this._h) | 0
        }

        Sha256.prototype._hash = function () {
          var H = Buffer.allocUnsafe(32)

          H.writeInt32BE(this._a, 0)
          H.writeInt32BE(this._b, 4)
          H.writeInt32BE(this._c, 8)
          H.writeInt32BE(this._d, 12)
          H.writeInt32BE(this._e, 16)
          H.writeInt32BE(this._f, 20)
          H.writeInt32BE(this._g, 24)
          H.writeInt32BE(this._h, 28)

          return H
        }

        module.exports = Sha256


        /***/
}),
/* 224 */
/***/ (function (module, exports, __webpack_require__) {

        var inherits = __webpack_require__(6)
        var Hash = __webpack_require__(58)
        var Buffer = __webpack_require__(10).Buffer

        var K = [
          0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
          0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
          0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
          0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
          0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
          0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
          0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
          0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
          0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
          0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
          0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
          0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
          0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
          0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
          0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
          0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
          0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
          0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
          0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
          0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
          0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
          0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
          0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
          0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
          0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
          0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
          0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
          0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
          0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
          0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
          0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
          0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
          0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
          0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
          0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
          0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
          0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
          0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
          0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
          0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
        ]

        var W = new Array(160)

        function Sha512() {
          this.init()
          this._w = W

          Hash.call(this, 128, 112)
        }

        inherits(Sha512, Hash)

        Sha512.prototype.init = function () {
          this._ah = 0x6a09e667
          this._bh = 0xbb67ae85
          this._ch = 0x3c6ef372
          this._dh = 0xa54ff53a
          this._eh = 0x510e527f
          this._fh = 0x9b05688c
          this._gh = 0x1f83d9ab
          this._hh = 0x5be0cd19

          this._al = 0xf3bcc908
          this._bl = 0x84caa73b
          this._cl = 0xfe94f82b
          this._dl = 0x5f1d36f1
          this._el = 0xade682d1
          this._fl = 0x2b3e6c1f
          this._gl = 0xfb41bd6b
          this._hl = 0x137e2179

          return this
        }

        function Ch(x, y, z) {
          return z ^ (x & (y ^ z))
        }

        function maj(x, y, z) {
          return (x & y) | (z & (x | y))
        }

        function sigma0(x, xl) {
          return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
        }

        function sigma1(x, xl) {
          return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
        }

        function Gamma0(x, xl) {
          return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
        }

        function Gamma0l(x, xl) {
          return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
        }

        function Gamma1(x, xl) {
          return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
        }

        function Gamma1l(x, xl) {
          return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
        }

        function getCarry(a, b) {
          return (a >>> 0) < (b >>> 0) ? 1 : 0
        }

        Sha512.prototype._update = function (M) {
          var W = this._w

          var ah = this._ah | 0
          var bh = this._bh | 0
          var ch = this._ch | 0
          var dh = this._dh | 0
          var eh = this._eh | 0
          var fh = this._fh | 0
          var gh = this._gh | 0
          var hh = this._hh | 0

          var al = this._al | 0
          var bl = this._bl | 0
          var cl = this._cl | 0
          var dl = this._dl | 0
          var el = this._el | 0
          var fl = this._fl | 0
          var gl = this._gl | 0
          var hl = this._hl | 0

          for (var i = 0; i < 32; i += 2) {
            W[i] = M.readInt32BE(i * 4)
            W[i + 1] = M.readInt32BE(i * 4 + 4)
          }
          for (; i < 160; i += 2) {
            var xh = W[i - 15 * 2]
            var xl = W[i - 15 * 2 + 1]
            var gamma0 = Gamma0(xh, xl)
            var gamma0l = Gamma0l(xl, xh)

            xh = W[i - 2 * 2]
            xl = W[i - 2 * 2 + 1]
            var gamma1 = Gamma1(xh, xl)
            var gamma1l = Gamma1l(xl, xh)

            // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
            var Wi7h = W[i - 7 * 2]
            var Wi7l = W[i - 7 * 2 + 1]

            var Wi16h = W[i - 16 * 2]
            var Wi16l = W[i - 16 * 2 + 1]

            var Wil = (gamma0l + Wi7l) | 0
            var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
            Wil = (Wil + gamma1l) | 0
            Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
            Wil = (Wil + Wi16l) | 0
            Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

            W[i] = Wih
            W[i + 1] = Wil
          }

          for (var j = 0; j < 160; j += 2) {
            Wih = W[j]
            Wil = W[j + 1]

            var majh = maj(ah, bh, ch)
            var majl = maj(al, bl, cl)

            var sigma0h = sigma0(ah, al)
            var sigma0l = sigma0(al, ah)
            var sigma1h = sigma1(eh, el)
            var sigma1l = sigma1(el, eh)

            // t1 = h + sigma1 + ch + K[j] + W[j]
            var Kih = K[j]
            var Kil = K[j + 1]

            var chh = Ch(eh, fh, gh)
            var chl = Ch(el, fl, gl)

            var t1l = (hl + sigma1l) | 0
            var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
            t1l = (t1l + chl) | 0
            t1h = (t1h + chh + getCarry(t1l, chl)) | 0
            t1l = (t1l + Kil) | 0
            t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
            t1l = (t1l + Wil) | 0
            t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

            // t2 = sigma0 + maj
            var t2l = (sigma0l + majl) | 0
            var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

            hh = gh
            hl = gl
            gh = fh
            gl = fl
            fh = eh
            fl = el
            el = (dl + t1l) | 0
            eh = (dh + t1h + getCarry(el, dl)) | 0
            dh = ch
            dl = cl
            ch = bh
            cl = bl
            bh = ah
            bl = al
            al = (t1l + t2l) | 0
            ah = (t1h + t2h + getCarry(al, t1l)) | 0
          }

          this._al = (this._al + al) | 0
          this._bl = (this._bl + bl) | 0
          this._cl = (this._cl + cl) | 0
          this._dl = (this._dl + dl) | 0
          this._el = (this._el + el) | 0
          this._fl = (this._fl + fl) | 0
          this._gl = (this._gl + gl) | 0
          this._hl = (this._hl + hl) | 0

          this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
          this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
          this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
          this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
          this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
          this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
          this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
          this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
        }

        Sha512.prototype._hash = function () {
          var H = Buffer.allocUnsafe(64)

          function writeInt64BE(h, l, offset) {
            H.writeInt32BE(h, offset)
            H.writeInt32BE(l, offset + 4)
          }

          writeInt64BE(this._ah, this._al, 0)
          writeInt64BE(this._bh, this._bl, 8)
          writeInt64BE(this._ch, this._cl, 16)
          writeInt64BE(this._dh, this._dl, 24)
          writeInt64BE(this._eh, this._el, 32)
          writeInt64BE(this._fh, this._fl, 40)
          writeInt64BE(this._gh, this._gl, 48)
          writeInt64BE(this._hh, this._hl, 56)

          return H
        }

        module.exports = Sha512


        /***/
}),
/* 225 */
/***/ (function (module, exports, __webpack_require__) {

        var Chain3 = __webpack_require__(226);

        // dont override global variable
        if (typeof window !== 'undefined' && typeof window.Chain3 === 'undefined') {
          window.Chain3 = Chain3;
        }

        // Add window moac
        if (typeof window !== 'undefined' && typeof window.moac === 'undefined') {
          window.moac = Chain3;
        }

        module.exports = Chain3;


        /***/
}),
/* 226 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file chain3.js
         * @Modified from file web3.js
         * @authors:
         *   Jeffrey Wilcke <jeff@ethdev.com>
         *   Marek Kotewicz <marek@ethdev.com>
         *   Marian Oancea <marian@ethdev.com>
         *   Fabian Vogelsteller <fabian@ethdev.com>
         *   Gav Wood <g@ethdev.com>
         * @date 2014
         * @authors:
           @MOAC tech
           @date 2018
         */

        var RequestManager = __webpack_require__(227);
        var Iban = __webpack_require__(73);
        var Mc = __webpack_require__(248);
        var Vnode = __webpack_require__(481);
        var Scs = __webpack_require__(482);
        var Admin = __webpack_require__(483);
        var Txpool = __webpack_require__(484);
        var Net = __webpack_require__(485);
        var Personal = __webpack_require__(486);
        var Settings = __webpack_require__(487);
        var version = __webpack_require__(488);
        var utils = __webpack_require__(0);
        var sha3 = __webpack_require__(18);
        var extend = __webpack_require__(489);
        var Batch = __webpack_require__(490);
        var Property = __webpack_require__(29);
        var HttpProvider = __webpack_require__(491);
        var IpcProvider = __webpack_require__(494);
        var BigNumber = __webpack_require__(59);
        var Coder = __webpack_require__(23);
        var MicroChain = __webpack_require__(495);
        var sigutils = __webpack_require__(500);
        var McDapp = __webpack_require__(546);
        var Debug = __webpack_require__(550);


        function Chain3(provider, scsProvider) {
          this._requestManager = new RequestManager(provider);
          this.currentProvider = provider;
          this._scsRequestManager = new RequestManager(scsProvider);
          this.scsCurrentProvider = scsProvider;

          this.mc = new Mc(this);
          this.admin = new Admin(this);
          this.txpool = new Txpool(this);
          this.vnode = new Vnode(this);
          this.scs = new Scs(this);
          this.net = new Net(this);
          this.personal = new Personal(this);
          this.debug = new Debug(this);
          this.settings = new Settings();

          this.version = {
            api: version.version
          };
          this.providers = {
            HttpProvider: HttpProvider,
            IpcProvider: IpcProvider
          };
          this._extend = extend(this);
          this._extend({
            properties: properties()
          });
        }

        // expose providers on the class
        Chain3.providers = {
          HttpProvider: HttpProvider,
          IpcProvider: IpcProvider
        };

        Chain3.prototype.setProvider = function (provider) {
          this._requestManager.setProvider(provider);
          this.currentProvider = provider;
        };

        Chain3.prototype.setScsProvider = function (provider) {
          this._scsRequestManager.setProvider(provider);
          this.scsCurrentProvider = provider;
        };

        Chain3.prototype.reset = function (keepIsSyncing) {
          this._requestManager.reset(keepIsSyncing);
          this.settings = new Settings();
        };

        Chain3.prototype.BigNumber = BigNumber;
        Chain3.prototype.toHex = utils.toHex;
        Chain3.prototype.toAscii = utils.toAscii;
        Chain3.prototype.toUtf8 = utils.toUtf8;
        Chain3.prototype.fromAscii = utils.fromAscii;
        Chain3.prototype.fromUtf8 = utils.fromUtf8;
        Chain3.prototype.toDecimal = utils.toDecimal;
        Chain3.prototype.fromDecimal = utils.fromDecimal;
        Chain3.prototype.toBigNumber = utils.toBigNumber;
        Chain3.prototype.toSha = utils.toSha;
        Chain3.prototype.fromSha = utils.fromSha;
        Chain3.prototype.isAddress = utils.isAddress;
        Chain3.prototype.isChecksumAddress = utils.isChecksumAddress;
        Chain3.prototype.toChecksumAddress = utils.toChecksumAddress;
        Chain3.prototype.isIBAN = utils.isIBAN;
        Chain3.prototype.padLeft = utils.padLeft;
        Chain3.prototype.padRight = utils.padRight;

        //New functions to sign transaction
        Chain3.prototype.intToHex = utils.BigIntToHex;

        //Encode the input types and parameters
        Chain3.prototype.encodeParams = function (type, param) {
          return Coder.encodeParams(type, param);
        };

        Chain3.prototype.sha3 = function (string, options) {
          return '0x' + sha3(string, options);
        };

        /**
         * Transforms direct icap to address
         */
        Chain3.prototype.fromICAP = function (icap) {
          var iban = new Iban(icap);
          return iban.address();
        };

        var properties = function () {
          return [
            new Property({
              name: 'version.node',
              getter: 'chain3_clientVersion'
            }),
            new Property({
              name: 'version.network',
              getter: 'net_version',
              inputFormatter: utils.toDecimal
            }),
            new Property({
              name: 'version.moac',
              getter: 'mc_protocolVersion',
              inputFormatter: utils.toDecimal
            })
          ];
        };

        Chain3.prototype.isConnected = function () {
          return (this.currentProvider && this.currentProvider.isConnected());
        };

        Chain3.prototype.isScsConnected = function () {
          return (this.scsCurrentProvider && this.scsCurrentProvider.isConnected());
        };

        Chain3.prototype.createBatch = function () {
          return new Batch(this);
        };

        // //MicroChain constructor object for multi contract chain.
        // TODO
        Chain3.prototype.microchain = function (inabi, inAddress) {
          //Used the MicroChain with 
          var mcChain = new MicroChain(this.mc, this.scs, inabi);
          return mcChain;
        };

        //A collection of signing functions used for MOAC chain
        //Verify Signature function
        //TX function
        Chain3.prototype.signTransaction = sigutils.signTransaction;
        Chain3.prototype.verifyMcSignature = sigutils.verifyMcSignature;
        Chain3.prototype.signMcMessage = sigutils.signMcMessage;
        Chain3.prototype.recoverPersonalSignature = sigutils.recoverPersonalSignature;

        module.exports = Chain3;




        /***/
}),
/* 227 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
        */

        var Jsonrpc = __webpack_require__(133);
        var utils = __webpack_require__(0);
        var config = __webpack_require__(47);
        var errors = __webpack_require__(32);

        /**
         * It's responsible for passing messages to providers
         * It's also responsible for polling the MOAC node for incoming messages
         * Default poll timeout is 1 second
         * Singleton
         */
        var RequestManager = function (provider) {
          this.provider = provider;
          this.polls = {};
          this.timeout = null;
        };

        /**
         * Should be used to synchronously send request
         *
         * @method send
         * @param {Object} data
         * @return {Object}
         */
        RequestManager.prototype.send = async function (data) {

          if (!this.provider) {
            console.error(errors.InvalidProvider());
            return null;
          }

          var payload = Jsonrpc.toPayload(data.method, data.params);
          var result = await this.provider.send(payload);

          console.log("invalid", result);
          if (!Jsonrpc.isValidResponse(result)) {    //debugpoint
            throw errors.InvalidResponse(result);
          }

          return result.result;
        };

        /**
         * Should be used to asynchronously send request
         *
         * @method sendAsync
         * @param {Object} data
         * @param {Function} callback
         */
        RequestManager.prototype.sendAsync = function (data, callback) {
          if (!this.provider) {
            return callback(errors.InvalidProvider());
          }

          var payload = Jsonrpc.toPayload(data.method, data.params);
          this.provider.sendAsync(payload, function (err, result) {
            if (err) {
              return callback(err);
            }

            if (!Jsonrpc.isValidResponse(result)) {
              return callback(errors.InvalidResponse(result));
            }

            callback(null, result.result);
          });
        };

        /**
         * Should be called to asynchronously send batch request
         *
         * @method sendBatch
         * @param {Array} batch data
         * @param {Function} callback
         */
        RequestManager.prototype.sendBatch = function (data, callback) {
          if (!this.provider) {
            return callback(errors.InvalidProvider());
          }

          var payload = Jsonrpc.toBatchPayload(data);

          this.provider.sendAsync(payload, function (err, results) {
            if (err) {
              return callback(err);
            }

            if (!utils.isArray(results)) {
              return callback(errors.InvalidResponse(results));
            }

            callback(err, results);
          });
        };

        /**
         * Should be used to set provider of request manager
         *
         * @method setProvider
         * @param {Object}
         */
        RequestManager.prototype.setProvider = function (p) {
          this.provider = p;
        };

        /**
         * Should be used to start polling
         *
         * @method startPolling
         * @param {Object} data
         * @param {Number} pollId
         * @param {Function} callback
         * @param {Function} uninstall
         *
         * @todo cleanup number of params
         */
        RequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {
          this.polls[pollId] = {
            data: data,
            id: pollId,
            callback: callback,
            uninstall: uninstall
          };


          // start polling
          if (!this.timeout) {
            this.poll();
          }
        };

        /**
         * Should be used to stop polling for filter with given id
         *
         * @method stopPolling
         * @param {Number} pollId
         */
        RequestManager.prototype.stopPolling = function (pollId) {
          delete this.polls[pollId];

          // stop polling
          if (Object.keys(this.polls).length === 0 && this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = null;
          }
        };

        /**
         * Should be called to reset the polling mechanism of the request manager
         *
         * @method reset
         */
        RequestManager.prototype.reset = function (keepIsSyncing) {
          /*jshint maxcomplexity:5 */

          for (var key in this.polls) {
            // remove all polls, except sync polls,
            // they need to be removed manually by calling syncing.stopWatching()
            if (!keepIsSyncing || key.indexOf('syncPoll_') === -1) {
              this.polls[key].uninstall();
              delete this.polls[key];
            }
          }

          // stop polling
          if (Object.keys(this.polls).length === 0 && this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = null;
          }
        };

        /**
         * Should be called to poll for changes on filter with given id
         *
         * @method poll
         */
        RequestManager.prototype.poll = function () {
          /*jshint maxcomplexity: 6 */
          this.timeout = setTimeout(this.poll.bind(this), config.MC_POLLING_TIMEOUT);

          if (Object.keys(this.polls).length === 0) {
            return;
          }

          if (!this.provider) {
            console.error(errors.InvalidProvider());
            return;
          }

          var pollsData = [];
          var pollsIds = [];
          for (var key in this.polls) {
            pollsData.push(this.polls[key].data);
            pollsIds.push(key);
          }

          if (pollsData.length === 0) {
            return;
          }

          var payload = Jsonrpc.toBatchPayload(pollsData);

          // map the request id to they poll id
          var pollsIdMap = {};
          payload.forEach(function (load, index) {
            pollsIdMap[load.id] = pollsIds[index];
          });


          var self = this;
          this.provider.sendAsync(payload, function (error, results) {


            // TODO: console log?
            if (error) {
              return;
            }

            if (!utils.isArray(results)) {
              throw errors.InvalidResponse(results);
            }
            results.map(function (result) {
              var id = pollsIdMap[result.id];

              // make sure the filter is still installed after arrival of the request
              if (self.polls[id]) {
                result.callback = self.polls[id].callback;
                return result;
              } else
                return false;
            }).filter(function (result) {
              return !!result;
            }).filter(function (result) {
              var valid = Jsonrpc.isValidResponse(result);
              if (!valid) {
                result.callback(errors.InvalidResponse(result));
              }
              return valid;
            }).forEach(function (result) {
              result.callback(null, result.result);
            });
          });
        };

        module.exports = RequestManager;

        /***/
}),
/* 228 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (global, module) {
          var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.9.2
          //     https://underscorejs.org
          //     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
          //     Underscore may be freely distributed under the MIT license.

          (function () {

            // Baseline setup
            // --------------

            // Establish the root object, `window` (`self`) in the browser, `global`
            // on the server, or `this` in some virtual machines. We use `self`
            // instead of `window` for `WebWorker` support.
            var root = typeof self == 'object' && self.self === self && self ||
              typeof global == 'object' && global.global === global && global ||
              this ||
              {};

            // Save the previous value of the `_` variable.
            var previousUnderscore = root._;

            // Save bytes in the minified (but not gzipped) version:
            var ArrayProto = Array.prototype, ObjProto = Object.prototype;
            var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

            // Create quick reference variables for speed access to core prototypes.
            var push = ArrayProto.push,
              slice = ArrayProto.slice,
              toString = ObjProto.toString,
              hasOwnProperty = ObjProto.hasOwnProperty;

            // All **ECMAScript 5** native function implementations that we hope to use
            // are declared here.
            var nativeIsArray = Array.isArray,
              nativeKeys = Object.keys,
              nativeCreate = Object.create;

            // Naked function reference for surrogate-prototype-swapping.
            var Ctor = function () { };

            // Create a safe reference to the Underscore object for use below.
            var _ = function (obj) {
              if (obj instanceof _) return obj;
              if (!(this instanceof _)) return new _(obj);
              this._wrapped = obj;
            };

            // Export the Underscore object for **Node.js**, with
            // backwards-compatibility for their old module API. If we're in
            // the browser, add `_` as a global object.
            // (`nodeType` is checked to ensure that `module`
            // and `exports` are not HTML elements.)
            if (typeof exports != 'undefined' && !exports.nodeType) {
              if (typeof module != 'undefined' && !module.nodeType && module.exports) {
                exports = module.exports = _;
              }
              exports._ = _;
            } else {
              root._ = _;
            }

            // Current version.
            _.VERSION = '1.9.2';

            // Internal function that returns an efficient (for current engines) version
            // of the passed-in callback, to be repeatedly applied in other Underscore
            // functions.
            var optimizeCb = function (func, context, argCount) {
              if (context === void 0) return func;
              switch (argCount == null ? 3 : argCount) {
                case 1: return function (value) {
                  return func.call(context, value);
                };
                // The 2-argument case is omitted because weâ€™re not using it.
                case 3: return function (value, index, collection) {
                  return func.call(context, value, index, collection);
                };
                case 4: return function (accumulator, value, index, collection) {
                  return func.call(context, accumulator, value, index, collection);
                };
              }
              return function () {
                return func.apply(context, arguments);
              };
            };

            var builtinIteratee;

            // An internal function to generate callbacks that can be applied to each
            // element in a collection, returning the desired result â€” either `identity`,
            // an arbitrary callback, a property matcher, or a property accessor.
            var cb = function (value, context, argCount) {
              if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
              if (value == null) return _.identity;
              if (_.isFunction(value)) return optimizeCb(value, context, argCount);
              if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
              return _.property(value);
            };

            // External wrapper for our callback generator. Users may customize
            // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
            // This abstraction hides the internal-only argCount argument.
            _.iteratee = builtinIteratee = function (value, context) {
              return cb(value, context, Infinity);
            };

            // Some functions take a variable number of arguments, or a few expected
            // arguments at the beginning and then a variable number of values to operate
            // on. This helper accumulates all remaining arguments past the functionâ€™s
            // argument length (or an explicit `startIndex`), into an array that becomes
            // the last argument. Similar to ES6â€™s "rest parameter".
            var restArguments = function (func, startIndex) {
              startIndex = startIndex == null ? func.length - 1 : +startIndex;
              return function () {
                var length = Math.max(arguments.length - startIndex, 0),
                  rest = Array(length),
                  index = 0;
                for (; index < length; index++) {
                  rest[index] = arguments[index + startIndex];
                }
                switch (startIndex) {
                  case 0: return func.call(this, rest);
                  case 1: return func.call(this, arguments[0], rest);
                  case 2: return func.call(this, arguments[0], arguments[1], rest);
                }
                var args = Array(startIndex + 1);
                for (index = 0; index < startIndex; index++) {
                  args[index] = arguments[index];
                }
                args[startIndex] = rest;
                return func.apply(this, args);
              };
            };

            // An internal function for creating a new object that inherits from another.
            var baseCreate = function (prototype) {
              if (!_.isObject(prototype)) return {};
              if (nativeCreate) return nativeCreate(prototype);
              Ctor.prototype = prototype;
              var result = new Ctor;
              Ctor.prototype = null;
              return result;
            };

            var shallowProperty = function (key) {
              return function (obj) {
                return obj == null ? void 0 : obj[key];
              };
            };

            var has = function (obj, path) {
              return obj != null && hasOwnProperty.call(obj, path);
            }

            var deepGet = function (obj, path) {
              var length = path.length;
              for (var i = 0; i < length; i++) {
                if (obj == null) return void 0;
                obj = obj[path[i]];
              }
              return length ? obj : void 0;
            };

            // Helper for collection methods to determine whether a collection
            // should be iterated as an array or as an object.
            // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
            // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
            var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
            var getLength = shallowProperty('length');
            var isArrayLike = function (collection) {
              var length = getLength(collection);
              return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
            };

            // Collection Functions
            // --------------------

            // The cornerstone, an `each` implementation, aka `forEach`.
            // Handles raw objects in addition to array-likes. Treats all
            // sparse array-likes as if they were dense.
            _.each = _.forEach = function (obj, iteratee, context) {
              iteratee = optimizeCb(iteratee, context);
              var i, length;
              if (isArrayLike(obj)) {
                for (i = 0, length = obj.length; i < length; i++) {
                  iteratee(obj[i], i, obj);
                }
              } else {
                var keys = _.keys(obj);
                for (i = 0, length = keys.length; i < length; i++) {
                  iteratee(obj[keys[i]], keys[i], obj);
                }
              }
              return obj;
            };

            // Return the results of applying the iteratee to each element.
            _.map = _.collect = function (obj, iteratee, context) {
              iteratee = cb(iteratee, context);
              var keys = !isArrayLike(obj) && _.keys(obj),
                length = (keys || obj).length,
                results = Array(length);
              for (var index = 0; index < length; index++) {
                var currentKey = keys ? keys[index] : index;
                results[index] = iteratee(obj[currentKey], currentKey, obj);
              }
              return results;
            };

            // Create a reducing function iterating left or right.
            var createReduce = function (dir) {
              // Wrap code that reassigns argument variables in a separate function than
              // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
              var reducer = function (obj, iteratee, memo, initial) {
                var keys = !isArrayLike(obj) && _.keys(obj),
                  length = (keys || obj).length,
                  index = dir > 0 ? 0 : length - 1;
                if (!initial) {
                  memo = obj[keys ? keys[index] : index];
                  index += dir;
                }
                for (; index >= 0 && index < length; index += dir) {
                  var currentKey = keys ? keys[index] : index;
                  memo = iteratee(memo, obj[currentKey], currentKey, obj);
                }
                return memo;
              };

              return function (obj, iteratee, memo, context) {
                var initial = arguments.length >= 3;
                return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
              };
            };

            // **Reduce** builds up a single result from a list of values, aka `inject`,
            // or `foldl`.
            _.reduce = _.foldl = _.inject = createReduce(1);

            // The right-associative version of reduce, also known as `foldr`.
            _.reduceRight = _.foldr = createReduce(-1);

            // Return the first value which passes a truth test. Aliased as `detect`.
            _.find = _.detect = function (obj, predicate, context) {
              var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
              var key = keyFinder(obj, predicate, context);
              if (key !== void 0 && key !== -1) return obj[key];
            };

            // Return all the elements that pass a truth test.
            // Aliased as `select`.
            _.filter = _.select = function (obj, predicate, context) {
              var results = [];
              predicate = cb(predicate, context);
              _.each(obj, function (value, index, list) {
                if (predicate(value, index, list)) results.push(value);
              });
              return results;
            };

            // Return all the elements for which a truth test fails.
            _.reject = function (obj, predicate, context) {
              return _.filter(obj, _.negate(cb(predicate)), context);
            };

            // Determine whether all of the elements match a truth test.
            // Aliased as `all`.
            _.every = _.all = function (obj, predicate, context) {
              predicate = cb(predicate, context);
              var keys = !isArrayLike(obj) && _.keys(obj),
                length = (keys || obj).length;
              for (var index = 0; index < length; index++) {
                var currentKey = keys ? keys[index] : index;
                if (!predicate(obj[currentKey], currentKey, obj)) return false;
              }
              return true;
            };

            // Determine if at least one element in the object matches a truth test.
            // Aliased as `any`.
            _.some = _.any = function (obj, predicate, context) {
              predicate = cb(predicate, context);
              var keys = !isArrayLike(obj) && _.keys(obj),
                length = (keys || obj).length;
              for (var index = 0; index < length; index++) {
                var currentKey = keys ? keys[index] : index;
                if (predicate(obj[currentKey], currentKey, obj)) return true;
              }
              return false;
            };

            // Determine if the array or object contains a given item (using `===`).
            // Aliased as `includes` and `include`.
            _.contains = _.includes = _.include = function (obj, item, fromIndex, guard) {
              if (!isArrayLike(obj)) obj = _.values(obj);
              if (typeof fromIndex != 'number' || guard) fromIndex = 0;
              return _.indexOf(obj, item, fromIndex) >= 0;
            };

            // Invoke a method (with arguments) on every item in a collection.
            _.invoke = restArguments(function (obj, path, args) {
              var contextPath, func;
              if (_.isFunction(path)) {
                func = path;
              } else if (_.isArray(path)) {
                contextPath = path.slice(0, -1);
                path = path[path.length - 1];
              }
              return _.map(obj, function (context) {
                var method = func;
                if (!method) {
                  if (contextPath && contextPath.length) {
                    context = deepGet(context, contextPath);
                  }
                  if (context == null) return void 0;
                  method = context[path];
                }
                return method == null ? method : method.apply(context, args);
              });
            });

            // Convenience version of a common use case of `map`: fetching a property.
            _.pluck = function (obj, key) {
              return _.map(obj, _.property(key));
            };

            // Convenience version of a common use case of `filter`: selecting only objects
            // containing specific `key:value` pairs.
            _.where = function (obj, attrs) {
              return _.filter(obj, _.matcher(attrs));
            };

            // Convenience version of a common use case of `find`: getting the first object
            // containing specific `key:value` pairs.
            _.findWhere = function (obj, attrs) {
              return _.find(obj, _.matcher(attrs));
            };

            // Return the maximum element (or element-based computation).
            _.max = function (obj, iteratee, context) {
              var result = -Infinity, lastComputed = -Infinity,
                value, computed;
              if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
                obj = isArrayLike(obj) ? obj : _.values(obj);
                for (var i = 0, length = obj.length; i < length; i++) {
                  value = obj[i];
                  if (value != null && value > result) {
                    result = value;
                  }
                }
              } else {
                iteratee = cb(iteratee, context);
                _.each(obj, function (v, index, list) {
                  computed = iteratee(v, index, list);
                  if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
                    result = v;
                    lastComputed = computed;
                  }
                });
              }
              return result;
            };

            // Return the minimum element (or element-based computation).
            _.min = function (obj, iteratee, context) {
              var result = Infinity, lastComputed = Infinity,
                value, computed;
              if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
                obj = isArrayLike(obj) ? obj : _.values(obj);
                for (var i = 0, length = obj.length; i < length; i++) {
                  value = obj[i];
                  if (value != null && value < result) {
                    result = value;
                  }
                }
              } else {
                iteratee = cb(iteratee, context);
                _.each(obj, function (v, index, list) {
                  computed = iteratee(v, index, list);
                  if (computed < lastComputed || computed === Infinity && result === Infinity) {
                    result = v;
                    lastComputed = computed;
                  }
                });
              }
              return result;
            };

            // Shuffle a collection.
            _.shuffle = function (obj) {
              return _.sample(obj, Infinity);
            };

            // Sample **n** random values from a collection using the modern version of the
            // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisherâ€“Yates_shuffle).
            // If **n** is not specified, returns a single random element.
            // The internal `guard` argument allows it to work with `map`.
            _.sample = function (obj, n, guard) {
              if (n == null || guard) {
                if (!isArrayLike(obj)) obj = _.values(obj);
                return obj[_.random(obj.length - 1)];
              }
              var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
              var length = getLength(sample);
              n = Math.max(Math.min(n, length), 0);
              var last = length - 1;
              for (var index = 0; index < n; index++) {
                var rand = _.random(index, last);
                var temp = sample[index];
                sample[index] = sample[rand];
                sample[rand] = temp;
              }
              return sample.slice(0, n);
            };

            // Sort the object's values by a criterion produced by an iteratee.
            _.sortBy = function (obj, iteratee, context) {
              var index = 0;
              iteratee = cb(iteratee, context);
              return _.pluck(_.map(obj, function (value, key, list) {
                return {
                  value: value,
                  index: index++,
                  criteria: iteratee(value, key, list)
                };
              }).sort(function (left, right) {
                var a = left.criteria;
                var b = right.criteria;
                if (a !== b) {
                  if (a > b || a === void 0) return 1;
                  if (a < b || b === void 0) return -1;
                }
                return left.index - right.index;
              }), 'value');
            };

            // An internal function used for aggregate "group by" operations.
            var group = function (behavior, partition) {
              return function (obj, iteratee, context) {
                var result = partition ? [[], []] : {};
                iteratee = cb(iteratee, context);
                _.each(obj, function (value, index) {
                  var key = iteratee(value, index, obj);
                  behavior(result, value, key);
                });
                return result;
              };
            };

            // Groups the object's values by a criterion. Pass either a string attribute
            // to group by, or a function that returns the criterion.
            _.groupBy = group(function (result, value, key) {
              if (has(result, key)) result[key].push(value); else result[key] = [value];
            });

            // Indexes the object's values by a criterion, similar to `groupBy`, but for
            // when you know that your index values will be unique.
            _.indexBy = group(function (result, value, key) {
              result[key] = value;
            });

            // Counts instances of an object that group by a certain criterion. Pass
            // either a string attribute to count by, or a function that returns the
            // criterion.
            _.countBy = group(function (result, value, key) {
              if (has(result, key)) result[key]++; else result[key] = 1;
            });

            var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
            // Safely create a real, live array from anything iterable.
            _.toArray = function (obj) {
              if (!obj) return [];
              if (_.isArray(obj)) return slice.call(obj);
              if (_.isString(obj)) {
                // Keep surrogate pair characters together
                return obj.match(reStrSymbol);
              }
              if (isArrayLike(obj)) return _.map(obj, _.identity);
              return _.values(obj);
            };

            // Return the number of elements in an object.
            _.size = function (obj) {
              if (obj == null) return 0;
              return isArrayLike(obj) ? obj.length : _.keys(obj).length;
            };

            // Split a collection into two arrays: one whose elements all satisfy the given
            // predicate, and one whose elements all do not satisfy the predicate.
            _.partition = group(function (result, value, pass) {
              result[pass ? 0 : 1].push(value);
            }, true);

            // Array Functions
            // ---------------

            // Get the first element of an array. Passing **n** will return the first N
            // values in the array. Aliased as `head` and `take`. The **guard** check
            // allows it to work with `_.map`.
            _.first = _.head = _.take = function (array, n, guard) {
              if (array == null || array.length < 1) return n == null ? void 0 : [];
              if (n == null || guard) return array[0];
              return _.initial(array, array.length - n);
            };

            // Returns everything but the last entry of the array. Especially useful on
            // the arguments object. Passing **n** will return all the values in
            // the array, excluding the last N.
            _.initial = function (array, n, guard) {
              return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
            };

            // Get the last element of an array. Passing **n** will return the last N
            // values in the array.
            _.last = function (array, n, guard) {
              if (array == null || array.length < 1) return n == null ? void 0 : [];
              if (n == null || guard) return array[array.length - 1];
              return _.rest(array, Math.max(0, array.length - n));
            };

            // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
            // Especially useful on the arguments object. Passing an **n** will return
            // the rest N values in the array.
            _.rest = _.tail = _.drop = function (array, n, guard) {
              return slice.call(array, n == null || guard ? 1 : n);
            };

            // Trim out all falsy values from an array.
            _.compact = function (array) {
              return _.filter(array, Boolean);
            };

            // Internal implementation of a recursive `flatten` function.
            var flatten = function (input, shallow, strict, output) {
              output = output || [];
              var idx = output.length;
              for (var i = 0, length = getLength(input); i < length; i++) {
                var value = input[i];
                if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
                  // Flatten current level of array or arguments object.
                  if (shallow) {
                    var j = 0, len = value.length;
                    while (j < len) output[idx++] = value[j++];
                  } else {
                    flatten(value, shallow, strict, output);
                    idx = output.length;
                  }
                } else if (!strict) {
                  output[idx++] = value;
                }
              }
              return output;
            };

            // Flatten out an array, either recursively (by default), or just one level.
            _.flatten = function (array, shallow) {
              return flatten(array, shallow, false);
            };

            // Return a version of the array that does not contain the specified value(s).
            _.without = restArguments(function (array, otherArrays) {
              return _.difference(array, otherArrays);
            });

            // Produce a duplicate-free version of the array. If the array has already
            // been sorted, you have the option of using a faster algorithm.
            // The faster algorithm will not work with an iteratee if the iteratee
            // is not a one-to-one function, so providing an iteratee will disable
            // the faster algorithm.
            // Aliased as `unique`.
            _.uniq = _.unique = function (array, isSorted, iteratee, context) {
              if (!_.isBoolean(isSorted)) {
                context = iteratee;
                iteratee = isSorted;
                isSorted = false;
              }
              if (iteratee != null) iteratee = cb(iteratee, context);
              var result = [];
              var seen = [];
              for (var i = 0, length = getLength(array); i < length; i++) {
                var value = array[i],
                  computed = iteratee ? iteratee(value, i, array) : value;
                if (isSorted && !iteratee) {
                  if (!i || seen !== computed) result.push(value);
                  seen = computed;
                } else if (iteratee) {
                  if (!_.contains(seen, computed)) {
                    seen.push(computed);
                    result.push(value);
                  }
                } else if (!_.contains(result, value)) {
                  result.push(value);
                }
              }
              return result;
            };

            // Produce an array that contains the union: each distinct element from all of
            // the passed-in arrays.
            _.union = restArguments(function (arrays) {
              return _.uniq(flatten(arrays, true, true));
            });

            // Produce an array that contains every item shared between all the
            // passed-in arrays.
            _.intersection = function (array) {
              var result = [];
              var argsLength = arguments.length;
              for (var i = 0, length = getLength(array); i < length; i++) {
                var item = array[i];
                if (_.contains(result, item)) continue;
                var j;
                for (j = 1; j < argsLength; j++) {
                  if (!_.contains(arguments[j], item)) break;
                }
                if (j === argsLength) result.push(item);
              }
              return result;
            };

            // Take the difference between one array and a number of other arrays.
            // Only the elements present in just the first array will remain.
            _.difference = restArguments(function (array, rest) {
              rest = flatten(rest, true, true);
              return _.filter(array, function (value) {
                return !_.contains(rest, value);
              });
            });

            // Complement of _.zip. Unzip accepts an array of arrays and groups
            // each array's elements on shared indices.
            _.unzip = function (array) {
              var length = array && _.max(array, getLength).length || 0;
              var result = Array(length);

              for (var index = 0; index < length; index++) {
                result[index] = _.pluck(array, index);
              }
              return result;
            };

            // Zip together multiple lists into a single array -- elements that share
            // an index go together.
            _.zip = restArguments(_.unzip);

            // Converts lists into objects. Pass either a single array of `[key, value]`
            // pairs, or two parallel arrays of the same length -- one of keys, and one of
            // the corresponding values. Passing by pairs is the reverse of _.pairs.
            _.object = function (list, values) {
              var result = {};
              for (var i = 0, length = getLength(list); i < length; i++) {
                if (values) {
                  result[list[i]] = values[i];
                } else {
                  result[list[i][0]] = list[i][1];
                }
              }
              return result;
            };

            // Generator function to create the findIndex and findLastIndex functions.
            var createPredicateIndexFinder = function (dir) {
              return function (array, predicate, context) {
                predicate = cb(predicate, context);
                var length = getLength(array);
                var index = dir > 0 ? 0 : length - 1;
                for (; index >= 0 && index < length; index += dir) {
                  if (predicate(array[index], index, array)) return index;
                }
                return -1;
              };
            };

            // Returns the first index on an array-like that passes a predicate test.
            _.findIndex = createPredicateIndexFinder(1);
            _.findLastIndex = createPredicateIndexFinder(-1);

            // Use a comparator function to figure out the smallest index at which
            // an object should be inserted so as to maintain order. Uses binary search.
            _.sortedIndex = function (array, obj, iteratee, context) {
              iteratee = cb(iteratee, context, 1);
              var value = iteratee(obj);
              var low = 0, high = getLength(array);
              while (low < high) {
                var mid = Math.floor((low + high) / 2);
                if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
              }
              return low;
            };

            // Generator function to create the indexOf and lastIndexOf functions.
            var createIndexFinder = function (dir, predicateFind, sortedIndex) {
              return function (array, item, idx) {
                var i = 0, length = getLength(array);
                if (typeof idx == 'number') {
                  if (dir > 0) {
                    i = idx >= 0 ? idx : Math.max(idx + length, i);
                  } else {
                    length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
                  }
                } else if (sortedIndex && idx && length) {
                  idx = sortedIndex(array, item);
                  return array[idx] === item ? idx : -1;
                }
                if (item !== item) {
                  idx = predicateFind(slice.call(array, i, length), _.isNaN);
                  return idx >= 0 ? idx + i : -1;
                }
                for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
                  if (array[idx] === item) return idx;
                }
                return -1;
              };
            };

            // Return the position of the first occurrence of an item in an array,
            // or -1 if the item is not included in the array.
            // If the array is large and already in sort order, pass `true`
            // for **isSorted** to use binary search.
            _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
            _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

            // Generate an integer Array containing an arithmetic progression. A port of
            // the native Python `range()` function. See
            // [the Python documentation](https://docs.python.org/library/functions.html#range).
            _.range = function (start, stop, step) {
              if (stop == null) {
                stop = start || 0;
                start = 0;
              }
              if (!step) {
                step = stop < start ? -1 : 1;
              }

              var length = Math.max(Math.ceil((stop - start) / step), 0);
              var range = Array(length);

              for (var idx = 0; idx < length; idx++ , start += step) {
                range[idx] = start;
              }

              return range;
            };

            // Chunk a single array into multiple arrays, each containing `count` or fewer
            // items.
            _.chunk = function (array, count) {
              if (count == null || count < 1) return [];
              var result = [];
              var i = 0, length = array.length;
              while (i < length) {
                result.push(slice.call(array, i, i += count));
              }
              return result;
            };

            // Function (ahem) Functions
            // ------------------

            // Determines whether to execute a function as a constructor
            // or a normal function with the provided arguments.
            var executeBound = function (sourceFunc, boundFunc, context, callingContext, args) {
              if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
              var self = baseCreate(sourceFunc.prototype);
              var result = sourceFunc.apply(self, args);
              if (_.isObject(result)) return result;
              return self;
            };

            // Create a function bound to a given object (assigning `this`, and arguments,
            // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
            // available.
            _.bind = restArguments(function (func, context, args) {
              if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
              var bound = restArguments(function (callArgs) {
                return executeBound(func, bound, context, this, args.concat(callArgs));
              });
              return bound;
            });

            // Partially apply a function by creating a version that has had some of its
            // arguments pre-filled, without changing its dynamic `this` context. _ acts
            // as a placeholder by default, allowing any combination of arguments to be
            // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
            _.partial = restArguments(function (func, boundArgs) {
              var placeholder = _.partial.placeholder;
              var bound = function () {
                var position = 0, length = boundArgs.length;
                var args = Array(length);
                for (var i = 0; i < length; i++) {
                  args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
                }
                while (position < arguments.length) args.push(arguments[position++]);
                return executeBound(func, bound, this, this, args);
              };
              return bound;
            });

            _.partial.placeholder = _;

            // Bind a number of an object's methods to that object. Remaining arguments
            // are the method names to be bound. Useful for ensuring that all callbacks
            // defined on an object belong to it.
            _.bindAll = restArguments(function (obj, keys) {
              keys = flatten(keys, false, false);
              var index = keys.length;
              if (index < 1) throw new Error('bindAll must be passed function names');
              while (index--) {
                var key = keys[index];
                obj[key] = _.bind(obj[key], obj);
              }
            });

            // Memoize an expensive function by storing its results.
            _.memoize = function (func, hasher) {
              var memoize = function (key) {
                var cache = memoize.cache;
                var address = '' + (hasher ? hasher.apply(this, arguments) : key);
                if (!has(cache, address)) cache[address] = func.apply(this, arguments);
                return cache[address];
              };
              memoize.cache = {};
              return memoize;
            };

            // Delays a function for the given number of milliseconds, and then calls
            // it with the arguments supplied.
            _.delay = restArguments(function (func, wait, args) {
              return setTimeout(function () {
                return func.apply(null, args);
              }, wait);
            });

            // Defers a function, scheduling it to run after the current call stack has
            // cleared.
            _.defer = _.partial(_.delay, _, 1);

            // Returns a function, that, when invoked, will only be triggered at most once
            // during a given window of time. Normally, the throttled function will run
            // as much as it can, without ever going more than once per `wait` duration;
            // but if you'd like to disable the execution on the leading edge, pass
            // `{leading: false}`. To disable execution on the trailing edge, ditto.
            _.throttle = function (func, wait, options) {
              var timeout, context, args, result;
              var previous = 0;
              if (!options) options = {};

              var later = function () {
                previous = options.leading === false ? 0 : _.now();
                timeout = null;
                result = func.apply(context, args);
                if (!timeout) context = args = null;
              };

              var throttled = function () {
                var now = _.now();
                if (!previous && options.leading === false) previous = now;
                var remaining = wait - (now - previous);
                context = this;
                args = arguments;
                if (remaining <= 0 || remaining > wait) {
                  if (timeout) {
                    clearTimeout(timeout);
                    timeout = null;
                  }
                  previous = now;
                  result = func.apply(context, args);
                  if (!timeout) context = args = null;
                } else if (!timeout && options.trailing !== false) {
                  timeout = setTimeout(later, remaining);
                }
                return result;
              };

              throttled.cancel = function () {
                clearTimeout(timeout);
                previous = 0;
                timeout = context = args = null;
              };

              return throttled;
            };

            // Returns a function, that, as long as it continues to be invoked, will not
            // be triggered. The function will be called after it stops being called for
            // N milliseconds. If `immediate` is passed, trigger the function on the
            // leading edge, instead of the trailing.
            _.debounce = function (func, wait, immediate) {
              var timeout, result;

              var later = function (context, args) {
                timeout = null;
                if (args) result = func.apply(context, args);
              };

              var debounced = restArguments(function (args) {
                if (timeout) clearTimeout(timeout);
                if (immediate) {
                  var callNow = !timeout;
                  timeout = setTimeout(later, wait);
                  if (callNow) result = func.apply(this, args);
                } else {
                  timeout = _.delay(later, wait, this, args);
                }

                return result;
              });

              debounced.cancel = function () {
                clearTimeout(timeout);
                timeout = null;
              };

              return debounced;
            };

            // Returns the first function passed as an argument to the second,
            // allowing you to adjust arguments, run code before and after, and
            // conditionally execute the original function.
            _.wrap = function (func, wrapper) {
              return _.partial(wrapper, func);
            };

            // Returns a negated version of the passed-in predicate.
            _.negate = function (predicate) {
              return function () {
                return !predicate.apply(this, arguments);
              };
            };

            // Returns a function that is the composition of a list of functions, each
            // consuming the return value of the function that follows.
            _.compose = function () {
              var args = arguments;
              var start = args.length - 1;
              return function () {
                var i = start;
                var result = args[start].apply(this, arguments);
                while (i--) result = args[i].call(this, result);
                return result;
              };
            };

            // Returns a function that will only be executed on and after the Nth call.
            _.after = function (times, func) {
              return function () {
                if (--times < 1) {
                  return func.apply(this, arguments);
                }
              };
            };

            // Returns a function that will only be executed up to (but not including) the Nth call.
            _.before = function (times, func) {
              var memo;
              return function () {
                if (--times > 0) {
                  memo = func.apply(this, arguments);
                }
                if (times <= 1) func = null;
                return memo;
              };
            };

            // Returns a function that will be executed at most one time, no matter how
            // often you call it. Useful for lazy initialization.
            _.once = _.partial(_.before, 2);

            _.restArguments = restArguments;

            // Object Functions
            // ----------------

            // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
            var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');
            var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
              'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

            var collectNonEnumProps = function (obj, keys) {
              var nonEnumIdx = nonEnumerableProps.length;
              var constructor = obj.constructor;
              var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

              // Constructor is a special case.
              var prop = 'constructor';
              if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

              while (nonEnumIdx--) {
                prop = nonEnumerableProps[nonEnumIdx];
                if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
                  keys.push(prop);
                }
              }
            };

            // Retrieve the names of an object's own properties.
            // Delegates to **ECMAScript 5**'s native `Object.keys`.
            _.keys = function (obj) {
              if (!_.isObject(obj)) return [];
              if (nativeKeys) return nativeKeys(obj);
              var keys = [];
              for (var key in obj) if (has(obj, key)) keys.push(key);
              // Ahem, IE < 9.
              if (hasEnumBug) collectNonEnumProps(obj, keys);
              return keys;
            };

            // Retrieve all the property names of an object.
            _.allKeys = function (obj) {
              if (!_.isObject(obj)) return [];
              var keys = [];
              for (var key in obj) keys.push(key);
              // Ahem, IE < 9.
              if (hasEnumBug) collectNonEnumProps(obj, keys);
              return keys;
            };

            // Retrieve the values of an object's properties.
            _.values = function (obj) {
              var keys = _.keys(obj);
              var length = keys.length;
              var values = Array(length);
              for (var i = 0; i < length; i++) {
                values[i] = obj[keys[i]];
              }
              return values;
            };

            // Returns the results of applying the iteratee to each element of the object.
            // In contrast to _.map it returns an object.
            _.mapObject = function (obj, iteratee, context) {
              iteratee = cb(iteratee, context);
              var keys = _.keys(obj),
                length = keys.length,
                results = {};
              for (var index = 0; index < length; index++) {
                var currentKey = keys[index];
                results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
              }
              return results;
            };

            // Convert an object into a list of `[key, value]` pairs.
            // The opposite of _.object.
            _.pairs = function (obj) {
              var keys = _.keys(obj);
              var length = keys.length;
              var pairs = Array(length);
              for (var i = 0; i < length; i++) {
                pairs[i] = [keys[i], obj[keys[i]]];
              }
              return pairs;
            };

            // Invert the keys and values of an object. The values must be serializable.
            _.invert = function (obj) {
              var result = {};
              var keys = _.keys(obj);
              for (var i = 0, length = keys.length; i < length; i++) {
                result[obj[keys[i]]] = keys[i];
              }
              return result;
            };

            // Return a sorted list of the function names available on the object.
            // Aliased as `methods`.
            _.functions = _.methods = function (obj) {
              var names = [];
              for (var key in obj) {
                if (_.isFunction(obj[key])) names.push(key);
              }
              return names.sort();
            };

            // An internal function for creating assigner functions.
            var createAssigner = function (keysFunc, defaults) {
              return function (obj) {
                var length = arguments.length;
                if (defaults) obj = Object(obj);
                if (length < 2 || obj == null) return obj;
                for (var index = 1; index < length; index++) {
                  var source = arguments[index],
                    keys = keysFunc(source),
                    l = keys.length;
                  for (var i = 0; i < l; i++) {
                    var key = keys[i];
                    if (!defaults || obj[key] === void 0) obj[key] = source[key];
                  }
                }
                return obj;
              };
            };

            // Extend a given object with all the properties in passed-in object(s).
            _.extend = createAssigner(_.allKeys);

            // Assigns a given object with all the own properties in the passed-in object(s).
            // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
            _.extendOwn = _.assign = createAssigner(_.keys);

            // Returns the first key on an object that passes a predicate test.
            _.findKey = function (obj, predicate, context) {
              predicate = cb(predicate, context);
              var keys = _.keys(obj), key;
              for (var i = 0, length = keys.length; i < length; i++) {
                key = keys[i];
                if (predicate(obj[key], key, obj)) return key;
              }
            };

            // Internal pick helper function to determine if `obj` has key `key`.
            var keyInObj = function (value, key, obj) {
              return key in obj;
            };

            // Return a copy of the object only containing the whitelisted properties.
            _.pick = restArguments(function (obj, keys) {
              var result = {}, iteratee = keys[0];
              if (obj == null) return result;
              if (_.isFunction(iteratee)) {
                if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
                keys = _.allKeys(obj);
              } else {
                iteratee = keyInObj;
                keys = flatten(keys, false, false);
                obj = Object(obj);
              }
              for (var i = 0, length = keys.length; i < length; i++) {
                var key = keys[i];
                var value = obj[key];
                if (iteratee(value, key, obj)) result[key] = value;
              }
              return result;
            });

            // Return a copy of the object without the blacklisted properties.
            _.omit = restArguments(function (obj, keys) {
              var iteratee = keys[0], context;
              if (_.isFunction(iteratee)) {
                iteratee = _.negate(iteratee);
                if (keys.length > 1) context = keys[1];
              } else {
                keys = _.map(flatten(keys, false, false), String);
                iteratee = function (value, key) {
                  return !_.contains(keys, key);
                };
              }
              return _.pick(obj, iteratee, context);
            });

            // Fill in a given object with default properties.
            _.defaults = createAssigner(_.allKeys, true);

            // Creates an object that inherits from the given prototype object.
            // If additional properties are provided then they will be added to the
            // created object.
            _.create = function (prototype, props) {
              var result = baseCreate(prototype);
              if (props) _.extendOwn(result, props);
              return result;
            };

            // Create a (shallow-cloned) duplicate of an object.
            _.clone = function (obj) {
              if (!_.isObject(obj)) return obj;
              return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
            };

            // Invokes interceptor with the obj, and then returns obj.
            // The primary purpose of this method is to "tap into" a method chain, in
            // order to perform operations on intermediate results within the chain.
            _.tap = function (obj, interceptor) {
              interceptor(obj);
              return obj;
            };

            // Returns whether an object has a given set of `key:value` pairs.
            _.isMatch = function (object, attrs) {
              var keys = _.keys(attrs), length = keys.length;
              if (object == null) return !length;
              var obj = Object(object);
              for (var i = 0; i < length; i++) {
                var key = keys[i];
                if (attrs[key] !== obj[key] || !(key in obj)) return false;
              }
              return true;
            };


            // Internal recursive comparison function for `isEqual`.
            var eq, deepEq;
            eq = function (a, b, aStack, bStack) {
              // Identical objects are equal. `0 === -0`, but they aren't identical.
              // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).
              if (a === b) return a !== 0 || 1 / a === 1 / b;
              // `null` or `undefined` only equal to itself (strict comparison).
              if (a == null || b == null) return false;
              // `NaN`s are equivalent, but non-reflexive.
              if (a !== a) return b !== b;
              // Exhaust primitive checks
              var type = typeof a;
              if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
              return deepEq(a, b, aStack, bStack);
            };

            // Internal recursive comparison function for `isEqual`.
            deepEq = function (a, b, aStack, bStack) {
              // Unwrap any wrapped objects.
              if (a instanceof _) a = a._wrapped;
              if (b instanceof _) b = b._wrapped;
              // Compare `[[Class]]` names.
              var className = toString.call(a);
              if (className !== toString.call(b)) return false;
              switch (className) {
                // Strings, numbers, regular expressions, dates, and booleans are compared by value.
                case '[object RegExp]':
                // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
                case '[object String]':
                  // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
                  // equivalent to `new String("5")`.
                  return '' + a === '' + b;
                case '[object Number]':
                  // `NaN`s are equivalent, but non-reflexive.
                  // Object(NaN) is equivalent to NaN.
                  if (+a !== +a) return +b !== +b;
                  // An `egal` comparison is performed for other numeric values.
                  return +a === 0 ? 1 / +a === 1 / b : +a === +b;
                case '[object Date]':
                case '[object Boolean]':
                  // Coerce dates and booleans to numeric primitive values. Dates are compared by their
                  // millisecond representations. Note that invalid dates with millisecond representations
                  // of `NaN` are not equivalent.
                  return +a === +b;
                case '[object Symbol]':
                  return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
              }

              var areArrays = className === '[object Array]';
              if (!areArrays) {
                if (typeof a != 'object' || typeof b != 'object') return false;

                // Objects with different constructors are not equivalent, but `Object`s or `Array`s
                // from different frames are.
                var aCtor = a.constructor, bCtor = b.constructor;
                if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                  _.isFunction(bCtor) && bCtor instanceof bCtor)
                  && ('constructor' in a && 'constructor' in b)) {
                  return false;
                }
              }
              // Assume equality for cyclic structures. The algorithm for detecting cyclic
              // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

              // Initializing stack of traversed objects.
              // It's done here since we only need them for objects and arrays comparison.
              aStack = aStack || [];
              bStack = bStack || [];
              var length = aStack.length;
              while (length--) {
                // Linear search. Performance is inversely proportional to the number of
                // unique nested structures.
                if (aStack[length] === a) return bStack[length] === b;
              }

              // Add the first object to the stack of traversed objects.
              aStack.push(a);
              bStack.push(b);

              // Recursively compare objects and arrays.
              if (areArrays) {
                // Compare array lengths to determine if a deep comparison is necessary.
                length = a.length;
                if (length !== b.length) return false;
                // Deep compare the contents, ignoring non-numeric properties.
                while (length--) {
                  if (!eq(a[length], b[length], aStack, bStack)) return false;
                }
              } else {
                // Deep compare objects.
                var keys = _.keys(a), key;
                length = keys.length;
                // Ensure that both objects contain the same number of properties before comparing deep equality.
                if (_.keys(b).length !== length) return false;
                while (length--) {
                  // Deep compare each member
                  key = keys[length];
                  if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
                }
              }
              // Remove the first object from the stack of traversed objects.
              aStack.pop();
              bStack.pop();
              return true;
            };

            // Perform a deep comparison to check if two objects are equal.
            _.isEqual = function (a, b) {
              return eq(a, b);
            };

            // Is a given array, string, or object empty?
            // An "empty" object has no enumerable own-properties.
            _.isEmpty = function (obj) {
              if (obj == null) return true;
              if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
              return _.keys(obj).length === 0;
            };

            // Is a given value a DOM element?
            _.isElement = function (obj) {
              return !!(obj && obj.nodeType === 1);
            };

            // Is a given value an array?
            // Delegates to ECMA5's native Array.isArray
            _.isArray = nativeIsArray || function (obj) {
              return toString.call(obj) === '[object Array]';
            };

            // Is a given variable an object?
            _.isObject = function (obj) {
              var type = typeof obj;
              return type === 'function' || type === 'object' && !!obj;
            };

            // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
            _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function (name) {
              _['is' + name] = function (obj) {
                return toString.call(obj) === '[object ' + name + ']';
              };
            });

            // Define a fallback version of the method in browsers (ahem, IE < 9), where
            // there isn't any inspectable "Arguments" type.
            if (!_.isArguments(arguments)) {
              _.isArguments = function (obj) {
                return has(obj, 'callee');
              };
            }

            // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
            // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
            var nodelist = root.document && root.document.childNodes;
            if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
              _.isFunction = function (obj) {
                return typeof obj == 'function' || false;
              };
            }

            // Is a given object a finite number?
            _.isFinite = function (obj) {
              return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
            };

            // Is the given value `NaN`?
            _.isNaN = function (obj) {
              return _.isNumber(obj) && isNaN(obj);
            };

            // Is a given value a boolean?
            _.isBoolean = function (obj) {
              return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
            };

            // Is a given value equal to null?
            _.isNull = function (obj) {
              return obj === null;
            };

            // Is a given variable undefined?
            _.isUndefined = function (obj) {
              return obj === void 0;
            };

            // Shortcut function for checking if an object has a given property directly
            // on itself (in other words, not on a prototype).
            _.has = function (obj, path) {
              if (!_.isArray(path)) {
                return has(obj, path);
              }
              var length = path.length;
              for (var i = 0; i < length; i++) {
                var key = path[i];
                if (obj == null || !hasOwnProperty.call(obj, key)) {
                  return false;
                }
                obj = obj[key];
              }
              return !!length;
            };

            // Utility Functions
            // -----------------

            // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
            // previous owner. Returns a reference to the Underscore object.
            _.noConflict = function () {
              root._ = previousUnderscore;
              return this;
            };

            // Keep the identity function around for default iteratees.
            _.identity = function (value) {
              return value;
            };

            // Predicate-generating functions. Often useful outside of Underscore.
            _.constant = function (value) {
              return function () {
                return value;
              };
            };

            _.noop = function () { };

            // Creates a function that, when passed an object, will traverse that objectâ€™s
            // properties down the given `path`, specified as an array of keys or indexes.
            _.property = function (path) {
              if (!_.isArray(path)) {
                return shallowProperty(path);
              }
              return function (obj) {
                return deepGet(obj, path);
              };
            };

            // Generates a function for a given object that returns a given property.
            _.propertyOf = function (obj) {
              if (obj == null) {
                return function () { };
              }
              return function (path) {
                return !_.isArray(path) ? obj[path] : deepGet(obj, path);
              };
            };

            // Returns a predicate for checking whether an object has a given set of
            // `key:value` pairs.
            _.matcher = _.matches = function (attrs) {
              attrs = _.extendOwn({}, attrs);
              return function (obj) {
                return _.isMatch(obj, attrs);
              };
            };

            // Run a function **n** times.
            _.times = function (n, iteratee, context) {
              var accum = Array(Math.max(0, n));
              iteratee = optimizeCb(iteratee, context, 1);
              for (var i = 0; i < n; i++) accum[i] = iteratee(i);
              return accum;
            };

            // Return a random integer between min and max (inclusive).
            _.random = function (min, max) {
              if (max == null) {
                max = min;
                min = 0;
              }
              return min + Math.floor(Math.random() * (max - min + 1));
            };

            // A (possibly faster) way to get the current timestamp as an integer.
            _.now = Date.now || function () {
              return new Date().getTime();
            };

            // List of HTML entities for escaping.
            var escapeMap = {
              '&': '&amp;',
              '<': '&lt;',
              '>': '&gt;',
              '"': '&quot;',
              "'": '&#x27;',
              '`': '&#x60;'
            };
            var unescapeMap = _.invert(escapeMap);

            // Functions for escaping and unescaping strings to/from HTML interpolation.
            var createEscaper = function (map) {
              var escaper = function (match) {
                return map[match];
              };
              // Regexes for identifying a key that needs to be escaped.
              var source = '(?:' + _.keys(map).join('|') + ')';
              var testRegexp = RegExp(source);
              var replaceRegexp = RegExp(source, 'g');
              return function (string) {
                string = string == null ? '' : '' + string;
                return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
              };
            };
            _.escape = createEscaper(escapeMap);
            _.unescape = createEscaper(unescapeMap);

            // Traverses the children of `obj` along `path`. If a child is a function, it
            // is invoked with its parent as context. Returns the value of the final
            // child, or `fallback` if any child is undefined.
            _.result = function (obj, path, fallback) {
              if (!_.isArray(path)) path = [path];
              var length = path.length;
              if (!length) {
                return _.isFunction(fallback) ? fallback.call(obj) : fallback;
              }
              for (var i = 0; i < length; i++) {
                var prop = obj == null ? void 0 : obj[path[i]];
                if (prop === void 0) {
                  prop = fallback;
                  i = length; // Ensure we don't continue iterating.
                }
                obj = _.isFunction(prop) ? prop.call(obj) : prop;
              }
              return obj;
            };

            // Generate a unique integer id (unique within the entire client session).
            // Useful for temporary DOM ids.
            var idCounter = 0;
            _.uniqueId = function (prefix) {
              var id = ++idCounter + '';
              return prefix ? prefix + id : id;
            };

            // By default, Underscore uses ERB-style template delimiters, change the
            // following template settings to use alternative delimiters.
            _.templateSettings = {
              evaluate: /<%([\s\S]+?)%>/g,
              interpolate: /<%=([\s\S]+?)%>/g,
              escape: /<%-([\s\S]+?)%>/g
            };

            // When customizing `templateSettings`, if you don't want to define an
            // interpolation, evaluation or escaping regex, we need one that is
            // guaranteed not to match.
            var noMatch = /(.)^/;

            // Certain characters need to be escaped so that they can be put into a
            // string literal.
            var escapes = {
              "'": "'",
              '\\': '\\',
              '\r': 'r',
              '\n': 'n',
              '\u2028': 'u2028',
              '\u2029': 'u2029'
            };

            var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

            var escapeChar = function (match) {
              return '\\' + escapes[match];
            };

            // JavaScript micro-templating, similar to John Resig's implementation.
            // Underscore templating handles arbitrary delimiters, preserves whitespace,
            // and correctly escapes quotes within interpolated code.
            // NB: `oldSettings` only exists for backwards compatibility.
            _.template = function (text, settings, oldSettings) {
              if (!settings && oldSettings) settings = oldSettings;
              settings = _.defaults({}, settings, _.templateSettings);

              // Combine delimiters into one regular expression via alternation.
              var matcher = RegExp([
                (settings.escape || noMatch).source,
                (settings.interpolate || noMatch).source,
                (settings.evaluate || noMatch).source
              ].join('|') + '|$', 'g');

              // Compile the template source, escaping string literals appropriately.
              var index = 0;
              var source = "__p+='";
              text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
                source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
                index = offset + match.length;

                if (escape) {
                  source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
                } else if (interpolate) {
                  source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
                } else if (evaluate) {
                  source += "';\n" + evaluate + "\n__p+='";
                }

                // Adobe VMs need the match returned to produce the correct offset.
                return match;
              });
              source += "';\n";

              // If a variable is not specified, place data values in local scope.
              if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

              source = "var __t,__p='',__j=Array.prototype.join," +
                "print=function(){__p+=__j.call(arguments,'');};\n" +
                source + 'return __p;\n';

              var render;
              try {
                render = new Function(settings.variable || 'obj', '_', source);
              } catch (e) {
                e.source = source;
                throw e;
              }

              var template = function (data) {
                return render.call(this, data, _);
              };

              // Provide the compiled source as a convenience for precompilation.
              var argument = settings.variable || 'obj';
              template.source = 'function(' + argument + '){\n' + source + '}';

              return template;
            };

            // Add a "chain" function. Start chaining a wrapped Underscore object.
            _.chain = function (obj) {
              var instance = _(obj);
              instance._chain = true;
              return instance;
            };

            // OOP
            // ---------------
            // If Underscore is called as a function, it returns a wrapped object that
            // can be used OO-style. This wrapper holds altered versions of all the
            // underscore functions. Wrapped objects may be chained.

            // Helper function to continue chaining intermediate results.
            var chainResult = function (instance, obj) {
              return instance._chain ? _(obj).chain() : obj;
            };

            // Add your own custom functions to the Underscore object.
            _.mixin = function (obj) {
              _.each(_.functions(obj), function (name) {
                var func = _[name] = obj[name];
                _.prototype[name] = function () {
                  var args = [this._wrapped];
                  push.apply(args, arguments);
                  return chainResult(this, func.apply(_, args));
                };
              });
              return _;
            };

            // Add all of the Underscore functions to the wrapper object.
            _.mixin(_);

            // Add all mutator Array functions to the wrapper.
            _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {
              var method = ArrayProto[name];
              _.prototype[name] = function () {
                var obj = this._wrapped;
                method.apply(obj, arguments);
                if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
                return chainResult(this, obj);
              };
            });

            // Add all accessor Array functions to the wrapper.
            _.each(['concat', 'join', 'slice'], function (name) {
              var method = ArrayProto[name];
              _.prototype[name] = function () {
                return chainResult(this, method.apply(this._wrapped, arguments));
              };
            });

            // Extracts the result from a wrapped and chained object.
            _.prototype.value = function () {
              return this._wrapped;
            };

            // Provide unwrapping proxy for some methods used in engine operations
            // such as arithmetic and JSON stringification.
            _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

            _.prototype.toString = function () {
              return String(this._wrapped);
            };

            // AMD registration happens at the end for compatibility with AMD loaders
            // that may not enforce next-turn semantics on modules. Even though general
            // practice for AMD registration is to be anonymous, underscore registers
            // as a named module because, like jQuery, it is a base library that is
            // popular enough to be bundled in a third party lib, but not be part of
            // an AMD load request. Those cases could generate an error when an
            // anonymous define() is called outside of a loader request.
            if (true) {
              !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
                return _;
              }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
                __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            }
          }());

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(21), __webpack_require__(36)(module)))

        /***/
}),
/* 229 */
/***/ (function (module, exports, __webpack_require__) {

        ; (function (root, factory) {
          if (true) {
            // CommonJS
            module.exports = exports = factory(__webpack_require__(95));
          }
          else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core"], factory);
          }
          else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        }(this, function (CryptoJS) {

          return CryptoJS.enc.Hex;

        }));

        /***/
}),
/* 230 */
/***/ (function (module, exports, __webpack_require__) {

        ; (function (root, factory, undef) {
          if (true) {
            // CommonJS
            module.exports = exports = factory(__webpack_require__(95), __webpack_require__(231));
          }
          else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core", "./x64-core"], factory);
          }
          else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        }(this, function (CryptoJS) {

          (function (Math) {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var WordArray = C_lib.WordArray;
            var Hasher = C_lib.Hasher;
            var C_x64 = C.x64;
            var X64Word = C_x64.Word;
            var C_algo = C.algo;

            // Constants tables
            var RHO_OFFSETS = [];
            var PI_INDEXES = [];
            var ROUND_CONSTANTS = [];

            // Compute Constants
            (function () {
              // Compute rho offset constants
              var x = 1, y = 0;
              for (var t = 0; t < 24; t++) {
                RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

                var newX = y % 5;
                var newY = (2 * x + 3 * y) % 5;
                x = newX;
                y = newY;
              }

              // Compute pi index constants
              for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                  PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
                }
              }

              // Compute round constants
              var LFSR = 0x01;
              for (var i = 0; i < 24; i++) {
                var roundConstantMsw = 0;
                var roundConstantLsw = 0;

                for (var j = 0; j < 7; j++) {
                  if (LFSR & 0x01) {
                    var bitPosition = (1 << j) - 1;
                    if (bitPosition < 32) {
                      roundConstantLsw ^= 1 << bitPosition;
                    } else /* if (bitPosition >= 32) */ {
                      roundConstantMsw ^= 1 << (bitPosition - 32);
                    }
                  }

                  // Compute next LFSR
                  if (LFSR & 0x80) {
                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
                    LFSR = (LFSR << 1) ^ 0x71;
                  } else {
                    LFSR <<= 1;
                  }
                }

                ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
              }
            }());

            // Reusable objects for temporary values
            var T = [];
            (function () {
              for (var i = 0; i < 25; i++) {
                T[i] = X64Word.create();
              }
            }());

            /**
             * SHA-3 hash algorithm.
             */
            var SHA3 = C_algo.SHA3 = Hasher.extend({
              /**
               * Configuration options.
               *
               * @property {number} outputLength
               *   The desired number of bits in the output hash.
               *   Only values permitted are: 224, 256, 384, 512.
               *   Default: 512
               */
              cfg: Hasher.cfg.extend({
                outputLength: 512
              }),

              _doReset: function () {
                var state = this._state = []
                for (var i = 0; i < 25; i++) {
                  state[i] = new X64Word.init();
                }

                this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
              },

              _doProcessBlock: function (M, offset) {
                // Shortcuts
                var state = this._state;
                var nBlockSizeLanes = this.blockSize / 2;

                // Absorb
                for (var i = 0; i < nBlockSizeLanes; i++) {
                  // Shortcuts
                  var M2i = M[offset + 2 * i];
                  var M2i1 = M[offset + 2 * i + 1];

                  // Swap endian
                  M2i = (
                    (((M2i << 8) | (M2i >>> 24)) & 0x00ff00ff) |
                    (((M2i << 24) | (M2i >>> 8)) & 0xff00ff00)
                  );
                  M2i1 = (
                    (((M2i1 << 8) | (M2i1 >>> 24)) & 0x00ff00ff) |
                    (((M2i1 << 24) | (M2i1 >>> 8)) & 0xff00ff00)
                  );

                  // Absorb message into state
                  var lane = state[i];
                  lane.high ^= M2i1;
                  lane.low ^= M2i;
                }

                // Rounds
                for (var round = 0; round < 24; round++) {
                  // Theta
                  for (var x = 0; x < 5; x++) {
                    // Mix column lanes
                    var tMsw = 0, tLsw = 0;
                    for (var y = 0; y < 5; y++) {
                      var lane = state[x + 5 * y];
                      tMsw ^= lane.high;
                      tLsw ^= lane.low;
                    }

                    // Temporary values
                    var Tx = T[x];
                    Tx.high = tMsw;
                    Tx.low = tLsw;
                  }
                  for (var x = 0; x < 5; x++) {
                    // Shortcuts
                    var Tx4 = T[(x + 4) % 5];
                    var Tx1 = T[(x + 1) % 5];
                    var Tx1Msw = Tx1.high;
                    var Tx1Lsw = Tx1.low;

                    // Mix surrounding columns
                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
                    var tLsw = Tx4.low ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
                    for (var y = 0; y < 5; y++) {
                      var lane = state[x + 5 * y];
                      lane.high ^= tMsw;
                      lane.low ^= tLsw;
                    }
                  }

                  // Rho Pi
                  for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                    // Shortcuts
                    var lane = state[laneIndex];
                    var laneMsw = lane.high;
                    var laneLsw = lane.low;
                    var rhoOffset = RHO_OFFSETS[laneIndex];

                    // Rotate lanes
                    if (rhoOffset < 32) {
                      var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
                      var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
                    } else /* if (rhoOffset >= 32) */ {
                      var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
                      var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
                    }

                    // Transpose lanes
                    var TPiLane = T[PI_INDEXES[laneIndex]];
                    TPiLane.high = tMsw;
                    TPiLane.low = tLsw;
                  }

                  // Rho pi at x = y = 0
                  var T0 = T[0];
                  var state0 = state[0];
                  T0.high = state0.high;
                  T0.low = state0.low;

                  // Chi
                  for (var x = 0; x < 5; x++) {
                    for (var y = 0; y < 5; y++) {
                      // Shortcuts
                      var laneIndex = x + 5 * y;
                      var lane = state[laneIndex];
                      var TLane = T[laneIndex];
                      var Tx1Lane = T[((x + 1) % 5) + 5 * y];
                      var Tx2Lane = T[((x + 2) % 5) + 5 * y];

                      // Mix rows
                      lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
                      lane.low = TLane.low ^ (~Tx1Lane.low & Tx2Lane.low);
                    }
                  }

                  // Iota
                  var lane = state[0];
                  var roundConstant = ROUND_CONSTANTS[round];
                  lane.high ^= roundConstant.high;
                  lane.low ^= roundConstant.low;;
                }
              },

              _doFinalize: function () {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                var blockSizeBits = this.blockSize * 32;

                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
                dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
                data.sigBytes = dataWords.length * 4;

                // Hash final blocks
                this._process();

                // Shortcuts
                var state = this._state;
                var outputLengthBytes = this.cfg.outputLength / 8;
                var outputLengthLanes = outputLengthBytes / 8;

                // Squeeze
                var hashWords = [];
                for (var i = 0; i < outputLengthLanes; i++) {
                  // Shortcuts
                  var lane = state[i];
                  var laneMsw = lane.high;
                  var laneLsw = lane.low;

                  // Swap endian
                  laneMsw = (
                    (((laneMsw << 8) | (laneMsw >>> 24)) & 0x00ff00ff) |
                    (((laneMsw << 24) | (laneMsw >>> 8)) & 0xff00ff00)
                  );
                  laneLsw = (
                    (((laneLsw << 8) | (laneLsw >>> 24)) & 0x00ff00ff) |
                    (((laneLsw << 24) | (laneLsw >>> 8)) & 0xff00ff00)
                  );

                  // Squeeze state to retrieve hash
                  hashWords.push(laneLsw);
                  hashWords.push(laneMsw);
                }

                // Return final computed hash
                return new WordArray.init(hashWords, outputLengthBytes);
              },

              clone: function () {
                var clone = Hasher.clone.call(this);

                var state = clone._state = this._state.slice(0);
                for (var i = 0; i < 25; i++) {
                  state[i] = state[i].clone();
                }

                return clone;
              }
            });

            /**
             * Shortcut function to the hasher's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             *
             * @return {WordArray} The hash.
             *
             * @static
             *
             * @example
             *
             *     var hash = CryptoJS.SHA3('message');
             *     var hash = CryptoJS.SHA3(wordArray);
             */
            C.SHA3 = Hasher._createHelper(SHA3);

            /**
             * Shortcut function to the HMAC's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             * @param {WordArray|string} key The secret key.
             *
             * @return {WordArray} The HMAC.
             *
             * @static
             *
             * @example
             *
             *     var hmac = CryptoJS.HmacSHA3(message, key);
             */
            C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
          }(Math));


          return CryptoJS.SHA3;

        }));

        /***/
}),
/* 231 */
/***/ (function (module, exports, __webpack_require__) {

        ; (function (root, factory) {
          if (true) {
            // CommonJS
            module.exports = exports = factory(__webpack_require__(95));
          }
          else if (typeof define === "function" && define.amd) {
            // AMD
            define(["./core"], factory);
          }
          else {
            // Global (browser)
            factory(root.CryptoJS);
          }
        }(this, function (CryptoJS) {

          (function (undefined) {
            // Shortcuts
            var C = CryptoJS;
            var C_lib = C.lib;
            var Base = C_lib.Base;
            var X32WordArray = C_lib.WordArray;

            /**
             * x64 namespace.
             */
            var C_x64 = C.x64 = {};

            /**
             * A 64-bit word.
             */
            var X64Word = C_x64.Word = Base.extend({
              /**
               * Initializes a newly created 64-bit word.
               *
               * @param {number} high The high 32 bits.
               * @param {number} low The low 32 bits.
               *
               * @example
               *
               *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
               */
              init: function (high, low) {
                this.high = high;
                this.low = low;
              }

              /**
               * Bitwise NOTs this word.
               *
               * @return {X64Word} A new x64-Word object after negating.
               *
               * @example
               *
               *     var negated = x64Word.not();
               */
              // not: function () {
              // var high = ~this.high;
              // var low = ~this.low;

              // return X64Word.create(high, low);
              // },

              /**
               * Bitwise ANDs this word with the passed word.
               *
               * @param {X64Word} word The x64-Word to AND with this word.
               *
               * @return {X64Word} A new x64-Word object after ANDing.
               *
               * @example
               *
               *     var anded = x64Word.and(anotherX64Word);
               */
              // and: function (word) {
              // var high = this.high & word.high;
              // var low = this.low & word.low;

              // return X64Word.create(high, low);
              // },

              /**
               * Bitwise ORs this word with the passed word.
               *
               * @param {X64Word} word The x64-Word to OR with this word.
               *
               * @return {X64Word} A new x64-Word object after ORing.
               *
               * @example
               *
               *     var ored = x64Word.or(anotherX64Word);
               */
              // or: function (word) {
              // var high = this.high | word.high;
              // var low = this.low | word.low;

              // return X64Word.create(high, low);
              // },

              /**
               * Bitwise XORs this word with the passed word.
               *
               * @param {X64Word} word The x64-Word to XOR with this word.
               *
               * @return {X64Word} A new x64-Word object after XORing.
               *
               * @example
               *
               *     var xored = x64Word.xor(anotherX64Word);
               */
              // xor: function (word) {
              // var high = this.high ^ word.high;
              // var low = this.low ^ word.low;

              // return X64Word.create(high, low);
              // },

              /**
               * Shifts this word n bits to the left.
               *
               * @param {number} n The number of bits to shift.
               *
               * @return {X64Word} A new x64-Word object after shifting.
               *
               * @example
               *
               *     var shifted = x64Word.shiftL(25);
               */
              // shiftL: function (n) {
              // if (n < 32) {
              // var high = (this.high << n) | (this.low >>> (32 - n));
              // var low = this.low << n;
              // } else {
              // var high = this.low << (n - 32);
              // var low = 0;
              // }

              // return X64Word.create(high, low);
              // },

              /**
               * Shifts this word n bits to the right.
               *
               * @param {number} n The number of bits to shift.
               *
               * @return {X64Word} A new x64-Word object after shifting.
               *
               * @example
               *
               *     var shifted = x64Word.shiftR(7);
               */
              // shiftR: function (n) {
              // if (n < 32) {
              // var low = (this.low >>> n) | (this.high << (32 - n));
              // var high = this.high >>> n;
              // } else {
              // var low = this.high >>> (n - 32);
              // var high = 0;
              // }

              // return X64Word.create(high, low);
              // },

              /**
               * Rotates this word n bits to the left.
               *
               * @param {number} n The number of bits to rotate.
               *
               * @return {X64Word} A new x64-Word object after rotating.
               *
               * @example
               *
               *     var rotated = x64Word.rotL(25);
               */
              // rotL: function (n) {
              // return this.shiftL(n).or(this.shiftR(64 - n));
              // },

              /**
               * Rotates this word n bits to the right.
               *
               * @param {number} n The number of bits to rotate.
               *
               * @return {X64Word} A new x64-Word object after rotating.
               *
               * @example
               *
               *     var rotated = x64Word.rotR(7);
               */
              // rotR: function (n) {
              // return this.shiftR(n).or(this.shiftL(64 - n));
              // },

              /**
               * Adds this word with the passed word.
               *
               * @param {X64Word} word The x64-Word to add with this word.
               *
               * @return {X64Word} A new x64-Word object after adding.
               *
               * @example
               *
               *     var added = x64Word.add(anotherX64Word);
               */
              // add: function (word) {
              // var low = (this.low + word.low) | 0;
              // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
              // var high = (this.high + word.high + carry) | 0;

              // return X64Word.create(high, low);
              // }
            });

            /**
             * An array of 64-bit words.
             *
             * @property {Array} words The array of CryptoJS.x64.Word objects.
             * @property {number} sigBytes The number of significant bytes in this word array.
             */
            var X64WordArray = C_x64.WordArray = Base.extend({
              /**
               * Initializes a newly created word array.
               *
               * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
               * @param {number} sigBytes (Optional) The number of significant bytes in the words.
               *
               * @example
               *
               *     var wordArray = CryptoJS.x64.WordArray.create();
               *
               *     var wordArray = CryptoJS.x64.WordArray.create([
               *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
               *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
               *     ]);
               *
               *     var wordArray = CryptoJS.x64.WordArray.create([
               *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
               *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
               *     ], 10);
               */
              init: function (words, sigBytes) {
                words = this.words = words || [];

                if (sigBytes != undefined) {
                  this.sigBytes = sigBytes;
                } else {
                  this.sigBytes = words.length * 8;
                }
              },

              /**
               * Converts this 64-bit word array to a 32-bit word array.
               *
               * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
               *
               * @example
               *
               *     var x32WordArray = x64WordArray.toX32();
               */
              toX32: function () {
                // Shortcuts
                var x64Words = this.words;
                var x64WordsLength = x64Words.length;

                // Convert
                var x32Words = [];
                for (var i = 0; i < x64WordsLength; i++) {
                  var x64Word = x64Words[i];
                  x32Words.push(x64Word.high);
                  x32Words.push(x64Word.low);
                }

                return X32WordArray.create(x32Words, this.sigBytes);
              },

              /**
               * Creates a copy of this word array.
               *
               * @return {X64WordArray} The clone.
               *
               * @example
               *
               *     var clone = x64WordArray.clone();
               */
              clone: function () {
                var clone = Base.clone.call(this);

                // Clone "words" array
                var words = clone.words = this.words.slice(0);

                // Clone each X64Word object
                var wordsLength = words.length;
                for (var i = 0; i < wordsLength; i++) {
                  words[i] = words[i].clone();
                }

                return clone;
              }
            });
          }());


          return CryptoJS;

        }));

        /***/
}),
/* 232 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (module, global) {
          var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/utf8js v2.1.2 by @mathias */
          ; (function (root) {

            // Detect free variables `exports`
            var freeExports = typeof exports == 'object' && exports;

            // Detect free variable `module`
            var freeModule = typeof module == 'object' && module &&
              module.exports == freeExports && module;

            // Detect free variable `global`, from Node.js or Browserified code,
            // and use it as `root`
            var freeGlobal = typeof global == 'object' && global;
            if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
              root = freeGlobal;
            }

            /*--------------------------------------------------------------------------*/

            var stringFromCharCode = String.fromCharCode;

            // Taken from https://mths.be/punycode
            function ucs2decode(string) {
              var output = [];
              var counter = 0;
              var length = string.length;
              var value;
              var extra;
              while (counter < length) {
                value = string.charCodeAt(counter++);
                if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                  // high surrogate, and there is a next character
                  extra = string.charCodeAt(counter++);
                  if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                  } else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                  }
                } else {
                  output.push(value);
                }
              }
              return output;
            }

            // Taken from https://mths.be/punycode
            function ucs2encode(array) {
              var length = array.length;
              var index = -1;
              var value;
              var output = '';
              while (++index < length) {
                value = array[index];
                if (value > 0xFFFF) {
                  value -= 0x10000;
                  output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                  value = 0xDC00 | value & 0x3FF;
                }
                output += stringFromCharCode(value);
              }
              return output;
            }

            function checkScalarValue(codePoint) {
              if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
                throw Error(
                  'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
                  ' is not a scalar value'
                );
              }
            }
            /*--------------------------------------------------------------------------*/

            function createByte(codePoint, shift) {
              return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
            }

            function encodeCodePoint(codePoint) {
              if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
                return stringFromCharCode(codePoint);
              }
              var symbol = '';
              if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
                symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
              }
              else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
                checkScalarValue(codePoint);
                symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
                symbol += createByte(codePoint, 6);
              }
              else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
                symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
                symbol += createByte(codePoint, 12);
                symbol += createByte(codePoint, 6);
              }
              symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
              return symbol;
            }

            function utf8encode(string) {
              var codePoints = ucs2decode(string);
              var length = codePoints.length;
              var index = -1;
              var codePoint;
              var byteString = '';
              while (++index < length) {
                codePoint = codePoints[index];
                byteString += encodeCodePoint(codePoint);
              }
              return byteString;
            }

            /*--------------------------------------------------------------------------*/

            function readContinuationByte() {
              if (byteIndex >= byteCount) {
                throw Error('Invalid byte index');
              }

              var continuationByte = byteArray[byteIndex] & 0xFF;
              byteIndex++;

              if ((continuationByte & 0xC0) == 0x80) {
                return continuationByte & 0x3F;
              }

              // If we end up here, itâ€™s not a continuation byte
              throw Error('Invalid continuation byte');
            }

            function decodeSymbol() {
              var byte1;
              var byte2;
              var byte3;
              var byte4;
              var codePoint;

              if (byteIndex > byteCount) {
                throw Error('Invalid byte index');
              }

              if (byteIndex == byteCount) {
                return false;
              }

              // Read first byte
              byte1 = byteArray[byteIndex] & 0xFF;
              byteIndex++;

              // 1-byte sequence (no continuation bytes)
              if ((byte1 & 0x80) == 0) {
                return byte1;
              }

              // 2-byte sequence
              if ((byte1 & 0xE0) == 0xC0) {
                byte2 = readContinuationByte();
                codePoint = ((byte1 & 0x1F) << 6) | byte2;
                if (codePoint >= 0x80) {
                  return codePoint;
                } else {
                  throw Error('Invalid continuation byte');
                }
              }

              // 3-byte sequence (may include unpaired surrogates)
              if ((byte1 & 0xF0) == 0xE0) {
                byte2 = readContinuationByte();
                byte3 = readContinuationByte();
                codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
                if (codePoint >= 0x0800) {
                  checkScalarValue(codePoint);
                  return codePoint;
                } else {
                  throw Error('Invalid continuation byte');
                }
              }

              // 4-byte sequence
              if ((byte1 & 0xF8) == 0xF0) {
                byte2 = readContinuationByte();
                byte3 = readContinuationByte();
                byte4 = readContinuationByte();
                codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
                  (byte3 << 0x06) | byte4;
                if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
                  return codePoint;
                }
              }

              throw Error('Invalid UTF-8 detected');
            }

            var byteArray;
            var byteCount;
            var byteIndex;
            function utf8decode(byteString) {
              byteArray = ucs2decode(byteString);
              byteCount = byteArray.length;
              byteIndex = 0;
              var codePoints = [];
              var tmp;
              while ((tmp = decodeSymbol()) !== false) {
                codePoints.push(tmp);
              }
              return ucs2encode(codePoints);
            }

            /*--------------------------------------------------------------------------*/

            var utf8 = {
              'version': '2.1.2',
              'encode': utf8encode,
              'decode': utf8decode
            };

            // Some AMD build optimizers, like r.js, check for specific condition patterns
            // like the following:
            if (
              true
            ) {
              !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
                return utf8;
              }.call(exports, __webpack_require__, exports, module),
                __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            } else if (freeExports && !freeExports.nodeType) {
              if (freeModule) { // in Node.js or RingoJS v0.8.0+
                freeModule.exports = utf8;
              } else { // in Narwhal or RingoJS v0.7.0-
                var object = {};
                var hasOwnProperty = object.hasOwnProperty;
                for (var key in utf8) {
                  hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
                }
              }
            } else { // in Rhino or a web browser
              root.utf8 = utf8;
            }

          }(this));

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(36)(module), __webpack_require__(21)))

        /***/
}),
/* 233 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        /*
        object-assign
        (c) Sindre Sorhus
        @license MIT
        */


        /* eslint-disable no-unused-vars */
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;

        function toObject(val) {
          if (val === null || val === undefined) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
          }

          return Object(val);
        }

        function shouldUseNative() {
          try {
            if (!Object.assign) {
              return false;
            }

            // Detect buggy property enumeration order in older V8 versions.

            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
            test1[5] = 'de';
            if (Object.getOwnPropertyNames(test1)[0] === '5') {
              return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
              test2['_' + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
              return test2[n];
            });
            if (order2.join('') !== '0123456789') {
              return false;
            }

            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
              test3[letter] = letter;
            });
            if (Object.keys(Object.assign({}, test3)).join('') !==
              'abcdefghijklmnopqrst') {
              return false;
            }

            return true;
          } catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
          }
        }

        module.exports = shouldUseNative() ? Object.assign : function (target, source) {
          var from;
          var to = toObject(target);
          var symbols;

          for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);

            for (var key in from) {
              if (hasOwnProperty.call(from, key)) {
                to[key] = from[key];
              }
            }

            if (getOwnPropertySymbols) {
              symbols = getOwnPropertySymbols(from);
              for (var i = 0; i < symbols.length; i++) {
                if (propIsEnumerable.call(from, symbols[i])) {
                  to[symbols[i]] = from[symbols[i]];
                }
              }
            }
          }

          return to;
        };


        /***/
}),
/* 234 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (process) {// Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
            function getOwnPropertyDescriptors(obj) {
              var keys = Object.keys(obj);
              var descriptors = {};
              for (var i = 0; i < keys.length; i++) {
                descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
              }
              return descriptors;
            };

          var formatRegExp = /%[sdj%]/g;
          exports.format = function (f) {
            if (!isString(f)) {
              var objects = [];
              for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
              }
              return objects.join(' ');
            }

            var i = 1;
            var args = arguments;
            var len = args.length;
            var str = String(f).replace(formatRegExp, function (x) {
              if (x === '%%') return '%';
              if (i >= len) return x;
              switch (x) {
                case '%s': return String(args[i++]);
                case '%d': return Number(args[i++]);
                case '%j':
                  try {
                    return JSON.stringify(args[i++]);
                  } catch (_) {
                    return '[Circular]';
                  }
                default:
                  return x;
              }
            });
            for (var x = args[i]; i < len; x = args[++i]) {
              if (isNull(x) || !isObject(x)) {
                str += ' ' + x;
              } else {
                str += ' ' + inspect(x);
              }
            }
            return str;
          };


          // Mark that a method should not be used.
          // Returns a modified function which warns once by default.
          // If --no-deprecation is set, then it is a no-op.
          exports.deprecate = function (fn, msg) {
            if (typeof process !== 'undefined' && process.noDeprecation === true) {
              return fn;
            }

            // Allow for deprecating things in the process of starting up.
            if (typeof process === 'undefined') {
              return function () {
                return exports.deprecate(fn, msg).apply(this, arguments);
              };
            }

            var warned = false;
            function deprecated() {
              if (!warned) {
                if (process.throwDeprecation) {
                  throw new Error(msg);
                } else if (process.traceDeprecation) {
                  console.trace(msg);
                } else {
                  console.error(msg);
                }
                warned = true;
              }
              return fn.apply(this, arguments);
            }

            return deprecated;
          };


          var debugs = {};
          var debugEnviron;
          exports.debuglog = function (set) {
            if (isUndefined(debugEnviron))
              debugEnviron = process.env.NODE_DEBUG || '';
            set = set.toUpperCase();
            if (!debugs[set]) {
              if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                var pid = process.pid;
                debugs[set] = function () {
                  var msg = exports.format.apply(exports, arguments);
                  console.error('%s %d: %s', set, pid, msg);
                };
              } else {
                debugs[set] = function () { };
              }
            }
            return debugs[set];
          };


          /**
           * Echos the value of a value. Trys to print the value out
           * in the best way possible given the different types.
           *
           * @param {Object} obj The object to print out.
           * @param {Object} opts Optional options object that alters the output.
           */
          /* legacy: obj, showHidden, depth, colors*/
          function inspect(obj, opts) {
            // default options
            var ctx = {
              seen: [],
              stylize: stylizeNoColor
            };
            // legacy...
            if (arguments.length >= 3) ctx.depth = arguments[2];
            if (arguments.length >= 4) ctx.colors = arguments[3];
            if (isBoolean(opts)) {
              // legacy...
              ctx.showHidden = opts;
            } else if (opts) {
              // got an "options" object
              exports._extend(ctx, opts);
            }
            // set default options
            if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
            if (isUndefined(ctx.depth)) ctx.depth = 2;
            if (isUndefined(ctx.colors)) ctx.colors = false;
            if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
            if (ctx.colors) ctx.stylize = stylizeWithColor;
            return formatValue(ctx, obj, ctx.depth);
          }
          exports.inspect = inspect;


          // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
          inspect.colors = {
            'bold': [1, 22],
            'italic': [3, 23],
            'underline': [4, 24],
            'inverse': [7, 27],
            'white': [37, 39],
            'grey': [90, 39],
            'black': [30, 39],
            'blue': [34, 39],
            'cyan': [36, 39],
            'green': [32, 39],
            'magenta': [35, 39],
            'red': [31, 39],
            'yellow': [33, 39]
          };

          // Don't use 'blue' not visible on cmd.exe
          inspect.styles = {
            'special': 'cyan',
            'number': 'yellow',
            'boolean': 'yellow',
            'undefined': 'grey',
            'null': 'bold',
            'string': 'green',
            'date': 'magenta',
            // "name": intentionally not styling
            'regexp': 'red'
          };


          function stylizeWithColor(str, styleType) {
            var style = inspect.styles[styleType];

            if (style) {
              return '\u001b[' + inspect.colors[style][0] + 'm' + str +
                '\u001b[' + inspect.colors[style][1] + 'm';
            } else {
              return str;
            }
          }


          function stylizeNoColor(str, styleType) {
            return str;
          }


          function arrayToHash(array) {
            var hash = {};

            array.forEach(function (val, idx) {
              hash[val] = true;
            });

            return hash;
          }


          function formatValue(ctx, value, recurseTimes) {
            // Provide a hook for user-specified inspect functions.
            // Check that value is an object with an inspect function on it
            if (ctx.customInspect &&
              value &&
              isFunction(value.inspect) &&
              // Filter out the util module, it's inspect function is special
              value.inspect !== exports.inspect &&
              // Also filter out any prototype objects using the circular check.
              !(value.constructor && value.constructor.prototype === value)) {
              var ret = value.inspect(recurseTimes, ctx);
              if (!isString(ret)) {
                ret = formatValue(ctx, ret, recurseTimes);
              }
              return ret;
            }

            // Primitive types cannot have properties
            var primitive = formatPrimitive(ctx, value);
            if (primitive) {
              return primitive;
            }

            // Look up the keys of the object.
            var keys = Object.keys(value);
            var visibleKeys = arrayToHash(keys);

            if (ctx.showHidden) {
              keys = Object.getOwnPropertyNames(value);
            }

            // IE doesn't make error fields non-enumerable
            // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
            if (isError(value)
              && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
              return formatError(value);
            }

            // Some type of object without properties can be shortcutted.
            if (keys.length === 0) {
              if (isFunction(value)) {
                var name = value.name ? ': ' + value.name : '';
                return ctx.stylize('[Function' + name + ']', 'special');
              }
              if (isRegExp(value)) {
                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
              }
              if (isDate(value)) {
                return ctx.stylize(Date.prototype.toString.call(value), 'date');
              }
              if (isError(value)) {
                return formatError(value);
              }
            }

            var base = '', array = false, braces = ['{', '}'];

            // Make Array say that they are Array
            if (isArray(value)) {
              array = true;
              braces = ['[', ']'];
            }

            // Make functions say that they are functions
            if (isFunction(value)) {
              var n = value.name ? ': ' + value.name : '';
              base = ' [Function' + n + ']';
            }

            // Make RegExps say that they are RegExps
            if (isRegExp(value)) {
              base = ' ' + RegExp.prototype.toString.call(value);
            }

            // Make dates with properties first say the date
            if (isDate(value)) {
              base = ' ' + Date.prototype.toUTCString.call(value);
            }

            // Make error with message first say the error
            if (isError(value)) {
              base = ' ' + formatError(value);
            }

            if (keys.length === 0 && (!array || value.length == 0)) {
              return braces[0] + base + braces[1];
            }

            if (recurseTimes < 0) {
              if (isRegExp(value)) {
                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
              } else {
                return ctx.stylize('[Object]', 'special');
              }
            }

            ctx.seen.push(value);

            var output;
            if (array) {
              output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
            } else {
              output = keys.map(function (key) {
                return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
              });
            }

            ctx.seen.pop();

            return reduceToSingleString(output, base, braces);
          }


          function formatPrimitive(ctx, value) {
            if (isUndefined(value))
              return ctx.stylize('undefined', 'undefined');
            if (isString(value)) {
              var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                .replace(/'/g, "\\'")
                .replace(/\\"/g, '"') + '\'';
              return ctx.stylize(simple, 'string');
            }
            if (isNumber(value))
              return ctx.stylize('' + value, 'number');
            if (isBoolean(value))
              return ctx.stylize('' + value, 'boolean');
            // For some reason typeof null is "object", so special case here.
            if (isNull(value))
              return ctx.stylize('null', 'null');
          }


          function formatError(value) {
            return '[' + Error.prototype.toString.call(value) + ']';
          }


          function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
            var output = [];
            for (var i = 0, l = value.length; i < l; ++i) {
              if (hasOwnProperty(value, String(i))) {
                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                  String(i), true));
              } else {
                output.push('');
              }
            }
            keys.forEach(function (key) {
              if (!key.match(/^\d+$/)) {
                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                  key, true));
              }
            });
            return output;
          }


          function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
            var name, str, desc;
            desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
            if (desc.get) {
              if (desc.set) {
                str = ctx.stylize('[Getter/Setter]', 'special');
              } else {
                str = ctx.stylize('[Getter]', 'special');
              }
            } else {
              if (desc.set) {
                str = ctx.stylize('[Setter]', 'special');
              }
            }
            if (!hasOwnProperty(visibleKeys, key)) {
              name = '[' + key + ']';
            }
            if (!str) {
              if (ctx.seen.indexOf(desc.value) < 0) {
                if (isNull(recurseTimes)) {
                  str = formatValue(ctx, desc.value, null);
                } else {
                  str = formatValue(ctx, desc.value, recurseTimes - 1);
                }
                if (str.indexOf('\n') > -1) {
                  if (array) {
                    str = str.split('\n').map(function (line) {
                      return '  ' + line;
                    }).join('\n').substr(2);
                  } else {
                    str = '\n' + str.split('\n').map(function (line) {
                      return '   ' + line;
                    }).join('\n');
                  }
                }
              } else {
                str = ctx.stylize('[Circular]', 'special');
              }
            }
            if (isUndefined(name)) {
              if (array && key.match(/^\d+$/)) {
                return str;
              }
              name = JSON.stringify('' + key);
              if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                name = name.substr(1, name.length - 2);
                name = ctx.stylize(name, 'name');
              } else {
                name = name.replace(/'/g, "\\'")
                  .replace(/\\"/g, '"')
                  .replace(/(^"|"$)/g, "'");
                name = ctx.stylize(name, 'string');
              }
            }

            return name + ': ' + str;
          }


          function reduceToSingleString(output, base, braces) {
            var numLinesEst = 0;
            var length = output.reduce(function (prev, cur) {
              numLinesEst++;
              if (cur.indexOf('\n') >= 0) numLinesEst++;
              return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
            }, 0);

            if (length > 60) {
              return braces[0] +
                (base === '' ? '' : base + '\n ') +
                ' ' +
                output.join(',\n  ') +
                ' ' +
                braces[1];
            }

            return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
          }


          // NOTE: These type checking functions intentionally don't use `instanceof`
          // because it is fragile and can be easily faked with `Object.create()`.
          function isArray(ar) {
            return Array.isArray(ar);
          }
          exports.isArray = isArray;

          function isBoolean(arg) {
            return typeof arg === 'boolean';
          }
          exports.isBoolean = isBoolean;

          function isNull(arg) {
            return arg === null;
          }
          exports.isNull = isNull;

          function isNullOrUndefined(arg) {
            return arg == null;
          }
          exports.isNullOrUndefined = isNullOrUndefined;

          function isNumber(arg) {
            return typeof arg === 'number';
          }
          exports.isNumber = isNumber;

          function isString(arg) {
            return typeof arg === 'string';
          }
          exports.isString = isString;

          function isSymbol(arg) {
            return typeof arg === 'symbol';
          }
          exports.isSymbol = isSymbol;

          function isUndefined(arg) {
            return arg === void 0;
          }
          exports.isUndefined = isUndefined;

          function isRegExp(re) {
            return isObject(re) && objectToString(re) === '[object RegExp]';
          }
          exports.isRegExp = isRegExp;

          function isObject(arg) {
            return typeof arg === 'object' && arg !== null;
          }
          exports.isObject = isObject;

          function isDate(d) {
            return isObject(d) && objectToString(d) === '[object Date]';
          }
          exports.isDate = isDate;

          function isError(e) {
            return isObject(e) &&
              (objectToString(e) === '[object Error]' || e instanceof Error);
          }
          exports.isError = isError;

          function isFunction(arg) {
            return typeof arg === 'function';
          }
          exports.isFunction = isFunction;

          function isPrimitive(arg) {
            return arg === null ||
              typeof arg === 'boolean' ||
              typeof arg === 'number' ||
              typeof arg === 'string' ||
              typeof arg === 'symbol' ||  // ES6 symbol
              typeof arg === 'undefined';
          }
          exports.isPrimitive = isPrimitive;

          exports.isBuffer = __webpack_require__(235);

          function objectToString(o) {
            return Object.prototype.toString.call(o);
          }


          function pad(n) {
            return n < 10 ? '0' + n.toString(10) : n.toString(10);
          }


          var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
            'Oct', 'Nov', 'Dec'];

          // 26 Feb 16:19:34
          function timestamp() {
            var d = new Date();
            var time = [pad(d.getHours()),
            pad(d.getMinutes()),
            pad(d.getSeconds())].join(':');
            return [d.getDate(), months[d.getMonth()], time].join(' ');
          }


          // log is just a thin wrapper to console.log that prepends a timestamp
          exports.log = function () {
            console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
          };


          /**
           * Inherit the prototype methods from one constructor into another.
           *
           * The Function.prototype.inherits from lang.js rewritten as a standalone
           * function (not on Function.prototype). NOTE: If this file is to be loaded
           * during bootstrapping this function needs to be rewritten using some native
           * functions as prototype setup using normal JavaScript does not work as
           * expected during bootstrapping (see mirror.js in r114903).
           *
           * @param {function} ctor Constructor function which needs to inherit the
           *     prototype.
           * @param {function} superCtor Constructor function to inherit prototype from.
           */
          exports.inherits = __webpack_require__(236);

          exports._extend = function (origin, add) {
            // Don't do anything if add isn't an object
            if (!add || !isObject(add)) return origin;

            var keys = Object.keys(add);
            var i = keys.length;
            while (i--) {
              origin[keys[i]] = add[keys[i]];
            }
            return origin;
          };

          function hasOwnProperty(obj, prop) {
            return Object.prototype.hasOwnProperty.call(obj, prop);
          }

          var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

          exports.promisify = function promisify(original) {
            if (typeof original !== 'function')
              throw new TypeError('The "original" argument must be of type Function');

            if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
              var fn = original[kCustomPromisifiedSymbol];
              if (typeof fn !== 'function') {
                throw new TypeError('The "util.promisify.custom" argument must be of type Function');
              }
              Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                value: fn, enumerable: false, writable: false, configurable: true
              });
              return fn;
            }

            function fn() {
              var promiseResolve, promiseReject;
              var promise = new Promise(function (resolve, reject) {
                promiseResolve = resolve;
                promiseReject = reject;
              });

              var args = [];
              for (var i = 0; i < arguments.length; i++) {
                args.push(arguments[i]);
              }
              args.push(function (err, value) {
                if (err) {
                  promiseReject(err);
                } else {
                  promiseResolve(value);
                }
              });

              try {
                original.apply(this, args);
              } catch (err) {
                promiseReject(err);
              }

              return promise;
            }

            Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

            if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
              value: fn, enumerable: false, writable: false, configurable: true
            });
            return Object.defineProperties(
              fn,
              getOwnPropertyDescriptors(original)
            );
          }

          exports.promisify.custom = kCustomPromisifiedSymbol

          function callbackifyOnRejected(reason, cb) {
            // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
            // Because `null` is a special error value in callbacks which means "no error
            // occurred", we error-wrap so the callback consumer can distinguish between
            // "the promise rejected with null" or "the promise fulfilled with undefined".
            if (!reason) {
              var newReason = new Error('Promise was rejected with a falsy value');
              newReason.reason = reason;
              reason = newReason;
            }
            return cb(reason);
          }

          function callbackify(original) {
            if (typeof original !== 'function') {
              throw new TypeError('The "original" argument must be of type Function');
            }

            // We DO NOT return the promise as it gives the user a false sense that
            // the promise is actually somehow related to the callback's execution
            // and that the callback throwing will reject the promise.
            function callbackified() {
              var args = [];
              for (var i = 0; i < arguments.length; i++) {
                args.push(arguments[i]);
              }

              var maybeCb = args.pop();
              if (typeof maybeCb !== 'function') {
                throw new TypeError('The last argument must be of type Function');
              }
              var self = this;
              var cb = function () {
                return maybeCb.apply(self, arguments);
              };
              // In true node style we process the callback on `nextTick` with all the
              // implications (stack, `uncaughtException`, `async_hooks`)
              original.apply(this, args)
                .then(function (ret) { process.nextTick(cb, null, ret) },
                  function (rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
            }

            Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
            Object.defineProperties(callbackified,
              getOwnPropertyDescriptors(original));
            return callbackified;
          }
          exports.callbackify = callbackify;

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(60)))

        /***/
}),
/* 235 */
/***/ (function (module, exports) {

        module.exports = function isBuffer(arg) {
          return arg && typeof arg === 'object'
            && typeof arg.copy === 'function'
            && typeof arg.fill === 'function'
            && typeof arg.readUInt8 === 'function';
        }

        /***/
}),
/* 236 */
/***/ (function (module, exports) {

        if (typeof Object.create === 'function') {
          // implementation from standard node.js 'util' module
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          };
        } else {
          // old school shim for old browsers
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor
            var TempCtor = function () { }
            TempCtor.prototype = superCtor.prototype
            ctor.prototype = new TempCtor()
            ctor.prototype.constructor = ctor
          }
        }


        /***/
}),
/* 237 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        exports.sha1 = __webpack_require__(238);
        exports.sha224 = __webpack_require__(239);
        exports.sha256 = __webpack_require__(136);
        exports.sha384 = __webpack_require__(240);
        exports.sha512 = __webpack_require__(137);


        /***/
}),
/* 238 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(22);
        var common = __webpack_require__(61);
        var shaCommon = __webpack_require__(135);

        var rotl32 = utils.rotl32;
        var sum32 = utils.sum32;
        var sum32_5 = utils.sum32_5;
        var ft_1 = shaCommon.ft_1;
        var BlockHash = common.BlockHash;

        var sha1_K = [
          0x5A827999, 0x6ED9EBA1,
          0x8F1BBCDC, 0xCA62C1D6
        ];

        function SHA1() {
          if (!(this instanceof SHA1))
            return new SHA1();

          BlockHash.call(this);
          this.h = [
            0x67452301, 0xefcdab89, 0x98badcfe,
            0x10325476, 0xc3d2e1f0];
          this.W = new Array(80);
        }

        utils.inherits(SHA1, BlockHash);
        module.exports = SHA1;

        SHA1.blockSize = 512;
        SHA1.outSize = 160;
        SHA1.hmacStrength = 80;
        SHA1.padLength = 64;

        SHA1.prototype._update = function _update(msg, start) {
          var W = this.W;

          for (var i = 0; i < 16; i++)
            W[i] = msg[start + i];

          for (; i < W.length; i++)
            W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

          var a = this.h[0];
          var b = this.h[1];
          var c = this.h[2];
          var d = this.h[3];
          var e = this.h[4];

          for (i = 0; i < W.length; i++) {
            var s = ~~(i / 20);
            var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
            e = d;
            d = c;
            c = rotl32(b, 30);
            b = a;
            a = t;
          }

          this.h[0] = sum32(this.h[0], a);
          this.h[1] = sum32(this.h[1], b);
          this.h[2] = sum32(this.h[2], c);
          this.h[3] = sum32(this.h[3], d);
          this.h[4] = sum32(this.h[4], e);
        };

        SHA1.prototype._digest = function digest(enc) {
          if (enc === 'hex')
            return utils.toHex32(this.h, 'big');
          else
            return utils.split32(this.h, 'big');
        };


        /***/
}),
/* 239 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(22);
        var SHA256 = __webpack_require__(136);

        function SHA224() {
          if (!(this instanceof SHA224))
            return new SHA224();

          SHA256.call(this);
          this.h = [
            0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
            0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
        }
        utils.inherits(SHA224, SHA256);
        module.exports = SHA224;

        SHA224.blockSize = 512;
        SHA224.outSize = 224;
        SHA224.hmacStrength = 192;
        SHA224.padLength = 64;

        SHA224.prototype._digest = function digest(enc) {
          // Just truncate output
          if (enc === 'hex')
            return utils.toHex32(this.h.slice(0, 7), 'big');
          else
            return utils.split32(this.h.slice(0, 7), 'big');
        };



        /***/
}),
/* 240 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(22);

        var SHA512 = __webpack_require__(137);

        function SHA384() {
          if (!(this instanceof SHA384))
            return new SHA384();

          SHA512.call(this);
          this.h = [
            0xcbbb9d5d, 0xc1059ed8,
            0x629a292a, 0x367cd507,
            0x9159015a, 0x3070dd17,
            0x152fecd8, 0xf70e5939,
            0x67332667, 0xffc00b31,
            0x8eb44a87, 0x68581511,
            0xdb0c2e0d, 0x64f98fa7,
            0x47b5481d, 0xbefa4fa4];
        }
        utils.inherits(SHA384, SHA512);
        module.exports = SHA384;

        SHA384.blockSize = 1024;
        SHA384.outSize = 384;
        SHA384.hmacStrength = 192;
        SHA384.padLength = 128;

        SHA384.prototype._digest = function digest(enc) {
          if (enc === 'hex')
            return utils.toHex32(this.h.slice(0, 12), 'big');
          else
            return utils.split32(this.h.slice(0, 12), 'big');
        };


        /***/
}),
/* 241 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(22);
        var common = __webpack_require__(61);

        var rotl32 = utils.rotl32;
        var sum32 = utils.sum32;
        var sum32_3 = utils.sum32_3;
        var sum32_4 = utils.sum32_4;
        var BlockHash = common.BlockHash;

        function RIPEMD160() {
          if (!(this instanceof RIPEMD160))
            return new RIPEMD160();

          BlockHash.call(this);

          this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
          this.endian = 'little';
        }
        utils.inherits(RIPEMD160, BlockHash);
        exports.ripemd160 = RIPEMD160;

        RIPEMD160.blockSize = 512;
        RIPEMD160.outSize = 160;
        RIPEMD160.hmacStrength = 192;
        RIPEMD160.padLength = 64;

        RIPEMD160.prototype._update = function update(msg, start) {
          var A = this.h[0];
          var B = this.h[1];
          var C = this.h[2];
          var D = this.h[3];
          var E = this.h[4];
          var Ah = A;
          var Bh = B;
          var Ch = C;
          var Dh = D;
          var Eh = E;
          for (var j = 0; j < 80; j++) {
            var T = sum32(
              rotl32(
                sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
                s[j]),
              E);
            A = E;
            E = D;
            D = rotl32(C, 10);
            C = B;
            B = T;
            T = sum32(
              rotl32(
                sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
                sh[j]),
              Eh);
            Ah = Eh;
            Eh = Dh;
            Dh = rotl32(Ch, 10);
            Ch = Bh;
            Bh = T;
          }
          T = sum32_3(this.h[1], C, Dh);
          this.h[1] = sum32_3(this.h[2], D, Eh);
          this.h[2] = sum32_3(this.h[3], E, Ah);
          this.h[3] = sum32_3(this.h[4], A, Bh);
          this.h[4] = sum32_3(this.h[0], B, Ch);
          this.h[0] = T;
        };

        RIPEMD160.prototype._digest = function digest(enc) {
          if (enc === 'hex')
            return utils.toHex32(this.h, 'little');
          else
            return utils.split32(this.h, 'little');
        };

        function f(j, x, y, z) {
          if (j <= 15)
            return x ^ y ^ z;
          else if (j <= 31)
            return (x & y) | ((~x) & z);
          else if (j <= 47)
            return (x | (~y)) ^ z;
          else if (j <= 63)
            return (x & z) | (y & (~z));
          else
            return x ^ (y | (~z));
        }

        function K(j) {
          if (j <= 15)
            return 0x00000000;
          else if (j <= 31)
            return 0x5a827999;
          else if (j <= 47)
            return 0x6ed9eba1;
          else if (j <= 63)
            return 0x8f1bbcdc;
          else
            return 0xa953fd4e;
        }

        function Kh(j) {
          if (j <= 15)
            return 0x50a28be6;
          else if (j <= 31)
            return 0x5c4dd124;
          else if (j <= 47)
            return 0x6d703ef3;
          else if (j <= 63)
            return 0x7a6d76e9;
          else
            return 0x00000000;
        }

        var r = [
          0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
          7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
          3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
          1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
          4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
        ];

        var rh = [
          5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
          6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
          15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
          8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
          12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
        ];

        var s = [
          11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
          7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
          11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
          11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
          9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
        ];

        var sh = [
          8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
          9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
          9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
          15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
          8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
        ];


        /***/
}),
/* 242 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(22);
        var assert = __webpack_require__(37);

        function Hmac(hash, key, enc) {
          if (!(this instanceof Hmac))
            return new Hmac(hash, key, enc);
          this.Hash = hash;
          this.blockSize = hash.blockSize / 8;
          this.outSize = hash.outSize / 8;
          this.inner = null;
          this.outer = null;

          this._init(utils.toArray(key, enc));
        }
        module.exports = Hmac;

        Hmac.prototype._init = function init(key) {
          // Shorten key, if needed
          if (key.length > this.blockSize)
            key = new this.Hash().update(key).digest();
          assert(key.length <= this.blockSize);

          // Add padding to key
          for (var i = key.length; i < this.blockSize; i++)
            key.push(0);

          for (i = 0; i < key.length; i++)
            key[i] ^= 0x36;
          this.inner = new this.Hash().update(key);

          // 0x36 ^ 0x5c = 0x6a
          for (i = 0; i < key.length; i++)
            key[i] ^= 0x6a;
          this.outer = new this.Hash().update(key);
        };

        Hmac.prototype.update = function update(msg, enc) {
          this.inner.update(msg, enc);
          return this;
        };

        Hmac.prototype.digest = function digest(enc) {
          this.outer.update(this.inner.digest());
          return this.outer.digest(enc);
        };


        /***/
}),
/* 243 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        exports.byteLength = byteLength
        exports.toByteArray = toByteArray
        exports.fromByteArray = fromByteArray

        var lookup = []
        var revLookup = []
        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
        for (var i = 0, len = code.length; i < len; ++i) {
          lookup[i] = code[i]
          revLookup[code.charCodeAt(i)] = i
        }

        // Support decoding URL-safe base64 strings, as Node.js does.
        // See: https://en.wikipedia.org/wiki/Base64#URL_applications
        revLookup['-'.charCodeAt(0)] = 62
        revLookup['_'.charCodeAt(0)] = 63

        function getLens(b64) {
          var len = b64.length

          if (len % 4 > 0) {
            throw new Error('Invalid string. Length must be a multiple of 4')
          }

          // Trim off extra bytes after placeholder bytes are found
          // See: https://github.com/beatgammit/base64-js/issues/42
          var validLen = b64.indexOf('=')
          if (validLen === -1) validLen = len

          var placeHoldersLen = validLen === len
            ? 0
            : 4 - (validLen % 4)

          return [validLen, placeHoldersLen]
        }

        // base64 is 4/3 + up to two characters of the original data
        function byteLength(b64) {
          var lens = getLens(b64)
          var validLen = lens[0]
          var placeHoldersLen = lens[1]
          return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
        }

        function _byteLength(b64, validLen, placeHoldersLen) {
          return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
        }

        function toByteArray(b64) {
          var tmp
          var lens = getLens(b64)
          var validLen = lens[0]
          var placeHoldersLen = lens[1]

          var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

          var curByte = 0

          // if there are placeholders, only get up to the last complete 4 chars
          var len = placeHoldersLen > 0
            ? validLen - 4
            : validLen

          var i
          for (i = 0; i < len; i += 4) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 18) |
              (revLookup[b64.charCodeAt(i + 1)] << 12) |
              (revLookup[b64.charCodeAt(i + 2)] << 6) |
              revLookup[b64.charCodeAt(i + 3)]
            arr[curByte++] = (tmp >> 16) & 0xFF
            arr[curByte++] = (tmp >> 8) & 0xFF
            arr[curByte++] = tmp & 0xFF
          }

          if (placeHoldersLen === 2) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 2) |
              (revLookup[b64.charCodeAt(i + 1)] >> 4)
            arr[curByte++] = tmp & 0xFF
          }

          if (placeHoldersLen === 1) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 10) |
              (revLookup[b64.charCodeAt(i + 1)] << 4) |
              (revLookup[b64.charCodeAt(i + 2)] >> 2)
            arr[curByte++] = (tmp >> 8) & 0xFF
            arr[curByte++] = tmp & 0xFF
          }

          return arr
        }

        function tripletToBase64(num) {
          return lookup[num >> 18 & 0x3F] +
            lookup[num >> 12 & 0x3F] +
            lookup[num >> 6 & 0x3F] +
            lookup[num & 0x3F]
        }

        function encodeChunk(uint8, start, end) {
          var tmp
          var output = []
          for (var i = start; i < end; i += 3) {
            tmp =
              ((uint8[i] << 16) & 0xFF0000) +
              ((uint8[i + 1] << 8) & 0xFF00) +
              (uint8[i + 2] & 0xFF)
            output.push(tripletToBase64(tmp))
          }
          return output.join('')
        }

        function fromByteArray(uint8) {
          var tmp
          var len = uint8.length
          var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
          var parts = []
          var maxChunkLength = 16383 // must be multiple of 3

          // go through the array every three bytes, we'll deal with trailing stuff later
          for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
            parts.push(encodeChunk(
              uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
            ))
          }

          // pad the end with zeros, but make sure to not forget the extra bytes
          if (extraBytes === 1) {
            tmp = uint8[len - 1]
            parts.push(
              lookup[tmp >> 2] +
              lookup[(tmp << 4) & 0x3F] +
              '=='
            )
          } else if (extraBytes === 2) {
            tmp = (uint8[len - 2] << 8) + uint8[len - 1]
            parts.push(
              lookup[tmp >> 10] +
              lookup[(tmp >> 4) & 0x3F] +
              lookup[(tmp << 2) & 0x3F] +
              '='
            )
          }

          return parts.join('')
        }


        /***/
}),
/* 244 */
/***/ (function (module, exports) {

        exports.read = function (buffer, offset, isLE, mLen, nBytes) {
          var e, m
          var eLen = (nBytes * 8) - mLen - 1
          var eMax = (1 << eLen) - 1
          var eBias = eMax >> 1
          var nBits = -7
          var i = isLE ? (nBytes - 1) : 0
          var d = isLE ? -1 : 1
          var s = buffer[offset + i]

          i += d

          e = s & ((1 << (-nBits)) - 1)
          s >>= (-nBits)
          nBits += eLen
          for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) { }

          m = e & ((1 << (-nBits)) - 1)
          e >>= (-nBits)
          nBits += mLen
          for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) { }

          if (e === 0) {
            e = 1 - eBias
          } else if (e === eMax) {
            return m ? NaN : ((s ? -1 : 1) * Infinity)
          } else {
            m = m + Math.pow(2, mLen)
            e = e - eBias
          }
          return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
        }

        exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
          var e, m, c
          var eLen = (nBytes * 8) - mLen - 1
          var eMax = (1 << eLen) - 1
          var eBias = eMax >> 1
          var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
          var i = isLE ? 0 : (nBytes - 1)
          var d = isLE ? 1 : -1
          var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

          value = Math.abs(value)

          if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0
            e = eMax
          } else {
            e = Math.floor(Math.log(value) / Math.LN2)
            if (value * (c = Math.pow(2, -e)) < 1) {
              e--
              c *= 2
            }
            if (e + eBias >= 1) {
              value += rt / c
            } else {
              value += rt * Math.pow(2, 1 - eBias)
            }
            if (value * c >= 2) {
              e++
              c /= 2
            }

            if (e + eBias >= eMax) {
              m = 0
              e = eMax
            } else if (e + eBias >= 1) {
              m = ((value * c) - 1) * Math.pow(2, mLen)
              e = e + eBias
            } else {
              m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
              e = 0
            }
          }

          for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) { }

          e = (e << mLen) | m
          eLen += mLen
          for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) { }

          buffer[offset + i - d] |= s * 128
        }


        /***/
}),
/* 245 */
/***/ (function (module, exports, __webpack_require__) {

        var BN = __webpack_require__(11);
        var stripHexPrefix = __webpack_require__(246);

        /**
         * Returns a BN object, converts a number value to a BN
         * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object
         * @return {Object} `output` BN object of the number
         * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number
         */
        module.exports = function numberToBN(arg) {
          if (typeof arg === 'string' || typeof arg === 'number') {
            var multiplier = new BN(1); // eslint-disable-line
            var formattedString = String(arg).toLowerCase().trim();
            var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';
            var stringArg = stripHexPrefix(formattedString); // eslint-disable-line
            if (stringArg.substr(0, 1) === '-') {
              stringArg = stripHexPrefix(stringArg.slice(1));
              multiplier = new BN(-1, 10);
            }
            stringArg = stringArg === '' ? '0' : stringArg;

            if ((!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/))
              || stringArg.match(/^[a-fA-F]+$/)
              || (isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/))) {
              return new BN(stringArg, 16).mul(multiplier);
            }

            if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {
              return new BN(stringArg, 10).mul(multiplier);
            }
          } else if (typeof arg === 'object' && arg.toString && (!arg.pop && !arg.push)) {
            if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
              return new BN(arg.toString(10), 10);
            }
          }

          throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');
        }


        /***/
}),
/* 246 */
/***/ (function (module, exports, __webpack_require__) {

        var isHexPrefixed = __webpack_require__(247);

        /**
         * Removes '0x' from a given `String` is present
         * @param {String} str the string value
         * @return {String|Optional} a string by pass if necessary
         */
        module.exports = function stripHexPrefix(str) {
          if (typeof str !== 'string') {
            return str;
          }

          return isHexPrefixed(str) ? str.slice(2) : str;
        }


        /***/
}),
/* 247 */
/***/ (function (module, exports) {

        /**
         * Returns a `Boolean` on whether or not the a `String` starts with '0x'
         * @param {String} str the string input value
         * @return {Boolean} a boolean if it is or is not hex prefixed
         * @throws if the str input is not a string
         */
        module.exports = function isHexPrefixed(str) {
          if (typeof str !== 'string') {
            throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
          }

          return str.slice(0, 2) === '0x';
        }


        /***/
}),
/* 248 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file mc.js
        
         * @date 2017
         */



        var formatters = __webpack_require__(3);
        var utils = __webpack_require__(0);
        var Method = __webpack_require__(28);
        var Property = __webpack_require__(29);
        var config = __webpack_require__(47);
        var Contract = __webpack_require__(249).ContractFactory;
        var watches = __webpack_require__(45);
        var Filter = __webpack_require__(44);
        var IsSyncing = __webpack_require__(475);
        var namereg = __webpack_require__(476);
        var Iban = __webpack_require__(73);
        var transfer = __webpack_require__(479);

        var blockCall = function (args) {
          return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? "mc_getBlockByHash" : "mc_getBlockByNumber";
        };

        var transactionFromBlockCall = function (args) {
          return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'mc_getTransactionByBlockHashAndIndex' : 'mc_getTransactionByBlockNumberAndIndex';
        };

        var uncleCall = function (args) {
          return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'mc_getUncleByBlockHashAndIndex' : 'mc_getUncleByBlockNumberAndIndex';
        };

        var getBlockTransactionCountCall = function (args) {
          return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'mc_getBlockTransactionCountByHash' : 'mc_getBlockTransactionCountByNumber';
        };

        var uncleCountCall = function (args) {
          return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'mc_getUncleCountByBlockHash' : 'mc_getUncleCountByBlockNumber';
        };

        function Mc(chain3) {
          this._requestManager = chain3._requestManager;

          var self = this;

          methods().forEach(function (method) {
            method.attachToObject(self);
            method.setRequestManager(self._requestManager);
          });

          properties().forEach(function (p) {
            p.attachToObject(self);
            p.setRequestManager(self._requestManager);
          });


          this.iban = Iban;
          this.sendIBANTransaction = transfer.bind(null, this);
        }

        Object.defineProperty(Mc.prototype, 'defaultBlock', {
          get: function () {
            return config.defaultBlock;
          },
          set: function (val) {
            config.defaultBlock = val;
            return val;
          }
        });

        Object.defineProperty(Mc.prototype, 'defaultAccount', {
          get: function () {
            return config.defaultAccount;
          },
          set: function (val) {
            config.defaultAccount = val;
            return val;
          }
        });

        var methods = function () {
          var getBalance = new Method({
            name: 'getBalance',
            call: 'mc_getBalance',
            params: 2,
            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],
            outputFormatter: formatters.outputBigNumberFormatter
          });

          var getStorageAt = new Method({
            name: 'getStorageAt',
            call: 'mc_getStorageAt',
            params: 3,
            inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]
          });

          var getCode = new Method({
            name: 'getCode',
            call: 'mc_getCode',
            params: 2,
            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]
          });

          var getBlock = new Method({
            name: 'getBlock',
            call: blockCall,
            params: 2,
            inputFormatter: [formatters.inputBlockNumberFormatter, function (val) {
              return !!val;
            }],
            outputFormatter: formatters.outputBlockFormatter
          });

          var getUncle = new Method({
            name: 'getUncle',
            call: uncleCall,
            params: 2,
            inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],
            outputFormatter: formatters.outputBlockFormatter,

          });

          var getBlockTransactionCount = new Method({
            name: 'getBlockTransactionCount',
            call: getBlockTransactionCountCall,
            params: 1,
            inputFormatter: [formatters.inputBlockNumberFormatter],
            outputFormatter: utils.toDecimal
          });

          var getBlockUncleCount = new Method({
            name: 'getBlockUncleCount',
            call: uncleCountCall,
            params: 1,
            inputFormatter: [formatters.inputBlockNumberFormatter],
            outputFormatter: utils.toDecimal
          });

          var getTransaction = new Method({
            name: 'getTransaction',
            call: 'mc_getTransactionByHash',
            params: 1,
            outputFormatter: formatters.outputTransactionFormatter
          });

          var getTransactionFromBlock = new Method({
            name: 'getTransactionFromBlock',
            call: transactionFromBlockCall,
            params: 2,
            inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],
            outputFormatter: formatters.outputTransactionFormatter
          });

          var getTransactionReceipt = new Method({
            name: 'getTransactionReceipt',
            call: 'mc_getTransactionReceipt',
            params: 1,
            outputFormatter: formatters.outputTransactionReceiptFormatter
          });

          var getTransactionCount = new Method({
            name: 'getTransactionCount',
            call: 'mc_getTransactionCount',
            params: 2,
            inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],
            outputFormatter: utils.toDecimal
          });

          var sendRawTransaction = new Method({
            name: 'sendRawTransaction',
            call: 'mc_sendRawTransaction',
            params: 1,
            inputFormatter: [null]
          });

          var sendTransaction = new Method({
            name: 'sendTransaction',
            call: 'mc_sendTransaction',
            params: 1,
            inputFormatter: [formatters.inputTransactionFormatter]
          });

          var signTransaction = new Method({
            name: 'signTransaction',
            call: 'mc_signTransaction',
            params: 1,
            inputFormatter: [formatters.inputTransactionFormatter]
          });

          var sign = new Method({
            name: 'sign',
            call: 'mc_sign',
            params: 2,
            inputFormatter: [formatters.inputAddressFormatter, null]
          });

          var call = new Method({
            name: 'call',
            call: 'mc_call',
            params: 2,
            inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]
          });

          var estimateGas = new Method({
            name: 'estimateGas',
            call: 'mc_estimateGas',
            params: 1,
            inputFormatter: [formatters.inputCallFormatter],
            outputFormatter: utils.toDecimal
          });

          var submitWork = new Method({
            name: 'submitWork',
            call: 'mc_submitWork',
            params: 3
          });

          var getWork = new Method({
            name: 'getWork',
            call: 'mc_getWork',
            params: 0
          });

          return [
            getBalance,
            getStorageAt,
            getCode,
            getBlock,
            getUncle,
            getBlockTransactionCount,
            getBlockUncleCount,
            getTransaction,
            getTransactionFromBlock,
            getTransactionReceipt,
            getTransactionCount,
            call,
            estimateGas,
            sendRawTransaction,
            signTransaction,
            sendTransaction,
            sign,
            submitWork,
            getWork
          ];
        };


        var properties = function () {
          return [
            new Property({
              name: 'coinbase',
              getter: 'mc_coinbase'
            }),
            new Property({
              name: 'mining',
              getter: 'mc_mining'
            }),
            new Property({
              name: 'hashrate',
              getter: 'mc_hashrate',
              outputFormatter: utils.toDecimal
            }),
            new Property({
              name: 'syncing',
              getter: 'mc_syncing',
              outputFormatter: formatters.outputSyncingFormatter
            }),
            new Property({
              name: 'gasPrice',
              getter: 'mc_gasPrice',
              outputFormatter: formatters.outputBigNumberFormatter
            }),
            new Property({
              name: 'accounts',
              getter: 'mc_accounts'
            }),
            new Property({
              name: 'blockNumber',
              getter: 'mc_blockNumber',
              outputFormatter: utils.toDecimal
            }),
            new Property({
              name: 'protocolVersion',
              getter: 'mc_protocolVersion'
            })
          ];
        };

        Mc.prototype.contract = function (abi) {
          var factory = new Contract(this, abi);
          return factory;
        };

        //TODO
        Mc.prototype.filter = function (options, callback, filterCreationErrorCallback) {
          return new Filter(options, 'mc', this._requestManager, watches.mc(), formatters.outputLogFormatter, callback, filterCreationErrorCallback);
        };

        Mc.prototype.namereg = function () {
          return this.contract(namereg.global.abi).at(namereg.global.address);
        };

        Mc.prototype.icapNamereg = function () {
          return this.contract(namereg.icap.abi).at(namereg.icap.address);
        };

        Mc.prototype.isSyncing = function (callback) {
          return new IsSyncing(this._requestManager, callback);
        };

        module.exports = Mc;


        /***/
}),
/* 249 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file contract.js
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2014
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var utils = __webpack_require__(0);
        var coder = __webpack_require__(23);
        var SolidityEvent = __webpack_require__(92);
        var SolidityFunction = __webpack_require__(209);
        var AllEvents = __webpack_require__(474);

        /**
         * Should be called to encode constructor params
         *
         * @method encodeConstructorParams
         * @param {Array} abi
         * @param {Array} constructor params
         */
        var encodeConstructorParams = function (abi, params) {
          return abi.filter(function (json) {
            return json.type === 'constructor' && json.inputs.length === params.length;
          }).map(function (json) {
            return json.inputs.map(function (input) {
              return input.type;
            });
          }).map(function (types) {
            return coder.encodeParams(types, params);
          })[0] || '';
        };

        /**
         * Should be called to add functions to contract object
         *
         * @method addFunctionsToContract
         * @param {Contract} contract
         * @param {Array} abi
         */
        var addFunctionsToContract = function (contract) {
          // console.log("addFunctionsToContract:", contract);
          // contract.abi.filter(function (json) {
          contract.abi.filter(function (json) {
            return json.type === 'function';
          }).map(function (json) {
            return new SolidityFunction(contract._mc, json, contract.address);
          }).forEach(function (f) {
            f.attachToContract(contract);
          });
        };

        /**
         * Should be called to add events to contract object
         *
         * @method addEventsToContract
         * @param {Contract} contract
         * @param {Array} abi
         */
        var addEventsToContract = function (contract) {
          var events = contract.abi.filter(function (json) {
            return json.type === 'event';
          });

          var All = new AllEvents(contract._mc._requestManager, events, contract.address);
          All.attachToContract(contract);

          events.map(function (json) {
            return new SolidityEvent(contract._mc._requestManager, json, contract.address);
          }).forEach(function (e) {
            e.attachToContract(contract);
          });
        };


        /**
         * Should be called to check if the contract gets properly deployed on the blockchain.
         *
         * @method checkForContractAddress
         * @param {Object} contract
         * @param {Function} callback
         * @returns {Undefined}
         */
        var checkForContractAddress = function (contract, callback) {
          var count = 0,
            callbackFired = false;

          // wait for receipt
          var filter = contract._mc.filter('latest', function (e) {
            if (!e && !callbackFired) {
              count++;

              // stop watching after 50 blocks (timeout)
              if (count > 50) {

                filter.stopWatching(function () { });
                callbackFired = true;

                if (callback)
                  callback(new Error('Contract transaction couldn\'t be found after 50 blocks'));
                else
                  throw new Error('Contract transaction couldn\'t be found after 50 blocks');


              } else {

                contract._mc.getTransactionReceipt(contract.transactionHash, function (e, receipt) {
                  if (receipt && !callbackFired) {

                    contract._mc.getCode(receipt.contractAddress, function (e, code) {
                      /*jshint maxcomplexity: 6 */

                      if (callbackFired || !code)
                        return;

                      filter.stopWatching(function () { });
                      callbackFired = true;

                      if (code.length > 3) {

                        contract.address = receipt.contractAddress;

                        // attach events and methods again after we have
                        addFunctionsToContract(contract);
                        addEventsToContract(contract);

                        // call callback for the second time
                        if (callback)
                          callback(null, contract);

                      } else {
                        if (callback)
                          callback(new Error('The contract code couldn\'t be stored, please check your gas amount.'));
                        else
                          throw new Error('The contract code couldn\'t be stored, please check your gas amount.');
                      }
                    });
                  }
                });
              }
            }
          });
        };

        /**
         * Should be called to create new ContractFactory instance
         *
         * @method ContractFactory
         * @param {Array} abi
         */
        var ContractFactory = function (mc, abi) {
          this.mc = mc;
          this.abi = abi;

          /**
           * Should be called to create new contract on a blockchain
           *
           * @method new
           * @param {Any} contract constructor param1 (optional)
           * @param {Any} contract constructor param2 (optional)
           * @param {Object} contract transaction object (required)
           * @param {Function} callback
           * @returns {contract} returns contract instance
           */
          this.new = function () {
            /*jshint maxcomplexity: 7 */

            var contract = new Contract(this.mc, this.abi);

            // parse arguments
            var options = {}; // required!
            var callback;

            var args = Array.prototype.slice.call(arguments);
            if (utils.isFunction(args[args.length - 1])) {
              callback = args.pop();
            }

            //required input parameter as obj
            var last = args[args.length - 1];
            if (utils.isObject(last) && !utils.isArray(last)) {
              options = args.pop();
            }

            if (options.value > 0) {
              var constructorAbi = abi.filter(function (json) {
                return json.type === 'constructor' && json.inputs.length === args.length;
              })[0] || {};

              if (!constructorAbi.payable) {
                throw new Error('Cannot send value to non-payable constructor');
              }
            }

            var bytes = encodeConstructorParams(this.abi, args);
            options.data += bytes;

            if (callback) {

              // wait for the contract address adn check if the code was deployed
              this.mc.sendTransaction(options, function (err, hash) {
                if (err) {
                  callback(err);
                } else {
                  // add the transaction hash
                  contract.transactionHash = hash;

                  // call callback for the first time
                  callback(null, contract);

                  checkForContractAddress(contract, callback);
                }
              });
            } else {
              var hash = this.mc.sendTransaction(options);
              // add the transaction hash
              contract.transactionHash = hash;
              checkForContractAddress(contract);
            }

            return contract;
          };

          this.new.getData = this.getData.bind(this);
        };


        /**
         * Should be called to get access to existing contract on a blockchain
         *
         * @method at
         * @param {Address} contract address (required)
         * @param {Function} callback {optional)
         * @returns {Contract} returns contract if no callback was passed,
         * otherwise calls callback function (err, contract)
         * Possible errors:
         * 
         */
        ContractFactory.prototype.at = function (address, callback) {
          // console.log("Before at:", this.abi);
          var contract = new Contract(this.mc, this.abi, address);

          // this functions are not part of prototype,
          // because we dont want to spoil the interface
          addFunctionsToContract(contract);
          addEventsToContract(contract);

          if (callback) {
            callback(null, contract);
          }
          return contract;
        };

        /**
         * Gets the data, which is data to deploy plus constructor params
         *
         * @method getData
         */
        ContractFactory.prototype.getData = function () {
          var options = {}; // required!
          var args = Array.prototype.slice.call(arguments);

          var last = args[args.length - 1];
          if (utils.isObject(last) && !utils.isArray(last)) {
            options = args.pop();
          }

          var bytes = encodeConstructorParams(this.abi, args);
          options.data += bytes;

          return options.data;
        };

        /**
         * Should be called to create new contract instance
         *
         * @method Contract
         * @param {Array} abi
         * @param {Address} contract address
         */
        var Contract = function (mc, abi, address) {
          this._mc = mc;
          this.transactionHash = null;
          this.address = address;
          this.abi = abi;
        };

        module.exports = { ContractFactory: ContractFactory, Contract: Contract };


        /***/
}),
/* 250 */
/***/ (function (module, exports, __webpack_require__) {

        module.exports = {
          'chunk': __webpack_require__(251),
          'compact': __webpack_require__(256),
          'concat': __webpack_require__(257),
          'difference': __webpack_require__(260),
          'differenceBy': __webpack_require__(286),
          'differenceWith': __webpack_require__(311),
          'drop': __webpack_require__(312),
          'dropRight': __webpack_require__(313),
          'dropRightWhile': __webpack_require__(314),
          'dropWhile': __webpack_require__(315),
          'fill': __webpack_require__(316),
          'findIndex': __webpack_require__(320),
          'findLastIndex': __webpack_require__(321),
          'first': __webpack_require__(322),
          'flatten': __webpack_require__(166),
          'flattenDeep': __webpack_require__(323),
          'flattenDepth': __webpack_require__(324),
          'fromPairs': __webpack_require__(325),
          'head': __webpack_require__(165),
          'indexOf': __webpack_require__(326),
          'initial': __webpack_require__(327),
          'intersection': __webpack_require__(328),
          'intersectionBy': __webpack_require__(329),
          'intersectionWith': __webpack_require__(330),
          'join': __webpack_require__(331),
          'last': __webpack_require__(20),
          'lastIndexOf': __webpack_require__(332),
          'nth': __webpack_require__(334),
          'pull': __webpack_require__(336),
          'pullAll': __webpack_require__(167),
          'pullAllBy': __webpack_require__(338),
          'pullAllWith': __webpack_require__(339),
          'pullAt': __webpack_require__(340),
          'remove': __webpack_require__(342),
          'reverse': __webpack_require__(343),
          'slice': __webpack_require__(344),
          'sortedIndex': __webpack_require__(345),
          'sortedIndexBy': __webpack_require__(346),
          'sortedIndexOf': __webpack_require__(347),
          'sortedLastIndex': __webpack_require__(348),
          'sortedLastIndexBy': __webpack_require__(349),
          'sortedLastIndexOf': __webpack_require__(350),
          'sortedUniq': __webpack_require__(351),
          'sortedUniqBy': __webpack_require__(352),
          'tail': __webpack_require__(353),
          'take': __webpack_require__(354),
          'takeRight': __webpack_require__(355),
          'takeRightWhile': __webpack_require__(356),
          'takeWhile': __webpack_require__(357),
          'union': __webpack_require__(358),
          'unionBy': __webpack_require__(360),
          'unionWith': __webpack_require__(361),
          'uniq': __webpack_require__(362),
          'uniqBy': __webpack_require__(363),
          'uniqWith': __webpack_require__(364),
          'unzip': __webpack_require__(113),
          'unzipWith': __webpack_require__(173),
          'without': __webpack_require__(365),
          'xor': __webpack_require__(366),
          'xorBy': __webpack_require__(367),
          'xorWith': __webpack_require__(368),
          'zip': __webpack_require__(369),
          'zipObject': __webpack_require__(370),
          'zipObjectDeep': __webpack_require__(371),
          'zipWith': __webpack_require__(372)
        };


        /***/
}),
/* 251 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSlice = __webpack_require__(24),
          isIterateeCall = __webpack_require__(62),
          toInteger = __webpack_require__(5);

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeCeil = Math.ceil,
          nativeMax = Math.max;

        /**
         * Creates an array of elements split into groups the length of `size`.
         * If `array` can't be split evenly, the final chunk will be the remaining
         * elements.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to process.
         * @param {number} [size=1] The length of each chunk
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the new array of chunks.
         * @example
         *
         * _.chunk(['a', 'b', 'c', 'd'], 2);
         * // => [['a', 'b'], ['c', 'd']]
         *
         * _.chunk(['a', 'b', 'c', 'd'], 3);
         * // => [['a', 'b', 'c'], ['d']]
         */
        function chunk(array, size, guard) {
          if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
            size = 1;
          } else {
            size = nativeMax(toInteger(size), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size < 1) {
            return [];
          }
          var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

          while (index < length) {
            result[resIndex++] = baseSlice(array, index, (index += size));
          }
          return result;
        }

        module.exports = chunk;


        /***/
}),
/* 252 */
/***/ (function (module, exports, __webpack_require__) {

        var Symbol = __webpack_require__(48);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /** Built-in value references. */
        var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

          try {
            value[symToStringTag] = undefined;
            var unmasked = true;
          } catch (e) { }

          var result = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result;
        }

        module.exports = getRawTag;


        /***/
}),
/* 253 */
/***/ (function (module, exports) {

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }

        module.exports = objectToString;


        /***/
}),
/* 254 */
/***/ (function (module, exports, __webpack_require__) {

        var toNumber = __webpack_require__(255);

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0,
          MAX_INTEGER = 1.7976931348623157e+308;

        /**
         * Converts `value` to a finite number.
         *
         * @static
         * @memberOf _
         * @since 4.12.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted number.
         * @example
         *
         * _.toFinite(3.2);
         * // => 3.2
         *
         * _.toFinite(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toFinite(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toFinite('3.2');
         * // => 3.2
         */
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = (value < 0 ? -1 : 1);
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }

        module.exports = toFinite;


        /***/
}),
/* 255 */
/***/ (function (module, exports, __webpack_require__) {

        var isObject = __webpack_require__(9),
          isSymbol = __webpack_require__(34);

        /** Used as references for various `Number` constants. */
        var NAN = 0 / 0;

        /** Used to match leading and trailing whitespace. */
        var reTrim = /^\s+|\s+$/g;

        /** Used to detect bad signed hexadecimal string values. */
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

        /** Used to detect binary string values. */
        var reIsBinary = /^0b[01]+$/i;

        /** Used to detect octal string values. */
        var reIsOctal = /^0o[0-7]+$/i;

        /** Built-in method references without a dependency on `root`. */
        var freeParseInt = parseInt;

        /**
         * Converts `value` to a number.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to process.
         * @returns {number} Returns the number.
         * @example
         *
         * _.toNumber(3.2);
         * // => 3.2
         *
         * _.toNumber(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toNumber(Infinity);
         * // => Infinity
         *
         * _.toNumber('3.2');
         * // => 3.2
         */
        function toNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
            value = isObject(other) ? (other + '') : other;
          }
          if (typeof value != 'string') {
            return value === 0 ? value : +value;
          }
          value = value.replace(reTrim, '');
          var isBinary = reIsBinary.test(value);
          return (isBinary || reIsOctal.test(value))
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : (reIsBadHex.test(value) ? NAN : +value);
        }

        module.exports = toNumber;


        /***/
}),
/* 256 */
/***/ (function (module, exports) {

        /**
         * Creates an array with all falsey values removed. The values `false`, `null`,
         * `0`, `""`, `undefined`, and `NaN` are falsey.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to compact.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.compact([0, 1, false, 2, '', 3]);
         * // => [1, 2, 3]
         */
        function compact(array) {
          var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

          while (++index < length) {
            var value = array[index];
            if (value) {
              result[resIndex++] = value;
            }
          }
          return result;
        }

        module.exports = compact;


        /***/
}),
/* 257 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayPush = __webpack_require__(74),
          baseFlatten = __webpack_require__(19),
          copyArray = __webpack_require__(40),
          isArray = __webpack_require__(4);

        /**
         * Creates a new array concatenating `array` with any additional arrays
         * and/or values.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to concatenate.
         * @param {...*} [values] The values to concatenate.
         * @returns {Array} Returns the new concatenated array.
         * @example
         *
         * var array = [1];
         * var other = _.concat(array, 2, [3], [[4]]);
         *
         * console.log(other);
         * // => [1, 2, 3, [4]]
         *
         * console.log(array);
         * // => [1]
         */
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array(length - 1),
            array = arguments[0],
            index = length;

          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }

        module.exports = concat;


        /***/
}),
/* 258 */
/***/ (function (module, exports, __webpack_require__) {

        var Symbol = __webpack_require__(48),
          isArguments = __webpack_require__(75),
          isArray = __webpack_require__(4);

        /** Built-in value references. */
        var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

        /**
         * Checks if `value` is a flattenable `arguments` object or array.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
         */
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) ||
            !!(spreadableSymbol && value && value[spreadableSymbol]);
        }

        module.exports = isFlattenable;


        /***/
}),
/* 259 */
/***/ (function (module, exports, __webpack_require__) {

        var baseGetTag = __webpack_require__(39),
          isObjectLike = __webpack_require__(14);

        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]';

        /**
         * The base implementation of `_.isArguments`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         */
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }

        module.exports = baseIsArguments;


        /***/
}),
/* 260 */
/***/ (function (module, exports, __webpack_require__) {

        var baseDifference = __webpack_require__(64),
          baseFlatten = __webpack_require__(19),
          baseRest = __webpack_require__(2),
          isArrayLikeObject = __webpack_require__(12);

        /**
         * Creates an array of `array` values not included in the other given arrays
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. The order and references of result values are
         * determined by the first array.
         *
         * **Note:** Unlike `_.pullAll`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.without, _.xor
         * @example
         *
         * _.difference([2, 1], [2, 3]);
         * // => [1]
         */
        var difference = baseRest(function (array, values) {
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
            : [];
        });

        module.exports = difference;


        /***/
}),
/* 261 */
/***/ (function (module, exports, __webpack_require__) {

        var Hash = __webpack_require__(262),
          ListCache = __webpack_require__(78),
          Map = __webpack_require__(98);

        /**
         * Removes all key-value entries from the map.
         *
         * @private
         * @name clear
         * @memberOf MapCache
         */
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            'hash': new Hash,
            'map': new (Map || ListCache),
            'string': new Hash
          };
        }

        module.exports = mapCacheClear;


        /***/
}),
/* 262 */
/***/ (function (module, exports, __webpack_require__) {

        var hashClear = __webpack_require__(263),
          hashDelete = __webpack_require__(268),
          hashGet = __webpack_require__(269),
          hashHas = __webpack_require__(270),
          hashSet = __webpack_require__(271);

        /**
         * Creates a hash object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Hash(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;

        module.exports = Hash;


        /***/
}),
/* 263 */
/***/ (function (module, exports, __webpack_require__) {

        var nativeCreate = __webpack_require__(77);

        /**
         * Removes all key-value entries from the hash.
         *
         * @private
         * @name clear
         * @memberOf Hash
         */
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }

        module.exports = hashClear;


        /***/
}),
/* 264 */
/***/ (function (module, exports, __webpack_require__) {

        var isFunction = __webpack_require__(38),
          isMasked = __webpack_require__(265),
          isObject = __webpack_require__(9),
          toSource = __webpack_require__(140);

        /**
         * Used to match `RegExp`
         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
         */
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

        /** Used to detect host constructors (Safari). */
        var reIsHostCtor = /^\[object .+?Constructor\]$/;

        /** Used for built-in method references. */
        var funcProto = Function.prototype,
          objectProto = Object.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Used to detect if a method is native. */
        var reIsNative = RegExp('^' +
          funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
            .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
        );

        /**
         * The base implementation of `_.isNative` without bad shim checks.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         */
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }

        module.exports = baseIsNative;


        /***/
}),
/* 265 */
/***/ (function (module, exports, __webpack_require__) {

        var coreJsData = __webpack_require__(266);

        /** Used to detect methods masquerading as native. */
        var maskSrcKey = (function () {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
          return uid ? ('Symbol(src)_1.' + uid) : '';
        }());

        /**
         * Checks if `func` has its source masked.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` is masked, else `false`.
         */
        function isMasked(func) {
          return !!maskSrcKey && (maskSrcKey in func);
        }

        module.exports = isMasked;


        /***/
}),
/* 266 */
/***/ (function (module, exports, __webpack_require__) {

        var root = __webpack_require__(8);

        /** Used to detect overreaching core-js shims. */
        var coreJsData = root['__core-js_shared__'];

        module.exports = coreJsData;


        /***/
}),
/* 267 */
/***/ (function (module, exports) {

        /**
         * Gets the value at `key` of `object`.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function getValue(object, key) {
          return object == null ? undefined : object[key];
        }

        module.exports = getValue;


        /***/
}),
/* 268 */
/***/ (function (module, exports) {

        /**
         * Removes `key` and its value from the hash.
         *
         * @private
         * @name delete
         * @memberOf Hash
         * @param {Object} hash The hash to modify.
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function hashDelete(key) {
          var result = this.has(key) && delete this.__data__[key];
          this.size -= result ? 1 : 0;
          return result;
        }

        module.exports = hashDelete;


        /***/
}),
/* 269 */
/***/ (function (module, exports, __webpack_require__) {

        var nativeCreate = __webpack_require__(77);

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__';

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Gets the hash value for `key`.
         *
         * @private
         * @name get
         * @memberOf Hash
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? undefined : result;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }

        module.exports = hashGet;


        /***/
}),
/* 270 */
/***/ (function (module, exports, __webpack_require__) {

        var nativeCreate = __webpack_require__(77);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Checks if a hash value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Hash
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
        }

        module.exports = hashHas;


        /***/
}),
/* 271 */
/***/ (function (module, exports, __webpack_require__) {

        var nativeCreate = __webpack_require__(77);

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__';

        /**
         * Sets the hash `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Hash
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the hash instance.
         */
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
          return this;
        }

        module.exports = hashSet;


        /***/
}),
/* 272 */
/***/ (function (module, exports) {

        /**
         * Removes all key-value entries from the list cache.
         *
         * @private
         * @name clear
         * @memberOf ListCache
         */
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }

        module.exports = listCacheClear;


        /***/
}),
/* 273 */
/***/ (function (module, exports, __webpack_require__) {

        var assocIndexOf = __webpack_require__(79);

        /** Used for built-in method references. */
        var arrayProto = Array.prototype;

        /** Built-in value references. */
        var splice = arrayProto.splice;

        /**
         * Removes `key` and its value from the list cache.
         *
         * @private
         * @name delete
         * @memberOf ListCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function listCacheDelete(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);

          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }

        module.exports = listCacheDelete;


        /***/
}),
/* 274 */
/***/ (function (module, exports, __webpack_require__) {

        var assocIndexOf = __webpack_require__(79);

        /**
         * Gets the list cache value for `key`.
         *
         * @private
         * @name get
         * @memberOf ListCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function listCacheGet(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);

          return index < 0 ? undefined : data[index][1];
        }

        module.exports = listCacheGet;


        /***/
}),
/* 275 */
/***/ (function (module, exports, __webpack_require__) {

        var assocIndexOf = __webpack_require__(79);

        /**
         * Checks if a list cache value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf ListCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }

        module.exports = listCacheHas;


        /***/
}),
/* 276 */
/***/ (function (module, exports, __webpack_require__) {

        var assocIndexOf = __webpack_require__(79);

        /**
         * Sets the list cache `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf ListCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the list cache instance.
         */
        function listCacheSet(key, value) {
          var data = this.__data__,
            index = assocIndexOf(data, key);

          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }

        module.exports = listCacheSet;


        /***/
}),
/* 277 */
/***/ (function (module, exports, __webpack_require__) {

        var getMapData = __webpack_require__(80);

        /**
         * Removes `key` and its value from the map.
         *
         * @private
         * @name delete
         * @memberOf MapCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function mapCacheDelete(key) {
          var result = getMapData(this, key)['delete'](key);
          this.size -= result ? 1 : 0;
          return result;
        }

        module.exports = mapCacheDelete;


        /***/
}),
/* 278 */
/***/ (function (module, exports) {

        /**
         * Checks if `value` is suitable for use as unique object key.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
         */
        function isKeyable(value) {
          var type = typeof value;
          return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
            ? (value !== '__proto__')
            : (value === null);
        }

        module.exports = isKeyable;


        /***/
}),
/* 279 */
/***/ (function (module, exports, __webpack_require__) {

        var getMapData = __webpack_require__(80);

        /**
         * Gets the map value for `key`.
         *
         * @private
         * @name get
         * @memberOf MapCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }

        module.exports = mapCacheGet;


        /***/
}),
/* 280 */
/***/ (function (module, exports, __webpack_require__) {

        var getMapData = __webpack_require__(80);

        /**
         * Checks if a map value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf MapCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }

        module.exports = mapCacheHas;


        /***/
}),
/* 281 */
/***/ (function (module, exports, __webpack_require__) {

        var getMapData = __webpack_require__(80);

        /**
         * Sets the map `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf MapCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the map cache instance.
         */
        function mapCacheSet(key, value) {
          var data = getMapData(this, key),
            size = data.size;

          data.set(key, value);
          this.size += data.size == size ? 0 : 1;
          return this;
        }

        module.exports = mapCacheSet;


        /***/
}),
/* 282 */
/***/ (function (module, exports) {

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__';

        /**
         * Adds `value` to the array cache.
         *
         * @private
         * @name add
         * @memberOf SetCache
         * @alias push
         * @param {*} value The value to cache.
         * @returns {Object} Returns the cache instance.
         */
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }

        module.exports = setCacheAdd;


        /***/
}),
/* 283 */
/***/ (function (module, exports) {

        /**
         * Checks if `value` is in the array cache.
         *
         * @private
         * @name has
         * @memberOf SetCache
         * @param {*} value The value to search for.
         * @returns {number} Returns `true` if `value` is found, else `false`.
         */
        function setCacheHas(value) {
          return this.__data__.has(value);
        }

        module.exports = setCacheHas;


        /***/
}),
/* 284 */
/***/ (function (module, exports) {

        /**
         * A specialized version of `_.indexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1,
            length = array.length;

          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }
          return -1;
        }

        module.exports = strictIndexOf;


        /***/
}),
/* 285 */
/***/ (function (module, exports, __webpack_require__) {

        var constant = __webpack_require__(143),
          defineProperty = __webpack_require__(144),
          identity = __webpack_require__(42);

        /**
         * The base implementation of `setToString` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var baseSetToString = !defineProperty ? identity : function (func, string) {
          return defineProperty(func, 'toString', {
            'configurable': true,
            'enumerable': false,
            'value': constant(string),
            'writable': true
          });
        };

        module.exports = baseSetToString;


        /***/
}),
/* 286 */
/***/ (function (module, exports, __webpack_require__) {

        var baseDifference = __webpack_require__(64),
          baseFlatten = __webpack_require__(19),
          baseIteratee = __webpack_require__(1),
          baseRest = __webpack_require__(2),
          isArrayLikeObject = __webpack_require__(12),
          last = __webpack_require__(20);

        /**
         * This method is like `_.difference` except that it accepts `iteratee` which
         * is invoked for each element of `array` and `values` to generate the criterion
         * by which they're compared. The order and references of result values are
         * determined by the first array. The iteratee is invoked with one argument:
         * (value).
         *
         * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
         * // => [{ 'x': 2 }]
         */
        var differenceBy = baseRest(function (array, values) {
          var iteratee = last(values);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined;
          }
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2))
            : [];
        });

        module.exports = differenceBy;


        /***/
}),
/* 287 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIsMatch = __webpack_require__(288),
          getMatchData = __webpack_require__(303),
          matchesStrictComparable = __webpack_require__(160);

        /**
         * The base implementation of `_.matches` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function (object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }

        module.exports = baseMatches;


        /***/
}),
/* 288 */
/***/ (function (module, exports, __webpack_require__) {

        var Stack = __webpack_require__(84),
          baseIsEqual = __webpack_require__(146);

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        /**
         * The base implementation of `_.isMatch` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Array} matchData The property names, values, and compare flags to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         */
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

          if (object == null) {
            return !length;
          }
          object = Object(object);
          while (index--) {
            var data = matchData[index];
            if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0],
              objValue = object[key],
              srcValue = data[1];

            if (noCustomizer && data[2]) {
              if (objValue === undefined && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack;
              if (customizer) {
                var result = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
                return false;
              }
            }
          }
          return true;
        }

        module.exports = baseIsMatch;


        /***/
}),
/* 289 */
/***/ (function (module, exports, __webpack_require__) {

        var ListCache = __webpack_require__(78);

        /**
         * Removes all key-value entries from the stack.
         *
         * @private
         * @name clear
         * @memberOf Stack
         */
        function stackClear() {
          this.__data__ = new ListCache;
          this.size = 0;
        }

        module.exports = stackClear;


        /***/
}),
/* 290 */
/***/ (function (module, exports) {

        /**
         * Removes `key` and its value from the stack.
         *
         * @private
         * @name delete
         * @memberOf Stack
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function stackDelete(key) {
          var data = this.__data__,
            result = data['delete'](key);

          this.size = data.size;
          return result;
        }

        module.exports = stackDelete;


        /***/
}),
/* 291 */
/***/ (function (module, exports) {

        /**
         * Gets the stack value for `key`.
         *
         * @private
         * @name get
         * @memberOf Stack
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function stackGet(key) {
          return this.__data__.get(key);
        }

        module.exports = stackGet;


        /***/
}),
/* 292 */
/***/ (function (module, exports) {

        /**
         * Checks if a stack value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Stack
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function stackHas(key) {
          return this.__data__.has(key);
        }

        module.exports = stackHas;


        /***/
}),
/* 293 */
/***/ (function (module, exports, __webpack_require__) {

        var ListCache = __webpack_require__(78),
          Map = __webpack_require__(98),
          MapCache = __webpack_require__(97);

        /** Used as the size to enable large array optimizations. */
        var LARGE_ARRAY_SIZE = 200;

        /**
         * Sets the stack `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Stack
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the stack cache instance.
         */
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }

        module.exports = stackSet;


        /***/
}),
/* 294 */
/***/ (function (module, exports, __webpack_require__) {

        var Stack = __webpack_require__(84),
          equalArrays = __webpack_require__(147),
          equalByTag = __webpack_require__(296),
          equalObjects = __webpack_require__(297),
          getTag = __webpack_require__(52),
          isArray = __webpack_require__(4),
          isBuffer = __webpack_require__(65),
          isTypedArray = __webpack_require__(85);

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1;

        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]',
          arrayTag = '[object Array]',
          objectTag = '[object Object]';

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * A specialized version of `baseIsEqual` for arrays and objects which performs
         * deep comparisons and tracks traversed objects enabling objects with circular
         * references to be compared.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} [stack] Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);

          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;

          var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack);
            return (objIsArr || isTypedArray(object))
              ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
              : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;

              stack || (stack = new Stack);
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack);
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }

        module.exports = baseIsEqualDeep;


        /***/
}),
/* 295 */
/***/ (function (module, exports) {

        /**
         * A specialized version of `_.some` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function arraySome(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length;

          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }
          return false;
        }

        module.exports = arraySome;


        /***/
}),
/* 296 */
/***/ (function (module, exports, __webpack_require__) {

        var Symbol = __webpack_require__(48),
          Uint8Array = __webpack_require__(148),
          eq = __webpack_require__(30),
          equalArrays = __webpack_require__(147),
          mapToArray = __webpack_require__(149),
          setToArray = __webpack_require__(102);

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        /** `Object#toString` result references. */
        var boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          errorTag = '[object Error]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          symbolTag = '[object Symbol]';

        var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]';

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

        /**
         * A specialized version of `baseIsEqualDeep` for comparing objects of
         * the same `toStringTag`.
         *
         * **Note:** This function only supports comparing values with tags of
         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {string} tag The `toStringTag` of the objects to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if ((object.byteLength != other.byteLength) ||
                (object.byteOffset != other.byteOffset)) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;

            case arrayBufferTag:
              if ((object.byteLength != other.byteLength) ||
                !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                return false;
              }
              return true;

            case boolTag:
            case dateTag:
            case numberTag:
              // Coerce booleans to `1` or `0` and dates to milliseconds.
              // Invalid dates are coerced to `NaN`.
              return eq(+object, +other);

            case errorTag:
              return object.name == other.name && object.message == other.message;

            case regexpTag:
            case stringTag:
              // Coerce regexes to strings and treat strings, primitives and objects,
              // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
              // for more details.
              return object == (other + '');

            case mapTag:
              var convert = mapToArray;

            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);

              if (object.size != other.size && !isPartial) {
                return false;
              }
              // Assume cyclic values are equal.
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;

              // Recursively compare objects (susceptible to call stack limits).
              stack.set(object, other);
              var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack['delete'](object);
              return result;

            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }

        module.exports = equalByTag;


        /***/
}),
/* 297 */
/***/ (function (module, exports, __webpack_require__) {

        var getAllKeys = __webpack_require__(150);

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1;

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * A specialized version of `baseIsEqualDeep` for objects with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked && stack.get(other)) {
            return stacked == other;
          }
          var result = true;
          stack.set(object, other);
          stack.set(other, object);

          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
              othValue = other[key];

            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, objValue, key, other, object, stack)
                : customizer(objValue, othValue, key, object, other, stack);
            }
            // Recursively compare objects (susceptible to call stack limits).
            if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
              result = false;
              break;
            }
            skipCtor || (skipCtor = key == 'constructor');
          }
          if (result && !skipCtor) {
            var objCtor = object.constructor,
              othCtor = other.constructor;

            // Non `Object` object instances with different constructors are not equal.
            if (objCtor != othCtor &&
              ('constructor' in object && 'constructor' in other) &&
              !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                typeof othCtor == 'function' && othCtor instanceof othCtor)) {
              result = false;
            }
          }
          stack['delete'](object);
          stack['delete'](other);
          return result;
        }

        module.exports = equalObjects;


        /***/
}),
/* 298 */
/***/ (function (module, exports) {

        /**
         * This method returns `false`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `false`.
         * @example
         *
         * _.times(2, _.stubFalse);
         * // => [false, false]
         */
        function stubFalse() {
          return false;
        }

        module.exports = stubFalse;


        /***/
}),
/* 299 */
/***/ (function (module, exports, __webpack_require__) {

        var baseGetTag = __webpack_require__(39),
          isLength = __webpack_require__(96),
          isObjectLike = __webpack_require__(14);

        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]',
          arrayTag = '[object Array]',
          boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          errorTag = '[object Error]',
          funcTag = '[object Function]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          objectTag = '[object Object]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          weakMapTag = '[object WeakMap]';

        var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]';

        /** Used to identify `toStringTag` values of typed arrays. */
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
          typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
          typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
          typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
          typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
          typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
          typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
          typedArrayTags[errorTag] = typedArrayTags[funcTag] =
          typedArrayTags[mapTag] = typedArrayTags[numberTag] =
          typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
          typedArrayTags[setTag] = typedArrayTags[stringTag] =
          typedArrayTags[weakMapTag] = false;

        /**
         * The base implementation of `_.isTypedArray` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         */
        function baseIsTypedArray(value) {
          return isObjectLike(value) &&
            isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }

        module.exports = baseIsTypedArray;


        /***/
}),
/* 300 */
/***/ (function (module, exports, __webpack_require__) {

        var overArg = __webpack_require__(156);

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeKeys = overArg(Object.keys, Object);

        module.exports = nativeKeys;


        /***/
}),
/* 301 */
/***/ (function (module, exports, __webpack_require__) {

        var getNative = __webpack_require__(41),
          root = __webpack_require__(8);

        /* Built-in method references that are verified to be native. */
        var DataView = getNative(root, 'DataView');

        module.exports = DataView;


        /***/
}),
/* 302 */
/***/ (function (module, exports, __webpack_require__) {

        var getNative = __webpack_require__(41),
          root = __webpack_require__(8);

        /* Built-in method references that are verified to be native. */
        var Promise = getNative(root, 'Promise');

        module.exports = Promise;


        /***/
}),
/* 303 */
/***/ (function (module, exports, __webpack_require__) {

        var isStrictComparable = __webpack_require__(159),
          keys = __webpack_require__(15);

        /**
         * Gets the property names, values, and compare flags of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the match data of `object`.
         */
        function getMatchData(object) {
          var result = keys(object),
            length = result.length;

          while (length--) {
            var key = result[length],
              value = object[key];

            result[length] = [key, value, isStrictComparable(value)];
          }
          return result;
        }

        module.exports = getMatchData;


        /***/
}),
/* 304 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIsEqual = __webpack_require__(146),
          get = __webpack_require__(105),
          hasIn = __webpack_require__(107),
          isKey = __webpack_require__(106),
          isStrictComparable = __webpack_require__(159),
          matchesStrictComparable = __webpack_require__(160),
          toKey = __webpack_require__(31);

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        /**
         * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
         *
         * @private
         * @param {string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function (object) {
            var objValue = get(object, path);
            return (objValue === undefined && objValue === srcValue)
              ? hasIn(object, path)
              : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }

        module.exports = baseMatchesProperty;


        /***/
}),
/* 305 */
/***/ (function (module, exports, __webpack_require__) {

        var memoize = __webpack_require__(306);

        /** Used as the maximum memoize cache size. */
        var MAX_MEMOIZE_SIZE = 500;

        /**
         * A specialized version of `_.memoize` which clears the memoized function's
         * cache when it exceeds `MAX_MEMOIZE_SIZE`.
         *
         * @private
         * @param {Function} func The function to have its output memoized.
         * @returns {Function} Returns the new memoized function.
         */
        function memoizeCapped(func) {
          var result = memoize(func, function (key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });

          var cache = result.cache;
          return result;
        }

        module.exports = memoizeCapped;


        /***/
}),
/* 306 */
/***/ (function (module, exports, __webpack_require__) {

        var MapCache = __webpack_require__(97);

        /** Error message constants. */
        var FUNC_ERROR_TEXT = 'Expected a function';

        /**
         * Creates a function that memoizes the result of `func`. If `resolver` is
         * provided, it determines the cache key for storing the result based on the
         * arguments provided to the memoized function. By default, the first argument
         * provided to the memoized function is used as the map cache key. The `func`
         * is invoked with the `this` binding of the memoized function.
         *
         * **Note:** The cache is exposed as the `cache` property on the memoized
         * function. Its creation may be customized by replacing the `_.memoize.Cache`
         * constructor with one whose instances implement the
         * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
         * method interface of `clear`, `delete`, `get`, `has`, and `set`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to have its output memoized.
         * @param {Function} [resolver] The function to resolve the cache key.
         * @returns {Function} Returns the new memoized function.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         * var other = { 'c': 3, 'd': 4 };
         *
         * var values = _.memoize(_.values);
         * values(object);
         * // => [1, 2]
         *
         * values(other);
         * // => [3, 4]
         *
         * object.a = 2;
         * values(object);
         * // => [1, 2]
         *
         * // Modify the result cache.
         * values.cache.set(object, ['a', 'b']);
         * values(object);
         * // => ['a', 'b']
         *
         * // Replace `_.memoize.Cache`.
         * _.memoize.Cache = WeakMap;
         */
        function memoize(func, resolver) {
          if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var memoized = function () {
            var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

            if (cache.has(key)) {
              return cache.get(key);
            }
            var result = func.apply(this, args);
            memoized.cache = cache.set(key, result) || cache;
            return result;
          };
          memoized.cache = new (memoize.Cache || MapCache);
          return memoized;
        }

        // Expose `MapCache`.
        memoize.Cache = MapCache;

        module.exports = memoize;


        /***/
}),
/* 307 */
/***/ (function (module, exports, __webpack_require__) {

        var Symbol = __webpack_require__(48),
          arrayMap = __webpack_require__(7),
          isArray = __webpack_require__(4),
          isSymbol = __webpack_require__(34);

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0;

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

        /**
         * The base implementation of `_.toString` which doesn't convert nullish
         * values to empty strings.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {string} Returns the string.
         */
        function baseToString(value) {
          // Exit early for strings to avoid a performance hit in some environments.
          if (typeof value == 'string') {
            return value;
          }
          if (isArray(value)) {
            // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + '';
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : '';
          }
          var result = (value + '');
          return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }

        module.exports = baseToString;


        /***/
}),
/* 308 */
/***/ (function (module, exports) {

        /**
         * The base implementation of `_.hasIn` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHasIn(object, key) {
          return object != null && key in Object(object);
        }

        module.exports = baseHasIn;


        /***/
}),
/* 309 */
/***/ (function (module, exports, __webpack_require__) {

        var baseProperty = __webpack_require__(164),
          basePropertyDeep = __webpack_require__(310),
          isKey = __webpack_require__(106),
          toKey = __webpack_require__(31);

        /**
         * Creates a function that returns the value at `path` of a given object.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': 2 } },
         *   { 'a': { 'b': 1 } }
         * ];
         *
         * _.map(objects, _.property('a.b'));
         * // => [2, 1]
         *
         * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
         * // => [1, 2]
         */
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }

        module.exports = property;


        /***/
}),
/* 310 */
/***/ (function (module, exports, __webpack_require__) {

        var baseGet = __webpack_require__(66);

        /**
         * A specialized version of `baseProperty` which supports deep paths.
         *
         * @private
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyDeep(path) {
          return function (object) {
            return baseGet(object, path);
          };
        }

        module.exports = basePropertyDeep;


        /***/
}),
/* 311 */
/***/ (function (module, exports, __webpack_require__) {

        var baseDifference = __webpack_require__(64),
          baseFlatten = __webpack_require__(19),
          baseRest = __webpack_require__(2),
          isArrayLikeObject = __webpack_require__(12),
          last = __webpack_require__(20);

        /**
         * This method is like `_.difference` except that it accepts `comparator`
         * which is invoked to compare elements of `array` to `values`. The order and
         * references of result values are determined by the first array. The comparator
         * is invoked with two arguments: (arrVal, othVal).
         *
         * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         *
         * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
         * // => [{ 'x': 2, 'y': 1 }]
         */
        var differenceWith = baseRest(function (array, values) {
          var comparator = last(values);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined;
          }
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
            : [];
        });

        module.exports = differenceWith;


        /***/
}),
/* 312 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSlice = __webpack_require__(24),
          toInteger = __webpack_require__(5);

        /**
         * Creates a slice of `array` with `n` elements dropped from the beginning.
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to drop.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.drop([1, 2, 3]);
         * // => [2, 3]
         *
         * _.drop([1, 2, 3], 2);
         * // => [3]
         *
         * _.drop([1, 2, 3], 5);
         * // => []
         *
         * _.drop([1, 2, 3], 0);
         * // => [1, 2, 3]
         */
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }

        module.exports = drop;


        /***/
}),
/* 313 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSlice = __webpack_require__(24),
          toInteger = __webpack_require__(5);

        /**
         * Creates a slice of `array` with `n` elements dropped from the end.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to drop.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.dropRight([1, 2, 3]);
         * // => [1, 2]
         *
         * _.dropRight([1, 2, 3], 2);
         * // => [1]
         *
         * _.dropRight([1, 2, 3], 5);
         * // => []
         *
         * _.dropRight([1, 2, 3], 0);
         * // => [1, 2, 3]
         */
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }

        module.exports = dropRight;


        /***/
}),
/* 314 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIteratee = __webpack_require__(1),
          baseWhile = __webpack_require__(87);

        /**
         * Creates a slice of `array` excluding elements dropped from the end.
         * Elements are dropped until `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.dropRightWhile(users, function(o) { return !o.active; });
         * // => objects for ['barney']
         *
         * // The `_.matches` iteratee shorthand.
         * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
         * // => objects for ['barney', 'fred']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.dropRightWhile(users, ['active', false]);
         * // => objects for ['barney']
         *
         * // The `_.property` iteratee shorthand.
         * _.dropRightWhile(users, 'active');
         * // => objects for ['barney', 'fred', 'pebbles']
         */
        function dropRightWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, baseIteratee(predicate, 3), true, true)
            : [];
        }

        module.exports = dropRightWhile;


        /***/
}),
/* 315 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIteratee = __webpack_require__(1),
          baseWhile = __webpack_require__(87);

        /**
         * Creates a slice of `array` excluding elements dropped from the beginning.
         * Elements are dropped until `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.dropWhile(users, function(o) { return !o.active; });
         * // => objects for ['pebbles']
         *
         * // The `_.matches` iteratee shorthand.
         * _.dropWhile(users, { 'user': 'barney', 'active': false });
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.dropWhile(users, ['active', false]);
         * // => objects for ['pebbles']
         *
         * // The `_.property` iteratee shorthand.
         * _.dropWhile(users, 'active');
         * // => objects for ['barney', 'fred', 'pebbles']
         */
        function dropWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, baseIteratee(predicate, 3), true)
            : [];
        }

        module.exports = dropWhile;


        /***/
}),
/* 316 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFill = __webpack_require__(317),
          isIterateeCall = __webpack_require__(62);

        /**
         * Fills elements of `array` with `value` from `start` up to, but not
         * including, `end`.
         *
         * **Note:** This method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Array
         * @param {Array} array The array to fill.
         * @param {*} value The value to fill `array` with.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _.fill(array, 'a');
         * console.log(array);
         * // => ['a', 'a', 'a']
         *
         * _.fill(Array(3), 2);
         * // => [2, 2, 2]
         *
         * _.fill([4, 6, 8, 10], '*', 1, 3);
         * // => [4, '*', '*', 10]
         */
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }

        module.exports = fill;


        /***/
}),
/* 317 */
/***/ (function (module, exports, __webpack_require__) {

        var toInteger = __webpack_require__(5),
          toLength = __webpack_require__(318);

        /**
         * The base implementation of `_.fill` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to fill.
         * @param {*} value The value to fill `array` with.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns `array`.
         */
        function baseFill(array, value, start, end) {
          var length = array.length;

          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : (length + start);
          }
          end = (end === undefined || end > length) ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }

        module.exports = baseFill;


        /***/
}),
/* 318 */
/***/ (function (module, exports, __webpack_require__) {

        var baseClamp = __webpack_require__(319),
          toInteger = __webpack_require__(5);

        /** Used as references for the maximum length and index of an array. */
        var MAX_ARRAY_LENGTH = 4294967295;

        /**
         * Converts `value` to an integer suitable for use as the length of an
         * array-like object.
         *
         * **Note:** This method is based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toLength(3.2);
         * // => 3
         *
         * _.toLength(Number.MIN_VALUE);
         * // => 0
         *
         * _.toLength(Infinity);
         * // => 4294967295
         *
         * _.toLength('3.2');
         * // => 3
         */
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }

        module.exports = toLength;


        /***/
}),
/* 319 */
/***/ (function (module, exports) {

        /**
         * The base implementation of `_.clamp` which doesn't coerce arguments.
         *
         * @private
         * @param {number} number The number to clamp.
         * @param {number} [lower] The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the clamped number.
         */
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }

        module.exports = baseClamp;


        /***/
}),
/* 320 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFindIndex = __webpack_require__(82),
          baseIteratee = __webpack_require__(1),
          toInteger = __webpack_require__(5);

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * This method is like `_.find` except that it returns the index of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.findIndex(users, function(o) { return o.user == 'barney'; });
         * // => 0
         *
         * // The `_.matches` iteratee shorthand.
         * _.findIndex(users, { 'user': 'fred', 'active': false });
         * // => 1
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findIndex(users, ['active', false]);
         * // => 0
         *
         * // The `_.property` iteratee shorthand.
         * _.findIndex(users, 'active');
         * // => 2
         */
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, baseIteratee(predicate, 3), index);
        }

        module.exports = findIndex;


        /***/
}),
/* 321 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFindIndex = __webpack_require__(82),
          baseIteratee = __webpack_require__(1),
          toInteger = __webpack_require__(5);

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max,
          nativeMin = Math.min;

        /**
         * This method is like `_.findIndex` except that it iterates over elements
         * of `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=array.length-1] The index to search from.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
         * // => 2
         *
         * // The `_.matches` iteratee shorthand.
         * _.findLastIndex(users, { 'user': 'barney', 'active': true });
         * // => 0
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findLastIndex(users, ['active', false]);
         * // => 2
         *
         * // The `_.property` iteratee shorthand.
         * _.findLastIndex(users, 'active');
         * // => 0
         */
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined) {
            index = toInteger(fromIndex);
            index = fromIndex < 0
              ? nativeMax(length + index, 0)
              : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, baseIteratee(predicate, 3), index, true);
        }

        module.exports = findLastIndex;


        /***/
}),
/* 322 */
/***/ (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(165);


        /***/
}),
/* 323 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFlatten = __webpack_require__(19);

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0;

        /**
         * Recursively flattens `array`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flattenDeep([1, [2, [3, [4]], 5]]);
         * // => [1, 2, 3, 4, 5]
         */
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }

        module.exports = flattenDeep;


        /***/
}),
/* 324 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFlatten = __webpack_require__(19),
          toInteger = __webpack_require__(5);

        /**
         * Recursively flatten `array` up to `depth` times.
         *
         * @static
         * @memberOf _
         * @since 4.4.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @param {number} [depth=1] The maximum recursion depth.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * var array = [1, [2, [3, [4]], 5]];
         *
         * _.flattenDepth(array, 1);
         * // => [1, 2, [3, [4]], 5]
         *
         * _.flattenDepth(array, 2);
         * // => [1, 2, 3, [4], 5]
         */
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }

        module.exports = flattenDepth;


        /***/
}),
/* 325 */
/***/ (function (module, exports) {

        /**
         * The inverse of `_.toPairs`; this method returns an object composed
         * from key-value `pairs`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} pairs The key-value pairs.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.fromPairs([['a', 1], ['b', 2]]);
         * // => { 'a': 1, 'b': 2 }
         */
        function fromPairs(pairs) {
          var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result = {};

          while (++index < length) {
            var pair = pairs[index];
            result[pair[0]] = pair[1];
          }
          return result;
        }

        module.exports = fromPairs;


        /***/
}),
/* 326 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIndexOf = __webpack_require__(99),
          toInteger = __webpack_require__(5);

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * Gets the index at which the first occurrence of `value` is found in `array`
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. If `fromIndex` is negative, it's used as the
         * offset from the end of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.indexOf([1, 2, 1, 2], 2);
         * // => 1
         *
         * // Search from the `fromIndex`.
         * _.indexOf([1, 2, 1, 2], 2, 2);
         * // => 3
         */
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }

        module.exports = indexOf;


        /***/
}),
/* 327 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSlice = __webpack_require__(24);

        /**
         * Gets all but the last element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.initial([1, 2, 3]);
         * // => [1, 2]
         */
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }

        module.exports = initial;


        /***/
}),
/* 328 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayMap = __webpack_require__(7),
          baseIntersection = __webpack_require__(108),
          baseRest = __webpack_require__(2),
          castArrayLikeObject = __webpack_require__(109);

        /**
         * Creates an array of unique values that are included in all given arrays
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. The order and references of result values are
         * determined by the first array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * _.intersection([2, 1], [2, 3]);
         * // => [2]
         */
        var intersection = baseRest(function (arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped)
            : [];
        });

        module.exports = intersection;


        /***/
}),
/* 329 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayMap = __webpack_require__(7),
          baseIntersection = __webpack_require__(108),
          baseIteratee = __webpack_require__(1),
          baseRest = __webpack_require__(2),
          castArrayLikeObject = __webpack_require__(109),
          last = __webpack_require__(20);

        /**
         * This method is like `_.intersection` except that it accepts `iteratee`
         * which is invoked for each element of each `arrays` to generate the criterion
         * by which they're compared. The order and references of result values are
         * determined by the first array. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [2.1]
         *
         * // The `_.property` iteratee shorthand.
         * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }]
         */
        var intersectionBy = baseRest(function (arrays) {
          var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

          if (iteratee === last(mapped)) {
            iteratee = undefined;
          } else {
            mapped.pop();
          }
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped, baseIteratee(iteratee, 2))
            : [];
        });

        module.exports = intersectionBy;


        /***/
}),
/* 330 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayMap = __webpack_require__(7),
          baseIntersection = __webpack_require__(108),
          baseRest = __webpack_require__(2),
          castArrayLikeObject = __webpack_require__(109),
          last = __webpack_require__(20);

        /**
         * This method is like `_.intersection` except that it accepts `comparator`
         * which is invoked to compare elements of `arrays`. The order and references
         * of result values are determined by the first array. The comparator is
         * invoked with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.intersectionWith(objects, others, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }]
         */
        var intersectionWith = baseRest(function (arrays) {
          var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

          comparator = typeof comparator == 'function' ? comparator : undefined;
          if (comparator) {
            mapped.pop();
          }
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped, undefined, comparator)
            : [];
        });

        module.exports = intersectionWith;


        /***/
}),
/* 331 */
/***/ (function (module, exports) {

        /** Used for built-in method references. */
        var arrayProto = Array.prototype;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeJoin = arrayProto.join;

        /**
         * Converts all elements in `array` into a string separated by `separator`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to convert.
         * @param {string} [separator=','] The element separator.
         * @returns {string} Returns the joined string.
         * @example
         *
         * _.join(['a', 'b', 'c'], '~');
         * // => 'a~b~c'
         */
        function join(array, separator) {
          return array == null ? '' : nativeJoin.call(array, separator);
        }

        module.exports = join;


        /***/
}),
/* 332 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFindIndex = __webpack_require__(82),
          baseIsNaN = __webpack_require__(141),
          strictLastIndexOf = __webpack_require__(333),
          toInteger = __webpack_require__(5);

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max,
          nativeMin = Math.min;

        /**
         * This method is like `_.indexOf` except that it iterates over elements of
         * `array` from right to left.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=array.length-1] The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.lastIndexOf([1, 2, 1, 2], 2);
         * // => 3
         *
         * // Search from the `fromIndex`.
         * _.lastIndexOf([1, 2, 1, 2], 2, 2);
         * // => 1
         */
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value
            ? strictLastIndexOf(array, value, index)
            : baseFindIndex(array, baseIsNaN, index, true);
        }

        module.exports = lastIndexOf;


        /***/
}),
/* 333 */
/***/ (function (module, exports) {

        /**
         * A specialized version of `_.lastIndexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function strictLastIndexOf(array, value, fromIndex) {
          var index = fromIndex + 1;
          while (index--) {
            if (array[index] === value) {
              return index;
            }
          }
          return index;
        }

        module.exports = strictLastIndexOf;


        /***/
}),
/* 334 */
/***/ (function (module, exports, __webpack_require__) {

        var baseNth = __webpack_require__(335),
          toInteger = __webpack_require__(5);

        /**
         * Gets the element at index `n` of `array`. If `n` is negative, the nth
         * element from the end is returned.
         *
         * @static
         * @memberOf _
         * @since 4.11.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=0] The index of the element to return.
         * @returns {*} Returns the nth element of `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'd'];
         *
         * _.nth(array, 1);
         * // => 'b'
         *
         * _.nth(array, -2);
         * // => 'c';
         */
        function nth(array, n) {
          return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
        }

        module.exports = nth;


        /***/
}),
/* 335 */
/***/ (function (module, exports, __webpack_require__) {

        var isIndex = __webpack_require__(33);

        /**
         * The base implementation of `_.nth` which doesn't coerce arguments.
         *
         * @private
         * @param {Array} array The array to query.
         * @param {number} n The index of the element to return.
         * @returns {*} Returns the nth element of `array`.
         */
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined;
        }

        module.exports = baseNth;


        /***/
}),
/* 336 */
/***/ (function (module, exports, __webpack_require__) {

        var baseRest = __webpack_require__(2),
          pullAll = __webpack_require__(167);

        /**
         * Removes all given values from `array` using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
         * to remove elements from an array by predicate.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {...*} [values] The values to remove.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
         *
         * _.pull(array, 'a', 'c');
         * console.log(array);
         * // => ['b', 'b']
         */
        var pull = baseRest(pullAll);

        module.exports = pull;


        /***/
}),
/* 337 */
/***/ (function (module, exports) {

        /**
         * This function is like `baseIndexOf` except that it accepts a comparator.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @param {Function} comparator The comparator invoked per element.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index = fromIndex - 1,
            length = array.length;

          while (++index < length) {
            if (comparator(array[index], value)) {
              return index;
            }
          }
          return -1;
        }

        module.exports = baseIndexOfWith;


        /***/
}),
/* 338 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIteratee = __webpack_require__(1),
          basePullAll = __webpack_require__(110);

        /**
         * This method is like `_.pullAll` except that it accepts `iteratee` which is
         * invoked for each element of `array` and `values` to generate the criterion
         * by which they're compared. The iteratee is invoked with one argument: (value).
         *
         * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
         *
         * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
         * console.log(array);
         * // => [{ 'x': 2 }]
         */
        function pullAllBy(array, values, iteratee) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values, baseIteratee(iteratee, 2))
            : array;
        }

        module.exports = pullAllBy;


        /***/
}),
/* 339 */
/***/ (function (module, exports, __webpack_require__) {

        var basePullAll = __webpack_require__(110);

        /**
         * This method is like `_.pullAll` except that it accepts `comparator` which
         * is invoked to compare elements of `array` to `values`. The comparator is
         * invoked with two arguments: (arrVal, othVal).
         *
         * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
         *
         * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
         * console.log(array);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
         */
        function pullAllWith(array, values, comparator) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values, undefined, comparator)
            : array;
        }

        module.exports = pullAllWith;


        /***/
}),
/* 340 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayMap = __webpack_require__(7),
          baseAt = __webpack_require__(168),
          basePullAt = __webpack_require__(169),
          compareAscending = __webpack_require__(341),
          flatRest = __webpack_require__(67),
          isIndex = __webpack_require__(33);

        /**
         * Removes elements from `array` corresponding to `indexes` and returns an
         * array of removed elements.
         *
         * **Note:** Unlike `_.at`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {...(number|number[])} [indexes] The indexes of elements to remove.
         * @returns {Array} Returns the new array of removed elements.
         * @example
         *
         * var array = ['a', 'b', 'c', 'd'];
         * var pulled = _.pullAt(array, [1, 3]);
         *
         * console.log(array);
         * // => ['a', 'c']
         *
         * console.log(pulled);
         * // => ['b', 'd']
         */
        var pullAt = flatRest(function (array, indexes) {
          var length = array == null ? 0 : array.length,
            result = baseAt(array, indexes);

          basePullAt(array, arrayMap(indexes, function (index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));

          return result;
        });

        module.exports = pullAt;


        /***/
}),
/* 341 */
/***/ (function (module, exports, __webpack_require__) {

        var isSymbol = __webpack_require__(34);

        /**
         * Compares values to sort them in ascending order.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {number} Returns the sort order indicator for `value`.
         */
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);

            var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

            if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
              (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
              (valIsNull && othIsDefined && othIsReflexive) ||
              (!valIsDefined && othIsReflexive) ||
              !valIsReflexive) {
              return 1;
            }
            if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
              (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
              (othIsNull && valIsDefined && valIsReflexive) ||
              (!othIsDefined && valIsReflexive) ||
              !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }

        module.exports = compareAscending;


        /***/
}),
/* 342 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIteratee = __webpack_require__(1),
          basePullAt = __webpack_require__(169);

        /**
         * Removes all elements from `array` that `predicate` returns truthy for
         * and returns an array of the removed elements. The predicate is invoked
         * with three arguments: (value, index, array).
         *
         * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
         * to pull elements from an array by value.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new array of removed elements.
         * @example
         *
         * var array = [1, 2, 3, 4];
         * var evens = _.remove(array, function(n) {
         *   return n % 2 == 0;
         * });
         *
         * console.log(array);
         * // => [1, 3]
         *
         * console.log(evens);
         * // => [2, 4]
         */
        function remove(array, predicate) {
          var result = [];
          if (!(array && array.length)) {
            return result;
          }
          var index = -1,
            indexes = [],
            length = array.length;

          predicate = baseIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result;
        }

        module.exports = remove;


        /***/
}),
/* 343 */
/***/ (function (module, exports) {

        /** Used for built-in method references. */
        var arrayProto = Array.prototype;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeReverse = arrayProto.reverse;

        /**
         * Reverses `array` so that the first element becomes the last, the second
         * element becomes the second to last, and so on.
         *
         * **Note:** This method mutates `array` and is based on
         * [`Array#reverse`](https://mdn.io/Array/reverse).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _.reverse(array);
         * // => [3, 2, 1]
         *
         * console.log(array);
         * // => [3, 2, 1]
         */
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }

        module.exports = reverse;


        /***/
}),
/* 344 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSlice = __webpack_require__(24),
          isIterateeCall = __webpack_require__(62),
          toInteger = __webpack_require__(5);

        /**
         * Creates a slice of `array` from `start` up to, but not including, `end`.
         *
         * **Note:** This method is used instead of
         * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
         * returned.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          }
          else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }

        module.exports = slice;


        /***/
}),
/* 345 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSortedIndex = __webpack_require__(88);

        /**
         * Uses a binary search to determine the lowest index at which `value`
         * should be inserted into `array` in order to maintain its sort order.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * _.sortedIndex([30, 50], 40);
         * // => 1
         */
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }

        module.exports = sortedIndex;


        /***/
}),
/* 346 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIteratee = __webpack_require__(1),
          baseSortedIndexBy = __webpack_require__(112);

        /**
         * This method is like `_.sortedIndex` except that it accepts `iteratee`
         * which is invoked for `value` and each element of `array` to compute their
         * sort ranking. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * var objects = [{ 'x': 4 }, { 'x': 5 }];
         *
         * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
         * // => 0
         *
         * // The `_.property` iteratee shorthand.
         * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
         * // => 0
         */
        function sortedIndexBy(array, value, iteratee) {
          return baseSortedIndexBy(array, value, baseIteratee(iteratee, 2));
        }

        module.exports = sortedIndexBy;


        /***/
}),
/* 347 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSortedIndex = __webpack_require__(88),
          eq = __webpack_require__(30);

        /**
         * This method is like `_.indexOf` except that it performs a binary
         * search on a sorted `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
         * // => 1
         */
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }

        module.exports = sortedIndexOf;


        /***/
}),
/* 348 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSortedIndex = __webpack_require__(88);

        /**
         * This method is like `_.sortedIndex` except that it returns the highest
         * index at which `value` should be inserted into `array` in order to
         * maintain its sort order.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
         * // => 4
         */
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }

        module.exports = sortedLastIndex;


        /***/
}),
/* 349 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIteratee = __webpack_require__(1),
          baseSortedIndexBy = __webpack_require__(112);

        /**
         * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
         * which is invoked for `value` and each element of `array` to compute their
         * sort ranking. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * var objects = [{ 'x': 4 }, { 'x': 5 }];
         *
         * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
         * // => 1
         *
         * // The `_.property` iteratee shorthand.
         * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
         * // => 1
         */
        function sortedLastIndexBy(array, value, iteratee) {
          return baseSortedIndexBy(array, value, baseIteratee(iteratee, 2), true);
        }

        module.exports = sortedLastIndexBy;


        /***/
}),
/* 350 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSortedIndex = __webpack_require__(88),
          eq = __webpack_require__(30);

        /**
         * This method is like `_.lastIndexOf` except that it performs a binary
         * search on a sorted `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
         * // => 3
         */
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }

        module.exports = sortedLastIndexOf;


        /***/
}),
/* 351 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSortedUniq = __webpack_require__(171);

        /**
         * This method is like `_.uniq` except that it's designed and optimized
         * for sorted arrays.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.sortedUniq([1, 1, 2]);
         * // => [1, 2]
         */
        function sortedUniq(array) {
          return (array && array.length)
            ? baseSortedUniq(array)
            : [];
        }

        module.exports = sortedUniq;


        /***/
}),
/* 352 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIteratee = __webpack_require__(1),
          baseSortedUniq = __webpack_require__(171);

        /**
         * This method is like `_.uniqBy` except that it's designed and optimized
         * for sorted arrays.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
         * // => [1.1, 2.3]
         */
        function sortedUniqBy(array, iteratee) {
          return (array && array.length)
            ? baseSortedUniq(array, baseIteratee(iteratee, 2))
            : [];
        }

        module.exports = sortedUniqBy;


        /***/
}),
/* 353 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSlice = __webpack_require__(24);

        /**
         * Gets all but the first element of `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.tail([1, 2, 3]);
         * // => [2, 3]
         */
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }

        module.exports = tail;


        /***/
}),
/* 354 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSlice = __webpack_require__(24),
          toInteger = __webpack_require__(5);

        /**
         * Creates a slice of `array` with `n` elements taken from the beginning.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.take([1, 2, 3]);
         * // => [1]
         *
         * _.take([1, 2, 3], 2);
         * // => [1, 2]
         *
         * _.take([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.take([1, 2, 3], 0);
         * // => []
         */
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }

        module.exports = take;


        /***/
}),
/* 355 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSlice = __webpack_require__(24),
          toInteger = __webpack_require__(5);

        /**
         * Creates a slice of `array` with `n` elements taken from the end.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.takeRight([1, 2, 3]);
         * // => [3]
         *
         * _.takeRight([1, 2, 3], 2);
         * // => [2, 3]
         *
         * _.takeRight([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.takeRight([1, 2, 3], 0);
         * // => []
         */
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }

        module.exports = takeRight;


        /***/
}),
/* 356 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIteratee = __webpack_require__(1),
          baseWhile = __webpack_require__(87);

        /**
         * Creates a slice of `array` with elements taken from the end. Elements are
         * taken until `predicate` returns falsey. The predicate is invoked with
         * three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.takeRightWhile(users, function(o) { return !o.active; });
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.matches` iteratee shorthand.
         * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
         * // => objects for ['pebbles']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.takeRightWhile(users, ['active', false]);
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.property` iteratee shorthand.
         * _.takeRightWhile(users, 'active');
         * // => []
         */
        function takeRightWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, baseIteratee(predicate, 3), false, true)
            : [];
        }

        module.exports = takeRightWhile;


        /***/
}),
/* 357 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIteratee = __webpack_require__(1),
          baseWhile = __webpack_require__(87);

        /**
         * Creates a slice of `array` with elements taken from the beginning. Elements
         * are taken until `predicate` returns falsey. The predicate is invoked with
         * three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.takeWhile(users, function(o) { return !o.active; });
         * // => objects for ['barney', 'fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.takeWhile(users, { 'user': 'barney', 'active': false });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.takeWhile(users, ['active', false]);
         * // => objects for ['barney', 'fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.takeWhile(users, 'active');
         * // => []
         */
        function takeWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, baseIteratee(predicate, 3))
            : [];
        }

        module.exports = takeWhile;


        /***/
}),
/* 358 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFlatten = __webpack_require__(19),
          baseRest = __webpack_require__(2),
          baseUniq = __webpack_require__(43),
          isArrayLikeObject = __webpack_require__(12);

        /**
         * Creates an array of unique values, in order, from all given arrays using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * _.union([2], [1, 2]);
         * // => [2, 1]
         */
        var union = baseRest(function (arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });

        module.exports = union;


        /***/
}),
/* 359 */
/***/ (function (module, exports, __webpack_require__) {

        var Set = __webpack_require__(157),
          noop = __webpack_require__(172),
          setToArray = __webpack_require__(102);

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0;

        /**
         * Creates a set object of `values`.
         *
         * @private
         * @param {Array} values The values to add to the set.
         * @returns {Object} Returns the new set.
         */
        var createSet = !(Set && (1 / setToArray(new Set([, -0]))[1]) == INFINITY) ? noop : function (values) {
          return new Set(values);
        };

        module.exports = createSet;


        /***/
}),
/* 360 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFlatten = __webpack_require__(19),
          baseIteratee = __webpack_require__(1),
          baseRest = __webpack_require__(2),
          baseUniq = __webpack_require__(43),
          isArrayLikeObject = __webpack_require__(12),
          last = __webpack_require__(20);

        /**
         * This method is like `_.union` except that it accepts `iteratee` which is
         * invoked for each element of each `arrays` to generate the criterion by
         * which uniqueness is computed. Result values are chosen from the first
         * array in which the value occurs. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * _.unionBy([2.1], [1.2, 2.3], Math.floor);
         * // => [2.1, 1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }, { 'x': 2 }]
         */
        var unionBy = baseRest(function (arrays) {
          var iteratee = last(arrays);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2));
        });

        module.exports = unionBy;


        /***/
}),
/* 361 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFlatten = __webpack_require__(19),
          baseRest = __webpack_require__(2),
          baseUniq = __webpack_require__(43),
          isArrayLikeObject = __webpack_require__(12),
          last = __webpack_require__(20);

        /**
         * This method is like `_.union` except that it accepts `comparator` which
         * is invoked to compare elements of `arrays`. Result values are chosen from
         * the first array in which the value occurs. The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.unionWith(objects, others, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
         */
        var unionWith = baseRest(function (arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == 'function' ? comparator : undefined;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
        });

        module.exports = unionWith;


        /***/
}),
/* 362 */
/***/ (function (module, exports, __webpack_require__) {

        var baseUniq = __webpack_require__(43);

        /**
         * Creates a duplicate-free version of an array, using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons, in which only the first occurrence of each element
         * is kept. The order of result values is determined by the order they occur
         * in the array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.uniq([2, 1, 2]);
         * // => [2, 1]
         */
        function uniq(array) {
          return (array && array.length) ? baseUniq(array) : [];
        }

        module.exports = uniq;


        /***/
}),
/* 363 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIteratee = __webpack_require__(1),
          baseUniq = __webpack_require__(43);

        /**
         * This method is like `_.uniq` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * uniqueness is computed. The order of result values is determined by the
         * order they occur in the array. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
         * // => [2.1, 1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }, { 'x': 2 }]
         */
        function uniqBy(array, iteratee) {
          return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];
        }

        module.exports = uniqBy;


        /***/
}),
/* 364 */
/***/ (function (module, exports, __webpack_require__) {

        var baseUniq = __webpack_require__(43);

        /**
         * This method is like `_.uniq` except that it accepts `comparator` which
         * is invoked to compare elements of `array`. The order of result values is
         * determined by the order they occur in the array.The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.uniqWith(objects, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
         */
        function uniqWith(array, comparator) {
          comparator = typeof comparator == 'function' ? comparator : undefined;
          return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
        }

        module.exports = uniqWith;


        /***/
}),
/* 365 */
/***/ (function (module, exports, __webpack_require__) {

        var baseDifference = __webpack_require__(64),
          baseRest = __webpack_require__(2),
          isArrayLikeObject = __webpack_require__(12);

        /**
         * Creates an array excluding all given values using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * **Note:** Unlike `_.pull`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...*} [values] The values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.difference, _.xor
         * @example
         *
         * _.without([2, 1, 2, 3], 1, 2);
         * // => [3]
         */
        var without = baseRest(function (array, values) {
          return isArrayLikeObject(array)
            ? baseDifference(array, values)
            : [];
        });

        module.exports = without;


        /***/
}),
/* 366 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayFilter = __webpack_require__(51),
          baseRest = __webpack_require__(2),
          baseXor = __webpack_require__(114),
          isArrayLikeObject = __webpack_require__(12);

        /**
         * Creates an array of unique values that is the
         * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
         * of the given arrays. The order of result values is determined by the order
         * they occur in the arrays.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.difference, _.without
         * @example
         *
         * _.xor([2, 1], [2, 3]);
         * // => [1, 3]
         */
        var xor = baseRest(function (arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });

        module.exports = xor;


        /***/
}),
/* 367 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayFilter = __webpack_require__(51),
          baseIteratee = __webpack_require__(1),
          baseRest = __webpack_require__(2),
          baseXor = __webpack_require__(114),
          isArrayLikeObject = __webpack_require__(12),
          last = __webpack_require__(20);

        /**
         * This method is like `_.xor` except that it accepts `iteratee` which is
         * invoked for each element of each `arrays` to generate the criterion by
         * which by which they're compared. The order of result values is determined
         * by the order they occur in the arrays. The iteratee is invoked with one
         * argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [1.2, 3.4]
         *
         * // The `_.property` iteratee shorthand.
         * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 2 }]
         */
        var xorBy = baseRest(function (arrays) {
          var iteratee = last(arrays);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), baseIteratee(iteratee, 2));
        });

        module.exports = xorBy;


        /***/
}),
/* 368 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayFilter = __webpack_require__(51),
          baseRest = __webpack_require__(2),
          baseXor = __webpack_require__(114),
          isArrayLikeObject = __webpack_require__(12),
          last = __webpack_require__(20);

        /**
         * This method is like `_.xor` except that it accepts `comparator` which is
         * invoked to compare elements of `arrays`. The order of result values is
         * determined by the order they occur in the arrays. The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.xorWith(objects, others, _.isEqual);
         * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
         */
        var xorWith = baseRest(function (arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == 'function' ? comparator : undefined;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        });

        module.exports = xorWith;


        /***/
}),
/* 369 */
/***/ (function (module, exports, __webpack_require__) {

        var baseRest = __webpack_require__(2),
          unzip = __webpack_require__(113);

        /**
         * Creates an array of grouped elements, the first of which contains the
         * first elements of the given arrays, the second of which contains the
         * second elements of the given arrays, and so on.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to process.
         * @returns {Array} Returns the new array of grouped elements.
         * @example
         *
         * _.zip(['a', 'b'], [1, 2], [true, false]);
         * // => [['a', 1, true], ['b', 2, false]]
         */
        var zip = baseRest(unzip);

        module.exports = zip;


        /***/
}),
/* 370 */
/***/ (function (module, exports, __webpack_require__) {

        var assignValue = __webpack_require__(68),
          baseZipObject = __webpack_require__(174);

        /**
         * This method is like `_.fromPairs` except that it accepts two arrays,
         * one of property identifiers and one of corresponding values.
         *
         * @static
         * @memberOf _
         * @since 0.4.0
         * @category Array
         * @param {Array} [props=[]] The property identifiers.
         * @param {Array} [values=[]] The property values.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.zipObject(['a', 'b'], [1, 2]);
         * // => { 'a': 1, 'b': 2 }
         */
        function zipObject(props, values) {
          return baseZipObject(props || [], values || [], assignValue);
        }

        module.exports = zipObject;


        /***/
}),
/* 371 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSet = __webpack_require__(70),
          baseZipObject = __webpack_require__(174);

        /**
         * This method is like `_.zipObject` except that it supports property paths.
         *
         * @static
         * @memberOf _
         * @since 4.1.0
         * @category Array
         * @param {Array} [props=[]] The property identifiers.
         * @param {Array} [values=[]] The property values.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
         * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
         */
        function zipObjectDeep(props, values) {
          return baseZipObject(props || [], values || [], baseSet);
        }

        module.exports = zipObjectDeep;


        /***/
}),
/* 372 */
/***/ (function (module, exports, __webpack_require__) {

        var baseRest = __webpack_require__(2),
          unzipWith = __webpack_require__(173);

        /**
         * This method is like `_.zip` except that it accepts `iteratee` to specify
         * how grouped values should be combined. The iteratee is invoked with the
         * elements of each group: (...group).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Array
         * @param {...Array} [arrays] The arrays to process.
         * @param {Function} [iteratee=_.identity] The function to combine
         *  grouped values.
         * @returns {Array} Returns the new array of grouped elements.
         * @example
         *
         * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
         *   return a + b + c;
         * });
         * // => [111, 222]
         */
        var zipWith = baseRest(function (arrays) {
          var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined;

          iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
          return unzipWith(arrays, iteratee);
        });

        module.exports = zipWith;


        /***/
}),
/* 373 */
/***/ (function (module, exports, __webpack_require__) {

        var convert = __webpack_require__(374);
        module.exports = convert(__webpack_require__(415));


        /***/
}),
/* 374 */
/***/ (function (module, exports, __webpack_require__) {

        var baseConvert = __webpack_require__(375),
          util = __webpack_require__(378);

        /**
         * Converts `func` of `name` to an immutable auto-curried iteratee-first data-last
         * version with conversion `options` applied. If `name` is an object its methods
         * will be converted.
         *
         * @param {string} name The name of the function to wrap.
         * @param {Function} [func] The function to wrap.
         * @param {Object} [options] The options object. See `baseConvert` for more details.
         * @returns {Function|Object} Returns the converted function or object.
         */
        function convert(name, func, options) {
          return baseConvert(util, name, func, options);
        }

        module.exports = convert;


        /***/
}),
/* 375 */
/***/ (function (module, exports, __webpack_require__) {

        var mapping = __webpack_require__(376),
          fallbackHolder = __webpack_require__(377);

        /** Built-in value reference. */
        var push = Array.prototype.push;

        /**
         * Creates a function, with an arity of `n`, that invokes `func` with the
         * arguments it receives.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} n The arity of the new function.
         * @returns {Function} Returns the new function.
         */
        function baseArity(func, n) {
          return n == 2
            ? function (a, b) { return func.apply(undefined, arguments); }
            : function (a) { return func.apply(undefined, arguments); };
        }

        /**
         * Creates a function that invokes `func`, with up to `n` arguments, ignoring
         * any additional arguments.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @param {number} n The arity cap.
         * @returns {Function} Returns the new function.
         */
        function baseAry(func, n) {
          return n == 2
            ? function (a, b) { return func(a, b); }
            : function (a) { return func(a); };
        }

        /**
         * Creates a clone of `array`.
         *
         * @private
         * @param {Array} array The array to clone.
         * @returns {Array} Returns the cloned array.
         */
        function cloneArray(array) {
          var length = array ? array.length : 0,
            result = Array(length);

          while (length--) {
            result[length] = array[length];
          }
          return result;
        }

        /**
         * Creates a function that clones a given object using the assignment `func`.
         *
         * @private
         * @param {Function} func The assignment function.
         * @returns {Function} Returns the new cloner function.
         */
        function createCloner(func) {
          return function (object) {
            return func({}, object);
          };
        }

        /**
         * A specialized version of `_.spread` which flattens the spread array into
         * the arguments of the invoked `func`.
         *
         * @private
         * @param {Function} func The function to spread arguments over.
         * @param {number} start The start position of the spread.
         * @returns {Function} Returns the new function.
         */
        function flatSpread(func, start) {
          return function () {
            var length = arguments.length,
              lastIndex = length - 1,
              args = Array(length);

            while (length--) {
              args[length] = arguments[length];
            }
            var array = args[start],
              otherArgs = args.slice(0, start);

            if (array) {
              push.apply(otherArgs, array);
            }
            if (start != lastIndex) {
              push.apply(otherArgs, args.slice(start + 1));
            }
            return func.apply(this, otherArgs);
          };
        }

        /**
         * Creates a function that wraps `func` and uses `cloner` to clone the first
         * argument it receives.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} cloner The function to clone arguments.
         * @returns {Function} Returns the new immutable function.
         */
        function wrapImmutable(func, cloner) {
          return function () {
            var length = arguments.length;
            if (!length) {
              return;
            }
            var args = Array(length);
            while (length--) {
              args[length] = arguments[length];
            }
            var result = args[0] = cloner.apply(undefined, args);
            func.apply(undefined, args);
            return result;
          };
        }

        /**
         * The base implementation of `convert` which accepts a `util` object of methods
         * required to perform conversions.
         *
         * @param {Object} util The util object.
         * @param {string} name The name of the function to convert.
         * @param {Function} func The function to convert.
         * @param {Object} [options] The options object.
         * @param {boolean} [options.cap=true] Specify capping iteratee arguments.
         * @param {boolean} [options.curry=true] Specify currying.
         * @param {boolean} [options.fixed=true] Specify fixed arity.
         * @param {boolean} [options.immutable=true] Specify immutable operations.
         * @param {boolean} [options.rearg=true] Specify rearranging arguments.
         * @returns {Function|Object} Returns the converted function or object.
         */
        function baseConvert(util, name, func, options) {
          var isLib = typeof name == 'function',
            isObj = name === Object(name);

          if (isObj) {
            options = func;
            func = name;
            name = undefined;
          }
          if (func == null) {
            throw new TypeError;
          }
          options || (options = {});

          var config = {
            'cap': 'cap' in options ? options.cap : true,
            'curry': 'curry' in options ? options.curry : true,
            'fixed': 'fixed' in options ? options.fixed : true,
            'immutable': 'immutable' in options ? options.immutable : true,
            'rearg': 'rearg' in options ? options.rearg : true
          };

          var defaultHolder = isLib ? func : fallbackHolder,
            forceCurry = ('curry' in options) && options.curry,
            forceFixed = ('fixed' in options) && options.fixed,
            forceRearg = ('rearg' in options) && options.rearg,
            pristine = isLib ? func.runInContext() : undefined;

          var helpers = isLib ? func : {
            'ary': util.ary,
            'assign': util.assign,
            'clone': util.clone,
            'curry': util.curry,
            'forEach': util.forEach,
            'isArray': util.isArray,
            'isError': util.isError,
            'isFunction': util.isFunction,
            'isWeakMap': util.isWeakMap,
            'iteratee': util.iteratee,
            'keys': util.keys,
            'rearg': util.rearg,
            'toInteger': util.toInteger,
            'toPath': util.toPath
          };

          var ary = helpers.ary,
            assign = helpers.assign,
            clone = helpers.clone,
            curry = helpers.curry,
            each = helpers.forEach,
            isArray = helpers.isArray,
            isError = helpers.isError,
            isFunction = helpers.isFunction,
            isWeakMap = helpers.isWeakMap,
            keys = helpers.keys,
            rearg = helpers.rearg,
            toInteger = helpers.toInteger,
            toPath = helpers.toPath;

          var aryMethodKeys = keys(mapping.aryMethod);

          var wrappers = {
            'castArray': function (castArray) {
              return function () {
                var value = arguments[0];
                return isArray(value)
                  ? castArray(cloneArray(value))
                  : castArray.apply(undefined, arguments);
              };
            },
            'iteratee': function (iteratee) {
              return function () {
                var func = arguments[0],
                  arity = arguments[1],
                  result = iteratee(func, arity),
                  length = result.length;

                if (config.cap && typeof arity == 'number') {
                  arity = arity > 2 ? (arity - 2) : 1;
                  return (length && length <= arity) ? result : baseAry(result, arity);
                }
                return result;
              };
            },
            'mixin': function (mixin) {
              return function (source) {
                var func = this;
                if (!isFunction(func)) {
                  return mixin(func, Object(source));
                }
                var pairs = [];
                each(keys(source), function (key) {
                  if (isFunction(source[key])) {
                    pairs.push([key, func.prototype[key]]);
                  }
                });

                mixin(func, Object(source));

                each(pairs, function (pair) {
                  var value = pair[1];
                  if (isFunction(value)) {
                    func.prototype[pair[0]] = value;
                  } else {
                    delete func.prototype[pair[0]];
                  }
                });
                return func;
              };
            },
            'nthArg': function (nthArg) {
              return function (n) {
                var arity = n < 0 ? 1 : (toInteger(n) + 1);
                return curry(nthArg(n), arity);
              };
            },
            'rearg': function (rearg) {
              return function (func, indexes) {
                var arity = indexes ? indexes.length : 0;
                return curry(rearg(func, indexes), arity);
              };
            },
            'runInContext': function (runInContext) {
              return function (context) {
                return baseConvert(util, runInContext(context), options);
              };
            }
          };

          /*--------------------------------------------------------------------------*/

          /**
           * Casts `func` to a function with an arity capped iteratee if needed.
           *
           * @private
           * @param {string} name The name of the function to inspect.
           * @param {Function} func The function to inspect.
           * @returns {Function} Returns the cast function.
           */
          function castCap(name, func) {
            if (config.cap) {
              var indexes = mapping.iterateeRearg[name];
              if (indexes) {
                return iterateeRearg(func, indexes);
              }
              var n = !isLib && mapping.iterateeAry[name];
              if (n) {
                return iterateeAry(func, n);
              }
            }
            return func;
          }

          /**
           * Casts `func` to a curried function if needed.
           *
           * @private
           * @param {string} name The name of the function to inspect.
           * @param {Function} func The function to inspect.
           * @param {number} n The arity of `func`.
           * @returns {Function} Returns the cast function.
           */
          function castCurry(name, func, n) {
            return (forceCurry || (config.curry && n > 1))
              ? curry(func, n)
              : func;
          }

          /**
           * Casts `func` to a fixed arity function if needed.
           *
           * @private
           * @param {string} name The name of the function to inspect.
           * @param {Function} func The function to inspect.
           * @param {number} n The arity cap.
           * @returns {Function} Returns the cast function.
           */
          function castFixed(name, func, n) {
            if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {
              var data = mapping.methodSpread[name],
                start = data && data.start;

              return start === undefined ? ary(func, n) : flatSpread(func, start);
            }
            return func;
          }

          /**
           * Casts `func` to an rearged function if needed.
           *
           * @private
           * @param {string} name The name of the function to inspect.
           * @param {Function} func The function to inspect.
           * @param {number} n The arity of `func`.
           * @returns {Function} Returns the cast function.
           */
          function castRearg(name, func, n) {
            return (config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]))
              ? rearg(func, mapping.methodRearg[name] || mapping.aryRearg[n])
              : func;
          }

          /**
           * Creates a clone of `object` by `path`.
           *
           * @private
           * @param {Object} object The object to clone.
           * @param {Array|string} path The path to clone by.
           * @returns {Object} Returns the cloned object.
           */
          function cloneByPath(object, path) {
            path = toPath(path);

            var index = -1,
              length = path.length,
              lastIndex = length - 1,
              result = clone(Object(object)),
              nested = result;

            while (nested != null && ++index < length) {
              var key = path[index],
                value = nested[key];

              if (value != null &&
                !(isFunction(value) || isError(value) || isWeakMap(value))) {
                nested[key] = clone(index == lastIndex ? value : Object(value));
              }
              nested = nested[key];
            }
            return result;
          }

          /**
           * Converts `lodash` to an immutable auto-curried iteratee-first data-last
           * version with conversion `options` applied.
           *
           * @param {Object} [options] The options object. See `baseConvert` for more details.
           * @returns {Function} Returns the converted `lodash`.
           */
          function convertLib(options) {
            return _.runInContext.convert(options)(undefined);
          }

          /**
           * Create a converter function for `func` of `name`.
           *
           * @param {string} name The name of the function to convert.
           * @param {Function} func The function to convert.
           * @returns {Function} Returns the new converter function.
           */
          function createConverter(name, func) {
            var realName = mapping.aliasToReal[name] || name,
              methodName = mapping.remap[realName] || realName,
              oldOptions = options;

            return function (options) {
              var newUtil = isLib ? pristine : helpers,
                newFunc = isLib ? pristine[methodName] : func,
                newOptions = assign(assign({}, oldOptions), options);

              return baseConvert(newUtil, realName, newFunc, newOptions);
            };
          }

          /**
           * Creates a function that wraps `func` to invoke its iteratee, with up to `n`
           * arguments, ignoring any additional arguments.
           *
           * @private
           * @param {Function} func The function to cap iteratee arguments for.
           * @param {number} n The arity cap.
           * @returns {Function} Returns the new function.
           */
          function iterateeAry(func, n) {
            return overArg(func, function (func) {
              return typeof func == 'function' ? baseAry(func, n) : func;
            });
          }

          /**
           * Creates a function that wraps `func` to invoke its iteratee with arguments
           * arranged according to the specified `indexes` where the argument value at
           * the first index is provided as the first argument, the argument value at
           * the second index is provided as the second argument, and so on.
           *
           * @private
           * @param {Function} func The function to rearrange iteratee arguments for.
           * @param {number[]} indexes The arranged argument indexes.
           * @returns {Function} Returns the new function.
           */
          function iterateeRearg(func, indexes) {
            return overArg(func, function (func) {
              var n = indexes.length;
              return baseArity(rearg(baseAry(func, n), indexes), n);
            });
          }

          /**
           * Creates a function that invokes `func` with its first argument transformed.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {Function} transform The argument transform.
           * @returns {Function} Returns the new function.
           */
          function overArg(func, transform) {
            return function () {
              var length = arguments.length;
              if (!length) {
                return func();
              }
              var args = Array(length);
              while (length--) {
                args[length] = arguments[length];
              }
              var index = config.rearg ? 0 : (length - 1);
              args[index] = transform(args[index]);
              return func.apply(undefined, args);
            };
          }

          /**
           * Creates a function that wraps `func` and applys the conversions
           * rules by `name`.
           *
           * @private
           * @param {string} name The name of the function to wrap.
           * @param {Function} func The function to wrap.
           * @returns {Function} Returns the converted function.
           */
          function wrap(name, func, placeholder) {
            var result,
              realName = mapping.aliasToReal[name] || name,
              wrapped = func,
              wrapper = wrappers[realName];

            if (wrapper) {
              wrapped = wrapper(func);
            }
            else if (config.immutable) {
              if (mapping.mutate.array[realName]) {
                wrapped = wrapImmutable(func, cloneArray);
              }
              else if (mapping.mutate.object[realName]) {
                wrapped = wrapImmutable(func, createCloner(func));
              }
              else if (mapping.mutate.set[realName]) {
                wrapped = wrapImmutable(func, cloneByPath);
              }
            }
            each(aryMethodKeys, function (aryKey) {
              each(mapping.aryMethod[aryKey], function (otherName) {
                if (realName == otherName) {
                  var data = mapping.methodSpread[realName],
                    afterRearg = data && data.afterRearg;

                  result = afterRearg
                    ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey)
                    : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);

                  result = castCap(realName, result);
                  result = castCurry(realName, result, aryKey);
                  return false;
                }
              });
              return !result;
            });

            result || (result = wrapped);
            if (result == func) {
              result = forceCurry ? curry(result, 1) : function () {
                return func.apply(this, arguments);
              };
            }
            result.convert = createConverter(realName, func);
            result.placeholder = func.placeholder = placeholder;

            return result;
          }

          /*--------------------------------------------------------------------------*/

          if (!isObj) {
            return wrap(name, func, defaultHolder);
          }
          var _ = func;

          // Convert methods by ary cap.
          var pairs = [];
          each(aryMethodKeys, function (aryKey) {
            each(mapping.aryMethod[aryKey], function (key) {
              var func = _[mapping.remap[key] || key];
              if (func) {
                pairs.push([key, wrap(key, func, _)]);
              }
            });
          });

          // Convert remaining methods.
          each(keys(_), function (key) {
            var func = _[key];
            if (typeof func == 'function') {
              var length = pairs.length;
              while (length--) {
                if (pairs[length][0] == key) {
                  return;
                }
              }
              func.convert = createConverter(key, func);
              pairs.push([key, func]);
            }
          });

          // Assign to `_` leaving `_.prototype` unchanged to allow chaining.
          each(pairs, function (pair) {
            _[pair[0]] = pair[1];
          });

          _.convert = convertLib;
          _.placeholder = _;

          // Assign aliases.
          each(keys(_), function (key) {
            each(mapping.realToAlias[key] || [], function (alias) {
              _[alias] = _[key];
            });
          });

          return _;
        }

        module.exports = baseConvert;


        /***/
}),
/* 376 */
/***/ (function (module, exports) {

        /** Used to map aliases to their real names. */
        exports.aliasToReal = {

          // Lodash aliases.
          'each': 'forEach',
          'eachRight': 'forEachRight',
          'entries': 'toPairs',
          'entriesIn': 'toPairsIn',
          'extend': 'assignIn',
          'extendAll': 'assignInAll',
          'extendAllWith': 'assignInAllWith',
          'extendWith': 'assignInWith',
          'first': 'head',

          // Methods that are curried variants of others.
          'conforms': 'conformsTo',
          'matches': 'isMatch',
          'property': 'get',

          // Ramda aliases.
          '__': 'placeholder',
          'F': 'stubFalse',
          'T': 'stubTrue',
          'all': 'every',
          'allPass': 'overEvery',
          'always': 'constant',
          'any': 'some',
          'anyPass': 'overSome',
          'apply': 'spread',
          'assoc': 'set',
          'assocPath': 'set',
          'complement': 'negate',
          'compose': 'flowRight',
          'contains': 'includes',
          'dissoc': 'unset',
          'dissocPath': 'unset',
          'dropLast': 'dropRight',
          'dropLastWhile': 'dropRightWhile',
          'equals': 'isEqual',
          'identical': 'eq',
          'indexBy': 'keyBy',
          'init': 'initial',
          'invertObj': 'invert',
          'juxt': 'over',
          'omitAll': 'omit',
          'nAry': 'ary',
          'path': 'get',
          'pathEq': 'matchesProperty',
          'pathOr': 'getOr',
          'paths': 'at',
          'pickAll': 'pick',
          'pipe': 'flow',
          'pluck': 'map',
          'prop': 'get',
          'propEq': 'matchesProperty',
          'propOr': 'getOr',
          'props': 'at',
          'symmetricDifference': 'xor',
          'symmetricDifferenceBy': 'xorBy',
          'symmetricDifferenceWith': 'xorWith',
          'takeLast': 'takeRight',
          'takeLastWhile': 'takeRightWhile',
          'unapply': 'rest',
          'unnest': 'flatten',
          'useWith': 'overArgs',
          'where': 'conformsTo',
          'whereEq': 'isMatch',
          'zipObj': 'zipObject'
        };

        /** Used to map ary to method names. */
        exports.aryMethod = {
          '1': [
            'assignAll', 'assignInAll', 'attempt', 'castArray', 'ceil', 'create',
            'curry', 'curryRight', 'defaultsAll', 'defaultsDeepAll', 'floor', 'flow',
            'flowRight', 'fromPairs', 'invert', 'iteratee', 'memoize', 'method', 'mergeAll',
            'methodOf', 'mixin', 'nthArg', 'over', 'overEvery', 'overSome', 'rest', 'reverse',
            'round', 'runInContext', 'spread', 'template', 'trim', 'trimEnd', 'trimStart',
            'uniqueId', 'words', 'zipAll'
          ],
          '2': [
            'add', 'after', 'ary', 'assign', 'assignAllWith', 'assignIn', 'assignInAllWith',
            'at', 'before', 'bind', 'bindAll', 'bindKey', 'chunk', 'cloneDeepWith',
            'cloneWith', 'concat', 'conformsTo', 'countBy', 'curryN', 'curryRightN',
            'debounce', 'defaults', 'defaultsDeep', 'defaultTo', 'delay', 'difference',
            'divide', 'drop', 'dropRight', 'dropRightWhile', 'dropWhile', 'endsWith', 'eq',
            'every', 'filter', 'find', 'findIndex', 'findKey', 'findLast', 'findLastIndex',
            'findLastKey', 'flatMap', 'flatMapDeep', 'flattenDepth', 'forEach',
            'forEachRight', 'forIn', 'forInRight', 'forOwn', 'forOwnRight', 'get',
            'groupBy', 'gt', 'gte', 'has', 'hasIn', 'includes', 'indexOf', 'intersection',
            'invertBy', 'invoke', 'invokeMap', 'isEqual', 'isMatch', 'join', 'keyBy',
            'lastIndexOf', 'lt', 'lte', 'map', 'mapKeys', 'mapValues', 'matchesProperty',
            'maxBy', 'meanBy', 'merge', 'mergeAllWith', 'minBy', 'multiply', 'nth', 'omit',
            'omitBy', 'overArgs', 'pad', 'padEnd', 'padStart', 'parseInt', 'partial',
            'partialRight', 'partition', 'pick', 'pickBy', 'propertyOf', 'pull', 'pullAll',
            'pullAt', 'random', 'range', 'rangeRight', 'rearg', 'reject', 'remove',
            'repeat', 'restFrom', 'result', 'sampleSize', 'some', 'sortBy', 'sortedIndex',
            'sortedIndexOf', 'sortedLastIndex', 'sortedLastIndexOf', 'sortedUniqBy',
            'split', 'spreadFrom', 'startsWith', 'subtract', 'sumBy', 'take', 'takeRight',
            'takeRightWhile', 'takeWhile', 'tap', 'throttle', 'thru', 'times', 'trimChars',
            'trimCharsEnd', 'trimCharsStart', 'truncate', 'union', 'uniqBy', 'uniqWith',
            'unset', 'unzipWith', 'without', 'wrap', 'xor', 'zip', 'zipObject',
            'zipObjectDeep'
          ],
          '3': [
            'assignInWith', 'assignWith', 'clamp', 'differenceBy', 'differenceWith',
            'findFrom', 'findIndexFrom', 'findLastFrom', 'findLastIndexFrom', 'getOr',
            'includesFrom', 'indexOfFrom', 'inRange', 'intersectionBy', 'intersectionWith',
            'invokeArgs', 'invokeArgsMap', 'isEqualWith', 'isMatchWith', 'flatMapDepth',
            'lastIndexOfFrom', 'mergeWith', 'orderBy', 'padChars', 'padCharsEnd',
            'padCharsStart', 'pullAllBy', 'pullAllWith', 'rangeStep', 'rangeStepRight',
            'reduce', 'reduceRight', 'replace', 'set', 'slice', 'sortedIndexBy',
            'sortedLastIndexBy', 'transform', 'unionBy', 'unionWith', 'update', 'xorBy',
            'xorWith', 'zipWith'
          ],
          '4': [
            'fill', 'setWith', 'updateWith'
          ]
        };

        /** Used to map ary to rearg configs. */
        exports.aryRearg = {
          '2': [1, 0],
          '3': [2, 0, 1],
          '4': [3, 2, 0, 1]
        };

        /** Used to map method names to their iteratee ary. */
        exports.iterateeAry = {
          'dropRightWhile': 1,
          'dropWhile': 1,
          'every': 1,
          'filter': 1,
          'find': 1,
          'findFrom': 1,
          'findIndex': 1,
          'findIndexFrom': 1,
          'findKey': 1,
          'findLast': 1,
          'findLastFrom': 1,
          'findLastIndex': 1,
          'findLastIndexFrom': 1,
          'findLastKey': 1,
          'flatMap': 1,
          'flatMapDeep': 1,
          'flatMapDepth': 1,
          'forEach': 1,
          'forEachRight': 1,
          'forIn': 1,
          'forInRight': 1,
          'forOwn': 1,
          'forOwnRight': 1,
          'map': 1,
          'mapKeys': 1,
          'mapValues': 1,
          'partition': 1,
          'reduce': 2,
          'reduceRight': 2,
          'reject': 1,
          'remove': 1,
          'some': 1,
          'takeRightWhile': 1,
          'takeWhile': 1,
          'times': 1,
          'transform': 2
        };

        /** Used to map method names to iteratee rearg configs. */
        exports.iterateeRearg = {
          'mapKeys': [1],
          'reduceRight': [1, 0]
        };

        /** Used to map method names to rearg configs. */
        exports.methodRearg = {
          'assignInAllWith': [1, 0],
          'assignInWith': [1, 2, 0],
          'assignAllWith': [1, 0],
          'assignWith': [1, 2, 0],
          'differenceBy': [1, 2, 0],
          'differenceWith': [1, 2, 0],
          'getOr': [2, 1, 0],
          'intersectionBy': [1, 2, 0],
          'intersectionWith': [1, 2, 0],
          'isEqualWith': [1, 2, 0],
          'isMatchWith': [2, 1, 0],
          'mergeAllWith': [1, 0],
          'mergeWith': [1, 2, 0],
          'padChars': [2, 1, 0],
          'padCharsEnd': [2, 1, 0],
          'padCharsStart': [2, 1, 0],
          'pullAllBy': [2, 1, 0],
          'pullAllWith': [2, 1, 0],
          'rangeStep': [1, 2, 0],
          'rangeStepRight': [1, 2, 0],
          'setWith': [3, 1, 2, 0],
          'sortedIndexBy': [2, 1, 0],
          'sortedLastIndexBy': [2, 1, 0],
          'unionBy': [1, 2, 0],
          'unionWith': [1, 2, 0],
          'updateWith': [3, 1, 2, 0],
          'xorBy': [1, 2, 0],
          'xorWith': [1, 2, 0],
          'zipWith': [1, 2, 0]
        };

        /** Used to map method names to spread configs. */
        exports.methodSpread = {
          'assignAll': { 'start': 0 },
          'assignAllWith': { 'start': 0 },
          'assignInAll': { 'start': 0 },
          'assignInAllWith': { 'start': 0 },
          'defaultsAll': { 'start': 0 },
          'defaultsDeepAll': { 'start': 0 },
          'invokeArgs': { 'start': 2 },
          'invokeArgsMap': { 'start': 2 },
          'mergeAll': { 'start': 0 },
          'mergeAllWith': { 'start': 0 },
          'partial': { 'start': 1 },
          'partialRight': { 'start': 1 },
          'without': { 'start': 1 },
          'zipAll': { 'start': 0 }
        };

        /** Used to identify methods which mutate arrays or objects. */
        exports.mutate = {
          'array': {
            'fill': true,
            'pull': true,
            'pullAll': true,
            'pullAllBy': true,
            'pullAllWith': true,
            'pullAt': true,
            'remove': true,
            'reverse': true
          },
          'object': {
            'assign': true,
            'assignAll': true,
            'assignAllWith': true,
            'assignIn': true,
            'assignInAll': true,
            'assignInAllWith': true,
            'assignInWith': true,
            'assignWith': true,
            'defaults': true,
            'defaultsAll': true,
            'defaultsDeep': true,
            'defaultsDeepAll': true,
            'merge': true,
            'mergeAll': true,
            'mergeAllWith': true,
            'mergeWith': true,
          },
          'set': {
            'set': true,
            'setWith': true,
            'unset': true,
            'update': true,
            'updateWith': true
          }
        };

        /** Used to map real names to their aliases. */
        exports.realToAlias = (function () {
          var hasOwnProperty = Object.prototype.hasOwnProperty,
            object = exports.aliasToReal,
            result = {};

          for (var key in object) {
            var value = object[key];
            if (hasOwnProperty.call(result, value)) {
              result[value].push(key);
            } else {
              result[value] = [key];
            }
          }
          return result;
        }());

        /** Used to map method names to other names. */
        exports.remap = {
          'assignAll': 'assign',
          'assignAllWith': 'assignWith',
          'assignInAll': 'assignIn',
          'assignInAllWith': 'assignInWith',
          'curryN': 'curry',
          'curryRightN': 'curryRight',
          'defaultsAll': 'defaults',
          'defaultsDeepAll': 'defaultsDeep',
          'findFrom': 'find',
          'findIndexFrom': 'findIndex',
          'findLastFrom': 'findLast',
          'findLastIndexFrom': 'findLastIndex',
          'getOr': 'get',
          'includesFrom': 'includes',
          'indexOfFrom': 'indexOf',
          'invokeArgs': 'invoke',
          'invokeArgsMap': 'invokeMap',
          'lastIndexOfFrom': 'lastIndexOf',
          'mergeAll': 'merge',
          'mergeAllWith': 'mergeWith',
          'padChars': 'pad',
          'padCharsEnd': 'padEnd',
          'padCharsStart': 'padStart',
          'propertyOf': 'get',
          'rangeStep': 'range',
          'rangeStepRight': 'rangeRight',
          'restFrom': 'rest',
          'spreadFrom': 'spread',
          'trimChars': 'trim',
          'trimCharsEnd': 'trimEnd',
          'trimCharsStart': 'trimStart',
          'zipAll': 'zip'
        };

        /** Used to track methods that skip fixing their arity. */
        exports.skipFixed = {
          'castArray': true,
          'flow': true,
          'flowRight': true,
          'iteratee': true,
          'mixin': true,
          'rearg': true,
          'runInContext': true
        };

        /** Used to track methods that skip rearranging arguments. */
        exports.skipRearg = {
          'add': true,
          'assign': true,
          'assignIn': true,
          'bind': true,
          'bindKey': true,
          'concat': true,
          'difference': true,
          'divide': true,
          'eq': true,
          'gt': true,
          'gte': true,
          'isEqual': true,
          'lt': true,
          'lte': true,
          'matchesProperty': true,
          'merge': true,
          'multiply': true,
          'overArgs': true,
          'partial': true,
          'partialRight': true,
          'propertyOf': true,
          'random': true,
          'range': true,
          'rangeRight': true,
          'subtract': true,
          'zip': true,
          'zipObject': true,
          'zipObjectDeep': true
        };


        /***/
}),
/* 377 */
/***/ (function (module, exports) {

        /**
         * The default argument placeholder value for methods.
         *
         * @type {Object}
         */
        module.exports = {};


        /***/
}),
/* 378 */
/***/ (function (module, exports, __webpack_require__) {

        module.exports = {
          'ary': __webpack_require__(379),
          'assign': __webpack_require__(119),
          'clone': __webpack_require__(394),
          'curry': __webpack_require__(409),
          'forEach': __webpack_require__(90),
          'isArray': __webpack_require__(4),
          'isError': __webpack_require__(410),
          'isFunction': __webpack_require__(38),
          'isWeakMap': __webpack_require__(411),
          'iteratee': __webpack_require__(412),
          'keys': __webpack_require__(155),
          'rearg': __webpack_require__(413),
          'toInteger': __webpack_require__(5),
          'toPath': __webpack_require__(414)
        };


        /***/
}),
/* 379 */
/***/ (function (module, exports, __webpack_require__) {

        var createWrap = __webpack_require__(115);

        /** Used to compose bitmasks for function metadata. */
        var WRAP_ARY_FLAG = 128;

        /**
         * Creates a function that invokes `func`, with up to `n` arguments,
         * ignoring any additional arguments.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to cap arguments for.
         * @param {number} [n=func.length] The arity cap.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new capped function.
         * @example
         *
         * _.map(['6', '8', '10'], _.ary(parseInt, 1));
         * // => [6, 8, 10]
         */
        function ary(func, n, guard) {
          n = guard ? undefined : n;
          n = (func && n == null) ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }

        module.exports = ary;


        /***/
}),
/* 380 */
/***/ (function (module, exports, __webpack_require__) {

        var createCtor = __webpack_require__(89),
          root = __webpack_require__(8);

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1;

        /**
         * Creates a function that wraps `func` to invoke it with the optional `this`
         * binding of `thisArg`.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

          function wrapper() {
            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }

        module.exports = createBind;


        /***/
}),
/* 381 */
/***/ (function (module, exports, __webpack_require__) {

        var apply = __webpack_require__(50),
          createCtor = __webpack_require__(89),
          createHybrid = __webpack_require__(177),
          createRecurry = __webpack_require__(180),
          getHolder = __webpack_require__(185),
          replaceHolders = __webpack_require__(118),
          root = __webpack_require__(8);

        /**
         * Creates a function that wraps `func` to enable currying.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {number} arity The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);

          function wrapper() {
            var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

            while (index--) {
              args[index] = arguments[index];
            }
            var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
              ? []
              : replaceHolders(args, placeholder);

            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func, bitmask, createHybrid, wrapper.placeholder, undefined,
                args, holders, undefined, undefined, arity - length);
            }
            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }

        module.exports = createCurry;


        /***/
}),
/* 382 */
/***/ (function (module, exports) {

        /**
         * Gets the number of `placeholder` occurrences in `array`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} placeholder The placeholder to search for.
         * @returns {number} Returns the placeholder count.
         */
        function countHolders(array, placeholder) {
          var length = array.length,
            result = 0;

          while (length--) {
            if (array[length] === placeholder) {
              ++result;
            }
          }
          return result;
        }

        module.exports = countHolders;


        /***/
}),
/* 383 */
/***/ (function (module, exports, __webpack_require__) {

        var LazyWrapper = __webpack_require__(116),
          getData = __webpack_require__(181),
          getFuncName = __webpack_require__(384),
          lodash = __webpack_require__(386);

        /**
         * Checks if `func` has a lazy counterpart.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
         *  else `false`.
         */
        function isLaziable(func) {
          var funcName = getFuncName(func),
            other = lodash[funcName];

          if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }

        module.exports = isLaziable;


        /***/
}),
/* 384 */
/***/ (function (module, exports, __webpack_require__) {

        var realNames = __webpack_require__(385);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Gets the name of `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {string} Returns the function name.
         */
        function getFuncName(func) {
          var result = (func.name + ''),
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

          while (length--) {
            var data = array[length],
              otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result;
        }

        module.exports = getFuncName;


        /***/
}),
/* 385 */
/***/ (function (module, exports) {

        /** Used to lookup unminified function names. */
        var realNames = {};

        module.exports = realNames;


        /***/
}),
/* 386 */
/***/ (function (module, exports, __webpack_require__) {

        var LazyWrapper = __webpack_require__(116),
          LodashWrapper = __webpack_require__(182),
          baseLodash = __webpack_require__(117),
          isArray = __webpack_require__(4),
          isObjectLike = __webpack_require__(14),
          wrapperClone = __webpack_require__(387);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Creates a `lodash` object which wraps `value` to enable implicit method
         * chain sequences. Methods that operate on and return arrays, collections,
         * and functions can be chained together. Methods that retrieve a single value
         * or may return a primitive value will automatically end the chain sequence
         * and return the unwrapped value. Otherwise, the value must be unwrapped
         * with `_#value`.
         *
         * Explicit chain sequences, which must be unwrapped with `_#value`, may be
         * enabled using `_.chain`.
         *
         * The execution of chained methods is lazy, that is, it's deferred until
         * `_#value` is implicitly or explicitly called.
         *
         * Lazy evaluation allows several methods to support shortcut fusion.
         * Shortcut fusion is an optimization to merge iteratee calls; this avoids
         * the creation of intermediate arrays and can greatly reduce the number of
         * iteratee executions. Sections of a chain sequence qualify for shortcut
         * fusion if the section is applied to an array and iteratees accept only
         * one argument. The heuristic for whether a section qualifies for shortcut
         * fusion is subject to change.
         *
         * Chaining is supported in custom builds as long as the `_#value` method is
         * directly or indirectly included in the build.
         *
         * In addition to lodash methods, wrappers have `Array` and `String` methods.
         *
         * The wrapper `Array` methods are:
         * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
         *
         * The wrapper `String` methods are:
         * `replace` and `split`
         *
         * The wrapper methods that support shortcut fusion are:
         * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
         * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
         * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
         *
         * The chainable wrapper methods are:
         * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
         * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
         * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
         * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
         * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
         * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
         * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
         * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
         * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
         * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
         * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
         * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
         * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
         * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
         * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
         * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
         * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
         * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
         * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
         * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
         * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
         * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
         * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
         * `zipObject`, `zipObjectDeep`, and `zipWith`
         *
         * The wrapper methods that are **not** chainable by default are:
         * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
         * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
         * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
         * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
         * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
         * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
         * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
         * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
         * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
         * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
         * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
         * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
         * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
         * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
         * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
         * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
         * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
         * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
         * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
         * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
         * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
         * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
         * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
         * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
         * `upperFirst`, `value`, and `words`
         *
         * @name _
         * @constructor
         * @category Seq
         * @param {*} value The value to wrap in a `lodash` instance.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var wrapped = _([1, 2, 3]);
         *
         * // Returns an unwrapped value.
         * wrapped.reduce(_.add);
         * // => 6
         *
         * // Returns a wrapped value.
         * var squares = wrapped.map(square);
         *
         * _.isArray(squares);
         * // => false
         *
         * _.isArray(squares.value());
         * // => true
         */
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, '__wrapped__')) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }

        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;

        module.exports = lodash;


        /***/
}),
/* 387 */
/***/ (function (module, exports, __webpack_require__) {

        var LazyWrapper = __webpack_require__(116),
          LodashWrapper = __webpack_require__(182),
          copyArray = __webpack_require__(40);

        /**
         * Creates a clone of `wrapper`.
         *
         * @private
         * @param {Object} wrapper The wrapper to clone.
         * @returns {Object} Returns the cloned wrapper.
         */
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result.__actions__ = copyArray(wrapper.__actions__);
          result.__index__ = wrapper.__index__;
          result.__values__ = wrapper.__values__;
          return result;
        }

        module.exports = wrapperClone;


        /***/
}),
/* 388 */
/***/ (function (module, exports) {

        /** Used to match wrap detail comments. */
        var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
          reSplitDetails = /,? & /;

        /**
         * Extracts wrapper details from the `source` body comment.
         *
         * @private
         * @param {string} source The source to inspect.
         * @returns {Array} Returns the wrapper details.
         */
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }

        module.exports = getWrapDetails;


        /***/
}),
/* 389 */
/***/ (function (module, exports) {

        /** Used to match wrap detail comments. */
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;

        /**
         * Inserts wrapper `details` in a comment at the top of the `source` body.
         *
         * @private
         * @param {string} source The source to modify.
         * @returns {Array} details The details to insert.
         * @returns {string} Returns the modified source.
         */
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
          details = details.join(length > 2 ? ', ' : ' ');
          return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
        }

        module.exports = insertWrapDetails;


        /***/
}),
/* 390 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayEach = __webpack_require__(90),
          arrayIncludes = __webpack_require__(81);

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_FLAG = 8,
          WRAP_CURRY_RIGHT_FLAG = 16,
          WRAP_PARTIAL_FLAG = 32,
          WRAP_PARTIAL_RIGHT_FLAG = 64,
          WRAP_ARY_FLAG = 128,
          WRAP_REARG_FLAG = 256,
          WRAP_FLIP_FLAG = 512;

        /** Used to associate wrap methods with their bit flags. */
        var wrapFlags = [
          ['ary', WRAP_ARY_FLAG],
          ['bind', WRAP_BIND_FLAG],
          ['bindKey', WRAP_BIND_KEY_FLAG],
          ['curry', WRAP_CURRY_FLAG],
          ['curryRight', WRAP_CURRY_RIGHT_FLAG],
          ['flip', WRAP_FLIP_FLAG],
          ['partial', WRAP_PARTIAL_FLAG],
          ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
          ['rearg', WRAP_REARG_FLAG]
        ];

        /**
         * Updates wrapper `details` based on `bitmask` flags.
         *
         * @private
         * @returns {Array} details The details to modify.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @returns {Array} Returns `details`.
         */
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function (pair) {
            var value = '_.' + pair[0];
            if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }

        module.exports = updateWrapDetails;


        /***/
}),
/* 391 */
/***/ (function (module, exports, __webpack_require__) {

        var copyArray = __webpack_require__(40),
          isIndex = __webpack_require__(33);

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMin = Math.min;

        /**
         * Reorder `array` according to the specified indexes where the element at
         * the first index is assigned as the first element, the element at
         * the second index is assigned as the second element, and so on.
         *
         * @private
         * @param {Array} array The array to reorder.
         * @param {Array} indexes The arranged array indexes.
         * @returns {Array} Returns `array`.
         */
        function reorder(array, indexes) {
          var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
          }
          return array;
        }

        module.exports = reorder;


        /***/
}),
/* 392 */
/***/ (function (module, exports, __webpack_require__) {

        var apply = __webpack_require__(50),
          createCtor = __webpack_require__(89),
          root = __webpack_require__(8);

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1;

        /**
         * Creates a function that wraps `func` to invoke it with the `this` binding
         * of `thisArg` and `partials` prepended to the arguments it receives.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} partials The arguments to prepend to those provided to
         *  the new function.
         * @returns {Function} Returns the new wrapped function.
         */
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

          function wrapper() {
            var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }

        module.exports = createPartial;


        /***/
}),
/* 393 */
/***/ (function (module, exports, __webpack_require__) {

        var composeArgs = __webpack_require__(178),
          composeArgsRight = __webpack_require__(179),
          replaceHolders = __webpack_require__(118);

        /** Used as the internal argument placeholder. */
        var PLACEHOLDER = '__lodash_placeholder__';

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_BOUND_FLAG = 4,
          WRAP_CURRY_FLAG = 8,
          WRAP_ARY_FLAG = 128,
          WRAP_REARG_FLAG = 256;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMin = Math.min;

        /**
         * Merges the function metadata of `source` into `data`.
         *
         * Merging metadata reduces the number of wrappers used to invoke a function.
         * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
         * may be applied regardless of execution order. Methods like `_.ary` and
         * `_.rearg` modify function arguments, making the order in which they are
         * executed important, preventing the merging of metadata. However, we make
         * an exception for a safe combined case where curried functions have `_.ary`
         * and or `_.rearg` applied.
         *
         * @private
         * @param {Array} data The destination metadata.
         * @param {Array} source The source metadata.
         * @returns {Array} Returns `data`.
         */
        function mergeData(data, source) {
          var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

          var isCombo =
            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
            ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

          // Exit early if metadata can't be merged.
          if (!(isCommon || isCombo)) {
            return data;
          }
          // Use source `thisArg` if available.
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            // Set when currying a bound function.
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          // Compose partial arguments.
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          // Compose partial right arguments.
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          // Use source `argPos` if available.
          value = source[7];
          if (value) {
            data[7] = value;
          }
          // Use source `ary` if it's smaller.
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          // Use source `arity` if one is not provided.
          if (data[9] == null) {
            data[9] = source[9];
          }
          // Use source `func` and merge bitmasks.
          data[0] = source[0];
          data[1] = newBitmask;

          return data;
        }

        module.exports = mergeData;


        /***/
}),
/* 394 */
/***/ (function (module, exports, __webpack_require__) {

        var baseClone = __webpack_require__(120);

        /** Used to compose bitmasks for cloning. */
        var CLONE_SYMBOLS_FLAG = 4;

        /**
         * Creates a shallow clone of `value`.
         *
         * **Note:** This method is loosely based on the
         * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
         * and supports cloning arrays, array buffers, booleans, date objects, maps,
         * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
         * arrays. The own enumerable properties of `arguments` objects are cloned
         * as plain objects. An empty object is returned for uncloneable values such
         * as error objects, functions, DOM nodes, and WeakMaps.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to clone.
         * @returns {*} Returns the cloned value.
         * @see _.cloneDeep
         * @example
         *
         * var objects = [{ 'a': 1 }, { 'b': 2 }];
         *
         * var shallow = _.clone(objects);
         * console.log(shallow[0] === objects[0]);
         * // => true
         */
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }

        module.exports = clone;


        /***/
}),
/* 395 */
/***/ (function (module, exports, __webpack_require__) {

        var copyObject = __webpack_require__(25),
          keysIn = __webpack_require__(13);

        /**
         * The base implementation of `_.assignIn` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }

        module.exports = baseAssignIn;


        /***/
}),
/* 396 */
/***/ (function (module, exports, __webpack_require__) {

        var isObject = __webpack_require__(9),
          isPrototype = __webpack_require__(86),
          nativeKeysIn = __webpack_require__(397);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object),
            result = [];

          for (var key in object) {
            if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
              result.push(key);
            }
          }
          return result;
        }

        module.exports = baseKeysIn;


        /***/
}),
/* 397 */
/***/ (function (module, exports) {

        /**
         * This function is like
         * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * except that it includes inherited enumerable properties.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function nativeKeysIn(object) {
          var result = [];
          if (object != null) {
            for (var key in Object(object)) {
              result.push(key);
            }
          }
          return result;
        }

        module.exports = nativeKeysIn;


        /***/
}),
/* 398 */
/***/ (function (module, exports, __webpack_require__) {

        var copyObject = __webpack_require__(25),
          getSymbols = __webpack_require__(103);

        /**
         * Copies own symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }

        module.exports = copySymbols;


        /***/
}),
/* 399 */
/***/ (function (module, exports, __webpack_require__) {

        var copyObject = __webpack_require__(25),
          getSymbolsIn = __webpack_require__(187);

        /**
         * Copies own and inherited symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }

        module.exports = copySymbolsIn;


        /***/
}),
/* 400 */
/***/ (function (module, exports) {

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Initializes an array clone.
         *
         * @private
         * @param {Array} array The array to clone.
         * @returns {Array} Returns the initialized clone.
         */
        function initCloneArray(array) {
          var length = array.length,
            result = new array.constructor(length);

          // Add properties assigned by `RegExp#exec`.
          if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
            result.index = array.index;
            result.input = array.input;
          }
          return result;
        }

        module.exports = initCloneArray;


        /***/
}),
/* 401 */
/***/ (function (module, exports, __webpack_require__) {

        var cloneArrayBuffer = __webpack_require__(122),
          cloneDataView = __webpack_require__(402),
          cloneRegExp = __webpack_require__(403),
          cloneSymbol = __webpack_require__(404),
          cloneTypedArray = __webpack_require__(188);

        /** `Object#toString` result references. */
        var boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          symbolTag = '[object Symbol]';

        var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]';

        /**
         * Initializes an object clone based on its `toStringTag`.
         *
         * **Note:** This function only supports cloning values with tags of
         * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
         *
         * @private
         * @param {Object} object The object to clone.
         * @param {string} tag The `toStringTag` of the object to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);

            case boolTag:
            case dateTag:
              return new Ctor(+object);

            case dataViewTag:
              return cloneDataView(object, isDeep);

            case float32Tag: case float64Tag:
            case int8Tag: case int16Tag: case int32Tag:
            case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
              return cloneTypedArray(object, isDeep);

            case mapTag:
              return new Ctor;

            case numberTag:
            case stringTag:
              return new Ctor(object);

            case regexpTag:
              return cloneRegExp(object);

            case setTag:
              return new Ctor;

            case symbolTag:
              return cloneSymbol(object);
          }
        }

        module.exports = initCloneByTag;


        /***/
}),
/* 402 */
/***/ (function (module, exports, __webpack_require__) {

        var cloneArrayBuffer = __webpack_require__(122);

        /**
         * Creates a clone of `dataView`.
         *
         * @private
         * @param {Object} dataView The data view to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned data view.
         */
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }

        module.exports = cloneDataView;


        /***/
}),
/* 403 */
/***/ (function (module, exports) {

        /** Used to match `RegExp` flags from their coerced string values. */
        var reFlags = /\w*$/;

        /**
         * Creates a clone of `regexp`.
         *
         * @private
         * @param {Object} regexp The regexp to clone.
         * @returns {Object} Returns the cloned regexp.
         */
        function cloneRegExp(regexp) {
          var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result.lastIndex = regexp.lastIndex;
          return result;
        }

        module.exports = cloneRegExp;


        /***/
}),
/* 404 */
/***/ (function (module, exports, __webpack_require__) {

        var Symbol = __webpack_require__(48);

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

        /**
         * Creates a clone of the `symbol` object.
         *
         * @private
         * @param {Object} symbol The symbol object to clone.
         * @returns {Object} Returns the cloned symbol object.
         */
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }

        module.exports = cloneSymbol;


        /***/
}),
/* 405 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIsMap = __webpack_require__(406),
          baseUnary = __webpack_require__(49),
          nodeUtil = __webpack_require__(104);

        /* Node.js helper references. */
        var nodeIsMap = nodeUtil && nodeUtil.isMap;

        /**
         * Checks if `value` is classified as a `Map` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         * @example
         *
         * _.isMap(new Map);
         * // => true
         *
         * _.isMap(new WeakMap);
         * // => false
         */
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

        module.exports = isMap;


        /***/
}),
/* 406 */
/***/ (function (module, exports, __webpack_require__) {

        var getTag = __webpack_require__(52),
          isObjectLike = __webpack_require__(14);

        /** `Object#toString` result references. */
        var mapTag = '[object Map]';

        /**
         * The base implementation of `_.isMap` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         */
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }

        module.exports = baseIsMap;


        /***/
}),
/* 407 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIsSet = __webpack_require__(408),
          baseUnary = __webpack_require__(49),
          nodeUtil = __webpack_require__(104);

        /* Node.js helper references. */
        var nodeIsSet = nodeUtil && nodeUtil.isSet;

        /**
         * Checks if `value` is classified as a `Set` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         * @example
         *
         * _.isSet(new Set);
         * // => true
         *
         * _.isSet(new WeakSet);
         * // => false
         */
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

        module.exports = isSet;


        /***/
}),
/* 408 */
/***/ (function (module, exports, __webpack_require__) {

        var getTag = __webpack_require__(52),
          isObjectLike = __webpack_require__(14);

        /** `Object#toString` result references. */
        var setTag = '[object Set]';

        /**
         * The base implementation of `_.isSet` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         */
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }

        module.exports = baseIsSet;


        /***/
}),
/* 409 */
/***/ (function (module, exports, __webpack_require__) {

        var createWrap = __webpack_require__(115);

        /** Used to compose bitmasks for function metadata. */
        var WRAP_CURRY_FLAG = 8;

        /**
         * Creates a function that accepts arguments of `func` and either invokes
         * `func` returning its result, if at least `arity` number of arguments have
         * been provided, or returns a function that accepts the remaining `func`
         * arguments, and so on. The arity of `func` may be specified if `func.length`
         * is not sufficient.
         *
         * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
         * may be used as a placeholder for provided arguments.
         *
         * **Note:** This method doesn't set the "length" property of curried functions.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Function
         * @param {Function} func The function to curry.
         * @param {number} [arity=func.length] The arity of `func`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new curried function.
         * @example
         *
         * var abc = function(a, b, c) {
         *   return [a, b, c];
         * };
         *
         * var curried = _.curry(abc);
         *
         * curried(1)(2)(3);
         * // => [1, 2, 3]
         *
         * curried(1, 2)(3);
         * // => [1, 2, 3]
         *
         * curried(1, 2, 3);
         * // => [1, 2, 3]
         *
         * // Curried with placeholders.
         * curried(1)(_, 3)(2);
         * // => [1, 2, 3]
         */
        function curry(func, arity, guard) {
          arity = guard ? undefined : arity;
          var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
          result.placeholder = curry.placeholder;
          return result;
        }

        // Assign default placeholders.
        curry.placeholder = {};

        module.exports = curry;


        /***/
}),
/* 410 */
/***/ (function (module, exports, __webpack_require__) {

        var baseGetTag = __webpack_require__(39),
          isObjectLike = __webpack_require__(14),
          isPlainObject = __webpack_require__(123);

        /** `Object#toString` result references. */
        var domExcTag = '[object DOMException]',
          errorTag = '[object Error]';

        /**
         * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
         * `SyntaxError`, `TypeError`, or `URIError` object.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
         * @example
         *
         * _.isError(new Error);
         * // => true
         *
         * _.isError(Error);
         * // => false
         */
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag ||
            (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
        }

        module.exports = isError;


        /***/
}),
/* 411 */
/***/ (function (module, exports, __webpack_require__) {

        var getTag = __webpack_require__(52),
          isObjectLike = __webpack_require__(14);

        /** `Object#toString` result references. */
        var weakMapTag = '[object WeakMap]';

        /**
         * Checks if `value` is classified as a `WeakMap` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
         * @example
         *
         * _.isWeakMap(new WeakMap);
         * // => true
         *
         * _.isWeakMap(new Map);
         * // => false
         */
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }

        module.exports = isWeakMap;


        /***/
}),
/* 412 */
/***/ (function (module, exports, __webpack_require__) {

        var baseClone = __webpack_require__(120),
          baseIteratee = __webpack_require__(1);

        /** Used to compose bitmasks for cloning. */
        var CLONE_DEEP_FLAG = 1;

        /**
         * Creates a function that invokes `func` with the arguments of the created
         * function. If `func` is a property name, the created function returns the
         * property value for a given element. If `func` is an array or object, the
         * created function returns `true` for elements that contain the equivalent
         * source properties, otherwise it returns `false`.
         *
         * @static
         * @since 4.0.0
         * @memberOf _
         * @category Util
         * @param {*} [func=_.identity] The value to convert to a callback.
         * @returns {Function} Returns the callback.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': true },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
         * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.filter(users, _.iteratee(['user', 'fred']));
         * // => [{ 'user': 'fred', 'age': 40 }]
         *
         * // The `_.property` iteratee shorthand.
         * _.map(users, _.iteratee('user'));
         * // => ['barney', 'fred']
         *
         * // Create custom iteratee shorthands.
         * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
         *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
         *     return func.test(string);
         *   };
         * });
         *
         * _.filter(['abc', 'def'], /ef/);
         * // => ['def']
         */
        function iteratee(func) {
          return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
        }

        module.exports = iteratee;


        /***/
}),
/* 413 */
/***/ (function (module, exports, __webpack_require__) {

        var createWrap = __webpack_require__(115),
          flatRest = __webpack_require__(67);

        /** Used to compose bitmasks for function metadata. */
        var WRAP_REARG_FLAG = 256;

        /**
         * Creates a function that invokes `func` with arguments arranged according
         * to the specified `indexes` where the argument value at the first index is
         * provided as the first argument, the argument value at the second index is
         * provided as the second argument, and so on.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to rearrange arguments for.
         * @param {...(number|number[])} indexes The arranged argument indexes.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var rearged = _.rearg(function(a, b, c) {
         *   return [a, b, c];
         * }, [2, 0, 1]);
         *
         * rearged('b', 'c', 'a')
         * // => ['a', 'b', 'c']
         */
        var rearg = flatRest(function (func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
        });

        module.exports = rearg;


        /***/
}),
/* 414 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayMap = __webpack_require__(7),
          copyArray = __webpack_require__(40),
          isArray = __webpack_require__(4),
          isSymbol = __webpack_require__(34),
          stringToPath = __webpack_require__(161),
          toKey = __webpack_require__(31),
          toString = __webpack_require__(162);

        /**
         * Converts `value` to a property path array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {*} value The value to convert.
         * @returns {Array} Returns the new property path array.
         * @example
         *
         * _.toPath('a.b.c');
         * // => ['a', 'b', 'c']
         *
         * _.toPath('a[0].b.c');
         * // => ['a', '0', 'b', 'c']
         */
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }

        module.exports = toPath;


        /***/
}),
/* 415 */
/***/ (function (module, exports, __webpack_require__) {

        module.exports = {
          'assign': __webpack_require__(416),
          'assignIn': __webpack_require__(190),
          'assignInWith': __webpack_require__(191),
          'assignWith': __webpack_require__(417),
          'at': __webpack_require__(418),
          'create': __webpack_require__(419),
          'defaults': __webpack_require__(420),
          'defaultsDeep': __webpack_require__(421),
          'entries': __webpack_require__(425),
          'entriesIn': __webpack_require__(428),
          'extend': __webpack_require__(429),
          'extendWith': __webpack_require__(430),
          'findKey': __webpack_require__(431),
          'findLastKey': __webpack_require__(432),
          'forIn': __webpack_require__(433),
          'forInRight': __webpack_require__(434),
          'forOwn': __webpack_require__(435),
          'forOwnRight': __webpack_require__(436),
          'functions': __webpack_require__(437),
          'functionsIn': __webpack_require__(438),
          'get': __webpack_require__(105),
          'has': __webpack_require__(439),
          'hasIn': __webpack_require__(107),
          'invert': __webpack_require__(441),
          'invertBy': __webpack_require__(443),
          'invoke': __webpack_require__(444),
          'keys': __webpack_require__(15),
          'keysIn': __webpack_require__(13),
          'mapKeys': __webpack_require__(446),
          'mapValues': __webpack_require__(447),
          'merge': __webpack_require__(448),
          'mergeWith': __webpack_require__(195),
          'omit': __webpack_require__(449),
          'omitBy': __webpack_require__(451),
          'pick': __webpack_require__(453),
          'pickBy': __webpack_require__(204),
          'result': __webpack_require__(455),
          'set': __webpack_require__(456),
          'setWith': __webpack_require__(457),
          'toPairs': __webpack_require__(196),
          'toPairsIn': __webpack_require__(198),
          'transform': __webpack_require__(458),
          'unset': __webpack_require__(459),
          'update': __webpack_require__(460),
          'updateWith': __webpack_require__(461),
          'values': __webpack_require__(462),
          'valuesIn': __webpack_require__(463)
        };


        /***/
}),
/* 416 */
/***/ (function (module, exports, __webpack_require__) {

        var assignValue = __webpack_require__(68),
          copyObject = __webpack_require__(25),
          createAssigner = __webpack_require__(54),
          isArrayLike = __webpack_require__(63),
          isPrototype = __webpack_require__(86),
          keys = __webpack_require__(15);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Assigns own enumerable string keyed properties of source objects to the
         * destination object. Source objects are applied from left to right.
         * Subsequent sources overwrite property assignments of previous sources.
         *
         * **Note:** This method mutates `object` and is loosely based on
         * [`Object.assign`](https://mdn.io/Object/assign).
         *
         * @static
         * @memberOf _
         * @since 0.10.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.assignIn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * function Bar() {
         *   this.c = 3;
         * }
         *
         * Foo.prototype.b = 2;
         * Bar.prototype.d = 4;
         *
         * _.assign({ 'a': 0 }, new Foo, new Bar);
         * // => { 'a': 1, 'c': 3 }
         */
        var assign = createAssigner(function (object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });

        module.exports = assign;


        /***/
}),
/* 417 */
/***/ (function (module, exports, __webpack_require__) {

        var copyObject = __webpack_require__(25),
          createAssigner = __webpack_require__(54),
          keys = __webpack_require__(15);

        /**
         * This method is like `_.assign` except that it accepts `customizer`
         * which is invoked to produce the assigned values. If `customizer` returns
         * `undefined`, assignment is handled by the method instead. The `customizer`
         * is invoked with five arguments: (objValue, srcValue, key, object, source).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @see _.assignInWith
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   return _.isUndefined(objValue) ? srcValue : objValue;
         * }
         *
         * var defaults = _.partialRight(_.assignWith, customizer);
         *
         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });

        module.exports = assignWith;


        /***/
}),
/* 418 */
/***/ (function (module, exports, __webpack_require__) {

        var baseAt = __webpack_require__(168),
          flatRest = __webpack_require__(67);

        /**
         * Creates an array of values corresponding to `paths` of `object`.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Array} Returns the picked values.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
         *
         * _.at(object, ['a[0].b.c', 'a[1]']);
         * // => [3, 4]
         */
        var at = flatRest(baseAt);

        module.exports = at;


        /***/
}),
/* 419 */
/***/ (function (module, exports, __webpack_require__) {

        var baseAssign = __webpack_require__(119),
          baseCreate = __webpack_require__(53);

        /**
         * Creates an object that inherits from the `prototype` object. If a
         * `properties` object is given, its own enumerable string keyed properties
         * are assigned to the created object.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Object
         * @param {Object} prototype The object to inherit from.
         * @param {Object} [properties] The properties to assign to the object.
         * @returns {Object} Returns the new object.
         * @example
         *
         * function Shape() {
         *   this.x = 0;
         *   this.y = 0;
         * }
         *
         * function Circle() {
         *   Shape.call(this);
         * }
         *
         * Circle.prototype = _.create(Shape.prototype, {
         *   'constructor': Circle
         * });
         *
         * var circle = new Circle;
         * circle instanceof Circle;
         * // => true
         *
         * circle instanceof Shape;
         * // => true
         */
        function create(prototype, properties) {
          var result = baseCreate(prototype);
          return properties == null ? result : baseAssign(result, properties);
        }

        module.exports = create;


        /***/
}),
/* 420 */
/***/ (function (module, exports, __webpack_require__) {

        var baseRest = __webpack_require__(2),
          eq = __webpack_require__(30),
          isIterateeCall = __webpack_require__(62),
          keysIn = __webpack_require__(13);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Assigns own and inherited enumerable string keyed properties of source
         * objects to the destination object for all destination properties that
         * resolve to `undefined`. Source objects are applied from left to right.
         * Once a property is set, additional values of the same property are ignored.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.defaultsDeep
         * @example
         *
         * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var defaults = baseRest(function (object, sources) {
          object = Object(object);

          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }

          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;

            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];

              if (value === undefined ||
                (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                object[key] = source[key];
              }
            }
          }

          return object;
        });

        module.exports = defaults;


        /***/
}),
/* 421 */
/***/ (function (module, exports, __webpack_require__) {

        var apply = __webpack_require__(50),
          baseRest = __webpack_require__(2),
          customDefaultsMerge = __webpack_require__(422),
          mergeWith = __webpack_require__(195);

        /**
         * This method is like `_.defaults` except that it recursively assigns
         * default properties.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.defaults
         * @example
         *
         * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
         * // => { 'a': { 'b': 2, 'c': 3 } }
         */
        var defaultsDeep = baseRest(function (args) {
          args.push(undefined, customDefaultsMerge);
          return apply(mergeWith, undefined, args);
        });

        module.exports = defaultsDeep;


        /***/
}),
/* 422 */
/***/ (function (module, exports, __webpack_require__) {

        var baseMerge = __webpack_require__(124),
          isObject = __webpack_require__(9);

        /**
         * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
         * objects into destination objects that are passed thru.
         *
         * @private
         * @param {*} objValue The destination value.
         * @param {*} srcValue The source value.
         * @param {string} key The key of the property to merge.
         * @param {Object} object The parent object of `objValue`.
         * @param {Object} source The parent object of `srcValue`.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         * @returns {*} Returns the value to assign.
         */
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            // Recursively merge objects and arrays (susceptible to call stack limits).
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
            stack['delete'](srcValue);
          }
          return objValue;
        }

        module.exports = customDefaultsMerge;


        /***/
}),
/* 423 */
/***/ (function (module, exports, __webpack_require__) {

        var assignMergeValue = __webpack_require__(192),
          cloneBuffer = __webpack_require__(186),
          cloneTypedArray = __webpack_require__(188),
          copyArray = __webpack_require__(40),
          initCloneObject = __webpack_require__(189),
          isArguments = __webpack_require__(75),
          isArray = __webpack_require__(4),
          isArrayLikeObject = __webpack_require__(12),
          isBuffer = __webpack_require__(65),
          isFunction = __webpack_require__(38),
          isObject = __webpack_require__(9),
          isPlainObject = __webpack_require__(123),
          isTypedArray = __webpack_require__(85),
          safeGet = __webpack_require__(194),
          toPlainObject = __webpack_require__(424);

        /**
         * A specialized version of `baseMerge` for arrays and objects which performs
         * deep merges and tracks traversed objects enabling objects with circular
         * references to be merged.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {string} key The key of the value to merge.
         * @param {number} srcIndex The index of `source`.
         * @param {Function} mergeFunc The function to merge values.
         * @param {Function} [customizer] The function to customize assigned values.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         */
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);

          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer
            ? customizer(objValue, srcValue, (key + ''), object, source, stack)
            : undefined;

          var isCommon = newValue === undefined;

          if (isCommon) {
            var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);

            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              }
              else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              }
              else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              }
              else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              }
              else {
                newValue = [];
              }
            }
            else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              }
              else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            }
            else {
              isCommon = false;
            }
          }
          if (isCommon) {
            // Recursively merge objects and arrays (susceptible to call stack limits).
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack['delete'](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }

        module.exports = baseMergeDeep;


        /***/
}),
/* 424 */
/***/ (function (module, exports, __webpack_require__) {

        var copyObject = __webpack_require__(25),
          keysIn = __webpack_require__(13);

        /**
         * Converts `value` to a plain object flattening inherited enumerable string
         * keyed properties of `value` to own properties of the plain object.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {Object} Returns the converted plain object.
         * @example
         *
         * function Foo() {
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.assign({ 'a': 1 }, new Foo);
         * // => { 'a': 1, 'b': 2 }
         *
         * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
         * // => { 'a': 1, 'b': 2, 'c': 3 }
         */
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }

        module.exports = toPlainObject;


        /***/
}),
/* 425 */
/***/ (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(196);


        /***/
}),
/* 426 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayMap = __webpack_require__(7);

        /**
         * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
         * of key-value pairs for `object` corresponding to the property names of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the key-value pairs.
         */
        function baseToPairs(object, props) {
          return arrayMap(props, function (key) {
            return [key, object[key]];
          });
        }

        module.exports = baseToPairs;


        /***/
}),
/* 427 */
/***/ (function (module, exports) {

        /**
         * Converts `set` to its value-value pairs.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the value-value pairs.
         */
        function setToPairs(set) {
          var index = -1,
            result = Array(set.size);

          set.forEach(function (value) {
            result[++index] = [value, value];
          });
          return result;
        }

        module.exports = setToPairs;


        /***/
}),
/* 428 */
/***/ (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(198);


        /***/
}),
/* 429 */
/***/ (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(190);


        /***/
}),
/* 430 */
/***/ (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(191);


        /***/
}),
/* 431 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFindKey = __webpack_require__(199),
          baseForOwn = __webpack_require__(55),
          baseIteratee = __webpack_require__(1);

        /**
         * This method is like `_.find` except that it returns the key of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {string|undefined} Returns the key of the matched element,
         *  else `undefined`.
         * @example
         *
         * var users = {
         *   'barney':  { 'age': 36, 'active': true },
         *   'fred':    { 'age': 40, 'active': false },
         *   'pebbles': { 'age': 1,  'active': true }
         * };
         *
         * _.findKey(users, function(o) { return o.age < 40; });
         * // => 'barney' (iteration order is not guaranteed)
         *
         * // The `_.matches` iteratee shorthand.
         * _.findKey(users, { 'age': 1, 'active': true });
         * // => 'pebbles'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findKey(users, ['active', false]);
         * // => 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.findKey(users, 'active');
         * // => 'barney'
         */
        function findKey(object, predicate) {
          return baseFindKey(object, baseIteratee(predicate, 3), baseForOwn);
        }

        module.exports = findKey;


        /***/
}),
/* 432 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFindKey = __webpack_require__(199),
          baseForOwnRight = __webpack_require__(200),
          baseIteratee = __webpack_require__(1);

        /**
         * This method is like `_.findKey` except that it iterates over elements of
         * a collection in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {string|undefined} Returns the key of the matched element,
         *  else `undefined`.
         * @example
         *
         * var users = {
         *   'barney':  { 'age': 36, 'active': true },
         *   'fred':    { 'age': 40, 'active': false },
         *   'pebbles': { 'age': 1,  'active': true }
         * };
         *
         * _.findLastKey(users, function(o) { return o.age < 40; });
         * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
         *
         * // The `_.matches` iteratee shorthand.
         * _.findLastKey(users, { 'age': 36, 'active': true });
         * // => 'barney'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findLastKey(users, ['active', false]);
         * // => 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.findLastKey(users, 'active');
         * // => 'pebbles'
         */
        function findLastKey(object, predicate) {
          return baseFindKey(object, baseIteratee(predicate, 3), baseForOwnRight);
        }

        module.exports = findLastKey;


        /***/
}),
/* 433 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFor = __webpack_require__(125),
          castFunction = __webpack_require__(56),
          keysIn = __webpack_require__(13);

        /**
         * Iterates over own and inherited enumerable string keyed properties of an
         * object and invokes `iteratee` for each property. The iteratee is invoked
         * with three arguments: (value, key, object). Iteratee functions may exit
         * iteration early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 0.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forInRight
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forIn(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
         */
        function forIn(object, iteratee) {
          return object == null
            ? object
            : baseFor(object, castFunction(iteratee), keysIn);
        }

        module.exports = forIn;


        /***/
}),
/* 434 */
/***/ (function (module, exports, __webpack_require__) {

        var baseForRight = __webpack_require__(201),
          castFunction = __webpack_require__(56),
          keysIn = __webpack_require__(13);

        /**
         * This method is like `_.forIn` except that it iterates over properties of
         * `object` in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forIn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forInRight(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
         */
        function forInRight(object, iteratee) {
          return object == null
            ? object
            : baseForRight(object, castFunction(iteratee), keysIn);
        }

        module.exports = forInRight;


        /***/
}),
/* 435 */
/***/ (function (module, exports, __webpack_require__) {

        var baseForOwn = __webpack_require__(55),
          castFunction = __webpack_require__(56);

        /**
         * Iterates over own enumerable string keyed properties of an object and
         * invokes `iteratee` for each property. The iteratee is invoked with three
         * arguments: (value, key, object). Iteratee functions may exit iteration
         * early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 0.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forOwnRight
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forOwn(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
         */
        function forOwn(object, iteratee) {
          return object && baseForOwn(object, castFunction(iteratee));
        }

        module.exports = forOwn;


        /***/
}),
/* 436 */
/***/ (function (module, exports, __webpack_require__) {

        var baseForOwnRight = __webpack_require__(200),
          castFunction = __webpack_require__(56);

        /**
         * This method is like `_.forOwn` except that it iterates over properties of
         * `object` in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forOwn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forOwnRight(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
         */
        function forOwnRight(object, iteratee) {
          return object && baseForOwnRight(object, castFunction(iteratee));
        }

        module.exports = forOwnRight;


        /***/
}),
/* 437 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFunctions = __webpack_require__(202),
          keys = __webpack_require__(15);

        /**
         * Creates an array of function property names from own enumerable properties
         * of `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to inspect.
         * @returns {Array} Returns the function names.
         * @see _.functionsIn
         * @example
         *
         * function Foo() {
         *   this.a = _.constant('a');
         *   this.b = _.constant('b');
         * }
         *
         * Foo.prototype.c = _.constant('c');
         *
         * _.functions(new Foo);
         * // => ['a', 'b']
         */
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }

        module.exports = functions;


        /***/
}),
/* 438 */
/***/ (function (module, exports, __webpack_require__) {

        var baseFunctions = __webpack_require__(202),
          keysIn = __webpack_require__(13);

        /**
         * Creates an array of function property names from own and inherited
         * enumerable properties of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @returns {Array} Returns the function names.
         * @see _.functions
         * @example
         *
         * function Foo() {
         *   this.a = _.constant('a');
         *   this.b = _.constant('b');
         * }
         *
         * Foo.prototype.c = _.constant('c');
         *
         * _.functionsIn(new Foo);
         * // => ['a', 'b', 'c']
         */
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }

        module.exports = functionsIn;


        /***/
}),
/* 439 */
/***/ (function (module, exports, __webpack_require__) {

        var baseHas = __webpack_require__(440),
          hasPath = __webpack_require__(163);

        /**
         * Checks if `path` is a direct property of `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = { 'a': { 'b': 2 } };
         * var other = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.has(object, 'a');
         * // => true
         *
         * _.has(object, 'a.b');
         * // => true
         *
         * _.has(object, ['a', 'b']);
         * // => true
         *
         * _.has(other, 'a');
         * // => false
         */
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }

        module.exports = has;


        /***/
}),
/* 440 */
/***/ (function (module, exports) {

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * The base implementation of `_.has` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }

        module.exports = baseHas;


        /***/
}),
/* 441 */
/***/ (function (module, exports, __webpack_require__) {

        var constant = __webpack_require__(143),
          createInverter = __webpack_require__(203),
          identity = __webpack_require__(42);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /**
         * Creates an object composed of the inverted keys and values of `object`.
         * If `object` contains duplicate values, subsequent values overwrite
         * property assignments of previous values.
         *
         * @static
         * @memberOf _
         * @since 0.7.0
         * @category Object
         * @param {Object} object The object to invert.
         * @returns {Object} Returns the new inverted object.
         * @example
         *
         * var object = { 'a': 1, 'b': 2, 'c': 1 };
         *
         * _.invert(object);
         * // => { '1': 'c', '2': 'b' }
         */
        var invert = createInverter(function (result, value, key) {
          if (value != null &&
            typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }

          result[value] = key;
        }, constant(identity));

        module.exports = invert;


        /***/
}),
/* 442 */
/***/ (function (module, exports, __webpack_require__) {

        var baseForOwn = __webpack_require__(55);

        /**
         * The base implementation of `_.invert` and `_.invertBy` which inverts
         * `object` with values transformed by `iteratee` and set by `setter`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform values.
         * @param {Object} accumulator The initial inverted object.
         * @returns {Function} Returns `accumulator`.
         */
        function baseInverter(object, setter, iteratee, accumulator) {
          baseForOwn(object, function (value, key, object) {
            setter(accumulator, iteratee(value), key, object);
          });
          return accumulator;
        }

        module.exports = baseInverter;


        /***/
}),
/* 443 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIteratee = __webpack_require__(1),
          createInverter = __webpack_require__(203);

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /**
         * This method is like `_.invert` except that the inverted object is generated
         * from the results of running each element of `object` thru `iteratee`. The
         * corresponding inverted value of each inverted key is an array of keys
         * responsible for generating the inverted value. The iteratee is invoked
         * with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.1.0
         * @category Object
         * @param {Object} object The object to invert.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Object} Returns the new inverted object.
         * @example
         *
         * var object = { 'a': 1, 'b': 2, 'c': 1 };
         *
         * _.invertBy(object);
         * // => { '1': ['a', 'c'], '2': ['b'] }
         *
         * _.invertBy(object, function(value) {
         *   return 'group' + value;
         * });
         * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
         */
        var invertBy = createInverter(function (result, value, key) {
          if (value != null &&
            typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }

          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }, baseIteratee);

        module.exports = invertBy;


        /***/
}),
/* 444 */
/***/ (function (module, exports, __webpack_require__) {

        var baseInvoke = __webpack_require__(445),
          baseRest = __webpack_require__(2);

        /**
         * Invokes the method at `path` of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the method to invoke.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {*} Returns the result of the invoked method.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
         *
         * _.invoke(object, 'a[0].b.c.slice', 1, 3);
         * // => [2, 3]
         */
        var invoke = baseRest(baseInvoke);

        module.exports = invoke;


        /***/
}),
/* 445 */
/***/ (function (module, exports, __webpack_require__) {

        var apply = __webpack_require__(50),
          castPath = __webpack_require__(35),
          last = __webpack_require__(20),
          parent = __webpack_require__(170),
          toKey = __webpack_require__(31);

        /**
         * The base implementation of `_.invoke` without support for individual
         * method arguments.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the method to invoke.
         * @param {Array} args The arguments to invoke the method with.
         * @returns {*} Returns the result of the invoked method.
         */
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined : apply(func, object, args);
        }

        module.exports = baseInvoke;


        /***/
}),
/* 446 */
/***/ (function (module, exports, __webpack_require__) {

        var baseAssignValue = __webpack_require__(69),
          baseForOwn = __webpack_require__(55),
          baseIteratee = __webpack_require__(1);

        /**
         * The opposite of `_.mapValues`; this method creates an object with the
         * same values as `object` and keys generated by running each own enumerable
         * string keyed property of `object` thru `iteratee`. The iteratee is invoked
         * with three arguments: (value, key, object).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns the new mapped object.
         * @see _.mapValues
         * @example
         *
         * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
         *   return key + value;
         * });
         * // => { 'a1': 1, 'b2': 2 }
         */
        function mapKeys(object, iteratee) {
          var result = {};
          iteratee = baseIteratee(iteratee, 3);

          baseForOwn(object, function (value, key, object) {
            baseAssignValue(result, iteratee(value, key, object), value);
          });
          return result;
        }

        module.exports = mapKeys;


        /***/
}),
/* 447 */
/***/ (function (module, exports, __webpack_require__) {

        var baseAssignValue = __webpack_require__(69),
          baseForOwn = __webpack_require__(55),
          baseIteratee = __webpack_require__(1);

        /**
         * Creates an object with the same keys as `object` and values generated
         * by running each own enumerable string keyed property of `object` thru
         * `iteratee`. The iteratee is invoked with three arguments:
         * (value, key, object).
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns the new mapped object.
         * @see _.mapKeys
         * @example
         *
         * var users = {
         *   'fred':    { 'user': 'fred',    'age': 40 },
         *   'pebbles': { 'user': 'pebbles', 'age': 1 }
         * };
         *
         * _.mapValues(users, function(o) { return o.age; });
         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
         *
         * // The `_.property` iteratee shorthand.
         * _.mapValues(users, 'age');
         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
         */
        function mapValues(object, iteratee) {
          var result = {};
          iteratee = baseIteratee(iteratee, 3);

          baseForOwn(object, function (value, key, object) {
            baseAssignValue(result, key, iteratee(value, key, object));
          });
          return result;
        }

        module.exports = mapValues;


        /***/
}),
/* 448 */
/***/ (function (module, exports, __webpack_require__) {

        var baseMerge = __webpack_require__(124),
          createAssigner = __webpack_require__(54);

        /**
         * This method is like `_.assign` except that it recursively merges own and
         * inherited enumerable string keyed properties of source objects into the
         * destination object. Source properties that resolve to `undefined` are
         * skipped if a destination value exists. Array and plain object properties
         * are merged recursively. Other objects and value types are overridden by
         * assignment. Source objects are applied from left to right. Subsequent
         * sources overwrite property assignments of previous sources.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {
         *   'a': [{ 'b': 2 }, { 'd': 4 }]
         * };
         *
         * var other = {
         *   'a': [{ 'c': 3 }, { 'e': 5 }]
         * };
         *
         * _.merge(object, other);
         * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
         */
        var merge = createAssigner(function (object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });

        module.exports = merge;


        /***/
}),
/* 449 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayMap = __webpack_require__(7),
          baseClone = __webpack_require__(120),
          baseUnset = __webpack_require__(111),
          castPath = __webpack_require__(35),
          copyObject = __webpack_require__(25),
          customOmitClone = __webpack_require__(450),
          flatRest = __webpack_require__(67),
          getAllKeysIn = __webpack_require__(121);

        /** Used to compose bitmasks for cloning. */
        var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4;

        /**
         * The opposite of `_.pick`; this method creates an object composed of the
         * own and inherited enumerable property paths of `object` that are not omitted.
         *
         * **Note:** This method is considerably slower than `_.pick`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {...(string|string[])} [paths] The property paths to omit.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.omit(object, ['a', 'c']);
         * // => { 'b': '2' }
         */
        var omit = flatRest(function (object, paths) {
          var result = {};
          if (object == null) {
            return result;
          }
          var isDeep = false;
          paths = arrayMap(paths, function (path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result);
          if (isDeep) {
            result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result, paths[length]);
          }
          return result;
        });

        module.exports = omit;


        /***/
}),
/* 450 */
/***/ (function (module, exports, __webpack_require__) {

        var isPlainObject = __webpack_require__(123);

        /**
         * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
         * objects.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {string} key The key of the property to inspect.
         * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
         */
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined : value;
        }

        module.exports = customOmitClone;


        /***/
}),
/* 451 */
/***/ (function (module, exports, __webpack_require__) {

        var baseIteratee = __webpack_require__(1),
          negate = __webpack_require__(452),
          pickBy = __webpack_require__(204);

        /**
         * The opposite of `_.pickBy`; this method creates an object composed of
         * the own and inherited enumerable string keyed properties of `object` that
         * `predicate` doesn't return truthy for. The predicate is invoked with two
         * arguments: (value, key).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The source object.
         * @param {Function} [predicate=_.identity] The function invoked per property.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.omitBy(object, _.isNumber);
         * // => { 'b': '2' }
         */
        function omitBy(object, predicate) {
          return pickBy(object, negate(baseIteratee(predicate)));
        }

        module.exports = omitBy;


        /***/
}),
/* 452 */
/***/ (function (module, exports) {

        /** Error message constants. */
        var FUNC_ERROR_TEXT = 'Expected a function';

        /**
         * Creates a function that negates the result of the predicate `func`. The
         * `func` predicate is invoked with the `this` binding and arguments of the
         * created function.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} predicate The predicate to negate.
         * @returns {Function} Returns the new negated function.
         * @example
         *
         * function isEven(n) {
         *   return n % 2 == 0;
         * }
         *
         * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
         * // => [1, 3, 5]
         */
        function negate(predicate) {
          if (typeof predicate != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return function () {
            var args = arguments;
            switch (args.length) {
              case 0: return !predicate.call(this);
              case 1: return !predicate.call(this, args[0]);
              case 2: return !predicate.call(this, args[0], args[1]);
              case 3: return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }

        module.exports = negate;


        /***/
}),
/* 453 */
/***/ (function (module, exports, __webpack_require__) {

        var basePick = __webpack_require__(454),
          flatRest = __webpack_require__(67);

        /**
         * Creates an object composed of the picked `object` properties.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.pick(object, ['a', 'c']);
         * // => { 'a': 1, 'c': 3 }
         */
        var pick = flatRest(function (object, paths) {
          return object == null ? {} : basePick(object, paths);
        });

        module.exports = pick;


        /***/
}),
/* 454 */
/***/ (function (module, exports, __webpack_require__) {

        var basePickBy = __webpack_require__(205),
          hasIn = __webpack_require__(107);

        /**
         * The base implementation of `_.pick` without support for individual
         * property identifiers.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} paths The property paths to pick.
         * @returns {Object} Returns the new object.
         */
        function basePick(object, paths) {
          return basePickBy(object, paths, function (value, path) {
            return hasIn(object, path);
          });
        }

        module.exports = basePick;


        /***/
}),
/* 455 */
/***/ (function (module, exports, __webpack_require__) {

        var castPath = __webpack_require__(35),
          isFunction = __webpack_require__(38),
          toKey = __webpack_require__(31);

        /**
         * This method is like `_.get` except that if the resolved value is a
         * function it's invoked with the `this` binding of its parent object and
         * its result is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to resolve.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
         *
         * _.result(object, 'a[0].b.c1');
         * // => 3
         *
         * _.result(object, 'a[0].b.c2');
         * // => 4
         *
         * _.result(object, 'a[0].b.c3', 'default');
         * // => 'default'
         *
         * _.result(object, 'a[0].b.c3', _.constant('default'));
         * // => 'default'
         */
        function result(object, path, defaultValue) {
          path = castPath(path, object);

          var index = -1,
            length = path.length;

          // Ensure the loop is entered when path is empty.
          if (!length) {
            length = 1;
            object = undefined;
          }
          while (++index < length) {
            var value = object == null ? undefined : object[toKey(path[index])];
            if (value === undefined) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }

        module.exports = result;


        /***/
}),
/* 456 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSet = __webpack_require__(70);

        /**
         * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
         * it's created. Arrays are created for missing index properties while objects
         * are created for all other missing properties. Use `_.setWith` to customize
         * `path` creation.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.set(object, 'a[0].b.c', 4);
         * console.log(object.a[0].b.c);
         * // => 4
         *
         * _.set(object, ['x', '0', 'y', 'z'], 5);
         * console.log(object.x[0].y.z);
         * // => 5
         */
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }

        module.exports = set;


        /***/
}),
/* 457 */
/***/ (function (module, exports, __webpack_require__) {

        var baseSet = __webpack_require__(70);

        /**
         * This method is like `_.set` except that it accepts `customizer` which is
         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
         * path creation is handled by the method instead. The `customizer` is invoked
         * with three arguments: (nsValue, key, nsObject).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {};
         *
         * _.setWith(object, '[0][1]', 'a', Object);
         * // => { '0': { '1': 'a' } }
         */
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return object == null ? object : baseSet(object, path, value, customizer);
        }

        module.exports = setWith;


        /***/
}),
/* 458 */
/***/ (function (module, exports, __webpack_require__) {

        var arrayEach = __webpack_require__(90),
          baseCreate = __webpack_require__(53),
          baseForOwn = __webpack_require__(55),
          baseIteratee = __webpack_require__(1),
          getPrototype = __webpack_require__(91),
          isArray = __webpack_require__(4),
          isBuffer = __webpack_require__(65),
          isFunction = __webpack_require__(38),
          isObject = __webpack_require__(9),
          isTypedArray = __webpack_require__(85);

        /**
         * An alternative to `_.reduce`; this method transforms `object` to a new
         * `accumulator` object which is the result of running each of its own
         * enumerable string keyed properties thru `iteratee`, with each invocation
         * potentially mutating the `accumulator` object. If `accumulator` is not
         * provided, a new object with the same `[[Prototype]]` will be used. The
         * iteratee is invoked with four arguments: (accumulator, value, key, object).
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 1.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The custom accumulator value.
         * @returns {*} Returns the accumulated value.
         * @example
         *
         * _.transform([2, 3, 4], function(result, n) {
         *   result.push(n *= n);
         *   return n % 2 == 0;
         * }, []);
         * // => [4, 9]
         *
         * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
         *   (result[value] || (result[value] = [])).push(key);
         * }, {});
         * // => { '1': ['a', 'c'], '2': ['b'] }
         */
        function transform(object, iteratee, accumulator) {
          var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);

          iteratee = baseIteratee(iteratee, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor : [];
            }
            else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            }
            else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
            return iteratee(accumulator, value, index, object);
          });
          return accumulator;
        }

        module.exports = transform;


        /***/
}),
/* 459 */
/***/ (function (module, exports, __webpack_require__) {

        var baseUnset = __webpack_require__(111);

        /**
         * Removes the property at `path` of `object`.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to unset.
         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 7 } }] };
         * _.unset(object, 'a[0].b.c');
         * // => true
         *
         * console.log(object);
         * // => { 'a': [{ 'b': {} }] };
         *
         * _.unset(object, ['a', '0', 'b', 'c']);
         * // => true
         *
         * console.log(object);
         * // => { 'a': [{ 'b': {} }] };
         */
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }

        module.exports = unset;


        /***/
}),
/* 460 */
/***/ (function (module, exports, __webpack_require__) {

        var baseUpdate = __webpack_require__(206),
          castFunction = __webpack_require__(56);

        /**
         * This method is like `_.set` except that accepts `updater` to produce the
         * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
         * is invoked with one argument: (value).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {Function} updater The function to produce the updated value.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.update(object, 'a[0].b.c', function(n) { return n * n; });
         * console.log(object.a[0].b.c);
         * // => 9
         *
         * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
         * console.log(object.x[0].y.z);
         * // => 0
         */
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }

        module.exports = update;


        /***/
}),
/* 461 */
/***/ (function (module, exports, __webpack_require__) {

        var baseUpdate = __webpack_require__(206),
          castFunction = __webpack_require__(56);

        /**
         * This method is like `_.update` except that it accepts `customizer` which is
         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
         * path creation is handled by the method instead. The `customizer` is invoked
         * with three arguments: (nsValue, key, nsObject).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {Function} updater The function to produce the updated value.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {};
         *
         * _.updateWith(object, '[0][1]', _.constant('a'), Object);
         * // => { '0': { '1': 'a' } }
         */
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }

        module.exports = updateWith;


        /***/
}),
/* 462 */
/***/ (function (module, exports, __webpack_require__) {

        var baseValues = __webpack_require__(207),
          keys = __webpack_require__(15);

        /**
         * Creates an array of the own enumerable string keyed property values of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.values(new Foo);
         * // => [1, 2] (iteration order is not guaranteed)
         *
         * _.values('hi');
         * // => ['h', 'i']
         */
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }

        module.exports = values;


        /***/
}),
/* 463 */
/***/ (function (module, exports, __webpack_require__) {

        var baseValues = __webpack_require__(207),
          keysIn = __webpack_require__(13);

        /**
         * Creates an array of the own and inherited enumerable string keyed property
         * values of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.valuesIn(new Foo);
         * // => [1, 2, 3] (iteration order is not guaranteed)
         */
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }

        module.exports = valuesIn;


        /***/
}),
/* 464 */
/***/ (function (module, exports, __webpack_require__) {

        var f = __webpack_require__(16);
        var SolidityType = __webpack_require__(26);

        /**
         * SolidityTypeAddress is a prootype that represents address type
         * It matches:
         * address
         * address[]
         * address[4]
         * address[][]
         * address[3][]
         * address[][6][], ...
         */
        var SolidityTypeAddress = function () {
          this._inputFormatter = f.formatInputInt;
          this._outputFormatter = f.formatOutputAddress;
        };

        SolidityTypeAddress.prototype = new SolidityType({});
        SolidityTypeAddress.prototype.constructor = SolidityTypeAddress;

        SolidityTypeAddress.prototype.isType = function (name) {
          return !!name.match(/address(\[([0-9]*)\])?/);
        };

        module.exports = SolidityTypeAddress;


        /***/
}),
/* 465 */
/***/ (function (module, exports, __webpack_require__) {

        var f = __webpack_require__(16);
        var SolidityType = __webpack_require__(26);

        /**
         * SolidityTypeBool is a prootype that represents bool type
         * It matches:
         * bool
         * bool[]
         * bool[4]
         * bool[][]
         * bool[3][]
         * bool[][6][], ...
         */
        var SolidityTypeBool = function () {
          this._inputFormatter = f.formatInputBool;
          this._outputFormatter = f.formatOutputBool;
        };

        SolidityTypeBool.prototype = new SolidityType({});
        SolidityTypeBool.prototype.constructor = SolidityTypeBool;

        SolidityTypeBool.prototype.isType = function (name) {
          return !!name.match(/^bool(\[([0-9]*)\])*$/);
        };

        module.exports = SolidityTypeBool;


        /***/
}),
/* 466 */
/***/ (function (module, exports, __webpack_require__) {

        var f = __webpack_require__(16);
        var SolidityType = __webpack_require__(26);

        /**
         * SolidityTypeInt is a prootype that represents int type
         * It matches:
         * int
         * int[]
         * int[4]
         * int[][]
         * int[3][]
         * int[][6][], ...
         * int32
         * int64[]
         * int8[4]
         * int256[][]
         * int[3][]
         * int64[][6][], ...
         */
        var SolidityTypeInt = function () {
          this._inputFormatter = f.formatInputInt;
          this._outputFormatter = f.formatOutputInt;
        };

        SolidityTypeInt.prototype = new SolidityType({});
        SolidityTypeInt.prototype.constructor = SolidityTypeInt;

        SolidityTypeInt.prototype.isType = function (name) {
          return !!name.match(/^int([0-9]*)?(\[([0-9]*)\])*$/);
        };

        module.exports = SolidityTypeInt;


        /***/
}),
/* 467 */
/***/ (function (module, exports, __webpack_require__) {

        var f = __webpack_require__(16);
        var SolidityType = __webpack_require__(26);

        /**
         * SolidityTypeUInt is a prootype that represents uint type
         * It matches:
         * uint
         * uint[]
         * uint[4]
         * uint[][]
         * uint[3][]
         * uint[][6][], ...
         * uint32
         * uint64[]
         * uint8[4]
         * uint256[][]
         * uint[3][]
         * uint64[][6][], ...
         */
        var SolidityTypeUInt = function () {
          this._inputFormatter = f.formatInputInt;
          this._outputFormatter = f.formatOutputUInt;
        };

        SolidityTypeUInt.prototype = new SolidityType({});
        SolidityTypeUInt.prototype.constructor = SolidityTypeUInt;

        SolidityTypeUInt.prototype.isType = function (name) {
          return !!name.match(/^uint([0-9]*)?(\[([0-9]*)\])*$/);
        };

        module.exports = SolidityTypeUInt;


        /***/
}),
/* 468 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        
         * @MOAC lab
         * @date 2018
         */
        var f = __webpack_require__(16);
        var SolidityType = __webpack_require__(26);

        var SolidityTypeDynamicBytes = function () {
          this._inputFormatter = f.formatInputDynamicBytes;
          this._outputFormatter = f.formatOutputDynamicBytes;
        };

        SolidityTypeDynamicBytes.prototype = new SolidityType({});
        SolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;

        SolidityTypeDynamicBytes.prototype.isType = function (name) {
          return !!name.match(/^bytes(\[([0-9]*)\])*$/);
        };

        SolidityTypeDynamicBytes.prototype.isDynamicType = function () {
          return true;
        };

        module.exports = SolidityTypeDynamicBytes;


        /***/
}),
/* 469 */
/***/ (function (module, exports, __webpack_require__) {

        var f = __webpack_require__(16);
        var SolidityType = __webpack_require__(26);

        var SolidityTypeString = function () {
          this._inputFormatter = f.formatInputString;
          this._outputFormatter = f.formatOutputString;
        };

        SolidityTypeString.prototype = new SolidityType({});
        SolidityTypeString.prototype.constructor = SolidityTypeString;

        SolidityTypeString.prototype.isType = function (name) {
          return !!name.match(/^string(\[([0-9]*)\])*$/);
        };

        SolidityTypeString.prototype.isDynamicType = function () {
          return true;
        };

        module.exports = SolidityTypeString;

        /***/
}),
/* 470 */
/***/ (function (module, exports, __webpack_require__) {

        var f = __webpack_require__(16);
        var SolidityType = __webpack_require__(26);

        /**
         * SolidityTypeReal is a prootype that represents real type
         * It matches:
         * real
         * real[]
         * real[4]
         * real[][]
         * real[3][]
         * real[][6][], ...
         * real32
         * real64[]
         * real8[4]
         * real256[][]
         * real[3][]
         * real64[][6][], ...
         */
        var SolidityTypeReal = function () {
          this._inputFormatter = f.formatInputReal;
          this._outputFormatter = f.formatOutputReal;
        };

        SolidityTypeReal.prototype = new SolidityType({});
        SolidityTypeReal.prototype.constructor = SolidityTypeReal;

        SolidityTypeReal.prototype.isType = function (name) {
          return !!name.match(/real([0-9]*)?(\[([0-9]*)\])?/);
        };

        module.exports = SolidityTypeReal;


        /***/
}),
/* 471 */
/***/ (function (module, exports, __webpack_require__) {

        var f = __webpack_require__(16);
        var SolidityType = __webpack_require__(26);

        /**
         * SolidityTypeUReal is a prootype that represents ureal type
         * It matches:
         * ureal
         * ureal[]
         * ureal[4]
         * ureal[][]
         * ureal[3][]
         * ureal[][6][], ...
         * ureal32
         * ureal64[]
         * ureal8[4]
         * ureal256[][]
         * ureal[3][]
         * ureal64[][6][], ...
         */
        var SolidityTypeUReal = function () {
          this._inputFormatter = f.formatInputReal;
          this._outputFormatter = f.formatOutputUReal;
        };

        SolidityTypeUReal.prototype = new SolidityType({});
        SolidityTypeUReal.prototype.constructor = SolidityTypeUReal;

        SolidityTypeUReal.prototype.isType = function (name) {
          return !!name.match(/^ureal([0-9]*)?(\[([0-9]*)\])*$/);
        };

        module.exports = SolidityTypeUReal;


        /***/
}),
/* 472 */
/***/ (function (module, exports, __webpack_require__) {

        var f = __webpack_require__(16);
        var SolidityType = __webpack_require__(26);

        /**
         * SolidityTypeBytes is a prototype that represents the bytes type.
         * It matches:
         * bytes
         * bytes[]
         * bytes[4]
         * bytes[][]
         * bytes[3][]
         * bytes[][6][], ...
         * bytes32
         * bytes8[4]
         * bytes[3][]
         */
        var SolidityTypeBytes = function () {
          this._inputFormatter = f.formatInputBytes;
          this._outputFormatter = f.formatOutputBytes;
        };

        SolidityTypeBytes.prototype = new SolidityType({});
        SolidityTypeBytes.prototype.constructor = SolidityTypeBytes;

        SolidityTypeBytes.prototype.isType = function (name) {
          return !!name.match(/^bytes([0-9]{1,})(\[([0-9]*)\])*$/);
        };

        module.exports = SolidityTypeBytes;


        /***/
}),
/* 473 */
/***/ (function (module, exports, __webpack_require__) {

        var f = __webpack_require__(16);
        var SolidityType = __webpack_require__(26);

        /**
         * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used
         *
         * @method mapStructNameAndType
         * @param {string} structName
         * @return {{type: string, name: *}}
         */
        // ABICoder.prototype.mapStructNameAndType = function (structName) {
        //     var type = 'tuple';

        //     if (structName.indexOf('[]') > -1) {
        //         type = 'tuple[]';
        //         structName = structName.slice(0, -2);
        //     }

        //     return {type: type, name: structName};
        // };

        /**
         * SolidityTypeTuple is a protype that represents structure type
         * in Solidity.
         * Solidity supports all the types as ABIs with the same names 
         * with the exception of tuples. 
         * Some Solidity types are not supported by the ABI. 
         * The following table shows on the left column Solidity types 
         * that are not part of the ABI, and on the right column the ABI types that represent them.
         * ========================================================================
         * Solidity  |  ABI
         * address   |  payable address
         * contract  |  address
         * enum      |  smallest uint type that is large enough to hold all values
         *              For example, an enum of 255 values or less is mapped to 
         *              uint8 and an enum of 256 values is mapped to uint16.
         * struct    |  tuple
         * ========================================================================
         * It is supported by solidity v0.4.21 and later version.
         * Tuple type is a list of objects of potentially different types 
         * whose size is a constant at compile-time. 
         * Those tuples can be used to return multiple values at the same 
         * time and also assign them to multiple variables 
         * (or LValues in general) at the same time:
         * https://solidity.readthedocs.io/en/v0.5.10/abi-spec.html#types
         * Handling tuple types
         * Despite that names are intentionally not part of the ABI encoding 
         * they do make a lot of sense to be included in the JSON to enable 
         * displaying it to the end user. The structure is nested in the following way:
         * An object with members name, type and potentially components describes 
         * a typed variable. The canonical type is determined until a tuple type 
         * is reached and the string description up to that point is stored in type 
         * prefix with the word tuple, i.e. it will be tuple followed by a sequence 
         * of [] and [k] with integers k. The components of the tuple are then stored 
         * in the member components, which is of array type and has the same structure 
         * as the top-level object except that indexed is not allowed there.
         * It matches:
         * 
         */
        var SolidityTypeTuple = function () {

          this._inputFormatter = f.formatInputTuple;
          this._outputFormatter = f.formatOutputTuple;
        };

        SolidityTypeTuple.prototype = new SolidityType({});
        SolidityTypeTuple.prototype.constructor = SolidityTypeTuple;

        // Need to identify the type name
        // Note its also possible to have struct
        SolidityTypeTuple.prototype.isType = function (name) {
          // tuple type should be an object with 
          // components 
          return !!name.match(/tuple(\[([0-9]*)\])?/);
        };

        module.exports = SolidityTypeTuple;


        /***/
}),
/* 474 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file allevents.js
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2014
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var sha3 = __webpack_require__(18);
        var SolidityEvent = __webpack_require__(92);
        var formatters = __webpack_require__(3);
        var utils = __webpack_require__(0);
        var Filter = __webpack_require__(44);
        var watches = __webpack_require__(45);

        var AllSolidityEvents = function (requestManager, json, address) {
          this._requestManager = requestManager;
          this._json = json;
          this._address = address;
        };

        AllSolidityEvents.prototype.encode = function (options) {
          options = options || {};
          var result = {};

          ['fromBlock', 'toBlock'].filter(function (f) {
            return options[f] !== undefined;
          }).forEach(function (f) {
            result[f] = formatters.inputBlockNumberFormatter(options[f]);
          });

          result.address = this._address;

          return result;
        };

        AllSolidityEvents.prototype.decode = function (data) {
          data.data = data.data || '';

          var eventTopic = (utils.isArray(data.topics) && utils.isString(data.topics[0])) ? data.topics[0].slice(2) : '';
          var match = this._json.filter(function (j) {
            return eventTopic === sha3(utils.transformToFullName(j));
          })[0];

          if (!match) { // cannot find matching event?
            return formatters.outputLogFormatter(data);
          }

          var event = new SolidityEvent(this._requestManager, match, this._address);

          return event.decode(data);
        };

        AllSolidityEvents.prototype.execute = function (options, callback) {

          if (utils.isFunction(arguments[arguments.length - 1])) {
            callback = arguments[arguments.length - 1];
            if (arguments.length === 1)
              options = null;
          }

          var o = this.encode(options);
          var formatter = this.decode.bind(this);
          return new Filter(o, 'mc', this._requestManager, watches.mc(), formatter, callback);
        };

        AllSolidityEvents.prototype.attachToContract = function (contract) {
          var execute = this.execute.bind(this);
          contract.allEvents = execute;
        };

        module.exports = AllSolidityEvents;



        /***/
}),
/* 475 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /** @file syncing.js
         * @authors:
         *   Fabian Vogelsteller <fabian@ethdev.com>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var formatters = __webpack_require__(3);
        var utils = __webpack_require__(0);

        var count = 1;

        /**
        Adds the callback and sets up the methods, to iterate over the results.
        
        @method pollSyncing
        @param {Object} self
        */
        var pollSyncing = function (self) {

          var onMessage = function (error, sync) {
            if (error) {
              return self.callbacks.forEach(function (callback) {
                callback(error);
              });
            }

            if (utils.isObject(sync) && sync.startingBlock)
              sync = formatters.outputSyncingFormatter(sync);

            self.callbacks.forEach(function (callback) {
              if (self.lastSyncState !== sync) {

                // call the callback with true first so the app can stop anything, before receiving the sync data
                if (!self.lastSyncState && utils.isObject(sync))
                  callback(null, true);

                // call on the next CPU cycle, so the actions of the sync stop can be processes first
                setTimeout(function () {
                  callback(null, sync);
                }, 0);

                self.lastSyncState = sync;
              }
            });
          };

          self.requestManager.startPolling({
            method: 'mc_syncing',
            params: [],
          }, self.pollId, onMessage, self.stopWatching.bind(self));

        };

        var IsSyncing = function (requestManager, callback) {
          this.requestManager = requestManager;
          this.pollId = 'syncPoll_' + count++;
          this.callbacks = [];
          this.addCallback(callback);
          this.lastSyncState = false;
          pollSyncing(this);

          return this;
        };

        IsSyncing.prototype.addCallback = function (callback) {
          if (callback)
            this.callbacks.push(callback);
          return this;
        };

        IsSyncing.prototype.stopWatching = function () {
          console.log("Stop watching");
          this.requestManager.stopPolling(this.pollId);
          this.callbacks = [];
        };

        module.exports = IsSyncing;



        /***/
}),
/* 476 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /** 
         * @file namereg.js
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var globalRegistrarAbi = __webpack_require__(477);
        var icapRegistrarAbi = __webpack_require__(478);

        var globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';
        var icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';

        module.exports = {
          global: {
            abi: globalRegistrarAbi,
            address: globalNameregAddress
          },
          icap: {
            abi: icapRegistrarAbi,
            address: icapNameregAddress
          }
        };



        /***/
}),
/* 477 */
/***/ (function (module, exports) {

        module.exports = [{ "constant": true, "inputs": [{ "name": "_owner", "type": "address" }], "name": "name", "outputs": [{ "name": "o_name", "type": "bytes32" }], "type": "function" }, { "constant": true, "inputs": [{ "name": "_name", "type": "bytes32" }], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "type": "function" }, { "constant": true, "inputs": [{ "name": "_name", "type": "bytes32" }], "name": "content", "outputs": [{ "name": "", "type": "bytes32" }], "type": "function" }, { "constant": true, "inputs": [{ "name": "_name", "type": "bytes32" }], "name": "addr", "outputs": [{ "name": "", "type": "address" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "_name", "type": "bytes32" }], "name": "reserve", "outputs": [], "type": "function" }, { "constant": true, "inputs": [{ "name": "_name", "type": "bytes32" }], "name": "subRegistrar", "outputs": [{ "name": "", "type": "address" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "_name", "type": "bytes32" }, { "name": "_newOwner", "type": "address" }], "name": "transfer", "outputs": [], "type": "function" }, { "constant": false, "inputs": [{ "name": "_name", "type": "bytes32" }, { "name": "_registrar", "type": "address" }], "name": "setSubRegistrar", "outputs": [], "type": "function" }, { "constant": false, "inputs": [], "name": "Registrar", "outputs": [], "type": "function" }, { "constant": false, "inputs": [{ "name": "_name", "type": "bytes32" }, { "name": "_a", "type": "address" }, { "name": "_primary", "type": "bool" }], "name": "setAddress", "outputs": [], "type": "function" }, { "constant": false, "inputs": [{ "name": "_name", "type": "bytes32" }, { "name": "_content", "type": "bytes32" }], "name": "setContent", "outputs": [], "type": "function" }, { "constant": false, "inputs": [{ "name": "_name", "type": "bytes32" }], "name": "disown", "outputs": [], "type": "function" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_name", "type": "bytes32" }, { "indexed": false, "name": "_winner", "type": "address" }], "name": "AuctionEnded", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_name", "type": "bytes32" }, { "indexed": false, "name": "_bidder", "type": "address" }, { "indexed": false, "name": "_value", "type": "uint256" }], "name": "NewBid", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "name", "type": "bytes32" }], "name": "Changed", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "name", "type": "bytes32" }, { "indexed": true, "name": "addr", "type": "address" }], "name": "PrimaryChanged", "type": "event" }]

        /***/
}),
/* 478 */
/***/ (function (module, exports) {

        module.exports = [{ "constant": true, "inputs": [{ "name": "_name", "type": "bytes32" }], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "_name", "type": "bytes32" }, { "name": "_refund", "type": "address" }], "name": "disown", "outputs": [], "type": "function" }, { "constant": true, "inputs": [{ "name": "_name", "type": "bytes32" }], "name": "addr", "outputs": [{ "name": "", "type": "address" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "_name", "type": "bytes32" }], "name": "reserve", "outputs": [], "type": "function" }, { "constant": false, "inputs": [{ "name": "_name", "type": "bytes32" }, { "name": "_newOwner", "type": "address" }], "name": "transfer", "outputs": [], "type": "function" }, { "constant": false, "inputs": [{ "name": "_name", "type": "bytes32" }, { "name": "_a", "type": "address" }], "name": "setAddr", "outputs": [], "type": "function" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "name", "type": "bytes32" }], "name": "Changed", "type": "event" }]

        /***/
}),
/* 479 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        
           @MOAC lab
           @date 2018
         */

        var Iban = __webpack_require__(73);
        var exchangeAbi = __webpack_require__(480);

        /**
         * Should be used to make Iban transfer
         *
         * @method transfer
         * @param {String} from
         * @param {String} to iban
         * @param {Value} value to be tranfered
         * @param {Function} callback, callback
         */
        var transfer = function (mc, from, to, value, callback) {

          var iban = new Iban(to);
          if (!iban.isValid()) {
            throw new Error('invalid iban address');
          }

          if (iban.isDirect()) {
            return transferToAddress(mc, from, iban.address(), value, callback);
          }

          if (!callback) {
            // console.log("iban.institution:", iban.institution());
            var address = mc.icapNamereg().addr(iban.institution());
            // console.log("address:", address);

            return deposit(mc, from, address, value, iban.client());
          }

          mc.icapNamereg().addr(iban.institution(), function (err, address) {
            return deposit(mc, from, address, value, iban.client(), callback);
          });

        };

        /**
         * Should be used to transfer funds to certain address
         *
         * @method transferToAddress
         * @param {String} from
         * @param {String} to
         * @param {Value} value to be tranfered
         * @param {Function} callback, callback
         */
        var transferToAddress = function (mc, from, to, value, callback) {
          return mc.sendTransaction({
            address: to,
            from: from,
            value: value
          }, callback);
        };

        /**
         * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)
         *
         * @method deposit
         * @param {String} from
         * @param {String} to
         * @param {Value} value to be transfered
         * @param {String} client unique identifier
         * @param {Function} callback, callback
         */
        var deposit = function (mc, from, to, value, client, callback) {
          var abi = exchangeAbi;
          return mc.contract(abi).at(to).deposit(client, {
            from: from,
            value: value
          }, callback);
        };

        module.exports = transfer;



        /***/
}),
/* 480 */
/***/ (function (module, exports) {

        module.exports = [{ "constant": false, "inputs": [{ "name": "from", "type": "bytes32" }, { "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [], "type": "function" }, { "constant": false, "inputs": [{ "name": "from", "type": "bytes32" }, { "name": "to", "type": "address" }, { "name": "indirectId", "type": "bytes32" }, { "name": "value", "type": "uint256" }], "name": "icapTransfer", "outputs": [], "type": "function" }, { "constant": false, "inputs": [{ "name": "to", "type": "bytes32" }], "name": "deposit", "outputs": [], "payable": true, "type": "function" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "from", "type": "address" }, { "indexed": false, "name": "value", "type": "uint256" }], "name": "AnonymousDeposit", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "from", "type": "address" }, { "indexed": true, "name": "to", "type": "bytes32" }, { "indexed": false, "name": "value", "type": "uint256" }], "name": "Deposit", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "from", "type": "bytes32" }, { "indexed": true, "name": "to", "type": "address" }, { "indexed": false, "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "from", "type": "bytes32" }, { "indexed": true, "name": "to", "type": "address" }, { "indexed": false, "name": "indirectId", "type": "bytes32" }, { "indexed": false, "name": "value", "type": "uint256" }], "name": "IcapTransfer", "type": "event" }]

        /***/
}),
/* 481 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file vnode.js
         * Display the vnodeconfig.json content
         * This is not a public service at this moment.
         * @MOAC lab
         * @date 2018
         *
         */



        var Method = __webpack_require__(28);
        var Property = __webpack_require__(29);

        var Vnode = function (chain3) {
          this._requestManager = chain3._requestManager;

          var self = this;

          //Save the properties
          properties().forEach(function (p) {
            p.attachToObject(self);
            p.setRequestManager(self._requestManager);
          });
        };


        var properties = function () {
          return [
            new Property({
              name: 'showToPublic',
              getter: 'vnode_showToPublic'
            }),
            new Property({
              name: 'ip',
              getter: 'vnode_vnodeIP'
            }),
            new Property({
              name: 'serviceCfg',
              getter: 'vnode_serviceCfg'
            }),
            new Property({
              name: 'address',
              getter: 'vnode_address'

            }),
            new Property({
              name: 'scsService',
              getter: 'vnode_scsService'

            })
          ];
        };

        // var methods = function() {

        //     var getAddress = new Method({
        //         name: 'getAddress',
        //         call: 'vnode_getAddress',
        //         params: 0
        //     });
        // }

        module.exports = Vnode;


        /***/
}),
/* 482 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /** @file scs.js
         * process RPC commands to SCS monitors
         * @authors:
         * @MOAC lab
         * @date 2018
         * Methods supported by SCSserver:
         * getScsId
         * getMicroChainList
         * getNonce
         * getBlockNumber
         * getBlock
         * getBalance
         * 2019/07/01
         * Added new RPC methods
             getNonce,
            getSCSId,
            getDatadir,
            getDappAddrList,
            protocolVersion,
            getDappState,
            getDappAddrList,
            getMicroChainList,
            getMicroChainInfo,
            getAppChainList,
            getAppChainInfo,   
            getBlockNumber,
            getBlock,
            getBlockList,
            getBalance,
            getTransactionByHash,
            getTransactionByNonce,
            getReceiptByHash,
            getReceiptByNonce,
            getExchangeInfo,
            getExchangeByAddress,
            directCall
            getTxpool
         * 
         */

        var formatters = __webpack_require__(3);
        var Method = __webpack_require__(28);
        var utils = __webpack_require__(0);
        var Property = __webpack_require__(29);
        // var Dapp = require('../dapp');
        var config = __webpack_require__(47); //for MicroChain address

        // SCS object
        var Scs = function (chain3) {
          this._requestManager = chain3._scsRequestManager;

          var self = this;

          properties().forEach(function (p) {
            p.attachToObject(self);
            p.setRequestManager(chain3._scsRequestManager);
          });

          methods().forEach(function (method) {
            method.attachToObject(self);
            method.setRequestManager(chain3._scsRequestManager);
          });

        };

        // SCSID
        // 
        /// @returns an objects describing chain3.scs properties
        var properties = function () {
          return [
            new Property({
              name: 'listening',
              getter: 'scs_listening'
            })
          ];
        };

        Object.defineProperty(Scs.prototype, 'defaultAddress', {
          get: function () {
            return config.defaultSCSId;
          },
          set: function (val) {
            config.defaultSCSId = val;
            return val;
          }
        });

        var methods = function () {

          // Return the nonce of the account in the MicroChain.
          var getNonce = new Method({
            name: 'getNonce',
            call: 'scs_getNonce',
            params: 2,
            inputFormatter: [formatters.inputAddressFormatter, formatters.inputAddressFormatter],
            outputFormatter: utils.toDecimal
          });

          // Return the SCS id, this is not the beneficial address, but the add to identify the SCS
          // in the MOAC network.
          var getSCSId = new Method({
            name: 'getSCSId',
            call: 'scs_getSCSId',
            params: 0
          });

          //check the data dir of the SCS storage
          var getDatadir = new Method({
            name: 'getDatadir',
            call: 'scs_datadir',
            params: 0
          });

          // Display the Dapp list on the SCS
          // for use with v1.0.8 multi contract version
          // return multiple addresses

          var getDappAddrList = new Method({
            name: 'getDappAddrList',
            call: 'scs_getDappAddrList',
            params: 0
          });

          //display the protocol version info
          var protocolVersion = new Method({
            name: 'protocolVersion',
            call: 'scs_protocolVersion',
            params: 0
          });

          // Display the microChain list on the SCS
          var getMicroChainList = new Method({
            name: 'getMicroChainList',
            call: 'scs_getMicroChainList',
            params: 0
          });

          // Display the microChain list on the SCS
          var getMicroChainInfo = new Method({
            name: 'getMicroChainInfo',
            call: 'scs_getMicroChainInfo',
            params: 1,
            inputFormatter: [formatters.inputAddressFormatter]
          });

          // Display the appChain list on the SCS
          var getAppChainList = new Method({
            name: 'getAppChainList',
            call: 'scs_getMicroChainList',
            params: 0
          });

          // Display the microChain list on the SCS
          var getAppChainInfo = new Method({
            name: 'getAppChainInfo',
            call: 'scs_getMicroChainInfo',
            params: 1,
            inputFormatter: [formatters.inputAddressFormatter]
          });

          // call the DAPP function and return the data
          var getDappState = new Method({
            name: 'getDappState',
            call: 'scs_getDappState',
            params: 1,
            inputFormatter: [formatters.inputAddressFormatter]
          });

          // call the DAPP function and return the data
          var getDappAddrList = new Method({
            name: 'getDappAddrList',
            call: 'scs_getDappAddrList',
            params: 1,
            inputFormatter: [formatters.inputAddressFormatter]
          });

          // Get the block number of the MicroChain
          var getBlockNumber = new Method({
            name: 'getBlockNumber',
            call: 'scs_getBlockNumber',
            params: 1,
            inputFormatter: [formatters.inputAddressFormatter],
            outputFormatter: utils.toDecimal
          });

          // Get a single BLOCK info from the MicroChain.
          var getBlock = new Method({
            name: 'getBlock',
            call: 'scs_getBlock',
            params: 2,
            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],
            outputFormatter: formatters.outputBlockFormatter
          });

          // Get multiple BLOCKs info from the MicroChain.
          var getBlockList = new Method({
            name: 'getBlockList',
            call: 'scs_getBlockList',
            params: 3,
            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter, formatters.inputDefaultBlockNumberFormatter]
          });

          // get the balance of the MicroChain token
          // for the account.
          // If the MicroChain is a non-token chain,
          // this always returns 0
          // Only return the balance in the lastest block
          var getBalance = new Method({
            name: 'getBalance',
            call: 'scs_getBalance',
            params: 2,
            inputFormatter: [formatters.inputAddressFormatter, formatters.inputAddressFormatter],
            outputFormatter: formatters.outputBigNumberFormatter
          });

          // call the DAPP function using input data 
          // This only returns the constant views
          // used with Dapp constructor
          var directCall = new Method({
            name: 'directCall',
            call: 'scs_directCall',
            params: 1,
            inputFormatter: [formatters.inputTransactionFormatter]
          });


          // Return the transaction info by 
          // MicroChainAddress
          // Account address
          // Account nonce (for this MicroChain)
          var getTransactionByNonce = new Method({
            name: 'getTransactionByNonce',
            call: 'scs_getTransactionByNonce',
            params: 3,
            outputFormatter: formatters.outputTransactionFormatter
          });

          // Return the transaction info from the MicroChain
          // MicroChainAddress
          // Transaction Hash
          var getTransactionByHash = new Method({
            name: 'getTransactionByHash',
            call: 'scs_getTransactionByHash',
            params: 2,
            outputFormatter: formatters.outputTransactionFormatter
          });

          // Return the transaction Receipt 
          var getReceiptByHash = new Method({
            name: 'getReceiptByHash',
            call: 'scs_getReceiptByHash',
            params: 2,
            outputFormatter: formatters.outputTransactionFormatter
          });

          // Return the transaction info by 
          // MicroChainAddress
          // Account address
          // Account nonce (for this MicroChain)
          var getReceiptByNonce = new Method({
            name: 'getReceiptByNonce',
            call: 'scs_getReceiptByNonce',
            params: 3,
            outputFormatter: formatters.outputTransactionFormatter
          });

          // Return the Exchange info between MotherChain and MicroChain
          // for a certain address
          var getExchangeByAddress = new Method({
            name: 'getExchangeByAddress',
            call: 'scs_getExchangeByAddress',
            params: 10,
            inputFormatter: [formatters.inputAddressFormatter, formatters.inputAddressFormatter,
            formatters.inputDefaultRecordIndexFormatter, formatters.inputDefaultRecordSizeFormatter,
            formatters.inputDefaultRecordIndexFormatter, formatters.inputDefaultRecordIndexFormatter,
            formatters.inputDefaultRecordIndexFormatter, formatters.inputDefaultRecordIndexFormatter,
            formatters.inputDefaultRecordIndexFormatter, formatters.inputDefaultRecordSizeFormatter]
          });

          // Return the Exchange info between MotherChain and MicroChain
          var getExchangeInfo = new Method({
            name: 'getExchangeInfo',
            call: 'scs_getExchangeInfo',
            params: 5,
            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultRecordIndexFormatter,
            formatters.inputDefaultRecordSizeFormatter, formatters.inputDefaultRecordIndexFormatter,
            formatters.inputDefaultRecordSizeFormatter]
          });

          // Return the TXPOOL info on the MicroChain
          var getTxpool = new Method({
            name: 'getTxpool',
            call: 'scs_getTxpool',
            params: 1,
            inputFormatter: [formatters.inputAddressFormatter]
          });

          return [
            getNonce,
            getSCSId,
            getDatadir,
            getDappAddrList,
            protocolVersion,
            getDappState,
            getDappAddrList,
            getMicroChainList,
            getMicroChainInfo,
            getAppChainList,
            getAppChainInfo,
            getBlockNumber,
            getBlock,
            getBlockList,
            getBalance,
            getTransactionByHash,
            getTransactionByNonce,
            getReceiptByHash,
            getReceiptByNonce,
            getExchangeInfo,
            getExchangeByAddress,
            getTxpool,
            directCall
          ];
        }

        /*
         * Init the MicroChain Dapp 
         */
        // Scs.prototype.dapp = function (abi) {
        //     var factory = new Dapp(this, abi);
        //     return factory;
        // };

        //TODO, not working, need to add watches.scs package
        // Scs.prototype.filter = function (options, callback, filterCreationErrorCallback) {
        //     return new Filter(options, 'scs', this._requestManager, watches.mc(), formatters.outputLogFormatter, callback, filterCreationErrorCallback);
        // };

        module.exports = Scs;

        /***/
}),
/* 483 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */




        // New management APIs for VNODE
        // need to enable the admin in the VNODE 
        var Method = __webpack_require__(28);
        var Property = __webpack_require__(29);
        var formatters = __webpack_require__(3);

        function Admin(chain3) {
          this._requestManager = chain3._requestManager;

          var self = this;

          methods().forEach(function (method) {
            method.attachToObject(self);
            method.setRequestManager(self._requestManager);
          });

          // 
          properties().forEach(function (p) {
            p.attachToObject(self);
            p.setRequestManager(self._requestManager);
          });
        }

        var methods = function () {

          var addPeer = new Method({
            name: 'addPeer',
            call: 'admin_addPeer',
            params: 1
          });

          // Inputs are the paprameters
          // host: network interface to open the listener socket on (defaults to "localhost")
          // port: network port to open the listener socket on (defaults to 8546)
          // cors: cross-origin resource sharing header to use (defaults to "")
          // apis: API modules to offer over this interface (defaults to "mc,net,chain3")
          // e.g. admin.startRPC("127.0.0.1", 8545)
          var startRPC = new Method({
            name: 'startRPC',
            call: 'admin_startRPC',
            params: 4,
            inputFormatter: [null, null, null, null]
          });

          var stopRPC = new Method({
            name: 'stopRPC',
            call: 'admin_stopRPC'
          });

          // Input as signed Transaction
          var startWS = new Method({
            name: 'startWS',
            call: 'admin_startWS',
            params: 4,
            inputFormatter: [null, null, null, null]
          });

          // Input as signed Transaction
          var stopWS = new Method({
            name: 'stopWS',
            call: 'admin_stopWS'
          });

          return [
            addPeer,
            startRPC,
            stopRPC,
            startWS,
            stopWS
          ];
        };

        var properties = function () {
          return [
            new Property({
              name: 'datadir',
              getter: 'admin_datadir'
            }),
            new Property({
              name: 'peers',
              getter: 'admin_peers'
            }),
            new Property({
              name: 'nodeInfo',
              getter: 'admin_nodeInfo'
            })
          ];
        };


        module.exports = Admin;


        /***/
}),
/* 484 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */

        // New part of 



        var Property = __webpack_require__(29);
        var formatters = __webpack_require__(3);

        // Only keep the properties
        function Txpool(chain3) {
          this._requestManager = chain3._requestManager;

          var self = this;

          // methods().forEach(function(method) {
          //     method.attachToObject(self);
          //     method.setRequestManager(self._requestManager);
          // });

          properties().forEach(function (p) {
            p.attachToObject(self);
            p.setRequestManager(self._requestManager);
          });
        }

        var properties = function () {
          return [
            new Property({
              name: 'content',
              getter: 'txpool_content'
            }),
            new Property({
              name: 'status',
              getter: 'txpool_status'
            }),
            new Property({
              name: 'inspect',
              getter: 'txpool_inspect'
            })
          ];
        };


        module.exports = Txpool;


        /***/
}),
/* 485 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /** @file mc.js
         * @authors:
         *   Marek Kotewicz <marek@ethdev.com>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var formatters = __webpack_require__(3);
        var Method = __webpack_require__(28);
        var utils = __webpack_require__(0);
        var Property = __webpack_require__(29);

        var Net = function (chain3) {
          this._requestManager = chain3._requestManager;

          var self = this;

          properties().forEach(function (p) {
            p.attachToObject(self);
            p.setRequestManager(chain3._requestManager);
          });

          methods().forEach(function (method) {
            method.attachToObject(self);
            method.setRequestManager(chain3._requestManager);
          });

        };

        /// @returns an array of objects describing chain3.net api properties
        var properties = function () {
          return [
            new Property({
              name: 'listening',
              getter: 'net_listening'
            }),
            new Property({
              name: 'peerCount',
              getter: 'net_peerCount',
              outputFormatter: utils.toDecimal
            })
          ];
        };

        var methods = function () {
          var getVnodes = new Method({
            name: 'getVnodes',
            call: 'net_getVnodes',
            params: 0,
            outputFormatter: formatters.outputVnodesFormatter
          });

          return [getVnodes];
        }

        module.exports = Net;


        /***/
}),
/* 486 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */




        var Method = __webpack_require__(28);
        var Property = __webpack_require__(29);
        var formatters = __webpack_require__(3);

        function Personal(chain3) {
          this._requestManager = chain3._requestManager;

          var self = this;

          methods().forEach(function (method) {
            method.attachToObject(self);
            method.setRequestManager(self._requestManager);
          });

          properties().forEach(function (p) {
            p.attachToObject(self);
            p.setRequestManager(self._requestManager);
          });
        }

        var methods = function () {
          var newAccount = new Method({
            name: 'newAccount',
            call: 'personal_newAccount',
            params: 1,
            inputFormatter: [null]
          });

          var importRawKey = new Method({
            name: 'importRawKey',
            call: 'personal_importRawKey',
            params: 2
          });

          var sign = new Method({
            name: 'sign',
            call: 'personal_sign',
            params: 3,
            inputFormatter: [null, formatters.inputAddressFormatter, null]
          });

          var ecRecover = new Method({
            name: 'ecRecover',
            call: 'personal_ecRecover',
            params: 2
          });

          var unlockAccount = new Method({
            name: 'unlockAccount',
            call: 'personal_unlockAccount',
            params: 3,
            inputFormatter: [formatters.inputAddressFormatter, null, null]
          });

          var sendTransaction = new Method({
            name: 'sendTransaction',
            call: 'personal_sendTransaction',
            params: 2,
            inputFormatter: [formatters.inputTransactionFormatter, null]
          });

          var lockAccount = new Method({
            name: 'lockAccount',
            call: 'personal_lockAccount',
            params: 1,
            inputFormatter: [formatters.inputAddressFormatter]
          });

          return [
            newAccount,
            importRawKey,
            unlockAccount,
            ecRecover,
            sign,
            sendTransaction,
            lockAccount
          ];
        };

        var properties = function () {
          return [
            new Property({
              name: 'listAccounts',
              getter: 'personal_listAccounts'
            })
          ];
        };


        module.exports = Personal;


        /***/
}),
/* 487 */
/***/ (function (module, exports) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        
           used for default settings
           @MOAC lab
           @date 2018
         */

        var Settings = function () {
          this.defaultBlock = 'latest';
          this.defaultAccount = undefined;
        };

        module.exports = Settings;



        /***/
}),
/* 488 */
/***/ (function (module, exports) {

        module.exports = { "version": "0.1.22" }

        /***/
}),
/* 489 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file extend.js
         * @MOAC lab
         * @date 2018
         */
        var formatters = __webpack_require__(3);
        var utils = __webpack_require__(0);
        var Method = __webpack_require__(28);
        var Property = __webpack_require__(29);

        // TODO: refactor, so the input params are not altered.
        // it's necessary to make same 'extension' work with multiple providers
        var extend = function (chain3) {
          /* jshint maxcomplexity:5 */
          var ex = function (extension) {

            var extendedObject;
            if (extension.property) {
              if (!chain3[extension.property]) {
                chain3[extension.property] = {};
              }
              extendedObject = chain3[extension.property];
            } else {
              extendedObject = chain3;
            }

            if (extension.methods) {
              extension.methods.forEach(function (method) {
                method.attachToObject(extendedObject);
                method.setRequestManager(chain3._requestManager);
              });
            }

            if (extension.properties) {
              extension.properties.forEach(function (property) {
                property.attachToObject(extendedObject);
                property.setRequestManager(chain3._requestManager);
              });
            }
          };

          ex.formatters = formatters;
          ex.utils = utils;
          ex.Method = Method;
          ex.Property = Property;

          return ex;
        };



        module.exports = extend;



        /***/
}),
/* 490 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /** 
         * @file batch.js
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var Jsonrpc = __webpack_require__(133);
        var errors = __webpack_require__(32);

        var Batch = function (chain3) {
          this.requestManager = chain3._requestManager;
          this.requests = [];
        };

        /**
         * Should be called to add create new request to batch request
         *
         * @method add
         * @param {Object} jsonrpc requet object
         */
        Batch.prototype.add = function (request) {
          this.requests.push(request);
        };

        /**
         * Should be called to execute batch request
         *
         * @method execute
         */
        Batch.prototype.execute = function () {
          var requests = this.requests;
          this.requestManager.sendBatch(requests, function (err, results) {
            results = results || [];
            requests.map(function (request, index) {
              return results[index] || {};
            }).forEach(function (result, index) {
              if (requests[index].callback) {

                if (!Jsonrpc.isValidResponse(result)) {
                  return requests[index].callback(errors.InvalidResponse(result));
                }

                requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));
              }
            });
          });
        };

        module.exports = Batch;



        /***/
}),
/* 491 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {/*
    This file is part of chain3.js.

    chain3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    chain3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
          /** @file httpprovider.js
           * @authors:
           *   Marek Kotewicz <marek@ethdev.com>
           *   Marian Oancea <marian@ethdev.com>
           *   Fabian Vogelsteller <fabian@ethdev.com>
           * @date 2015
           */

          var errors = __webpack_require__(32);

          // workaround to use httpprovider in different envs

          // browser

          if (typeof window !== 'undefined' && window.XMLHttpRequest) {
            var XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line
            // node
          } else {
            // var XMLHttpRequest = __webpack_require__(492).XMLHttpRequest; // jshint ignore: line
            var XMLHttpRequest = require('../wxapp-xmlhttprequest/index.js').default;

          }

          var XHR2 = __webpack_require__(493); // jshint ignore: line

          /**
           * HttpProvider should be used to send rpc calls over http
           */
          var HttpProvider = function (host, timeout, user, password, headers) {
            this.host = host || 'http://localhost:8545';
            this.timeout = timeout || 0;
            this.user = user;
            this.password = password;
            this.headers = headers;
          };

          /**
           * Should be called to prepare new XMLHttpRequest
           *
           * @method prepareRequest
           * @param {Boolean} true if request should be async
           * @return {XMLHttpRequest} object
           */
          HttpProvider.prototype.prepareRequest = function (async) {
            var request;

            if (async) {
              request = new XMLHttpRequest();
              request.timeout = this.timeout;
              console.log("async request", request)
            } else {
              request = new XMLHttpRequest();
            }

            request.open('POST', this.host, async);
            if (this.user && this.password) {
              var auth = 'Basic ' + new Buffer(this.user + ':' + this.password).toString('base64');
              request.setRequestHeader('Authorization', auth);
            } request.setRequestHeader('Content-Type', 'application/json');
            if (this.headers) {
              this.headers.forEach(function (header) {
                request.setRequestHeader(header.name, header.value);
              });
            }
            return request;
          };
          const regeneratorRuntime = require('../regenerator/runtime.js');
          /**
           * Should be called to make sync request
           *
           * @method send
           * @param {Object} payload
           * @return {Object} result
           */

          HttpProvider.prototype.send = async function (payload) { //debugpoint
            var request = this.prepareRequest(false);
        console.log(payload)
            // console.log("request",request)
            // console.log("before result", request.__response)

            try {
              await request.send(JSON.stringify(payload)).then(data => {
                result = data.responseText;
                // console.log(result)
              })

              var result = request.responseText;

              try {
                result = JSON.parse(result);
              } catch (e) {
                throw errors.InvalidResponse(request.responseText);
              }
              
              return result;
            } catch (error) {
              throw errors.InvalidConnection(this.host);
            }

          };

          /**
           * Should be used to make async request
           *
           * @method sendAsync
           * @param {Object} payload
           * @param {Function} callback triggered on end with (err, result)
           */
          HttpProvider.prototype.sendAsync = function (payload, callback) {
            var request = this.prepareRequest(true);
            // console.log("sendasync",request)
            // request.onreadystatechange = function () {
            //   console.log("onreadystatechange")
            //   if (request.readyState === 4 && request.timeout !== 1) {
            //     var result = request.responseText;
            //     var error = null;

            //     try {
            //       result = JSON.parse(result);
            //     } catch (e) {
            //       error = errors.InvalidResponse(request.responseText);
            //     }
            //     callback(error, result);
            //   }
            // };
            request.ontimeout = function () {
              callback(errors.ConnectionTimeout(this.timeout));
            };

            try {
              request.send(JSON.stringify(payload)).then(data => {
                var result = data.responseText;
                var error = null;

                try {
                  result = JSON.parse(result);
                } catch (e) {
                  error = errors.InvalidResponse(request.responseText);
                }
                callback(error, result);
              });
            } catch (error) {
              callback(errors.InvalidConnection(this.host));
            }
          };

          /**
           * Synchronously tries to make Http request
           *
           * @method isConnected
           * @return {Boolean} returns true if request haven't failed. Otherwise false
           */
          HttpProvider.prototype.isConnected = function () {
            try {
              this.send({
                id: 9999999999,
                jsonrpc: '2.0',
                method: 'net_listening',
                params: []
              });
              return true;
            } catch (e) {
              return false;
            }
          };

          module.exports = HttpProvider;

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(27).Buffer))

        /***/
}),
/* 492 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        // go env doesn't have and need XMLHttpRequest
        if (typeof XMLHttpRequest === 'undefined') {
          exports.XMLHttpRequest = {};
        } else {
          exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line
        }



        /***/
}),
/* 493 */
/***/ (function (module, exports) {

        module.exports = XMLHttpRequest;


        /***/
}),
/* 494 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /** @file ipcprovider.js
         * @authors:
         *   Fabian Vogelsteller <fabian@ethdev.com>
         *  @date 2015
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */



        var utils = __webpack_require__(0);
        var errors = __webpack_require__(32);


        var IpcProvider = function (path, net) {
          var _this = this;
          this.responseCallbacks = {};
          this.path = path;

          this.connection = net.connect({ path: this.path });

          this.connection.on('error', function (e) {
            console.error('IPC Connection Error', e);
            _this._timeout();
          });

          this.connection.on('end', function () {
            _this._timeout();
          });


          // LISTEN FOR CONNECTION RESPONSES
          this.connection.on('data', function (data) {
            /*jshint maxcomplexity: 6 */

            _this._parseResponse(data.toString()).forEach(function (result) {

              var id = null;

              // get the id which matches the returned id
              if (utils.isArray(result)) {
                result.forEach(function (load) {
                  if (_this.responseCallbacks[load.id])
                    id = load.id;
                });
              } else {
                id = result.id;
              }

              // fire the callback
              if (_this.responseCallbacks[id]) {
                _this.responseCallbacks[id](null, result);
                delete _this.responseCallbacks[id];
              }
            });
          });
        };

        /**
        Will parse the response and make an array out of it.
        
        @method _parseResponse
        @param {String} data
        */
        IpcProvider.prototype._parseResponse = function (data) {
          var _this = this,
            returnValues = [];

          // DE-CHUNKER
          var dechunkedData = data
            .replace(/\}[\n\r]?\{/g, '}|--|{') // }{
            .replace(/\}\][\n\r]?\[\{/g, '}]|--|[{') // }][{
            .replace(/\}[\n\r]?\[\{/g, '}|--|[{') // }[{
            .replace(/\}\][\n\r]?\{/g, '}]|--|{') // }]{
            .split('|--|');

          dechunkedData.forEach(function (data) {

            // prepend the last chunk
            if (_this.lastChunk)
              data = _this.lastChunk + data;

            var result = null;

            try {
              result = JSON.parse(data);

            } catch (e) {

              _this.lastChunk = data;

              // start timeout to cancel all requests
              clearTimeout(_this.lastChunkTimeout);
              _this.lastChunkTimeout = setTimeout(function () {
                _this._timeout();
                throw errors.InvalidResponse(data);
              }, 1000 * 15);

              return;
            }

            // cancel timeout and set chunk to null
            clearTimeout(_this.lastChunkTimeout);
            _this.lastChunk = null;

            if (result)
              returnValues.push(result);
          });

          return returnValues;
        };


        /**
        Get the adds a callback to the responseCallbacks object,
        which will be called if a response matching the response Id will arrive.
        
        @method _addResponseCallback
        */
        IpcProvider.prototype._addResponseCallback = function (payload, callback) {
          var id = payload.id || payload[0].id;
          var method = payload.method || payload[0].method;

          this.responseCallbacks[id] = callback;
          this.responseCallbacks[id].method = method;
        };

        /**
        Timeout all requests when the end/error event is fired
        
        @method _timeout
        */
        IpcProvider.prototype._timeout = function () {
          for (var key in this.responseCallbacks) {
            if (this.responseCallbacks.hasOwnProperty(key)) {
              this.responseCallbacks[key](errors.InvalidConnection('on IPC'));
              delete this.responseCallbacks[key];
            }
          }
        };


        /**
        Check if the current connection is still valid.
        
        @method isConnected
        */
        IpcProvider.prototype.isConnected = function () {
          var _this = this;

          // try reconnect, when connection is gone
          if (!_this.connection.writable)
            _this.connection.connect({ path: _this.path });

          return !!this.connection.writable;
        };

        IpcProvider.prototype.send = function (payload) {

          if (this.connection.writeSync) {
            var result;

            // try reconnect, when connection is gone
            if (!this.connection.writable)
              this.connection.connect({ path: this.path });

            var data = this.connection.writeSync(JSON.stringify(payload));

            try {
              result = JSON.parse(data);
            } catch (e) {
              throw errors.InvalidResponse(data);
            }

            return result;

          } else {
            throw new Error('You tried to send "' + payload.method + '" synchronously. Synchronous requests are not supported by the IPC provider.');
          }
        };

        IpcProvider.prototype.sendAsync = function (payload, callback) {
          // try reconnect, when connection is gone
          if (!this.connection.writable)
            this.connection.connect({ path: this.path });


          this.connection.write(JSON.stringify(payload));
          this._addResponseCallback(payload, callback);
        };

        module.exports = IpcProvider;



        /***/
}),
/* 495 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file microchain.js
         * @MOAC tech 
         * @date 2019
         * @provide access to MOAC microChain dappBase constant to deploy the 
         *  dapp contractsfunctions and variables.
         * @ Used with MOAC v1.0.9 with multiChain support 
         * constructor()
         * 
         * 
         * newContract(): 
         * 1. deploy the DAPPs on the MicroChain using sendtxï¼›
         * 2. uses transactionReceipt to save the Dapps addressï¼›
         * 3. register the Dapp address to the DappBaseï¼›
         */

        var utils = __webpack_require__(0);
        var coder = __webpack_require__(23);
        var MicroEvent = __webpack_require__(210);
        var MicroFunction = __webpack_require__(496);
        var AllEvents = __webpack_require__(497);
        var DappBase = __webpack_require__(498);
        var ABIs = __webpack_require__(499);
        var SolidityEvent = __webpack_require__(92);
        var SolidityFunction = __webpack_require__(209);

        /**
         * Should be called to encode constructor params
         *
         * @method encodeConstructorParams
         * @param {Array} abi
         * @param {Array} constructor params
         */
        var encodeConstructorParams = function (abi, params) {
          return abi.filter(function (json) {
            return json.type === 'constructor' && json.inputs.length === params.length;
          }).map(function (json) {
            return json.inputs.map(function (input) {
              return input.type;
            });
          }).map(function (types) {
            return coder.encodeParams(types, params);
          })[0] || '';
        };

        /**
         * Should be called to add functions to Dapp object
         * For MIcroChain support multiple DAPPs,
         * need to input both MicroChain Address 
         * and Dapp address
         *
         * @method addDappFunctions
         * @param {Contract} mcdapp
         * @param {Array} abi
         */
        var addDappFunctions = function (mcdapp) {
          // input object with methods
          // Processed the abi functions
          mcdapp.abi.filter(function (json) {
            return json.type === 'function';
          }).map(function (json) {
            return new MicroFunction(mcdapp._mc, mcdapp._scs, json, mcdapp.address, mcdapp.dappAddress, mcdapp.via);
          }).forEach(function (f) {
            f.attachToMicroChain(mcdapp);
          });
        };

        /**
         * Should be called to add events to Dapp object
         *
         * @method addDappEvents
         * @param {Contract} contract
         * @param {Array} abi
         */
        var addDappEvents = function (contract) {
          var events = contract.abi.filter(function (json) {
            return json.type === 'event';
          });

          var All = new AllEvents(contract._scs._requestManager, events, contract.address);
          All.attachToContract(contract);

          events.map(function (json) {
            return new MicroEvent(contract._scs._requestManager, json, contract.address);
          }).forEach(function (e) {
            e.attachToContract(contract);
          });
        };

        /**
         * Should be called to add functions to contract object
         * for Mother chain only.
         * @method addFunctionsToContract
         * @param {Contract} contract
         * @param {Array} abi
         */
        var addFunctionsToContract = function (contract) {
          // console.log("addFunctionsToContract:", contract);
          // contract.abi.filter(function (json) {
          contract.abi.filter(function (json) {
            return json.type === 'function';
          }).map(function (json) {
            return new SolidityFunction(contract._mc, json, contract.address);
          }).forEach(function (f) {
            f.attachToContract(contract);
          });
        };

        /**
         * Should be called to add events to contract object
         *
         * @method addEventsToContract
         * @param {Contract} contract
         * @param {Array} abi
         */
        var addEventsToContract = function (contract) {
          var events = contract.abi.filter(function (json) {
            return json.type === 'event';
          });

          var All = new AllEvents(contract._mc._requestManager, events, contract.address);
          All.attachToContract(contract);

          events.map(function (json) {
            return new SolidityEvent(contract._mc._requestManager, json, contract.address);
          }).forEach(function (e) {
            e.attachToContract(contract);
          });
        };


        /**
         * Should be called to check if the Dapp gets properly deployed.
         * This requires both VNODE and SCS monitor are connecting.
         * on the MicroChain.
         *
         * @method checkForMicroChainDapp
         * @param {Object} contract
         * @param {Function} callback
         * @returns {Undefined}
         */
        var checkForMicroChainDapp = function (dapp, callback) {

          var count = 0,
            callbackFired = false;

          // wait for receipt
          var filter = dapp._mc.filter('latest', function (e) {
            if (!e && !callbackFired) {
              count++;

              // stop watching after 50 blocks (timeout)
              if (count > 50) {

                filter.stopWatching(function () { });
                callbackFired = true;

                if (callback)
                  callback(new Error('Contract transaction couldn\'t be found after 50 blocks'));
                else
                  throw new Error('Contract transaction couldn\'t be found after 50 blocks');


              } else {

                dapp._mc.getTransactionReceipt(dapp.transactionHash, function (e, receipt) {
                  if (receipt && !callbackFired) {

                    dapp._scs.getCode(receipt.contractAddress, function (e, code) {
                      /*jshint maxcomplexity: 6 */

                      if (callbackFired || !code)
                        return;

                      filter.stopWatching(function () { });
                      callbackFired = true;

                      if (code.length > 3) {

                        dapp.address = receipt.contractAddress;

                        // attach events and methods again after we have
                        addFunctionsToContract(dapp);
                        addEventsToContract(dapp);

                        // call callback for the second time
                        if (callback)
                          callback(null, dapp);

                      } else {
                        if (callback)
                          callback(new Error('The dapp code couldn\'t be stored, please check your gas amount.'));
                        else
                          throw new Error('The dapp code couldn\'t be stored, please check your gas amount.');
                      }
                    });
                  }
                });
              }
            }
          });
        };

        /**
         * Should be called to deploy new Dapp instance
         * on a existing MicroChain
         * This is similar to the ContractFactory
         * object for mc, but keep both the VNODE to send
         * the transaction and the SCS for constant call.
         * 
         * @method MicroChain
         * @param {Object} mc
         * @param {Object} scs
         * @param {Array} abi
         */
        var MicroChain = function (mc, scs, inAbi) {
          this._mc = mc;
          this._scs = scs;
          // this.mcType = inName;
          this.via = null;
          // this.baseabi = JSON.parse(ABIs.dappBaseABI);

          // Set the MicroChain base ABI according to the input type
          // need to parse the abi string into object
          // if (inName == 'AST'){
          //     this.abi = JSON.parse(ABIs.astABI);
          // }else if( inName == 'ASM'){
          //     //Used the MicroChain with 
          //     this.abi = JSON.parse(ABIs.asmABI);

          // }else{
          //     // console.log("unsupported MicroChain type:", inName);
          //     throw new Error('unsupported MicroChain type');
          // }

          this.abi = inAbi;

          /**
           * Should be called to create new DappBase on the MicroChain 
           * by sending the transaction to VNODE with shardingFlag = 3,
           * This is different from the previous single contract version,
           * which requires shardingFlag = 1.
           * Note, the DAPP requires the microChain address as input
           * to deploy.
           * 
           * @method new
           * @param {inAddress} MicroChain Address to deploy the Dapp
           * @param {viaAddress} VNODE Address to connect for deploying the Dapp
           * @param {Any} Dapp contract constructor param1 (optional)
           * @param {Any} Dapp contract constructor param2 (optional)
           * @param {Object} contract transaction object (required)
           * @param {Function} callback
           * @returns {Dapp} returns Dapp instance
           */
          ////Not workable 2019/06/07
          this.new = function () {

            // parse arguments
            var options = {}; // required!
            var callback;     // optional

            //Processing the arguments
            var args = Array.prototype.slice.call(arguments);

            if (args.length < 2) {
              throw new Error('DAPP init requires MicroChain address and VNODE address as the first two input arguments!');
            }


            // Check for the MicroChain address
            inAddress = args[0];
            if (!utils.isAddress(inAddress)) {
              throw new Error('No MicroChain address in the input arguments!');
            }
            // Remove the MicroChain address (1st element)
            args.shift();

            viaAddress = args[0];
            if (!utils.isAddress(viaAddress)) {
              throw new Error('No VNODE address in the input arguments!');
            }

            // Start building the Dapp on the MicroChain
            // if ( )
            // var mcDapp = new Dapp(this._mc, this._scs, this.abi, inAddress, viaAddress);
            var mcBase = new DappBase.MicrochainBase(this._mc, this.abi, address, this.via);

            if (this._scs.getDappState(inAddress) != 0) {
              throw new Error('MicroChain is not ready or already has DAPP on it');
              return;
            }

            // Remove the VNODE address (2nd element)
            args.shift();

            // Remove the callback func (last element)
            if (utils.isFunction(args[args.length - 1])) {
              callback = args.pop();
            }

            var last = args[args.length - 1];
            if (utils.isObject(last) && !utils.isArray(last)) {
              options = args.pop();
            }

            if (options.value > 0) {
              var constructorAbi = abi.filter(function (json) {
                return json.type === 'constructor' && json.inputs.length === args.length;
              })[0] || {};

              if (!constructorAbi.payable) {
                throw new Error('Cannot send value to non-payable constructor');
              }
            }

            // Added the function input parameters from args

            var bytes = encodeConstructorParams(this.abi, args);
            options.data += bytes;

            // Dapp is not a contract, need to setup more fields
            // DAPP deploy need send to the microChain address
            options.to = inAddress;
            options.gas = 0;
            options.shardingFlag = 1;//shardingFlag = 3 for multiple contract
            options.nonce = 0;//Should check, usually for a mciroChain without DAPP, all accounts nonce is 0
            options.via = viaAddress;


            //All transaction should send to the microChain through VNODE with shardingFlag = 1
            if (callback) {

              // wait for the mcDapp address adn check if the code was deployed
              this._mc.sendTransaction(options, function (err, hash) {
                if (err) {
                  callback(err);
                } else {
                  // add the transaction hash
                  mcDapp.transactionHash = hash;

                  // call callback for the first time
                  callback(null, mcDapp);

                  checkForMicroChainDapp(mcDapp, callback);
                }
              });
            } else {
              var hash = this._mc.sendTransaction(options);
              // add the transaction hash
              mcDapp.transactionHash = hash;
              checkForMicroChainDapp(mcDapp);
            }

            return mcDapp;
          };

          this.new.getData = this.getData.bind(this);
        };


        /**
         * Should be called to operate the MicroChain
         * This is a Global contract, and use 
         * @method at
         * @param {Address} MicroChain address (required)
         * @param {Function} callback {optional)
         * @returns {mcDapp} returns mcirochain Dapp if no callback was passed,
         * otherwise calls callback function (err, mcDapp)
         * Possible errors:
         * 
         */
        MicroChain.prototype.at = function (address, callback) {


          // Generate the MicroChain object
          var mcBase = new DappBase.MicrochainBase(this._mc, this.abi, address, this.via);

          // this functions are not part of prototype,
          // because we dont want to spoil the interface
          addFunctionsToContract(mcBase);
          addEventsToContract(mcBase);

          if (callback) {
            callback(null, mcBase);
          }
          return mcBase;
        };

        /**
         * Should be called to get access to existing DappBase
         * on the MicroChain. Need to check if the current
         * Microchain has DappBase deployed by using getDappState.
         * 
         * @method getDapp
         * @param {Address} MicroChain address (required)
         * @param {Function} callback {optional)
         * @returns {mcDapp} returns mcirochain Dapp if no callback was passed,
         * otherwise calls callback function (err, mcDapp)
         * Possible errors:
         * 
         */
        MicroChain.prototype.getDapp = function (inMcAddress, inDAPPabi, inDappAddress, callback) {

          // Create a DAPP object with input MicroChain Address, and DAPP abi AND address
          var mcDapp = new DappBase.DappBase(this._mc, this._scs, inMcAddress, inDAPPabi, inDappAddress, this.via);

          // ADD THE functions and events to the Object
          addDappFunctions(mcDapp);
          addDappEvents(mcDapp);

          if (callback) {
            callback(null, mcDapp);
          }
          return mcDapp;
        };

        // MicroChain.prototype.getDapp = function (inAbi, inAddress, callback) {

        // // console.log("MicroChain.prototype.at:", this.mcType);
        //    var dappstate = this._scs.getDappState(inAddress)
        //    if (  dappstate != 1 ){
        //      throw new Error('MicroChain has no Dapp deployed! getDappState != 1');
        //      return null;
        //    }

        //   dappAddrList =  this._scs.getDappList();
        //   console.log("DappBase addr:",dappAddrList);
        //   if (dappAddrList.length > 0){
        //     var dappBaseAddress = dappAddrList[0];
        //     // console.log("SCS TX receipt:", chain3.scs.getReceiptByNonce(mcAddress, coinbase, 1));
        //     // Check if the name is set
        //     var mcBase = new DappBase.DappBase(this._mc, this._scs, inAbi, inAddress, this.via);

        //     // console.log("MicrochainBase", mcBase.abi);
        //     console.log("=============getDappBase=================");

        //     // this functions are not part of prototype,
        //     // because we dont want to spoil the interface
        //     addDappFunctions(mcBase);
        //     addDappEvents(mcBase);
        //   }


        //     if (callback) {
        //         callback(null, mcBase);
        //     }
        //     return mcBase;
        // };

        /**
         * Gets the data, which is data to deploy plus constructor params
         *
         * @method getData
         */
        MicroChain.prototype.getData = function () {
          var options = {}; // required!
          var args = Array.prototype.slice.call(arguments);

          var last = args[args.length - 1];
          if (utils.isObject(last) && !utils.isArray(last)) {
            options = args.pop();
          }

          var bytes = encodeConstructorParams(this.abi, args);
          options.data += bytes;

          return options.data;
        };

        /**
         * Set the benefit address of the VNODE proxy server.
         *
         * @method setVnodeAddress
         */
        MicroChain.prototype.setVnodeAddress = function (viaAddress) {

          if (utils.isAddress(viaAddress)) {
            this.via = viaAddress;
            return true;
          }
          throw errors.InvalidPublicAddress();
          return false;
        };

        /**
         * Return the address of the VNODE server.
         *
         * @method getVnodeAddress
         */
        MicroChain.prototype.getVnodeAddress = function () {

          return this.via;
        };

        /**
         * Register a new contract on the MicroChain so 
         * user can call it through MicroChain methods
         *
         * @method registerContract
         */
        MicroChain.prototype.registerContract = function (inAddress) {

          if (utils.isAddress(inAddress)) {
            this.dappAddress = inAddress;
            return true;
          }
          throw errors.InvalidPublicAddress();
          return false;
        };

        /**
         * Register a new contract on the MicroChain so 
         * user can call it through MicroChain methods
         * The same with registerContract.
         * @method registerDapp
         */
        MicroChain.prototype.registerDapp = function (inAddress) {

          if (utils.isAddress(inAddress)) {
            this.dappAddress = inAddress;
            return true;
          }
          throw errors.InvalidPublicAddress();
          return false;
        };

        /**
         * Should be called to create new Dapp on the MicroChain
         * contract instance, 
         * moved to microbase.js
         *
         * @method Contract
         * @param {Array} abi
         * @param {Address} contract address
         */
        // var Dapp = function (mc, scs, abi, address, viaAddress) {
        //     this._mc = mc; //vnode server to sendTransaction
        //     this._scs = scs;  //SCS server to sendCall
        //     this.transactionHash = null;// This is needed to check if the Dapp is deploy or not, note this is different from MicroChain HASH
        //     this.address = address; //MicroChain address
        //     this.baseAddress = null;// dappbase address, this can to be extracted using deploy address and nonce 0 on the MicroChain. MicroChain address
        //     this.dappAddress = null;// dapp address, this is 
        //     this.abi = abi;
        //     this.via = viaAddress;
        // };

        module.exports = MicroChain;


        /***/
}),
/* 496 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file microfunction.js
         * @MOAC tech 
         * @date 2018
         * @provide access to MOAC microChain dapps functions and variables.
         * @as a replacement for function.js 
         */

        var coder = __webpack_require__(23);
        var utils = __webpack_require__(0);
        var errors = __webpack_require__(32);
        var formatters = __webpack_require__(3);
        var sha3 = __webpack_require__(18);
        var config = __webpack_require__(47);

        /**
         * This prototype should be used to call/sendTransaction to solidity functions
         * for DAPPs.
         * 2019/03/01, nuwa 1.0.8, to support multiple Dapps, need to link this to dappbase.
         * uses mc to send non-constant to vnode
         * uses scs to send constant function to SCS and get returns.
         * Parameters:
         * mc - Object handles the communication with VNODE
         * scs - Object handles the comm
         */
        var MicroFunction = function (mc, scs, json, mcAddress, address, via) {
          this._mc = mc;
          this._scs = scs;
          this._inputTypes = json.inputs.map(function (i) {
            return i.type;
          });
          this._outputTypes = json.outputs.map(function (i) {
            return i.type;
          });
          this._constant = json.constant;

          this._payable = json.payable;
          this._name = utils.transformToFullName(json);
          this._mcAddress = mcAddress;//MicroChain Address
          this._address = address;//Dapp Address
          this._from = mc.coinbase;//default set to vnode account, can be changed
          this._via = via;//need to be set before sendTransaction call

          // console.log("MicroFunction new: ",this._name, " constant: ", json.constant, this._constant);
        };

        MicroFunction.prototype.extractCallback = function (args) {
          if (utils.isFunction(args[args.length - 1])) {
            return args.pop(); // modify the args array!
          }
        };

        MicroFunction.prototype.extractDefaultBlock = function (args) {
          if (args.length > this._inputTypes.length && !utils.isObject(args[args.length - 1])) {
            return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!
          }
        };

        /**
         * Should be used if connect with a remote VNODE server.
         * User need to setup a source account instead of default mc coinbase.
         * Unlike coinbase, the SCS mining rewards go to the scs beneficial
         * as set in the userconfig.json:
         * "Beneficiary": "0xd814f2ac2c4ca49b33066582e4e97ebae02f2ab9",
         * @method setSrcAccount
         * @param {ADDRESS} inAcct
         * @throws {Error} if input is not a valid address
         */

        MicroFunction.prototype.setSrcAccount = function (inAcct) {
          if (utils.isAddress(inAcct)) {
            this._from = inAcct;
            return true;
          }
          throw errors.InvalidPublicAddress();
          return false;
        }

        /**
         * Should be set with the benefit address from the VNODE server.
         *
         * @method setVnodeVia
         * @param {ADDRESS} inAcct
         * @throws {Error} if it is not
         */

        MicroFunction.prototype.setVnodeAddress = function (inAcct) {
          if (utils.isAddress(inAcct)) {
            this._via = inAcct;
            return true;
          }
          throw errors.InvalidPublicAddress();
          return false;
        }

        /**
         * Should be called to check if the number of arguments is correct
         *
         * @method validateArgs
         * @param {Array} arguments
         * @throws {Error} if it is not
         */
        MicroFunction.prototype.validateArgs = function (args) {
          var inputArgs = args.filter(function (a) {
            // filter the options object but not arguments that are arrays
            return !((utils.isObject(a) === true) &&
              (utils.isArray(a) === false) &&
              (utils.isBigNumber(a) === false)
            );
          });

          if (inputArgs.length !== this._inputTypes.length) {
            throw errors.InvalidNumberOfSolidityArgs();
          }
        };

        /**
         * Should be used to create payload from arguments
         * For microchain DAPPs, need to have both microchain address
         * 
         * @method toPayload
         * @param {Array} solidity function params
         * @param {Object} optional payload options
         */
        MicroFunction.prototype.toPayload = function (args) {
          var options = {};
          if (args.length > this._inputTypes.length && utils.isObject(args[args.length - 1])) {
            options = args[args.length - 1];
          }
          this.validateArgs(args);
          // Need to use MicroChain Address instead of Dapp address
          options.to = this._mcAddress;
          // options.data = this._address + this.signature() + coder.encodeParams(this._inputTypes, args);
          options.dappAddr = this._address;
          // Original
          options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);
          return options;
        };

        /**
         * Should be used to get function signature
         *
         * @method signature
         * @return {String} function signature
         */
        MicroFunction.prototype.signature = function () {
          return sha3(this._name).slice(0, 8);
        };


        MicroFunction.prototype.unpackOutput = function (output) {
          if (!output) {
            return;
          }

          output = output.length >= 2 ? output.slice(2) : output;
          var result = coder.decodeParams(this._outputTypes, output);
          return result.length === 1 ? result[0] : result;
        };

        /**
         * Calls a Solidity constant function by using arguments
         * and send to the SCS server, 
         * For multiple Contract DAPP support, nuwa1.0.8
         * Need to add the dapp address before the payload call
         * @method call
         * @param {...Object} Contract function arguments
         * @param {function} If the last argument is a function, the contract function
         *   call will be asynchronous, and the callback will be passed the
         *   error and result.
         * @return {String} output bytes
         */
        MicroFunction.prototype.call = function () {
          var args = Array.prototype.slice.call(arguments).filter(function (a) { return a !== undefined; });
          var callback = this.extractCallback(args);
          var defaultBlock = this.extractDefaultBlock(args);
          var payload = this.toPayload(args);

          //For direct call send to SCS, put in an empty from account
          //This won't change any state on the MicroChain.
          if (payload.from == undefined) {
            payload.from = this._from || config.defaultSCSId;
          }

          console.log("MicroFunction.prototype.call\n");
          console.log(payload);
          console.log("===================================");


          if (!callback) {
            var output = this._scs.directCall(payload, defaultBlock);
            return this.unpackOutput(output);
          }

          //Asyn callback
          var self = this;
          this._scs.directCall(payload, defaultBlock, function (error, output) {
            if (error) return callback(error, null);

            var unpacked = null;
            try {
              unpacked = self.unpackOutput(output);
            }
            catch (e) {
              error = e;
            }

            callback(error, unpacked);
          });
        };

        /**
         * Call the Solidity non-constant function
         * to VNODE. 
         * Note, this need to setup as Direct Call,
         * add sharding flag and via through the payload
         * @method sendTransaction
         */
        MicroFunction.prototype.sendTransaction = function () {
          var args = Array.prototype.slice.call(arguments).filter(function (a) { return a !== undefined; });
          var callback = this.extractCallback(args);
          var payload = this.toPayload(args);

          if (payload.value > 0 && !this._payable) {
            throw new Error('Cannot send value to non-payable function');
          }


          srcnonce = this._scs.getNonce(payload.to, this._from);

          //For DAPP function, send as direct call
          if (payload.shardingFlag != 1) {
            payload.shardingFlag = 1
          }

          if (utils.isAddress(this._from)) {
            payload.from = this._from;
          } else {
            throw new Error('sendTransaction has no valid src account');
          }

          //Note, this via is from dapp, 
          if (utils.isAddress(this._via)) {
            payload.via = this._via;
          } else {
            throw new Error('sendTransaction has no valid vnode via account');
          }

          //Gas need set to gas estimate
          payload.gas = 4000000;// use this as default

          payload.nonce = srcnonce;

          //Make sure the args has shardingFlag = 1
          //and via is set to the VNODE via address
          if (!callback) {
            return this._mc.sendTransaction(payload);
          }

          this._mc.sendTransaction(payload, callback);
        };

        /**
         * Should be used to estimateGas of Dapp function
         * Work with Nuwa 1.0.4 and later.
         *
         * @method estimateGas
         */
        MicroFunction.prototype.estimateGas = function () {
          var args = Array.prototype.slice.call(arguments);
          var callback = this.extractCallback(args);
          var payload = this.toPayload(args);

          if (!callback) {
            return this._mc.estimateGas(payload);
          }

          this._mc.estimateGas(payload, callback);
        };

        /**
         * Return the encoded data of the call
         *
         * @method getData
         * @return {String} the encoded data
         */
        MicroFunction.prototype.getData = function () {
          var args = Array.prototype.slice.call(arguments);
          var payload = this.toPayload(args);

          return payload.data;
        };

        /**
         * Should be used to get function display name
         *
         * @method displayName
         * @return {String} display name of the function
         */
        MicroFunction.prototype.displayName = function () {
          return utils.extractDisplayName(this._name);
        };

        /**
         * Should be used to get function type name
         *
         * @method typeName
         * @return {String} type name of the function
         */
        MicroFunction.prototype.typeName = function () {
          return utils.extractTypeName(this._name);
        };

        /**
         * Should be called to get rpc requests from solidity function
         *
         * @method request
         * @returns {Object}
         */
        MicroFunction.prototype.request = function () {
          var args = Array.prototype.slice.call(arguments);
          var callback = this.extractCallback(args);
          var payload = this.toPayload(args);
          var format = this.unpackOutput.bind(this);

          //if costant function, use SCS call
          //otherwise use mc sendTransaction
          return {
            method: this._constant ? 'scs_call' : 'mc_sendTransaction',
            callback: callback,
            params: [payload],
            format: format
          };
        };

        /**
         * Should be called to execute function
         * Note only perform the Dappbase
         * @method execute
         */
        MicroFunction.prototype.execute = function () {

          var transaction = !this._constant;

          // send transaction for non-constant function
          // to the VNODE
          if (transaction) {
            return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));
          }

          // call for constant function or variable
          // to SCS monitor
          return this.call.apply(this, Array.prototype.slice.call(arguments));
        };

        /**
         * Should be called to attach function to contract
         * from attachToContract
         * @method attachToMicroChain
         * @param {Contract}
         */
        MicroFunction.prototype.attachToMicroChain = function (contract) {
          var execute = this.execute.bind(this);
          execute.request = this.request.bind(this);
          execute.call = this.call.bind(this);
          execute.sendTransaction = this.sendTransaction.bind(this);
          execute.estimateGas = this.estimateGas.bind(this);
          execute.getData = this.getData.bind(this);
          var displayName = this.displayName();
          if (!contract[displayName]) {
            contract[displayName] = execute;
          }
          contract[displayName][this.typeName()] = execute; // circular!!!!
        };

        module.exports = MicroFunction;


        /***/
}),
/* 497 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file microevents.js
         * @author
         * @events for MOAC microchain event
         * @MOAC lab
         * @date 2019
         */

        var sha3 = __webpack_require__(18);
        var MicroEvent = __webpack_require__(210);
        var formatters = __webpack_require__(3);
        var utils = __webpack_require__(0);
        var Filter = __webpack_require__(44);
        var watches = __webpack_require__(45);

        var MicroSolidityEvents = function (requestManager, json, address) {
          this._requestManager = requestManager;
          this._json = json;
          this._address = address;
        };

        MicroSolidityEvents.prototype.encode = function (options) {
          options = options || {};
          var result = {};

          ['fromBlock', 'toBlock'].filter(function (f) {
            return options[f] !== undefined;
          }).forEach(function (f) {
            result[f] = formatters.inputBlockNumberFormatter(options[f]);
          });

          result.address = this._address;

          return result;
        };

        MicroSolidityEvents.prototype.decode = function (data) {
          data.data = data.data || '';

          var eventTopic = (utils.isArray(data.topics) && utils.isString(data.topics[0])) ? data.topics[0].slice(2) : '';
          var match = this._json.filter(function (j) {
            return eventTopic === sha3(utils.transformToFullName(j));
          })[0];

          if (!match) { // cannot find matching event?
            return formatters.outputLogFormatter(data);
          }

          var event = new MicroEvent(this._requestManager, match, this._address);

          return event.decode(data);
        };

        MicroSolidityEvents.prototype.execute = function (options, callback) {

          if (utils.isFunction(arguments[arguments.length - 1])) {
            callback = arguments[arguments.length - 1];
            if (arguments.length === 1)
              options = null;
          }

          var o = this.encode(options);
          var formatter = this.decode.bind(this);
          return new Filter(o, 'scs', this._requestManager, watches.scs(), formatter, callback);
        };

        MicroSolidityEvents.prototype.attachToContract = function (contract) {
          var execute = this.execute.bind(this);
          contract.allEvents = execute;
        };

        module.exports = MicroSolidityEvents;



        /***/
}),
/* 498 */
/***/ (function (module, exports) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file microbase.js
         * @MOAC tech 
         * @date 2019
         * @provide access to MOAC microChain dappBase constant to deploy the 
         *  dapp contractsfunctions and variables.
         * @ Used with MOAC v1.0.8 with multiChain support 
        */

        /**
         * For microChain only, 
         * @method Contract
         * @param {obj} mc, VNODE manager
         * @param {Array} abi, interface
         * @param {Address} microChain address
         */
        var MicrochainBase = function (mc, inAbi, address) {
          this._mc = mc;
          this.transactionHash = null;
          this.address = address;
          this.abi = inAbi;
        };

        /**
         * Should be called to create a DappBase object on the 
         * MicroChain contract instance.
         *
         * @method DappBase
         * @param {obj} mc, VNODE manager
         * @param {obj} scs, SCS monitor
         * @param {Array} inAbi, ABI of the input contract
         * @param {Address} contract address
         */
        var DappBase = function (mc, scs, inMcAddress, inAbi, inAddress, viaAddress) {
          this._mc = mc; //vnode server to sendTransaction
          this._scs = scs;  //SCS server to sendCall and get response from the Monitor
          this.transactionHash = null;// This is needed to check if the Dapp is deploy or not, note this is different from MicroChain HASH
          this.address = inMcAddress; //MicroChain address, need to use for every function calls
          this.baseAddress = null;// dappbase address, this need to be extracted using MicroChain address
          this.dappAddress = inAddress;// dapp address, need to be registered with dappbase, may not need 
          this.abi = inAbi;
          this.via = viaAddress;
        };


        /**
         * Should be called to create new Dapp 
         * contract instance, 
         * only support two internal abi structures
         * 
         * @method Contract
         * @param {Array} abi
         * @param {Address} contract address
         */
        var MicroDapp = function (mc, scs, inAbi, inAddress, viaAddress) {

          this.abi = inAbi;

          this._mc = mc; //vnode server to sendTransaction
          this._scs = scs;  //SCS server to sendCall
          this.transactionHash = null;// This is needed to check if the Dapp is deploy or not, note this is different from MicroChain HASH
          this.address = inAddress; //MicroChain address
          this.baseAddress = null;// dappbase address, this need to be extracted using MicroChain address
          this.dappAddress = null;// dapp address, need to be registered with dappbase
          // this.baseAbi = ABIs.dappBaseABI;
          this.via = viaAddress;
        };

        // var data=subchainbase.buyMintToken.getData(value)
        // This should call the subchainbase.
        MicroDapp.prototype.buyMintToken = function (value, callback) {

          // console.log("MicrochainBase", mcBase.abi);
          console.log("=============buyMintToken=================");
          mcBase = null;
          // this functions are not part of prototype,
          // because we dont want to spoil the interface

          if (callback) {
            callback(null, mcBase);
          }
          return mcBase;
        };

        module.exports = {
          MicroDapp: MicroDapp,
          DappBase: DappBase,
          MicrochainBase: MicrochainBase
        }

        /***/
}),
/* 499 */
/***/ (function (module, exports) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file microconstants.js
         * @MOAC tech e 2019
         * @provide access to MOAC microChain dappBase constant to deploy the 
         *  dapp contractsfunctions and variables.
         * @ Used with MOAC v1.0.8 with multiChain support 
         * @dat
        */
        var asmABI = '[{"constant\":true,"inputs":[],"name":"maxMember","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"maxFlushInRound","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"blockReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"per_upload_redeemdata_num","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"removeSyncNode","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"indexInlist","type":"uint256"},{"name":"hashlist","type":"bytes32[]"},{"name":"blocknum","type":"uint256[]"},{"name":"distAmount","type":"uint256[]"},{"name":"badactors","type":"uint256[]"},{"name":"viaNodeAddress","type":"address"},{"name":"preRedeemNum","type":"uint256"}],"name":"createProposal","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"BALANCE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"nodeList","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getMonitorInfo","outputs":[{"name":"","type":"address[]"},{"name":"","type":"string[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"nodeToReleaseCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"scsBeneficiary","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"minMember","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"funcCode","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"senderType","type":"uint256"},{"name":"index","type":"uint256"}],"name":"requestReleaseImmediate","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"senderType","type":"uint256"},{"name":"index","type":"uint256"}],"name":"requestRelease","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"consensusFlag","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"BackupUpToDate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"proposals","outputs":[{"name":"proposedBy","type":"address"},{"name":"lastApproved","type":"bytes32"},{"name":"hash","type":"bytes32"},{"name":"start","type":"uint256"},{"name":"end","type":"uint256"},{"name":"flag","type":"uint256"},{"name":"startingBlock","type":"uint256"},{"name":"votecount","type":"uint256"},{"name":"viaNodeAddress","type":"address"},{"name":"preRedeemNum","type":"uint256"},{"name":"distributeFlag","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"num","type":"uint256"}],"name":"updatePerUploadRedeemNum","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"nodesToDispel","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getVnodeInfo","outputs":[{"components":[{"name":"protocol","type":"address"},{"name":"members","type":"uint256[]"},{"name":"rewards","type":"uint256[]"},{"name":"proposalExpiration","type":"uint256"},{"name":"VnodeProtocolBaseAddr","type":"address"},{"name":"penaltyBond","type":"uint256"},{"name":"subchainstatus","type":"uint256"},{"name":"owner","type":"address"},{"name":"BALANCE","type":"uint256"},{"name":"redeems","type":"uint256[]"},{"name":"nodeList","type":"address[]"},{"name":"nodesToJoin","type":"address[]"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"close","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"monitors","outputs":[{"name":"from","type":"address"},{"name":"bond","type":"uint256"},{"name":"link","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"txReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ERCRate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"monitor","type":"address"},{"name":"link","type":"string"}],"name":"registerAsMonitor","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"ERCDecimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"scs","type":"address"}],"name":"getSCSRole","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"indexInlist","type":"uint256"},{"name":"hash","type":"bytes32"},{"name":"redeem","type":"bool"}],"name":"voteOnProposal","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"nodesWatching","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"registerOpen","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"max_redeemdata_num","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"rebuildFromLastFlushPoint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"num","type":"uint256"}],"name":"updatePerRedeemNum","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"registerClose","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"currentRefundGas","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"num","type":"uint256"}],"name":"updateRechargeCycle","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"nodeCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"id","type":"address"},{"name":"link","type":"string"}],"name":"addSyncNode","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"per_recharge_num","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"AUTO_RETIRE","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"penaltyBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getholdingPool","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"protocol","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MONITOR_JOIN_FEE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"beneficiary","type":"address"},{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"}],"name":"registerAsSCS","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"beneficiary","type":"address"},{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"}],"name":"registerAsBackup","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"recharge_cycle","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"addFund","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"per_redeemdata_num","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractNeedFund","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"nodesToJoin","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"nodePerformance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"num","type":"uint256"}],"name":"updatePerRechargeNum","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getFlushStatus","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"viaReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"userAddr","type":"address"},{"name":"holdingPoolPos","type":"uint256"}],"name":"getEnteringAmount","outputs":[{"name":"enteringAddr","type":"address[]"},{"name":"enteringAmt","type":"uint256[]"},{"name":"enteringtime","type":"uint256[]"},{"name":"rechargeParam","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"userAddr","type":"address"}],"name":"getRedeemRecords","outputs":[{"components":[{"name":"redeemAmount","type":"uint256[]"},{"name":"redeemtime","type":"uint256[]"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"},{"name":"index1","type":"uint8"},{"name":"index2","type":"uint8"}],"name":"matchSelTarget","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"nodeToAdd","type":"uint256"}],"name":"registerAdd","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"buyMintToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"MAX_DELETE_NUM","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"syncNodes","outputs":[{"name":"nodeId","type":"address"},{"name":"link","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getFlushInfo","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getEstFlushBlock","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"syncReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"checkProposalStatus","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"types","type":"uint256"}],"name":"getProposal","outputs":[{"components":[{"name":"proposedBy","type":"address"},{"name":"lastApproved","type":"bytes32"},{"name":"hash","type":"bytes32"},{"name":"start","type":"uint256"},{"name":"end","type":"uint256"},{"name":"distributionAmount","type":"uint256[]"},{"name":"flag","type":"uint256"},{"name":"startingBlock","type":"uint256"},{"name":"voters","type":"uint256[]"},{"name":"votecount","type":"uint256"},{"name":"badActors","type":"uint256[]"},{"name":"viaNodeAddress","type":"address"},{"name":"preRedeemNum","type":"uint256"},{"name":"redeemAddr","type":"address[]"},{"name":"redeemAmt","type":"uint256[]"},{"name":"minerAddr","type":"address[]"},{"name":"distributeFlag","type":"uint256"},{"name":"redeemAgreeList","type":"address[]"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"proposalHashInProgress","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"}],"name":"requestEnterAndRedeemAction","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"nodesToRelease","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"randIndex","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"indexInlist","type":"uint256"},{"name":"hash","type":"bytes32"}],"name":"requestProposalAction","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"isMemberValid","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"joinCntNow","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"AUTO_RETIRE_COUNT","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"initialFlushInRound","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"selTarget","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"reset","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"proposalHashApprovedLast","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"NODE_INIT_PERFORMANCE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"VnodeProtocolBaseAddr","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"redeemAddr","type":"address[]"},{"name":"redeemAmt","type":"uint256[]"}],"name":"UploadRedeemData","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"monitor","type":"address"}],"name":"removeMonitorInfo","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"MAX_GAS_PRICE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"joinCntMax","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"dappRedeemPos","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ERCAddr","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"proposalExpiration","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"DEFLATOR_VALUE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MONITOR_MIN_FEE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"recv","type":"address"},{"name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"txNumInFlush","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalOperation","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"flushInRound","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"proto","type":"address"},{"name":"vnodeProtocolBaseAddr","type":"address"},{"name":"ercAddr","type":"address"},{"name":"ercRate","type":"uint256"},{"name":"min","type":"uint256"},{"name":"max","type":"uint256"},{"name":"thousandth","type":"uint256"},{"name":"flushRound","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"message","type":"string"}],"name":"ReportStatus","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"addr","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"TransferAmount","type":"event"}]';
        var astABI = '[{"constant\":true,"inputs":[],"name":"maxMember","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"maxFlushInRound","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"blockReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"per_upload_redeemdata_num","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"removeSyncNode","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"indexInlist","type":"uint256"},{"name":"hashlist","type":"bytes32[]"},{"name":"blocknum","type":"uint256[]"},{"name":"distAmount","type":"uint256[]"},{"name":"badactors","type":"uint256[]"},{"name":"viaNodeAddress","type":"address"},{"name":"preRedeemNum","type":"uint256"}],"name":"createProposal","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"BALANCE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"nodeList","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getMonitorInfo","outputs":[{"name":"","type":"address[]"},{"name":"","type":"string[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"nodeToReleaseCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"scsBeneficiary","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"minMember","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"funcCode","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"senderType","type":"uint256"},{"name":"index","type":"uint256"}],"name":"requestReleaseImmediate","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"senderType","type":"uint256"},{"name":"index","type":"uint256"}],"name":"requestRelease","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"consensusFlag","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"BackupUpToDate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"proposals","outputs":[{"name":"proposedBy","type":"address"},{"name":"lastApproved","type":"bytes32"},{"name":"hash","type":"bytes32"},{"name":"start","type":"uint256"},{"name":"end","type":"uint256"},{"name":"flag","type":"uint256"},{"name":"startingBlock","type":"uint256"},{"name":"votecount","type":"uint256"},{"name":"viaNodeAddress","type":"address"},{"name":"preRedeemNum","type":"uint256"},{"name":"distributeFlag","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"num","type":"uint256"}],"name":"updatePerUploadRedeemNum","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"nodesToDispel","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getVnodeInfo","outputs":[{"components":[{"name":"protocol","type":"address"},{"name":"members","type":"uint256[]"},{"name":"rewards","type":"uint256[]"},{"name":"proposalExpiration","type":"uint256"},{"name":"VnodeProtocolBaseAddr","type":"address"},{"name":"penaltyBond","type":"uint256"},{"name":"subchainstatus","type":"uint256"},{"name":"owner","type":"address"},{"name":"BALANCE","type":"uint256"},{"name":"redeems","type":"uint256[]"},{"name":"nodeList","type":"address[]"},{"name":"nodesToJoin","type":"address[]"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"close","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"monitors","outputs":[{"name":"from","type":"address"},{"name":"bond","type":"uint256"},{"name":"link","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"txReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ERCRate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"monitor","type":"address"},{"name":"link","type":"string"}],"name":"registerAsMonitor","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"ERCDecimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"scs","type":"address"}],"name":"getSCSRole","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"indexInlist","type":"uint256"},{"name":"hash","type":"bytes32"},{"name":"redeem","type":"bool"}],"name":"voteOnProposal","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"nodesWatching","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"registerOpen","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"max_redeemdata_num","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"rebuildFromLastFlushPoint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"num","type":"uint256"}],"name":"updatePerRedeemNum","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"registerClose","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"currentRefundGas","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"num","type":"uint256"}],"name":"updateRechargeCycle","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"nodeCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"id","type":"address"},{"name":"link","type":"string"}],"name":"addSyncNode","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"per_recharge_num","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"AUTO_RETIRE","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"penaltyBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getholdingPool","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"protocol","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MONITOR_JOIN_FEE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"beneficiary","type":"address"},{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"}],"name":"registerAsSCS","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"beneficiary","type":"address"},{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"}],"name":"registerAsBackup","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"recharge_cycle","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"addFund","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"per_redeemdata_num","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractNeedFund","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"nodesToJoin","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"nodePerformance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"num","type":"uint256"}],"name":"updatePerRechargeNum","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getFlushStatus","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"viaReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"userAddr","type":"address"},{"name":"holdingPoolPos","type":"uint256"}],"name":"getEnteringAmount","outputs":[{"name":"enteringAddr","type":"address[]"},{"name":"enteringAmt","type":"uint256[]"},{"name":"enteringtime","type":"uint256[]"},{"name":"rechargeParam","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"userAddr","type":"address"}],"name":"getRedeemRecords","outputs":[{"components":[{"name":"redeemAmount","type":"uint256[]"},{"name":"redeemtime","type":"uint256[]"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"},{"name":"index1","type":"uint8"},{"name":"index2","type":"uint8"}],"name":"matchSelTarget","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"nodeToAdd","type":"uint256"}],"name":"registerAdd","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"buyMintToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"MAX_DELETE_NUM","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"syncNodes","outputs":[{"name":"nodeId","type":"address"},{"name":"link","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getFlushInfo","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getEstFlushBlock","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"syncReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"}],"name":"checkProposalStatus","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"types","type":"uint256"}],"name":"getProposal","outputs":[{"components":[{"name":"proposedBy","type":"address"},{"name":"lastApproved","type":"bytes32"},{"name":"hash","type":"bytes32"},{"name":"start","type":"uint256"},{"name":"end","type":"uint256"},{"name":"distributionAmount","type":"uint256[]"},{"name":"flag","type":"uint256"},{"name":"startingBlock","type":"uint256"},{"name":"voters","type":"uint256[]"},{"name":"votecount","type":"uint256"},{"name":"badActors","type":"uint256[]"},{"name":"viaNodeAddress","type":"address"},{"name":"preRedeemNum","type":"uint256"},{"name":"redeemAddr","type":"address[]"},{"name":"redeemAmt","type":"uint256[]"},{"name":"minerAddr","type":"address[]"},{"name":"distributeFlag","type":"uint256"},{"name":"redeemAgreeList","type":"address[]"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"proposalHashInProgress","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"}],"name":"requestEnterAndRedeemAction","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"nodesToRelease","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"randIndex","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"indexInlist","type":"uint256"},{"name":"hash","type":"bytes32"}],"name":"requestProposalAction","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"isMemberValid","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"joinCntNow","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"AUTO_RETIRE_COUNT","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"initialFlushInRound","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"selTarget","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"reset","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"proposalHashApprovedLast","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"NODE_INIT_PERFORMANCE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"VnodeProtocolBaseAddr","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"redeemAddr","type":"address[]"},{"name":"redeemAmt","type":"uint256[]"}],"name":"UploadRedeemData","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"monitor","type":"address"}],"name":"removeMonitorInfo","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"MAX_GAS_PRICE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"joinCntMax","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"dappRedeemPos","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ERCAddr","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"proposalExpiration","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"DEFLATOR_VALUE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MONITOR_MIN_FEE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"recv","type":"address"},{"name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"txNumInFlush","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalOperation","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"flushInRound","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"proto","type":"address"},{"name":"vnodeProtocolBaseAddr","type":"address"},{"name":"ercAddr","type":"address"},{"name":"ercRate","type":"uint256"},{"name":"min","type":"uint256"},{"name":"max","type":"uint256"},{"name":"thousandth","type":"uint256"},{"name":"flushRound","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"message","type":"string"}],"name":"ReportStatus","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"addr","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"TransferAmount","type":"event"}]'
        var dappBaseABI = '[{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"have\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pos\",\"type\":\"uint256\"},{\"name\":\"tosend\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"},{\"name\":\"times\",\"type\":\"uint256[]\"}],\"name\":\"postFlush\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dappAddr\",\"type\":\"address\"}],\"name\":\"getDappABI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dappAddr\",\"type\":\"address\"},{\"name\":\"dappOwner\",\"type\":\"address\"},{\"name\":\"dappABI\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"updateDapp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newlist\",\"type\":\"address[]\"}],\"name\":\"updateNodeList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"},{\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"getRedeemMapping\",\"outputs\":[{\"name\":\"redeemingAddr\",\"type\":\"address[]\"},{\"name\":\"redeemingAmt\",\"type\":\"uint256[]\"},{\"name\":\"redeemingtime\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurNodeList\",\"outputs\":[{\"name\":\"nodeList\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"curNodeList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getEnterRecords\",\"outputs\":[{\"name\":\"enterAmt\",\"type\":\"uint256[]\"},{\"name\":\"entertime\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dappAddr\",\"type\":\"address\"}],\"name\":\"removeDapp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDappList\",\"outputs\":[{\"components\":[{\"name\":\"dappAddr\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"dappABI\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dappRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dappAddr\",\"type\":\"address\"}],\"name\":\"getDappState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dappList\",\"outputs\":[{\"name\":\"dappAddr\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"dappABI\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemFromMicroChain\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dappAddr\",\"type\":\"address\"},{\"name\":\"dappOwner\",\"type\":\"address\"},{\"name\":\"dappABI\",\"type\":\"string\"}],\"name\":\"registerDapp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enterPos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]'

        module.exports = {
          asmABI: asmABI,
          astABI: astABI,
          dappBaseABI: dappBaseABI
        }

        /***/
}),
/* 500 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
         
          Adopt from eth-lib with some minor modifications and pruning. 
          eth-lib is licensed under MIT:
          https://github.com/maiavictor/eth-lib
          
          Part of the code is adopt from eth-sig-util with some minor modifications
          to use on MOAC platform.
          eth-sig-util is licensed under ISC.
          https://github.com/MetaMask/eth-sig-util.git
        */



        var Account = __webpack_require__(501);
        var Hash = __webpack_require__(215);
        var RLP = __webpack_require__(516);
        var Bytes = __webpack_require__(126);
        var utils = __webpack_require__(0);
        var secp256k1 = __webpack_require__(517);
        var Buffer = __webpack_require__(10).Buffer;
        var assert = __webpack_require__(134);
        var BN = __webpack_require__(11)

        //To fix an error of 2 leading 0s
        var trimLeadingZero = function (hex) {
          while (hex && hex.startsWith('0x00')) {
            hex = '0x' + hex.slice(4);
          }
          return hex;
        };

        /*
         * This function is to resolve the issue 
         * https://github.com/ethereum/web3.js/issues/1170
         * 
         */
        var makeEven = function (hex) {
          if (hex.length % 2 === 1) {
            hex = hex.replace('0x', '0x0');
          }
          return hex;
        };

        /**
         * Pads a `String` to have an even length
         * @method padToEven
         * @param {String} a
         * @return {String}
         */
        var padToEven = function padToEven(a) {
          if (a.length % 2) a = '0' + a
          return a
        }

        /**
         * Is the string a hex string.
         *
         * @method check if string is hex string of specific length
         * @param {String} value
         * @param {Number} length
         * @returns {Boolean} output the string is a hex string
         */
        var isHexString = function isHexString(value, length) {
          if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
          }

          if (length && value.length !== 2 + 2 * length) {
            return false;
          }

          return true;
        }

        var isHexPrefixed = function isHexPrefixed(str) {
          return str.slice(0, 2) === '0x';
        }

        /**
         * Removes 0x from a given String
         * @param {String} value
         * @return {String} output
         */
        var stripHexPrefix = function stripHexPrefix(str) {
          if (typeof str !== 'string') {
            return str;
          }
          return isHexPrefixed(str) ? str.slice(2) : str;
        }

        /**
         * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
         * @param {*} v the value
         */
        var toBuffer = function toBuffer(v) {
          if (!Buffer.isBuffer(v)) {
            if (Array.isArray(v)) {
              v = Buffer.from(v)
            } else if (typeof v === 'string') {
              if (isHexString(v)) {
                v = Buffer.from(padToEven(stripHexPrefix(v)), 'hex')
              } else {
                v = Buffer.from(v)
              }
            } else if (typeof v === 'number') {
              v = intToBuffer(v)
            } else if (v === null || v === undefined) {
              v = Buffer.allocUnsafe(0)
            } else if (v.toArray) {
              // converts a BN to a Buffer
              v = Buffer.from(v.toArray())
            } else {
              throw new Error('invalid type')
            }
          }
          return v
        }

        /**
         * Converts a `Buffer` into a hex `String`
         * @param {Buffer} buf
         * @return {String}
         */
        var bufferToHex = function bufferToHex(buf) {
          buf = toBuffer(buf)
          return '0x' + buf.toString('hex')
        }

        /**
         * Converts a `Buffer` to a `Number`
         * @method bufferToInt
         * @param {Buffer} buf
         * @return {Number}
         */
        var bufferToInt = function bufferToInt(buf) {
          return parseInt(bufferToHex(buf), 16)
        }

        /*
         * RLP usage, conver the input integer to HEX value.
         */
        var intToHex = function intToHex(i) {
          var hex = i.toString(16)
          if (hex.length % 2) {
            hex = '0' + hex
          }

          return hex
        }

        /*
         * Transfer an integer to buffer
         */
        var intToBuffer = function intToBuffer(i) {
          var hex = intToHex(i)
          return new Buffer(hex, 'hex')
        }

        /**
         * ECDSA sign
         * @param {Buffer} msgHash
         * @param {Buffer} privateKey
         * @return {Object}
         */
        var ecsign = function ecsign(msgHash, privateKeyStr) {

          //Convert the input string to Buffer
          if (typeof msgHash === 'string') {
            if (isHexString(msgHash)) {
              msgHash = Buffer.from(makeEven(stripHexPrefix(msgHash)), 'hex')
            }
          }

          var privateKey = new Buffer(privateKeyStr, 'hex');

          var sig = secp256k1.sign(msgHash, privateKey)

          var ret = {}
          ret.r = sig.signature.slice(0, 32)
          ret.s = sig.signature.slice(32, 64)
          ret.v = sig.recovery + 27

          return ret
        }

        /**
         * Returns a buffer filled with 0s
         * @method zeros
         * @param {Number} bytes  the number of bytes the buffer should be
         * @return {Buffer}
         */
        var zeros = function zeros(bytes) {
          return Buffer.allocUnsafe(bytes).fill(0);
        };

        /**
         * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
         * Or it truncates the beginning if it exceeds.
         * @method setLength
         * @param {Buffer|Array} msg the value to pad
         * @param {Number} length the number of bytes the output should be
         * @param {Boolean} [right=false] whether to start padding form the left or right
         * @return {Buffer|Array}
         */
        var setLength = function setLength(msg, length, right) {
          var buf = zeros(length);
          msg = toBuffer(msg);
          if (right) {
            if (msg.length < length) {
              msg.copy(buf);
              return buf;
            }
            return msg.slice(0, length);
          } else {
            if (msg.length < length) {
              msg.copy(buf, length - msg.length);
              return buf;
            }
            return msg.slice(-length);
          }
        };

        /**
         * ECDSA public key recovery from signature
         * @param {Buffer} msgHash
         * @param {Number} v
         * @param {Buffer} r
         * @param {Buffer} s
         * @return {Buffer} publicKey
         */
        var ecrecover = function ecrecover(msgHash, v, r, s) {
          var signature = Buffer.concat([setLength(r, 32), setLength(s, 32)], 64);
          var recovery = v - 27;
          if (recovery !== 0 && recovery !== 1) {
            throw new Error('Invalid signature v value');
          }
          var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
          return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
        };

        /**
         * Determines if the signature is valid from MOAC sign
         * Input should be convertableto 
         * message    -  original message
         * signedData - signature with account private key and chain3.mc.sign
         * srcAddr.   -  account public address
         * @param {String} msgHash
         * @param {String} signedData
         * @param {String} srcAddr
         * @return {Boolean}
         */
        var verifyMcSignature = function verifyMcSignature(message, signedData, srcAddr) {

          var prefixMsg = addPrefixToMessage(toBuffer(message));

          // do Hash
          var msgHash = Hash.keccak256(prefixMsg);

          try {

            var recoverAddr = Account.recover(msgHash, signedData).toLowerCase();
            assert.equal(recoverAddr, srcAddr.toLowerCase());
            if (recoverAddr == srcAddr.toLowerCase()) {
              return true;
            } else {
              return false;

            }
          } catch (e) {
            console.log(e);
            return false
          }
        }

        /**
         * Add the prefix to the message as identification from MOAC system
         * if the signature is valid from MOAC sign
         * Inputs are byte array or Buffer, the coding of header is as the follows
         * e.g.
         * message = 't' = 0X74 = 116,
         * HEX STRING: 194d6f61634e6f6465205369676e6564204d6573736167653a0a3174
         * BYTE ARRAY: [25 77 111 97 99 78 111 100 101 32 83 105 103 110 101 100 32 77 101 115 115 97 103 101 58 10 49 116]
         * 
         * Byte index: HEX value: Comments
         * 0: 0x19: length of the header Strings
         * 1-24: 'MoacNode Signed Message:' : actual header string
         * 25: 0x10 = '\n' : newline ASCII
         * 26: 0x31 = 49 = '1' : length of the input byte array, shown as ASCII code,1 
         * 27: 0x74 = 116 = 't' : actual inpu byte array;
         * @param {message} should be a Buffer data type
         * @return {Buffer} 
         */
        var addPrefixToMessage = function addPrefixToMessage(message) {
          //Header: \x19MoacNode Signed Message:\n
          //25 77 111 97 99 78 111 100 101 32 83 105 103 110 101 100 32 77 101 115 115 97 103 101 58 10
          var prefix = toBuffer('0x194d6f61634e6f6465205369676e6564204d6573736167653a0a');
          var msgLen = message.length.toString();

          var lenBuf = new Buffer(msgLen.length);

          // Convert the string length to ASCII string array
          for (var i = 0; i < msgLen.length; i++) {
            lenBuf[i] = msgLen.charCodeAt(i);
          }

          return Buffer.concat([prefix, lenBuf, toBuffer(message)]);
        }

        /**
         * Returns the keccak-256 hash of `message`, prefixed with the header used by the `mc_sign` RPC call, 
         * then use `ecsign` to produce the same signature as the `mc_sign` from MOAC nodes.
         * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
         * For non-HEX string, to comply with MOAC node sign process.
         * used to produce the signature.
         * @param {String} message
         * @param {String} privateKey
         * @return {Object}
         */
        var signMcMessage = function signMcMessage(message, privateKey) {

          // add moac sign header as MOAC vnode before the 
          // "\x19MoacNode Signed Message:\n"
          var prefixMsg = addPrefixToMessage(toBuffer(message));

          var inHash = Hash.keccak256(prefixMsg);

          var sig = ecsign(inHash, stripHexPrefix(privateKey));

          return concatSig(sig.v, sig.r, sig.s);
        }

        /**
         * Recover the account address from input signed message
         * msgParams should have a `data` key that is hex-encoded data unsigned, and a `sig` key that is hex-encoded and already signed.
         * @method recoverPersonalSignature
         * @param {msgParams} signed message, must follow
         * @return {senderAddr} a hex-encoded sender address.
         */
        var recoverPersonalSignature = function (indata, insig) {

          var prefixMsg = addPrefixToMessage(toBuffer(indata));
          // do Hash
          var msgHash = Hash.keccak256(prefixMsg);
          return Account.recover(msgHash, insig).toLowerCase();

        }

        /**
         * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
         * @method fromSigned
         * @param {Buffer} num
         * @return {BN}
         */
        var fromSigned = function fromSigned(num) {
          return new BN(num).fromTwos(256)
        }

        /**
         * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
         * @method toUnsigned
         * @param {BN} num
         * @return {Buffer}
         */
        var toUnsigned = function (num) {
          return new Buffer(num.toTwos(256).toArray())
        }

        /**
         * Combine all three fields of the signature
         *
         * @param {Number} v
         * @param {Buffer} r
         * @param {Buffer} s
         * @return {Buffer} publicKey
         */
        var concatSig = function concatSig(v, r, s) {

          var rSig = fromSigned(r)
          var sSig = fromSigned(s)
          var vSig = bufferToInt(v)
          var rStr = padWithZeroes(toUnsigned(rSig).toString('hex'), 64)
          var sStr = padWithZeroes(toUnsigned(sSig).toString('hex'), 64)
          var vStr = stripHexPrefix(intToHex(vSig))

          return addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')
        }

        /**
         * Adds "0x" to a given `String` if it does not already start with "0x"
         * @method addHexPrefix
         * @param {String} str
         * @return {String}
         */
        var addHexPrefix = function addHexPrefix(str) {
          if (typeof str !== 'string') {
            return str
          }

          return isHexPrefixed(str) ? str : '0x' + str
        }

        /**
         * Check if input number has enough length
         * if not, add 0s to make it enough length
         *
         * @method padWithZeroes
         * @param {number} input number 
        * @param {length} input length as desired 
         * @returns {string}
         */
        var padWithZeroes = function padWithZeroes(number, length) {
          var myString = '' + number
          while (myString.length < length) {
            myString = '0' + myString
          }
          return myString
        }

        /* 
         * A simple signTransaction function to sign
         * the input TX with private key.
         * Input:
         * tx - a JSON format object contains the input TX info
         * privateKey - a string format of the private key
         * Output:
         * rawTransaction - HEX String, can be used with 
         *                  mc.sendRawTransaction
         * 
         * 
         */
        var signTransaction = function (tx, privateKey) {

          if (tx.chainId < 1) {
            return new Error('"Chain ID" is invalid');
          }

          if (!tx.gas && !tx.gasLimit) {
            return new Error('"gas" is missing');
          }

          if (tx.nonce < 0 ||
            tx.gasLimit < 0 ||
            tx.gasPrice < 0 ||
            tx.chainId < 0) {
            return new Error('Gas, gasPrice, nonce or chainId is lower than 0');
          }


          //Sharding Flag can be 0, 1, 2
          //If input has not sharding flag, set it to 0 as global TX.
          if (tx.shardingFlag == undefined) {
            tx.shardingFlag = 0;
          }

          try {
            //Make sure all the number fields are in HEX format

            var transaction = tx;
            transaction.to = tx.to || '0x'; //Can be zero, for contract creation
            transaction.data = tx.data || '0x'; //can be zero for general TXs
            transaction.value = tx.value || '0x'; //can be zero for contract call
            transaction.chainId = utils.numberToHex(tx.chainId);
            transaction.shardingFlag = utils.numberToHex(tx.shardingFlag);
            transaction.systemContract = '0x0'; //System contract flag, always = 0
            transaction.via = tx.via || '0x'; //vnode subchain address

            //Encode the TX for signature
            //   type txdata struct {
            // AccountNonce uint64          `json:"nonce"    gencodec:"required"`
            // SystemContract uint64          `json:"syscnt" gencodec:"required"`
            // Price        *big.Int        `json:"gasPrice" gencodec:"required"`
            // GasLimit     *big.Int        `json:"gas"      gencodec:"required"`
            //   // nil means contract creation
            // Amount       *big.Int        `json:"value"    gencodec:"required"`
            // Payload      []byte          `json:"input"    gencodec:"required"`
            // ShardingFlag uint64 `json:"shardingFlag" gencodec:"required"`
            // Via            *common.Address `json:"to"       rlp:"nil"`

            // // Signature values
            // V *big.Int `json:"v" gencodec:"required"`
            // R *big.Int `json:"r" gencodec:"required"`
            // S *big.Int `json:"s" gencodec:"required"`

            var rlpEncoded = RLP.encode([
              Bytes.fromNat(transaction.nonce),
              Bytes.fromNat(transaction.systemContract),
              Bytes.fromNat(transaction.gasPrice),
              Bytes.fromNat(transaction.gasLimit),
              transaction.to.toLowerCase(),
              Bytes.fromNat(transaction.value),
              transaction.data,
              Bytes.fromNat(transaction.shardingFlag),
              // transaction.via.toLowerCase()]);
              transaction.via.toLowerCase(),
              Bytes.fromNat(transaction.chainId),
              "0x",
              "0x"
            ]);

            var hash = Hash.keccak256(rlpEncoded);

            // for MOAC, keep 9 fields instead of 6
            var vPos = 9;
            //Sign the hash with the private key to produce the
            //V, R, S
            var newsign = ecsign(hash, stripHexPrefix(privateKey));

            var rawTx = RLP.decode(rlpEncoded).slice(0, vPos + 3);

            //Replace the V field with chainID info
            var newV = newsign.v + 8 + transaction.chainId * 2;

            // dont allow uneven r,s,v values
            // there could be 0 when convert the buffer to HEX.
            // In the RLP encoding/decoding rules, 
            rawTx[vPos] = (makeEven(trimLeadingZero(bufferToHex(newV))));
            rawTx[vPos + 1] = (makeEven(trimLeadingZero(bufferToHex(newsign.r))));
            rawTx[vPos + 2] = (makeEven(trimLeadingZero(bufferToHex(newsign.s))));
            // console.log("R", newsign.r," length ",newsign.r.length);
            // console.log("EVEN R", makeEven(bufferToHex(newsign.r)));
            // console.log("S", newsign.s," length ", newsign.s.length);
            // console.log("EVEN S", makeEven(bufferToHex(newsign.s)));
            // console.log("EVEN S without zeros", makeEven(trimLeadingZero(bufferToHex(newsign.s))));

            var rawTransaction = RLP.encode(rawTx);


          } catch (e) {

            return e;
          }

          return rawTransaction;
        };


        module.exports = {
          toBuffer: toBuffer,
          signTransaction: signTransaction,
          signMcMessage: signMcMessage,
          recoverPersonalSignature: recoverPersonalSignature,
          verifyMcSignature: verifyMcSignature
        };

        /***/
}),
/* 501 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (Buffer) {/*
    This file is part of chain3.js.

    chain3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    chain3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
 
  Adopt from eth-lib with some minor modifications and pruning. 
  eth-lib is licensed under MIT:
  https://github.com/maiavictor/eth-lib
  
*/
          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;
              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);
                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }
              return _arr;
            }
            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var Bytes = __webpack_require__(126);
          var Nat = __webpack_require__(502);
          var elliptic = __webpack_require__(211);
          var secp256k1 = new elliptic.ec("secp256k1"); // eslint-disable-line

          var _require = __webpack_require__(215),
            keccak256 = _require.keccak256,
            keccak256s = _require.keccak256s;

          var create = function create(entropy) {
            var innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));
            var middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));
            var outerHex = keccak256(middleHex);
            return fromPrivate(outerHex);
          };

          var toChecksum = function toChecksum(address) {
            var addressHash = keccak256s(address.slice(2));
            var checksumAddress = "0x";
            for (var i = 0; i < 40; i++) {
              checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];
            }
            return checksumAddress;
          };

          var fromPrivate = function fromPrivate(privateKey) {
            var buffer = new Buffer(privateKey.slice(2), "hex");
            var ecKey = secp256k1.keyFromPrivate(buffer);
            var publicKey = "0x" + ecKey.getPublic(false, 'hex').slice(2);
            var publicHash = keccak256(publicKey);
            var address = toChecksum("0x" + publicHash.slice(-40));
            return {
              address: address,
              privateKey: privateKey
            };
          };

          var encodeSignature = function encodeSignature(_ref) {
            var _ref2 = _slicedToArray(_ref, 3),
              v = _ref2[0],
              r = Bytes.pad(32, _ref2[1]),
              s = Bytes.pad(32, _ref2[2]);

            return Bytes.flatten([r, s, v]);
          };

          var decodeSignature = function decodeSignature(hex) {
            return [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];
          };

          var makeSigner = function makeSigner(addToV) {
            return function (hash, privateKey) {
              var signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), "hex")).sign(new Buffer(hash.slice(2), "hex"), {
                canonical: true
              });
              return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat("0x" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat("0x" + signature.s.toString(16)))]);
            };
          };

          // Sign the 
          var sign = makeSigner(27); // v=27|28 instead of 0|1...

          // Should be able to recover multiple public key
          var recover = function recover(hash, signature) {
            var vals = decodeSignature(signature);
            var vrs = {
              v: Bytes.toNumber(vals[0]),
              r: vals[1].slice(2),
              s: vals[2].slice(2)
            };
            var ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), "hex"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that

            var publicKey = "0x" + ecPublicKey.encode("hex", false).slice(2);
            var publicHash = keccak256(publicKey);
            var address = toChecksum("0x" + publicHash.slice(-40));
            return address;
          };

          module.exports = {
            create: create,
            toChecksum: toChecksum,
            fromPrivate: fromPrivate,
            sign: sign,
            makeSigner: makeSigner,
            recover: recover,
            encodeSignature: encodeSignature,
            decodeSignature: decodeSignature
          };
          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(27).Buffer))

        /***/
}),
/* 502 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
         
          Adopt from eth-lib with some minor modifications and pruning. 
          eth-lib is licensed under MIT:
          https://github.com/maiavictor/eth-lib
          
        */
        var BN = __webpack_require__(11);
        var Bytes = __webpack_require__(126);

        var fromBN = function fromBN(bn) {
          return "0x" + bn.toString("hex");
        };

        var toBN = function toBN(str) {
          return new BN(str.slice(2), 16);
        };

        var fromString = function fromString(str) {
          var bn = "0x" + (str.slice(0, 2) === "0x" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString("hex");
          return bn === "0x0" ? "0x" : bn;
        };

        // Convert from moac to sha 1e-18
        var toMc = function toMc(sha) {
          return toNumber(div(sha, fromString("10000000000"))) / 100000000;
        };

        //
        var fromMc = function fromMc(mc) {
          return mul(fromNumber(Math.floor(mc * 100000000)), fromString("10000000000"));
        };

        var toString = function toString(a) {
          return toBN(a).toString(10);
        };

        var fromNumber = function fromNumber(a) {
          return typeof a === "string" ? /^0x/.test(a) ? a : "0x" + a : "0x" + new BN(a).toString("hex");
        };

        var toNumber = function toNumber(a) {
          return toBN(a).toNumber();
        };

        var toUint256 = function toUint256(a) {
          return Bytes.pad(32, a);
        };

        var bin = function bin(method) {
          return function (a, b) {
            return fromBN(toBN(a)[method](toBN(b)));
          };
        };

        var add = bin("add");
        var mul = bin("mul");
        var div = bin("div");
        var sub = bin("sub");

        module.exports = {
          toString: toString,
          fromString: fromString,
          toNumber: toNumber,
          fromNumber: fromNumber,
          toMc: toMc,
          fromMc: fromMc,
          toUint256: toUint256,
          add: add,
          mul: mul,
          div: div,
          sub: sub
        };

        /***/
}),
/* 503 */
/***/ (function (module, exports) {

        module.exports = { "_from": "elliptic@^6.5.2", "_id": "elliptic@6.5.2", "_inBundle": false, "_integrity": "sha512-f4x70okzZbIQl/NSRLkI/+tteV/9WqL98zx+SQ69KbXxmVrmjwsNUPn/gYJJ0sHvEak24cZgHIPegRePAtA/xw==", "_location": "/elliptic", "_phantomChildren": {}, "_requested": { "type": "range", "registry": true, "raw": "elliptic@^6.5.2", "name": "elliptic", "escapedName": "elliptic", "rawSpec": "^6.5.2", "saveSpec": null, "fetchSpec": "^6.5.2" }, "_requiredBy": ["/secp256k1"], "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.2.tgz", "_shasum": "05c5678d7173c049d8ca433552224a495d0e3762", "_spec": "elliptic@^6.5.2", "_where": "/Users/weiqiwang/WeChatProjects/MOAC/node_modules/secp256k1", "author": { "name": "Fedor Indutny", "email": "fedor@indutny.com" }, "bugs": { "url": "https://github.com/indutny/elliptic/issues" }, "bundleDependencies": false, "dependencies": { "bn.js": "^4.4.0", "brorand": "^1.0.1", "hash.js": "^1.0.0", "hmac-drbg": "^1.0.0", "inherits": "^2.0.1", "minimalistic-assert": "^1.0.0", "minimalistic-crypto-utils": "^1.0.0" }, "deprecated": false, "description": "EC cryptography", "devDependencies": { "brfs": "^1.4.3", "coveralls": "^3.0.8", "grunt": "^1.0.4", "grunt-browserify": "^5.0.0", "grunt-cli": "^1.2.0", "grunt-contrib-connect": "^1.0.0", "grunt-contrib-copy": "^1.0.0", "grunt-contrib-uglify": "^1.0.1", "grunt-mocha-istanbul": "^3.0.1", "grunt-saucelabs": "^9.0.1", "istanbul": "^0.4.2", "jscs": "^3.0.7", "jshint": "^2.10.3", "mocha": "^6.2.2" }, "files": ["lib"], "homepage": "https://github.com/indutny/elliptic", "keywords": ["EC", "Elliptic", "curve", "Cryptography"], "license": "MIT", "main": "lib/elliptic.js", "name": "elliptic", "repository": { "type": "git", "url": "git+ssh://git@github.com/indutny/elliptic.git" }, "scripts": { "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js", "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js", "lint": "npm run jscs && npm run jshint", "test": "npm run lint && npm run unit", "unit": "istanbul test _mocha --reporter=spec test/index.js", "version": "grunt dist && git add dist/" }, "version": "6.5.2" }

        /***/
}),
/* 504 */
/***/ (function (module, exports) {

        /* (ignored) */

        /***/
}),
/* 505 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(17);
        var BN = __webpack_require__(11);
        var inherits = __webpack_require__(6);
        var Base = __webpack_require__(93);

        var assert = utils.assert;

        function ShortCurve(conf) {
          Base.call(this, 'short', conf);

          this.a = new BN(conf.a, 16).toRed(this.red);
          this.b = new BN(conf.b, 16).toRed(this.red);
          this.tinv = this.two.redInvm();

          this.zeroA = this.a.fromRed().cmpn(0) === 0;
          this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

          // If the curve is endomorphic, precalculate beta and lambda
          this.endo = this._getEndomorphism(conf);
          this._endoWnafT1 = new Array(4);
          this._endoWnafT2 = new Array(4);
        }
        inherits(ShortCurve, Base);
        module.exports = ShortCurve;

        ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
          // No efficient endomorphism
          if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
            return;

          // Compute beta and lambda, that lambda * P = (beta * Px; Py)
          var beta;
          var lambda;
          if (conf.beta) {
            beta = new BN(conf.beta, 16).toRed(this.red);
          } else {
            var betas = this._getEndoRoots(this.p);
            // Choose the smallest beta
            beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
            beta = beta.toRed(this.red);
          }
          if (conf.lambda) {
            lambda = new BN(conf.lambda, 16);
          } else {
            // Choose the lambda that is matching selected beta
            var lambdas = this._getEndoRoots(this.n);
            if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
              lambda = lambdas[0];
            } else {
              lambda = lambdas[1];
              assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
            }
          }

          // Get basis vectors, used for balanced length-two representation
          var basis;
          if (conf.basis) {
            basis = conf.basis.map(function (vec) {
              return {
                a: new BN(vec.a, 16),
                b: new BN(vec.b, 16)
              };
            });
          } else {
            basis = this._getEndoBasis(lambda);
          }

          return {
            beta: beta,
            lambda: lambda,
            basis: basis
          };
        };

        ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
          // Find roots of for x^2 + x + 1 in F
          // Root = (-1 +- Sqrt(-3)) / 2
          //
          var red = num === this.p ? this.red : BN.mont(num);
          var tinv = new BN(2).toRed(red).redInvm();
          var ntinv = tinv.redNeg();

          var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

          var l1 = ntinv.redAdd(s).fromRed();
          var l2 = ntinv.redSub(s).fromRed();
          return [l1, l2];
        };

        ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
          // aprxSqrt >= sqrt(this.n)
          var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

          // 3.74
          // Run EGCD, until r(L + 1) < aprxSqrt
          var u = lambda;
          var v = this.n.clone();
          var x1 = new BN(1);
          var y1 = new BN(0);
          var x2 = new BN(0);
          var y2 = new BN(1);

          // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
          var a0;
          var b0;
          // First vector
          var a1;
          var b1;
          // Second vector
          var a2;
          var b2;

          var prevR;
          var i = 0;
          var r;
          var x;
          while (u.cmpn(0) !== 0) {
            var q = v.div(u);
            r = v.sub(q.mul(u));
            x = x2.sub(q.mul(x1));
            var y = y2.sub(q.mul(y1));

            if (!a1 && r.cmp(aprxSqrt) < 0) {
              a0 = prevR.neg();
              b0 = x1;
              a1 = r.neg();
              b1 = x;
            } else if (a1 && ++i === 2) {
              break;
            }
            prevR = r;

            v = u;
            u = r;
            x2 = x1;
            x1 = x;
            y2 = y1;
            y1 = y;
          }
          a2 = r.neg();
          b2 = x;

          var len1 = a1.sqr().add(b1.sqr());
          var len2 = a2.sqr().add(b2.sqr());
          if (len2.cmp(len1) >= 0) {
            a2 = a0;
            b2 = b0;
          }

          // Normalize signs
          if (a1.negative) {
            a1 = a1.neg();
            b1 = b1.neg();
          }
          if (a2.negative) {
            a2 = a2.neg();
            b2 = b2.neg();
          }

          return [
            { a: a1, b: b1 },
            { a: a2, b: b2 }
          ];
        };

        ShortCurve.prototype._endoSplit = function _endoSplit(k) {
          var basis = this.endo.basis;
          var v1 = basis[0];
          var v2 = basis[1];

          var c1 = v2.b.mul(k).divRound(this.n);
          var c2 = v1.b.neg().mul(k).divRound(this.n);

          var p1 = c1.mul(v1.a);
          var p2 = c2.mul(v2.a);
          var q1 = c1.mul(v1.b);
          var q2 = c2.mul(v2.b);

          // Calculate answer
          var k1 = k.sub(p1).sub(p2);
          var k2 = q1.add(q2).neg();
          return { k1: k1, k2: k2 };
        };

        ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
          x = new BN(x, 16);
          if (!x.red)
            x = x.toRed(this.red);

          var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
          var y = y2.redSqrt();
          if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
            throw new Error('invalid point');

          // XXX Is there any way to tell if the number is odd without converting it
          // to non-red form?
          var isOdd = y.fromRed().isOdd();
          if (odd && !isOdd || !odd && isOdd)
            y = y.redNeg();

          return this.point(x, y);
        };

        ShortCurve.prototype.validate = function validate(point) {
          if (point.inf)
            return true;

          var x = point.x;
          var y = point.y;

          var ax = this.a.redMul(x);
          var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
          return y.redSqr().redISub(rhs).cmpn(0) === 0;
        };

        ShortCurve.prototype._endoWnafMulAdd =
          function _endoWnafMulAdd(points, coeffs, jacobianResult) {
            var npoints = this._endoWnafT1;
            var ncoeffs = this._endoWnafT2;
            for (var i = 0; i < points.length; i++) {
              var split = this._endoSplit(coeffs[i]);
              var p = points[i];
              var beta = p._getBeta();

              if (split.k1.negative) {
                split.k1.ineg();
                p = p.neg(true);
              }
              if (split.k2.negative) {
                split.k2.ineg();
                beta = beta.neg(true);
              }

              npoints[i * 2] = p;
              npoints[i * 2 + 1] = beta;
              ncoeffs[i * 2] = split.k1;
              ncoeffs[i * 2 + 1] = split.k2;
            }
            var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

            // Clean-up references to points and coefficients
            for (var j = 0; j < i * 2; j++) {
              npoints[j] = null;
              ncoeffs[j] = null;
            }
            return res;
          };

        function Point(curve, x, y, isRed) {
          Base.BasePoint.call(this, curve, 'affine');
          if (x === null && y === null) {
            this.x = null;
            this.y = null;
            this.inf = true;
          } else {
            this.x = new BN(x, 16);
            this.y = new BN(y, 16);
            // Force redgomery representation when loading from JSON
            if (isRed) {
              this.x.forceRed(this.curve.red);
              this.y.forceRed(this.curve.red);
            }
            if (!this.x.red)
              this.x = this.x.toRed(this.curve.red);
            if (!this.y.red)
              this.y = this.y.toRed(this.curve.red);
            this.inf = false;
          }
        }
        inherits(Point, Base.BasePoint);

        ShortCurve.prototype.point = function point(x, y, isRed) {
          return new Point(this, x, y, isRed);
        };

        ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
          return Point.fromJSON(this, obj, red);
        };

        Point.prototype._getBeta = function _getBeta() {
          if (!this.curve.endo)
            return;

          var pre = this.precomputed;
          if (pre && pre.beta)
            return pre.beta;

          var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
          if (pre) {
            var curve = this.curve;
            var endoMul = function (p) {
              return curve.point(p.x.redMul(curve.endo.beta), p.y);
            };
            pre.beta = beta;
            beta.precomputed = {
              beta: null,
              naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
              },
              doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
              }
            };
          }
          return beta;
        };

        Point.prototype.toJSON = function toJSON() {
          if (!this.precomputed)
            return [this.x, this.y];

          return [this.x, this.y, this.precomputed && {
            doubles: this.precomputed.doubles && {
              step: this.precomputed.doubles.step,
              points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
              wnd: this.precomputed.naf.wnd,
              points: this.precomputed.naf.points.slice(1)
            }
          }];
        };

        Point.fromJSON = function fromJSON(curve, obj, red) {
          if (typeof obj === 'string')
            obj = JSON.parse(obj);
          var res = curve.point(obj[0], obj[1], red);
          if (!obj[2])
            return res;

          function obj2point(obj) {
            return curve.point(obj[0], obj[1], red);
          }

          var pre = obj[2];
          res.precomputed = {
            beta: null,
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: [res].concat(pre.doubles.points.map(obj2point))
            },
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: [res].concat(pre.naf.points.map(obj2point))
            }
          };
          return res;
        };

        Point.prototype.inspect = function inspect() {
          if (this.isInfinity())
            return '<EC Point Infinity>';
          return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
            ' y: ' + this.y.fromRed().toString(16, 2) + '>';
        };

        Point.prototype.isInfinity = function isInfinity() {
          return this.inf;
        };

        Point.prototype.add = function add(p) {
          // O + P = P
          if (this.inf)
            return p;

          // P + O = P
          if (p.inf)
            return this;

          // P + P = 2P
          if (this.eq(p))
            return this.dbl();

          // P + (-P) = O
          if (this.neg().eq(p))
            return this.curve.point(null, null);

          // P + Q = O
          if (this.x.cmp(p.x) === 0)
            return this.curve.point(null, null);

          var c = this.y.redSub(p.y);
          if (c.cmpn(0) !== 0)
            c = c.redMul(this.x.redSub(p.x).redInvm());
          var nx = c.redSqr().redISub(this.x).redISub(p.x);
          var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
          return this.curve.point(nx, ny);
        };

        Point.prototype.dbl = function dbl() {
          if (this.inf)
            return this;

          // 2P = O
          var ys1 = this.y.redAdd(this.y);
          if (ys1.cmpn(0) === 0)
            return this.curve.point(null, null);

          var a = this.curve.a;

          var x2 = this.x.redSqr();
          var dyinv = ys1.redInvm();
          var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

          var nx = c.redSqr().redISub(this.x.redAdd(this.x));
          var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
          return this.curve.point(nx, ny);
        };

        Point.prototype.getX = function getX() {
          return this.x.fromRed();
        };

        Point.prototype.getY = function getY() {
          return this.y.fromRed();
        };

        Point.prototype.mul = function mul(k) {
          k = new BN(k, 16);
          if (this.isInfinity())
            return this;
          else if (this._hasDoubles(k))
            return this.curve._fixedNafMul(this, k);
          else if (this.curve.endo)
            return this.curve._endoWnafMulAdd([this], [k]);
          else
            return this.curve._wnafMul(this, k);
        };

        Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
          var points = [this, p2];
          var coeffs = [k1, k2];
          if (this.curve.endo)
            return this.curve._endoWnafMulAdd(points, coeffs);
          else
            return this.curve._wnafMulAdd(1, points, coeffs, 2);
        };

        Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
          var points = [this, p2];
          var coeffs = [k1, k2];
          if (this.curve.endo)
            return this.curve._endoWnafMulAdd(points, coeffs, true);
          else
            return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
        };

        Point.prototype.eq = function eq(p) {
          return this === p ||
            this.inf === p.inf &&
            (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
        };

        Point.prototype.neg = function neg(_precompute) {
          if (this.inf)
            return this;

          var res = this.curve.point(this.x, this.y.redNeg());
          if (_precompute && this.precomputed) {
            var pre = this.precomputed;
            var negate = function (p) {
              return p.neg();
            };
            res.precomputed = {
              naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
              },
              doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
              }
            };
          }
          return res;
        };

        Point.prototype.toJ = function toJ() {
          if (this.inf)
            return this.curve.jpoint(null, null, null);

          var res = this.curve.jpoint(this.x, this.y, this.curve.one);
          return res;
        };

        function JPoint(curve, x, y, z) {
          Base.BasePoint.call(this, curve, 'jacobian');
          if (x === null && y === null && z === null) {
            this.x = this.curve.one;
            this.y = this.curve.one;
            this.z = new BN(0);
          } else {
            this.x = new BN(x, 16);
            this.y = new BN(y, 16);
            this.z = new BN(z, 16);
          }
          if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
          if (!this.y.red)
            this.y = this.y.toRed(this.curve.red);
          if (!this.z.red)
            this.z = this.z.toRed(this.curve.red);

          this.zOne = this.z === this.curve.one;
        }
        inherits(JPoint, Base.BasePoint);

        ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
          return new JPoint(this, x, y, z);
        };

        JPoint.prototype.toP = function toP() {
          if (this.isInfinity())
            return this.curve.point(null, null);

          var zinv = this.z.redInvm();
          var zinv2 = zinv.redSqr();
          var ax = this.x.redMul(zinv2);
          var ay = this.y.redMul(zinv2).redMul(zinv);

          return this.curve.point(ax, ay);
        };

        JPoint.prototype.neg = function neg() {
          return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
        };

        JPoint.prototype.add = function add(p) {
          // O + P = P
          if (this.isInfinity())
            return p;

          // P + O = P
          if (p.isInfinity())
            return this;

          // 12M + 4S + 7A
          var pz2 = p.z.redSqr();
          var z2 = this.z.redSqr();
          var u1 = this.x.redMul(pz2);
          var u2 = p.x.redMul(z2);
          var s1 = this.y.redMul(pz2.redMul(p.z));
          var s2 = p.y.redMul(z2.redMul(this.z));

          var h = u1.redSub(u2);
          var r = s1.redSub(s2);
          if (h.cmpn(0) === 0) {
            if (r.cmpn(0) !== 0)
              return this.curve.jpoint(null, null, null);
            else
              return this.dbl();
          }

          var h2 = h.redSqr();
          var h3 = h2.redMul(h);
          var v = u1.redMul(h2);

          var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
          var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
          var nz = this.z.redMul(p.z).redMul(h);

          return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.mixedAdd = function mixedAdd(p) {
          // O + P = P
          if (this.isInfinity())
            return p.toJ();

          // P + O = P
          if (p.isInfinity())
            return this;

          // 8M + 3S + 7A
          var z2 = this.z.redSqr();
          var u1 = this.x;
          var u2 = p.x.redMul(z2);
          var s1 = this.y;
          var s2 = p.y.redMul(z2).redMul(this.z);

          var h = u1.redSub(u2);
          var r = s1.redSub(s2);
          if (h.cmpn(0) === 0) {
            if (r.cmpn(0) !== 0)
              return this.curve.jpoint(null, null, null);
            else
              return this.dbl();
          }

          var h2 = h.redSqr();
          var h3 = h2.redMul(h);
          var v = u1.redMul(h2);

          var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
          var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
          var nz = this.z.redMul(h);

          return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.dblp = function dblp(pow) {
          if (pow === 0)
            return this;
          if (this.isInfinity())
            return this;
          if (!pow)
            return this.dbl();

          if (this.curve.zeroA || this.curve.threeA) {
            var r = this;
            for (var i = 0; i < pow; i++)
              r = r.dbl();
            return r;
          }

          // 1M + 2S + 1A + N * (4S + 5M + 8A)
          // N = 1 => 6M + 6S + 9A
          var a = this.curve.a;
          var tinv = this.curve.tinv;

          var jx = this.x;
          var jy = this.y;
          var jz = this.z;
          var jz4 = jz.redSqr().redSqr();

          // Reuse results
          var jyd = jy.redAdd(jy);
          for (var i = 0; i < pow; i++) {
            var jx2 = jx.redSqr();
            var jyd2 = jyd.redSqr();
            var jyd4 = jyd2.redSqr();
            var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

            var t1 = jx.redMul(jyd2);
            var nx = c.redSqr().redISub(t1.redAdd(t1));
            var t2 = t1.redISub(nx);
            var dny = c.redMul(t2);
            dny = dny.redIAdd(dny).redISub(jyd4);
            var nz = jyd.redMul(jz);
            if (i + 1 < pow)
              jz4 = jz4.redMul(jyd4);

            jx = nx;
            jz = nz;
            jyd = dny;
          }

          return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
        };

        JPoint.prototype.dbl = function dbl() {
          if (this.isInfinity())
            return this;

          if (this.curve.zeroA)
            return this._zeroDbl();
          else if (this.curve.threeA)
            return this._threeDbl();
          else
            return this._dbl();
        };

        JPoint.prototype._zeroDbl = function _zeroDbl() {
          var nx;
          var ny;
          var nz;
          // Z = 1
          if (this.zOne) {
            // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
            //     #doubling-mdbl-2007-bl
            // 1M + 5S + 14A

            // XX = X1^2
            var xx = this.x.redSqr();
            // YY = Y1^2
            var yy = this.y.redSqr();
            // YYYY = YY^2
            var yyyy = yy.redSqr();
            // S = 2 * ((X1 + YY)^2 - XX - YYYY)
            var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
            s = s.redIAdd(s);
            // M = 3 * XX + a; a = 0
            var m = xx.redAdd(xx).redIAdd(xx);
            // T = M ^ 2 - 2*S
            var t = m.redSqr().redISub(s).redISub(s);

            // 8 * YYYY
            var yyyy8 = yyyy.redIAdd(yyyy);
            yyyy8 = yyyy8.redIAdd(yyyy8);
            yyyy8 = yyyy8.redIAdd(yyyy8);

            // X3 = T
            nx = t;
            // Y3 = M * (S - T) - 8 * YYYY
            ny = m.redMul(s.redISub(t)).redISub(yyyy8);
            // Z3 = 2*Y1
            nz = this.y.redAdd(this.y);
          } else {
            // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
            //     #doubling-dbl-2009-l
            // 2M + 5S + 13A

            // A = X1^2
            var a = this.x.redSqr();
            // B = Y1^2
            var b = this.y.redSqr();
            // C = B^2
            var c = b.redSqr();
            // D = 2 * ((X1 + B)^2 - A - C)
            var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
            d = d.redIAdd(d);
            // E = 3 * A
            var e = a.redAdd(a).redIAdd(a);
            // F = E^2
            var f = e.redSqr();

            // 8 * C
            var c8 = c.redIAdd(c);
            c8 = c8.redIAdd(c8);
            c8 = c8.redIAdd(c8);

            // X3 = F - 2 * D
            nx = f.redISub(d).redISub(d);
            // Y3 = E * (D - X3) - 8 * C
            ny = e.redMul(d.redISub(nx)).redISub(c8);
            // Z3 = 2 * Y1 * Z1
            nz = this.y.redMul(this.z);
            nz = nz.redIAdd(nz);
          }

          return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype._threeDbl = function _threeDbl() {
          var nx;
          var ny;
          var nz;
          // Z = 1
          if (this.zOne) {
            // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
            //     #doubling-mdbl-2007-bl
            // 1M + 5S + 15A

            // XX = X1^2
            var xx = this.x.redSqr();
            // YY = Y1^2
            var yy = this.y.redSqr();
            // YYYY = YY^2
            var yyyy = yy.redSqr();
            // S = 2 * ((X1 + YY)^2 - XX - YYYY)
            var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
            s = s.redIAdd(s);
            // M = 3 * XX + a
            var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
            // T = M^2 - 2 * S
            var t = m.redSqr().redISub(s).redISub(s);
            // X3 = T
            nx = t;
            // Y3 = M * (S - T) - 8 * YYYY
            var yyyy8 = yyyy.redIAdd(yyyy);
            yyyy8 = yyyy8.redIAdd(yyyy8);
            yyyy8 = yyyy8.redIAdd(yyyy8);
            ny = m.redMul(s.redISub(t)).redISub(yyyy8);
            // Z3 = 2 * Y1
            nz = this.y.redAdd(this.y);
          } else {
            // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
            // 3M + 5S

            // delta = Z1^2
            var delta = this.z.redSqr();
            // gamma = Y1^2
            var gamma = this.y.redSqr();
            // beta = X1 * gamma
            var beta = this.x.redMul(gamma);
            // alpha = 3 * (X1 - delta) * (X1 + delta)
            var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
            alpha = alpha.redAdd(alpha).redIAdd(alpha);
            // X3 = alpha^2 - 8 * beta
            var beta4 = beta.redIAdd(beta);
            beta4 = beta4.redIAdd(beta4);
            var beta8 = beta4.redAdd(beta4);
            nx = alpha.redSqr().redISub(beta8);
            // Z3 = (Y1 + Z1)^2 - gamma - delta
            nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
            // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
            var ggamma8 = gamma.redSqr();
            ggamma8 = ggamma8.redIAdd(ggamma8);
            ggamma8 = ggamma8.redIAdd(ggamma8);
            ggamma8 = ggamma8.redIAdd(ggamma8);
            ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
          }

          return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype._dbl = function _dbl() {
          var a = this.curve.a;

          // 4M + 6S + 10A
          var jx = this.x;
          var jy = this.y;
          var jz = this.z;
          var jz4 = jz.redSqr().redSqr();

          var jx2 = jx.redSqr();
          var jy2 = jy.redSqr();

          var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

          var jxd4 = jx.redAdd(jx);
          jxd4 = jxd4.redIAdd(jxd4);
          var t1 = jxd4.redMul(jy2);
          var nx = c.redSqr().redISub(t1.redAdd(t1));
          var t2 = t1.redISub(nx);

          var jyd8 = jy2.redSqr();
          jyd8 = jyd8.redIAdd(jyd8);
          jyd8 = jyd8.redIAdd(jyd8);
          jyd8 = jyd8.redIAdd(jyd8);
          var ny = c.redMul(t2).redISub(jyd8);
          var nz = jy.redAdd(jy).redMul(jz);

          return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.trpl = function trpl() {
          if (!this.curve.zeroA)
            return this.dbl().add(this);

          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
          // 5M + 10S + ...

          // XX = X1^2
          var xx = this.x.redSqr();
          // YY = Y1^2
          var yy = this.y.redSqr();
          // ZZ = Z1^2
          var zz = this.z.redSqr();
          // YYYY = YY^2
          var yyyy = yy.redSqr();
          // M = 3 * XX + a * ZZ2; a = 0
          var m = xx.redAdd(xx).redIAdd(xx);
          // MM = M^2
          var mm = m.redSqr();
          // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
          var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          e = e.redIAdd(e);
          e = e.redAdd(e).redIAdd(e);
          e = e.redISub(mm);
          // EE = E^2
          var ee = e.redSqr();
          // T = 16*YYYY
          var t = yyyy.redIAdd(yyyy);
          t = t.redIAdd(t);
          t = t.redIAdd(t);
          t = t.redIAdd(t);
          // U = (M + E)^2 - MM - EE - T
          var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
          // X3 = 4 * (X1 * EE - 4 * YY * U)
          var yyu4 = yy.redMul(u);
          yyu4 = yyu4.redIAdd(yyu4);
          yyu4 = yyu4.redIAdd(yyu4);
          var nx = this.x.redMul(ee).redISub(yyu4);
          nx = nx.redIAdd(nx);
          nx = nx.redIAdd(nx);
          // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
          var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
          ny = ny.redIAdd(ny);
          ny = ny.redIAdd(ny);
          ny = ny.redIAdd(ny);
          // Z3 = (Z1 + E)^2 - ZZ - EE
          var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

          return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.mul = function mul(k, kbase) {
          k = new BN(k, kbase);

          return this.curve._wnafMul(this, k);
        };

        JPoint.prototype.eq = function eq(p) {
          if (p.type === 'affine')
            return this.eq(p.toJ());

          if (this === p)
            return true;

          // x1 * z2^2 == x2 * z1^2
          var z2 = this.z.redSqr();
          var pz2 = p.z.redSqr();
          if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
            return false;

          // y1 * z2^3 == y2 * z1^3
          var z3 = z2.redMul(this.z);
          var pz3 = pz2.redMul(p.z);
          return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
        };

        JPoint.prototype.eqXToP = function eqXToP(x) {
          var zs = this.z.redSqr();
          var rx = x.toRed(this.curve.red).redMul(zs);
          if (this.x.cmp(rx) === 0)
            return true;

          var xc = x.clone();
          var t = this.curve.redN.redMul(zs);
          for (; ;) {
            xc.iadd(this.curve.n);
            if (xc.cmp(this.curve.p) >= 0)
              return false;

            rx.redIAdd(t);
            if (this.x.cmp(rx) === 0)
              return true;
          }
        };

        JPoint.prototype.inspect = function inspect() {
          if (this.isInfinity())
            return '<EC JPoint Infinity>';
          return '<EC JPoint x: ' + this.x.toString(16, 2) +
            ' y: ' + this.y.toString(16, 2) +
            ' z: ' + this.z.toString(16, 2) + '>';
        };

        JPoint.prototype.isInfinity = function isInfinity() {
          // XXX This code assumes that zero is always zero in red
          return this.z.cmpn(0) === 0;
        };


        /***/
}),
/* 506 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var BN = __webpack_require__(11);
        var inherits = __webpack_require__(6);
        var Base = __webpack_require__(93);

        var utils = __webpack_require__(17);

        function MontCurve(conf) {
          Base.call(this, 'mont', conf);

          this.a = new BN(conf.a, 16).toRed(this.red);
          this.b = new BN(conf.b, 16).toRed(this.red);
          this.i4 = new BN(4).toRed(this.red).redInvm();
          this.two = new BN(2).toRed(this.red);
          this.a24 = this.i4.redMul(this.a.redAdd(this.two));
        }
        inherits(MontCurve, Base);
        module.exports = MontCurve;

        MontCurve.prototype.validate = function validate(point) {
          var x = point.normalize().x;
          var x2 = x.redSqr();
          var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
          var y = rhs.redSqrt();

          return y.redSqr().cmp(rhs) === 0;
        };

        function Point(curve, x, z) {
          Base.BasePoint.call(this, curve, 'projective');
          if (x === null && z === null) {
            this.x = this.curve.one;
            this.z = this.curve.zero;
          } else {
            this.x = new BN(x, 16);
            this.z = new BN(z, 16);
            if (!this.x.red)
              this.x = this.x.toRed(this.curve.red);
            if (!this.z.red)
              this.z = this.z.toRed(this.curve.red);
          }
        }
        inherits(Point, Base.BasePoint);

        MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
          return this.point(utils.toArray(bytes, enc), 1);
        };

        MontCurve.prototype.point = function point(x, z) {
          return new Point(this, x, z);
        };

        MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
          return Point.fromJSON(this, obj);
        };

        Point.prototype.precompute = function precompute() {
          // No-op
        };

        Point.prototype._encode = function _encode() {
          return this.getX().toArray('be', this.curve.p.byteLength());
        };

        Point.fromJSON = function fromJSON(curve, obj) {
          return new Point(curve, obj[0], obj[1] || curve.one);
        };

        Point.prototype.inspect = function inspect() {
          if (this.isInfinity())
            return '<EC Point Infinity>';
          return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
            ' z: ' + this.z.fromRed().toString(16, 2) + '>';
        };

        Point.prototype.isInfinity = function isInfinity() {
          // XXX This code assumes that zero is always zero in red
          return this.z.cmpn(0) === 0;
        };

        Point.prototype.dbl = function dbl() {
          // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
          // 2M + 2S + 4A

          // A = X1 + Z1
          var a = this.x.redAdd(this.z);
          // AA = A^2
          var aa = a.redSqr();
          // B = X1 - Z1
          var b = this.x.redSub(this.z);
          // BB = B^2
          var bb = b.redSqr();
          // C = AA - BB
          var c = aa.redSub(bb);
          // X3 = AA * BB
          var nx = aa.redMul(bb);
          // Z3 = C * (BB + A24 * C)
          var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
          return this.curve.point(nx, nz);
        };

        Point.prototype.add = function add() {
          throw new Error('Not supported on Montgomery curve');
        };

        Point.prototype.diffAdd = function diffAdd(p, diff) {
          // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
          // 4M + 2S + 6A

          // A = X2 + Z2
          var a = this.x.redAdd(this.z);
          // B = X2 - Z2
          var b = this.x.redSub(this.z);
          // C = X3 + Z3
          var c = p.x.redAdd(p.z);
          // D = X3 - Z3
          var d = p.x.redSub(p.z);
          // DA = D * A
          var da = d.redMul(a);
          // CB = C * B
          var cb = c.redMul(b);
          // X5 = Z1 * (DA + CB)^2
          var nx = diff.z.redMul(da.redAdd(cb).redSqr());
          // Z5 = X1 * (DA - CB)^2
          var nz = diff.x.redMul(da.redISub(cb).redSqr());
          return this.curve.point(nx, nz);
        };

        Point.prototype.mul = function mul(k) {
          var t = k.clone();
          var a = this; // (N / 2) * Q + Q
          var b = this.curve.point(null, null); // (N / 2) * Q
          var c = this; // Q

          for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
            bits.push(t.andln(1));

          for (var i = bits.length - 1; i >= 0; i--) {
            if (bits[i] === 0) {
              // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
              a = a.diffAdd(b, c);
              // N * Q = 2 * ((N / 2) * Q + Q))
              b = b.dbl();
            } else {
              // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
              b = a.diffAdd(b, c);
              // N * Q + Q = 2 * ((N / 2) * Q + Q)
              a = a.dbl();
            }
          }
          return b;
        };

        Point.prototype.mulAdd = function mulAdd() {
          throw new Error('Not supported on Montgomery curve');
        };

        Point.prototype.jumlAdd = function jumlAdd() {
          throw new Error('Not supported on Montgomery curve');
        };

        Point.prototype.eq = function eq(other) {
          return this.getX().cmp(other.getX()) === 0;
        };

        Point.prototype.normalize = function normalize() {
          this.x = this.x.redMul(this.z.redInvm());
          this.z = this.curve.one;
          return this;
        };

        Point.prototype.getX = function getX() {
          // Normalize coordinates
          this.normalize();

          return this.x.fromRed();
        };


        /***/
}),
/* 507 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(17);
        var BN = __webpack_require__(11);
        var inherits = __webpack_require__(6);
        var Base = __webpack_require__(93);

        var assert = utils.assert;

        function EdwardsCurve(conf) {
          // NOTE: Important as we are creating point in Base.call()
          this.twisted = (conf.a | 0) !== 1;
          this.mOneA = this.twisted && (conf.a | 0) === -1;
          this.extended = this.mOneA;

          Base.call(this, 'edwards', conf);

          this.a = new BN(conf.a, 16).umod(this.red.m);
          this.a = this.a.toRed(this.red);
          this.c = new BN(conf.c, 16).toRed(this.red);
          this.c2 = this.c.redSqr();
          this.d = new BN(conf.d, 16).toRed(this.red);
          this.dd = this.d.redAdd(this.d);

          assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
          this.oneC = (conf.c | 0) === 1;
        }
        inherits(EdwardsCurve, Base);
        module.exports = EdwardsCurve;

        EdwardsCurve.prototype._mulA = function _mulA(num) {
          if (this.mOneA)
            return num.redNeg();
          else
            return this.a.redMul(num);
        };

        EdwardsCurve.prototype._mulC = function _mulC(num) {
          if (this.oneC)
            return num;
          else
            return this.c.redMul(num);
        };

        // Just for compatibility with Short curve
        EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
          return this.point(x, y, z, t);
        };

        EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
          x = new BN(x, 16);
          if (!x.red)
            x = x.toRed(this.red);

          var x2 = x.redSqr();
          var rhs = this.c2.redSub(this.a.redMul(x2));
          var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

          var y2 = rhs.redMul(lhs.redInvm());
          var y = y2.redSqrt();
          if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
            throw new Error('invalid point');

          var isOdd = y.fromRed().isOdd();
          if (odd && !isOdd || !odd && isOdd)
            y = y.redNeg();

          return this.point(x, y);
        };

        EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
          y = new BN(y, 16);
          if (!y.red)
            y = y.toRed(this.red);

          // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
          var y2 = y.redSqr();
          var lhs = y2.redSub(this.c2);
          var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
          var x2 = lhs.redMul(rhs.redInvm());

          if (x2.cmp(this.zero) === 0) {
            if (odd)
              throw new Error('invalid point');
            else
              return this.point(this.zero, y);
          }

          var x = x2.redSqrt();
          if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
            throw new Error('invalid point');

          if (x.fromRed().isOdd() !== odd)
            x = x.redNeg();

          return this.point(x, y);
        };

        EdwardsCurve.prototype.validate = function validate(point) {
          if (point.isInfinity())
            return true;

          // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
          point.normalize();

          var x2 = point.x.redSqr();
          var y2 = point.y.redSqr();
          var lhs = x2.redMul(this.a).redAdd(y2);
          var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

          return lhs.cmp(rhs) === 0;
        };

        function Point(curve, x, y, z, t) {
          Base.BasePoint.call(this, curve, 'projective');
          if (x === null && y === null && z === null) {
            this.x = this.curve.zero;
            this.y = this.curve.one;
            this.z = this.curve.one;
            this.t = this.curve.zero;
            this.zOne = true;
          } else {
            this.x = new BN(x, 16);
            this.y = new BN(y, 16);
            this.z = z ? new BN(z, 16) : this.curve.one;
            this.t = t && new BN(t, 16);
            if (!this.x.red)
              this.x = this.x.toRed(this.curve.red);
            if (!this.y.red)
              this.y = this.y.toRed(this.curve.red);
            if (!this.z.red)
              this.z = this.z.toRed(this.curve.red);
            if (this.t && !this.t.red)
              this.t = this.t.toRed(this.curve.red);
            this.zOne = this.z === this.curve.one;

            // Use extended coordinates
            if (this.curve.extended && !this.t) {
              this.t = this.x.redMul(this.y);
              if (!this.zOne)
                this.t = this.t.redMul(this.z.redInvm());
            }
          }
        }
        inherits(Point, Base.BasePoint);

        EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
          return Point.fromJSON(this, obj);
        };

        EdwardsCurve.prototype.point = function point(x, y, z, t) {
          return new Point(this, x, y, z, t);
        };

        Point.fromJSON = function fromJSON(curve, obj) {
          return new Point(curve, obj[0], obj[1], obj[2]);
        };

        Point.prototype.inspect = function inspect() {
          if (this.isInfinity())
            return '<EC Point Infinity>';
          return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
            ' y: ' + this.y.fromRed().toString(16, 2) +
            ' z: ' + this.z.fromRed().toString(16, 2) + '>';
        };

        Point.prototype.isInfinity = function isInfinity() {
          // XXX This code assumes that zero is always zero in red
          return this.x.cmpn(0) === 0 &&
            (this.y.cmp(this.z) === 0 ||
              (this.zOne && this.y.cmp(this.curve.c) === 0));
        };

        Point.prototype._extDbl = function _extDbl() {
          // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
          //     #doubling-dbl-2008-hwcd
          // 4M + 4S

          // A = X1^2
          var a = this.x.redSqr();
          // B = Y1^2
          var b = this.y.redSqr();
          // C = 2 * Z1^2
          var c = this.z.redSqr();
          c = c.redIAdd(c);
          // D = a * A
          var d = this.curve._mulA(a);
          // E = (X1 + Y1)^2 - A - B
          var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
          // G = D + B
          var g = d.redAdd(b);
          // F = G - C
          var f = g.redSub(c);
          // H = D - B
          var h = d.redSub(b);
          // X3 = E * F
          var nx = e.redMul(f);
          // Y3 = G * H
          var ny = g.redMul(h);
          // T3 = E * H
          var nt = e.redMul(h);
          // Z3 = F * G
          var nz = f.redMul(g);
          return this.curve.point(nx, ny, nz, nt);
        };

        Point.prototype._projDbl = function _projDbl() {
          // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
          //     #doubling-dbl-2008-bbjlp
          //     #doubling-dbl-2007-bl
          // and others
          // Generally 3M + 4S or 2M + 4S

          // B = (X1 + Y1)^2
          var b = this.x.redAdd(this.y).redSqr();
          // C = X1^2
          var c = this.x.redSqr();
          // D = Y1^2
          var d = this.y.redSqr();

          var nx;
          var ny;
          var nz;
          if (this.curve.twisted) {
            // E = a * C
            var e = this.curve._mulA(c);
            // F = E + D
            var f = e.redAdd(d);
            if (this.zOne) {
              // X3 = (B - C - D) * (F - 2)
              nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
              // Y3 = F * (E - D)
              ny = f.redMul(e.redSub(d));
              // Z3 = F^2 - 2 * F
              nz = f.redSqr().redSub(f).redSub(f);
            } else {
              // H = Z1^2
              var h = this.z.redSqr();
              // J = F - 2 * H
              var j = f.redSub(h).redISub(h);
              // X3 = (B-C-D)*J
              nx = b.redSub(c).redISub(d).redMul(j);
              // Y3 = F * (E - D)
              ny = f.redMul(e.redSub(d));
              // Z3 = F * J
              nz = f.redMul(j);
            }
          } else {
            // E = C + D
            var e = c.redAdd(d);
            // H = (c * Z1)^2
            var h = this.curve._mulC(this.z).redSqr();
            // J = E - 2 * H
            var j = e.redSub(h).redSub(h);
            // X3 = c * (B - E) * J
            nx = this.curve._mulC(b.redISub(e)).redMul(j);
            // Y3 = c * E * (C - D)
            ny = this.curve._mulC(e).redMul(c.redISub(d));
            // Z3 = E * J
            nz = e.redMul(j);
          }
          return this.curve.point(nx, ny, nz);
        };

        Point.prototype.dbl = function dbl() {
          if (this.isInfinity())
            return this;

          // Double in extended coordinates
          if (this.curve.extended)
            return this._extDbl();
          else
            return this._projDbl();
        };

        Point.prototype._extAdd = function _extAdd(p) {
          // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
          //     #addition-add-2008-hwcd-3
          // 8M

          // A = (Y1 - X1) * (Y2 - X2)
          var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
          // B = (Y1 + X1) * (Y2 + X2)
          var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
          // C = T1 * k * T2
          var c = this.t.redMul(this.curve.dd).redMul(p.t);
          // D = Z1 * 2 * Z2
          var d = this.z.redMul(p.z.redAdd(p.z));
          // E = B - A
          var e = b.redSub(a);
          // F = D - C
          var f = d.redSub(c);
          // G = D + C
          var g = d.redAdd(c);
          // H = B + A
          var h = b.redAdd(a);
          // X3 = E * F
          var nx = e.redMul(f);
          // Y3 = G * H
          var ny = g.redMul(h);
          // T3 = E * H
          var nt = e.redMul(h);
          // Z3 = F * G
          var nz = f.redMul(g);
          return this.curve.point(nx, ny, nz, nt);
        };

        Point.prototype._projAdd = function _projAdd(p) {
          // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
          //     #addition-add-2008-bbjlp
          //     #addition-add-2007-bl
          // 10M + 1S

          // A = Z1 * Z2
          var a = this.z.redMul(p.z);
          // B = A^2
          var b = a.redSqr();
          // C = X1 * X2
          var c = this.x.redMul(p.x);
          // D = Y1 * Y2
          var d = this.y.redMul(p.y);
          // E = d * C * D
          var e = this.curve.d.redMul(c).redMul(d);
          // F = B - E
          var f = b.redSub(e);
          // G = B + E
          var g = b.redAdd(e);
          // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
          var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
          var nx = a.redMul(f).redMul(tmp);
          var ny;
          var nz;
          if (this.curve.twisted) {
            // Y3 = A * G * (D - a * C)
            ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
            // Z3 = F * G
            nz = f.redMul(g);
          } else {
            // Y3 = A * G * (D - C)
            ny = a.redMul(g).redMul(d.redSub(c));
            // Z3 = c * F * G
            nz = this.curve._mulC(f).redMul(g);
          }
          return this.curve.point(nx, ny, nz);
        };

        Point.prototype.add = function add(p) {
          if (this.isInfinity())
            return p;
          if (p.isInfinity())
            return this;

          if (this.curve.extended)
            return this._extAdd(p);
          else
            return this._projAdd(p);
        };

        Point.prototype.mul = function mul(k) {
          if (this._hasDoubles(k))
            return this.curve._fixedNafMul(this, k);
          else
            return this.curve._wnafMul(this, k);
        };

        Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
          return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
        };

        Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
          return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
        };

        Point.prototype.normalize = function normalize() {
          if (this.zOne)
            return this;

          // Normalize coordinates
          var zi = this.z.redInvm();
          this.x = this.x.redMul(zi);
          this.y = this.y.redMul(zi);
          if (this.t)
            this.t = this.t.redMul(zi);
          this.z = this.curve.one;
          this.zOne = true;
          return this;
        };

        Point.prototype.neg = function neg() {
          return this.curve.point(this.x.redNeg(),
            this.y,
            this.z,
            this.t && this.t.redNeg());
        };

        Point.prototype.getX = function getX() {
          this.normalize();
          return this.x.fromRed();
        };

        Point.prototype.getY = function getY() {
          this.normalize();
          return this.y.fromRed();
        };

        Point.prototype.eq = function eq(other) {
          return this === other ||
            this.getX().cmp(other.getX()) === 0 &&
            this.getY().cmp(other.getY()) === 0;
        };

        Point.prototype.eqXToP = function eqXToP(x) {
          var rx = x.toRed(this.curve.red).redMul(this.z);
          if (this.x.cmp(rx) === 0)
            return true;

          var xc = x.clone();
          var t = this.curve.redN.redMul(this.z);
          for (; ;) {
            xc.iadd(this.curve.n);
            if (xc.cmp(this.curve.p) >= 0)
              return false;

            rx.redIAdd(t);
            if (this.x.cmp(rx) === 0)
              return true;
          }
        };

        // Compatibility with BaseCurve
        Point.prototype.toP = Point.prototype.normalize;
        Point.prototype.mixedAdd = Point.prototype.add;


        /***/
}),
/* 508 */
/***/ (function (module, exports) {

        module.exports = {
          doubles: {
            step: 4,
            points: [
              [
                'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
              ],
              [
                '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
              ],
              [
                '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
              ],
              [
                '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
              ],
              [
                '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
              ],
              [
                '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
              ],
              [
                'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
              ],
              [
                '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
              ],
              [
                'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
              ],
              [
                'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
              ],
              [
                'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
              ],
              [
                '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
              ],
              [
                '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
              ],
              [
                '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
              ],
              [
                '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
              ],
              [
                '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
              ],
              [
                '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
              ],
              [
                '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
              ],
              [
                '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
              ],
              [
                'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
              ],
              [
                'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
              ],
              [
                '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
              ],
              [
                '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
              ],
              [
                'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
              ],
              [
                '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
              ],
              [
                'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
              ],
              [
                'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
              ],
              [
                'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
              ],
              [
                'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
              ],
              [
                'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
              ],
              [
                '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
              ],
              [
                '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
              ],
              [
                'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
              ],
              [
                '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
              ],
              [
                'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
              ],
              [
                'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
              ],
              [
                'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
              ],
              [
                '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
              ],
              [
                '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
              ],
              [
                '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
              ],
              [
                '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
              ],
              [
                'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
              ],
              [
                '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
              ],
              [
                '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
              ],
              [
                '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
              ],
              [
                'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
              ],
              [
                '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
              ],
              [
                'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
              ],
              [
                'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
              ],
              [
                '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
              ],
              [
                '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
              ],
              [
                'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
              ],
              [
                'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
              ],
              [
                'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
              ],
              [
                '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
              ],
              [
                '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
              ],
              [
                'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
              ],
              [
                '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
              ],
              [
                '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
              ],
              [
                '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
              ],
              [
                'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
              ],
              [
                '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
              ],
              [
                '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
              ],
              [
                'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
              ],
              [
                'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
              ]
            ]
          },
          naf: {
            wnd: 7,
            points: [
              [
                'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
              ],
              [
                '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
              ],
              [
                '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
              ],
              [
                'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
              ],
              [
                '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
              ],
              [
                'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
              ],
              [
                'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
              ],
              [
                'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
              ],
              [
                '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
              ],
              [
                '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
              ],
              [
                '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
              ],
              [
                '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
              ],
              [
                'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
              ],
              [
                'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
              ],
              [
                '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
              ],
              [
                '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
              ],
              [
                '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
              ],
              [
                '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
              ],
              [
                '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
              ],
              [
                '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
              ],
              [
                'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
              ],
              [
                '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
              ],
              [
                '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
              ],
              [
                'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
              ],
              [
                '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
              ],
              [
                'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
              ],
              [
                'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
              ],
              [
                '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
              ],
              [
                '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
              ],
              [
                '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
              ],
              [
                'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
              ],
              [
                '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
              ],
              [
                'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
              ],
              [
                '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
              ],
              [
                '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
              ],
              [
                'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
              ],
              [
                '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
              ],
              [
                '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
              ],
              [
                'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
              ],
              [
                '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
              ],
              [
                '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
              ],
              [
                '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
              ],
              [
                '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
              ],
              [
                'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
              ],
              [
                '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
              ],
              [
                '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
              ],
              [
                '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
              ],
              [
                'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
              ],
              [
                'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
              ],
              [
                '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
              ],
              [
                '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
              ],
              [
                'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
              ],
              [
                'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
              ],
              [
                '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
              ],
              [
                '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
              ],
              [
                'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
              ],
              [
                '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
              ],
              [
                'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
              ],
              [
                '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
              ],
              [
                '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
              ],
              [
                'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
              ],
              [
                'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
              ],
              [
                '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
              ],
              [
                '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
              ],
              [
                '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
              ],
              [
                '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
              ],
              [
                '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
              ],
              [
                '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
              ],
              [
                '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
              ],
              [
                '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
              ],
              [
                'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
              ],
              [
                '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
              ],
              [
                'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
              ],
              [
                'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
              ],
              [
                'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
              ],
              [
                'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
              ],
              [
                '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
              ],
              [
                '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
              ],
              [
                '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
              ],
              [
                'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
              ],
              [
                'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
              ],
              [
                'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
              ],
              [
                'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
              ],
              [
                '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
              ],
              [
                'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
              ],
              [
                'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
              ],
              [
                '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
              ],
              [
                '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
              ],
              [
                'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
              ],
              [
                'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
              ],
              [
                'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
              ],
              [
                '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
              ],
              [
                'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
              ],
              [
                '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
              ],
              [
                'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
              ],
              [
                'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
              ],
              [
                '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
              ],
              [
                'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
              ],
              [
                'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
              ],
              [
                'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
              ],
              [
                '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
              ],
              [
                '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
              ],
              [
                'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
              ],
              [
                '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
              ],
              [
                '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
              ],
              [
                '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
              ],
              [
                'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
              ],
              [
                '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
              ],
              [
                '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
              ],
              [
                '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
              ],
              [
                '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
              ],
              [
                'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
              ],
              [
                '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
              ],
              [
                'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
              ],
              [
                '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
              ],
              [
                'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
              ],
              [
                'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
              ],
              [
                'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
              ],
              [
                '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
              ],
              [
                '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
              ],
              [
                '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
              ],
              [
                '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
              ],
              [
                '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
              ],
              [
                '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
              ],
              [
                '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
              ],
              [
                '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
              ],
              [
                '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
              ]
            ]
          }
        };


        /***/
}),
/* 509 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var BN = __webpack_require__(11);
        var HmacDRBG = __webpack_require__(510);
        var utils = __webpack_require__(17);
        var curves = __webpack_require__(127);
        var rand = __webpack_require__(213);
        var assert = utils.assert;

        var KeyPair = __webpack_require__(511);
        var Signature = __webpack_require__(512);

        function EC(options) {
          if (!(this instanceof EC))
            return new EC(options);

          // Shortcut `elliptic.ec(curve-name)`
          if (typeof options === 'string') {
            assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

            options = curves[options];
          }

          // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
          if (options instanceof curves.PresetCurve)
            options = { curve: options };

          this.curve = options.curve.curve;
          this.n = this.curve.n;
          this.nh = this.n.ushrn(1);
          this.g = this.curve.g;

          // Point on curve
          this.g = options.curve.g;
          this.g.precompute(options.curve.n.bitLength() + 1);

          // Hash for function for DRBG
          this.hash = options.hash || options.curve.hash;
        }
        module.exports = EC;

        EC.prototype.keyPair = function keyPair(options) {
          return new KeyPair(this, options);
        };

        EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
          return KeyPair.fromPrivate(this, priv, enc);
        };

        EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
          return KeyPair.fromPublic(this, pub, enc);
        };

        EC.prototype.genKeyPair = function genKeyPair(options) {
          if (!options)
            options = {};

          // Instantiate Hmac_DRBG
          var drbg = new HmacDRBG({
            hash: this.hash,
            pers: options.pers,
            persEnc: options.persEnc || 'utf8',
            entropy: options.entropy || rand(this.hash.hmacStrength),
            entropyEnc: options.entropy && options.entropyEnc || 'utf8',
            nonce: this.n.toArray()
          });

          var bytes = this.n.byteLength();
          var ns2 = this.n.sub(new BN(2));
          do {
            var priv = new BN(drbg.generate(bytes));
            if (priv.cmp(ns2) > 0)
              continue;

            priv.iaddn(1);
            return this.keyFromPrivate(priv);
          } while (true);
        };

        EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
          var delta = msg.byteLength() * 8 - this.n.bitLength();
          if (delta > 0)
            msg = msg.ushrn(delta);
          if (!truncOnly && msg.cmp(this.n) >= 0)
            return msg.sub(this.n);
          else
            return msg;
        };

        EC.prototype.sign = function sign(msg, key, enc, options) {
          if (typeof enc === 'object') {
            options = enc;
            enc = null;
          }
          if (!options)
            options = {};

          key = this.keyFromPrivate(key, enc);
          msg = this._truncateToN(new BN(msg, 16));

          // Zero-extend key to provide enough entropy
          var bytes = this.n.byteLength();
          var bkey = key.getPrivate().toArray('be', bytes);

          // Zero-extend nonce to have the same byte size as N
          var nonce = msg.toArray('be', bytes);

          // Instantiate Hmac_DRBG
          var drbg = new HmacDRBG({
            hash: this.hash,
            entropy: bkey,
            nonce: nonce,
            pers: options.pers,
            persEnc: options.persEnc || 'utf8'
          });

          // Number of bytes to generate
          var ns1 = this.n.sub(new BN(1));

          for (var iter = 0; true; iter++) {
            var k = options.k ?
              options.k(iter) :
              new BN(drbg.generate(this.n.byteLength()));
            k = this._truncateToN(k, true);
            if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
              continue;

            var kp = this.g.mul(k);
            if (kp.isInfinity())
              continue;

            var kpX = kp.getX();
            var r = kpX.umod(this.n);
            if (r.cmpn(0) === 0)
              continue;

            var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
            s = s.umod(this.n);
            if (s.cmpn(0) === 0)
              continue;

            var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
              (kpX.cmp(r) !== 0 ? 2 : 0);

            // Use complement of `s`, if it is > `n / 2`
            if (options.canonical && s.cmp(this.nh) > 0) {
              s = this.n.sub(s);
              recoveryParam ^= 1;
            }

            return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
          }
        };

        EC.prototype.verify = function verify(msg, signature, key, enc) {
          msg = this._truncateToN(new BN(msg, 16));
          key = this.keyFromPublic(key, enc);
          signature = new Signature(signature, 'hex');

          // Perform primitive values validation
          var r = signature.r;
          var s = signature.s;
          if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
            return false;
          if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
            return false;

          // Validate signature
          var sinv = s.invm(this.n);
          var u1 = sinv.mul(msg).umod(this.n);
          var u2 = sinv.mul(r).umod(this.n);

          if (!this.curve._maxwellTrick) {
            var p = this.g.mulAdd(u1, key.getPublic(), u2);
            if (p.isInfinity())
              return false;

            return p.getX().umod(this.n).cmp(r) === 0;
          }

          // NOTE: Greg Maxwell's trick, inspired by:
          // https://git.io/vad3K

          var p = this.g.jmulAdd(u1, key.getPublic(), u2);
          if (p.isInfinity())
            return false;

          // Compare `p.x` of Jacobian point with `r`,
          // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
          // inverse of `p.z^2`
          return p.eqXToP(r);
        };

        EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
          assert((3 & j) === j, 'The recovery param is more than two bits');
          signature = new Signature(signature, enc);

          var n = this.n;
          var e = new BN(msg);
          var r = signature.r;
          var s = signature.s;

          // A set LSB signifies that the y-coordinate is odd
          var isYOdd = j & 1;
          var isSecondKey = j >> 1;
          if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
            throw new Error('Unable to find sencond key candinate');

          // 1.1. Let x = r + jn.
          if (isSecondKey)
            r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
          else
            r = this.curve.pointFromX(r, isYOdd);

          var rInv = signature.r.invm(n);
          var s1 = n.sub(e).mul(rInv).umod(n);
          var s2 = s.mul(rInv).umod(n);

          // 1.6.1 Compute Q = r^-1 (sR -  eG)
          //               Q = r^-1 (sR + -eG)
          return this.g.mulAdd(s1, r, s2);
        };

        EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
          signature = new Signature(signature, enc);
          if (signature.recoveryParam !== null)
            return signature.recoveryParam;

          for (var i = 0; i < 4; i++) {
            var Qprime;
            try {
              Qprime = this.recoverPubKey(e, signature, i);
            } catch (e) {
              continue;
            }

            if (Qprime.eq(Q))
              return i;
          }
          throw new Error('Unable to find valid recovery factor');
        };


        /***/
}),
/* 510 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var hash = __webpack_require__(72);
        var utils = __webpack_require__(212);
        var assert = __webpack_require__(37);

        function HmacDRBG(options) {
          if (!(this instanceof HmacDRBG))
            return new HmacDRBG(options);
          this.hash = options.hash;
          this.predResist = !!options.predResist;

          this.outLen = this.hash.outSize;
          this.minEntropy = options.minEntropy || this.hash.hmacStrength;

          this._reseed = null;
          this.reseedInterval = null;
          this.K = null;
          this.V = null;

          var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
          var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
          var pers = utils.toArray(options.pers, options.persEnc || 'hex');
          assert(entropy.length >= (this.minEntropy / 8),
            'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
          this._init(entropy, nonce, pers);
        }
        module.exports = HmacDRBG;

        HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
          var seed = entropy.concat(nonce).concat(pers);

          this.K = new Array(this.outLen / 8);
          this.V = new Array(this.outLen / 8);
          for (var i = 0; i < this.V.length; i++) {
            this.K[i] = 0x00;
            this.V[i] = 0x01;
          }

          this._update(seed);
          this._reseed = 1;
          this.reseedInterval = 0x1000000000000;  // 2^48
        };

        HmacDRBG.prototype._hmac = function hmac() {
          return new hash.hmac(this.hash, this.K);
        };

        HmacDRBG.prototype._update = function update(seed) {
          var kmac = this._hmac()
            .update(this.V)
            .update([0x00]);
          if (seed)
            kmac = kmac.update(seed);
          this.K = kmac.digest();
          this.V = this._hmac().update(this.V).digest();
          if (!seed)
            return;

          this.K = this._hmac()
            .update(this.V)
            .update([0x01])
            .update(seed)
            .digest();
          this.V = this._hmac().update(this.V).digest();
        };

        HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
          // Optional entropy enc
          if (typeof entropyEnc !== 'string') {
            addEnc = add;
            add = entropyEnc;
            entropyEnc = null;
          }

          entropy = utils.toArray(entropy, entropyEnc);
          add = utils.toArray(add, addEnc);

          assert(entropy.length >= (this.minEntropy / 8),
            'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

          this._update(entropy.concat(add || []));
          this._reseed = 1;
        };

        HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
          if (this._reseed > this.reseedInterval)
            throw new Error('Reseed is required');

          // Optional encoding
          if (typeof enc !== 'string') {
            addEnc = add;
            add = enc;
            enc = null;
          }

          // Optional additional data
          if (add) {
            add = utils.toArray(add, addEnc || 'hex');
            this._update(add);
          }

          var temp = [];
          while (temp.length < len) {
            this.V = this._hmac().update(this.V).digest();
            temp = temp.concat(this.V);
          }

          var res = temp.slice(0, len);
          this._update(add);
          this._reseed++;
          return utils.encode(res, enc);
        };


        /***/
}),
/* 511 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var BN = __webpack_require__(11);
        var utils = __webpack_require__(17);
        var assert = utils.assert;

        function KeyPair(ec, options) {
          this.ec = ec;
          this.priv = null;
          this.pub = null;

          // KeyPair(ec, { priv: ..., pub: ... })
          if (options.priv)
            this._importPrivate(options.priv, options.privEnc);
          if (options.pub)
            this._importPublic(options.pub, options.pubEnc);
        }
        module.exports = KeyPair;

        KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
          if (pub instanceof KeyPair)
            return pub;

          return new KeyPair(ec, {
            pub: pub,
            pubEnc: enc
          });
        };

        KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
          if (priv instanceof KeyPair)
            return priv;

          return new KeyPair(ec, {
            priv: priv,
            privEnc: enc
          });
        };

        KeyPair.prototype.validate = function validate() {
          var pub = this.getPublic();

          if (pub.isInfinity())
            return { result: false, reason: 'Invalid public key' };
          if (!pub.validate())
            return { result: false, reason: 'Public key is not a point' };
          if (!pub.mul(this.ec.curve.n).isInfinity())
            return { result: false, reason: 'Public key * N != O' };

          return { result: true, reason: null };
        };

        KeyPair.prototype.getPublic = function getPublic(compact, enc) {
          // compact is optional argument
          if (typeof compact === 'string') {
            enc = compact;
            compact = null;
          }

          if (!this.pub)
            this.pub = this.ec.g.mul(this.priv);

          if (!enc)
            return this.pub;

          return this.pub.encode(enc, compact);
        };

        KeyPair.prototype.getPrivate = function getPrivate(enc) {
          if (enc === 'hex')
            return this.priv.toString(16, 2);
          else
            return this.priv;
        };

        KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
          this.priv = new BN(key, enc || 16);

          // Ensure that the priv won't be bigger than n, otherwise we may fail
          // in fixed multiplication method
          this.priv = this.priv.umod(this.ec.curve.n);
        };

        KeyPair.prototype._importPublic = function _importPublic(key, enc) {
          if (key.x || key.y) {
            // Montgomery points only have an `x` coordinate.
            // Weierstrass/Edwards points on the other hand have both `x` and
            // `y` coordinates.
            if (this.ec.curve.type === 'mont') {
              assert(key.x, 'Need x coordinate');
            } else if (this.ec.curve.type === 'short' ||
              this.ec.curve.type === 'edwards') {
              assert(key.x && key.y, 'Need both x and y coordinate');
            }
            this.pub = this.ec.curve.point(key.x, key.y);
            return;
          }
          this.pub = this.ec.curve.decodePoint(key, enc);
        };

        // ECDH
        KeyPair.prototype.derive = function derive(pub) {
          return pub.mul(this.priv).getX();
        };

        // ECDSA
        KeyPair.prototype.sign = function sign(msg, enc, options) {
          return this.ec.sign(msg, this, enc, options);
        };

        KeyPair.prototype.verify = function verify(msg, signature) {
          return this.ec.verify(msg, signature, this);
        };

        KeyPair.prototype.inspect = function inspect() {
          return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
            ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
        };


        /***/
}),
/* 512 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var BN = __webpack_require__(11);

        var utils = __webpack_require__(17);
        var assert = utils.assert;

        function Signature(options, enc) {
          if (options instanceof Signature)
            return options;

          if (this._importDER(options, enc))
            return;

          assert(options.r && options.s, 'Signature without r or s');
          this.r = new BN(options.r, 16);
          this.s = new BN(options.s, 16);
          if (options.recoveryParam === undefined)
            this.recoveryParam = null;
          else
            this.recoveryParam = options.recoveryParam;
        }
        module.exports = Signature;

        function Position() {
          this.place = 0;
        }

        function getLength(buf, p) {
          var initial = buf[p.place++];
          if (!(initial & 0x80)) {
            return initial;
          }
          var octetLen = initial & 0xf;
          var val = 0;
          for (var i = 0, off = p.place; i < octetLen; i++ , off++) {
            val <<= 8;
            val |= buf[off];
          }
          p.place = off;
          return val;
        }

        function rmPadding(buf) {
          var i = 0;
          var len = buf.length - 1;
          while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
            i++;
          }
          if (i === 0) {
            return buf;
          }
          return buf.slice(i);
        }

        Signature.prototype._importDER = function _importDER(data, enc) {
          data = utils.toArray(data, enc);
          var p = new Position();
          if (data[p.place++] !== 0x30) {
            return false;
          }
          var len = getLength(data, p);
          if ((len + p.place) !== data.length) {
            return false;
          }
          if (data[p.place++] !== 0x02) {
            return false;
          }
          var rlen = getLength(data, p);
          var r = data.slice(p.place, rlen + p.place);
          p.place += rlen;
          if (data[p.place++] !== 0x02) {
            return false;
          }
          var slen = getLength(data, p);
          if (data.length !== slen + p.place) {
            return false;
          }
          var s = data.slice(p.place, slen + p.place);
          if (r[0] === 0 && (r[1] & 0x80)) {
            r = r.slice(1);
          }
          if (s[0] === 0 && (s[1] & 0x80)) {
            s = s.slice(1);
          }

          this.r = new BN(r);
          this.s = new BN(s);
          this.recoveryParam = null;

          return true;
        };

        function constructLength(arr, len) {
          if (len < 0x80) {
            arr.push(len);
            return;
          }
          var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
          arr.push(octets | 0x80);
          while (--octets) {
            arr.push((len >>> (octets << 3)) & 0xff);
          }
          arr.push(len);
        }

        Signature.prototype.toDER = function toDER(enc) {
          var r = this.r.toArray();
          var s = this.s.toArray();

          // Pad values
          if (r[0] & 0x80)
            r = [0].concat(r);
          // Pad values
          if (s[0] & 0x80)
            s = [0].concat(s);

          r = rmPadding(r);
          s = rmPadding(s);

          while (!s[0] && !(s[1] & 0x80)) {
            s = s.slice(1);
          }
          var arr = [0x02];
          constructLength(arr, r.length);
          arr = arr.concat(r);
          arr.push(0x02);
          constructLength(arr, s.length);
          var backHalf = arr.concat(s);
          var res = [0x30];
          constructLength(res, backHalf.length);
          res = res.concat(backHalf);
          return utils.encode(res, enc);
        };


        /***/
}),
/* 513 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var hash = __webpack_require__(72);
        var curves = __webpack_require__(127);
        var utils = __webpack_require__(17);
        var assert = utils.assert;
        var parseBytes = utils.parseBytes;
        var KeyPair = __webpack_require__(514);
        var Signature = __webpack_require__(515);

        function EDDSA(curve) {
          assert(curve === 'ed25519', 'only tested with ed25519 so far');

          if (!(this instanceof EDDSA))
            return new EDDSA(curve);

          var curve = curves[curve].curve;
          this.curve = curve;
          this.g = curve.g;
          this.g.precompute(curve.n.bitLength() + 1);

          this.pointClass = curve.point().constructor;
          this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
          this.hash = hash.sha512;
        }

        module.exports = EDDSA;

        /**
        * @param {Array|String} message - message bytes
        * @param {Array|String|KeyPair} secret - secret bytes or a keypair
        * @returns {Signature} - signature
        */
        EDDSA.prototype.sign = function sign(message, secret) {
          message = parseBytes(message);
          var key = this.keyFromSecret(secret);
          var r = this.hashInt(key.messagePrefix(), message);
          var R = this.g.mul(r);
          var Rencoded = this.encodePoint(R);
          var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
            .mul(key.priv());
          var S = r.add(s_).umod(this.curve.n);
          return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
        };

        /**
        * @param {Array} message - message bytes
        * @param {Array|String|Signature} sig - sig bytes
        * @param {Array|String|Point|KeyPair} pub - public key
        * @returns {Boolean} - true if public key matches sig of message
        */
        EDDSA.prototype.verify = function verify(message, sig, pub) {
          message = parseBytes(message);
          sig = this.makeSignature(sig);
          var key = this.keyFromPublic(pub);
          var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
          var SG = this.g.mul(sig.S());
          var RplusAh = sig.R().add(key.pub().mul(h));
          return RplusAh.eq(SG);
        };

        EDDSA.prototype.hashInt = function hashInt() {
          var hash = this.hash();
          for (var i = 0; i < arguments.length; i++)
            hash.update(arguments[i]);
          return utils.intFromLE(hash.digest()).umod(this.curve.n);
        };

        EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
          return KeyPair.fromPublic(this, pub);
        };

        EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
          return KeyPair.fromSecret(this, secret);
        };

        EDDSA.prototype.makeSignature = function makeSignature(sig) {
          if (sig instanceof Signature)
            return sig;
          return new Signature(this, sig);
        };

        /**
        * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
        *
        * EDDSA defines methods for encoding and decoding points and integers. These are
        * helper convenience methods, that pass along to utility functions implied
        * parameters.
        *
        */
        EDDSA.prototype.encodePoint = function encodePoint(point) {
          var enc = point.getY().toArray('le', this.encodingLength);
          enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
          return enc;
        };

        EDDSA.prototype.decodePoint = function decodePoint(bytes) {
          bytes = utils.parseBytes(bytes);

          var lastIx = bytes.length - 1;
          var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
          var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

          var y = utils.intFromLE(normed);
          return this.curve.pointFromY(y, xIsOdd);
        };

        EDDSA.prototype.encodeInt = function encodeInt(num) {
          return num.toArray('le', this.encodingLength);
        };

        EDDSA.prototype.decodeInt = function decodeInt(bytes) {
          return utils.intFromLE(bytes);
        };

        EDDSA.prototype.isPoint = function isPoint(val) {
          return val instanceof this.pointClass;
        };


        /***/
}),
/* 514 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(17);
        var assert = utils.assert;
        var parseBytes = utils.parseBytes;
        var cachedProperty = utils.cachedProperty;

        /**
        * @param {EDDSA} eddsa - instance
        * @param {Object} params - public/private key parameters
        *
        * @param {Array<Byte>} [params.secret] - secret seed bytes
        * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
        * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
        *
        */
        function KeyPair(eddsa, params) {
          this.eddsa = eddsa;
          this._secret = parseBytes(params.secret);
          if (eddsa.isPoint(params.pub))
            this._pub = params.pub;
          else
            this._pubBytes = parseBytes(params.pub);
        }

        KeyPair.fromPublic = function fromPublic(eddsa, pub) {
          if (pub instanceof KeyPair)
            return pub;
          return new KeyPair(eddsa, { pub: pub });
        };

        KeyPair.fromSecret = function fromSecret(eddsa, secret) {
          if (secret instanceof KeyPair)
            return secret;
          return new KeyPair(eddsa, { secret: secret });
        };

        KeyPair.prototype.secret = function secret() {
          return this._secret;
        };

        cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
          return this.eddsa.encodePoint(this.pub());
        });

        cachedProperty(KeyPair, 'pub', function pub() {
          if (this._pubBytes)
            return this.eddsa.decodePoint(this._pubBytes);
          return this.eddsa.g.mul(this.priv());
        });

        cachedProperty(KeyPair, 'privBytes', function privBytes() {
          var eddsa = this.eddsa;
          var hash = this.hash();
          var lastIx = eddsa.encodingLength - 1;

          var a = hash.slice(0, eddsa.encodingLength);
          a[0] &= 248;
          a[lastIx] &= 127;
          a[lastIx] |= 64;

          return a;
        });

        cachedProperty(KeyPair, 'priv', function priv() {
          return this.eddsa.decodeInt(this.privBytes());
        });

        cachedProperty(KeyPair, 'hash', function hash() {
          return this.eddsa.hash().update(this.secret()).digest();
        });

        cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
          return this.hash().slice(this.eddsa.encodingLength);
        });

        KeyPair.prototype.sign = function sign(message) {
          assert(this._secret, 'KeyPair can only verify');
          return this.eddsa.sign(message, this);
        };

        KeyPair.prototype.verify = function verify(message, sig) {
          return this.eddsa.verify(message, sig, this);
        };

        KeyPair.prototype.getSecret = function getSecret(enc) {
          assert(this._secret, 'KeyPair is public only');
          return utils.encode(this.secret(), enc);
        };

        KeyPair.prototype.getPublic = function getPublic(enc) {
          return utils.encode(this.pubBytes(), enc);
        };

        module.exports = KeyPair;


        /***/
}),
/* 515 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var BN = __webpack_require__(11);
        var utils = __webpack_require__(17);
        var assert = utils.assert;
        var cachedProperty = utils.cachedProperty;
        var parseBytes = utils.parseBytes;

        /**
        * @param {EDDSA} eddsa - eddsa instance
        * @param {Array<Bytes>|Object} sig -
        * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
        * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
        * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
        * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
        */
        function Signature(eddsa, sig) {
          this.eddsa = eddsa;

          if (typeof sig !== 'object')
            sig = parseBytes(sig);

          if (Array.isArray(sig)) {
            sig = {
              R: sig.slice(0, eddsa.encodingLength),
              S: sig.slice(eddsa.encodingLength)
            };
          }

          assert(sig.R && sig.S, 'Signature without R or S');

          if (eddsa.isPoint(sig.R))
            this._R = sig.R;
          if (sig.S instanceof BN)
            this._S = sig.S;

          this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
          this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
        }

        cachedProperty(Signature, 'S', function S() {
          return this.eddsa.decodeInt(this.Sencoded());
        });

        cachedProperty(Signature, 'R', function R() {
          return this.eddsa.decodePoint(this.Rencoded());
        });

        cachedProperty(Signature, 'Rencoded', function Rencoded() {
          return this.eddsa.encodePoint(this.R());
        });

        cachedProperty(Signature, 'Sencoded', function Sencoded() {
          return this.eddsa.encodeInt(this.S());
        });

        Signature.prototype.toBytes = function toBytes() {
          return this.Rencoded().concat(this.Sencoded());
        };

        Signature.prototype.toHex = function toHex() {
          return utils.encode(this.toBytes(), 'hex').toUpperCase();
        };

        module.exports = Signature;


        /***/
}),
/* 516 */
/***/ (function (module, exports) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
         
          Adopt from eth-lib with some minor modifications and pruning. 
          eth-lib is licensed under MIT:
          https://github.com/maiavictor/eth-lib
          
        */
        // The RLP format
        // Serialization and deserialization for the BytesTree type, under the following grammar:
        // | First byte | Meaning                                                                    |
        // | ---------- | -------------------------------------------------------------------------- |
        // | 0   to 127 | HEX(leaf)                                                                  |
        // | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |
        // | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |
        // | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |
        // | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |

        var encode = function encode(tree) {
          var padEven = function padEven(str) {
            return str.length % 2 === 0 ? str : "0" + str;
          };

          var uint = function uint(num) {
            return padEven(num.toString(16));
          };

          var length = function length(len, add) {
            return len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);
          };

          var dataTree = function dataTree(tree) {
            if (typeof tree === "string") {
              var hex = tree.slice(2);
              var pre = hex.length != 2 || hex >= "80" ? length(hex.length / 2, 128) : "";
              return pre + hex;
            } else {
              var _hex = tree.map(dataTree).join("");
              var _pre = length(_hex.length / 2, 192);
              return _pre + _hex;
            }
          };

          return "0x" + dataTree(tree);
        };

        var decode = function decode(hex) {
          var i = 2;

          var parseTree = function parseTree() {
            if (i >= hex.length) throw "";
            var head = hex.slice(i, i + 2);
            return head < "80" ? (i += 2, "0x" + head) : head < "c0" ? parseHex() : parseList();
          };

          var parseLength = function parseLength() {
            var len = parseInt(hex.slice(i, i += 2), 16) % 64;
            return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);
          };

          var parseHex = function parseHex() {
            var len = parseLength();
            return "0x" + hex.slice(i, i += len * 2);
          };

          var parseList = function parseList() {
            var lim = parseLength() * 2 + i;
            var list = [];
            while (i < lim) {
              list.push(parseTree());
            } return list;
          };

          try {
            return parseTree();
          } catch (e) {
            return [];
          }
        };

        module.exports = { encode: encode, decode: decode };

        /***/
}),
/* 517 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";

        module.exports = __webpack_require__(518)(__webpack_require__(522))


        /***/
}),
/* 518 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";

        var assert = __webpack_require__(519)
        var der = __webpack_require__(520)
        var messages = __webpack_require__(216)

        function initCompressedValue(value, defaultValue) {
          if (value === undefined) return defaultValue

          assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)
          return value
        }

        module.exports = function (secp256k1) {
          return {
            privateKeyVerify: function (privateKey) {
              assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
              return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)
            },

            privateKeyExport: function (privateKey, compressed) {
              assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
              assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

              compressed = initCompressedValue(compressed, true)
              var publicKey = secp256k1.privateKeyExport(privateKey, compressed)

              return der.privateKeyExport(privateKey, publicKey, compressed)
            },

            privateKeyImport: function (privateKey) {
              assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)

              privateKey = der.privateKeyImport(privateKey)
              if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey

              throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)
            },

            privateKeyNegate: function (privateKey) {
              assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
              assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

              return secp256k1.privateKeyNegate(privateKey)
            },

            privateKeyModInverse: function (privateKey) {
              assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
              assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

              return secp256k1.privateKeyModInverse(privateKey)
            },

            privateKeyTweakAdd: function (privateKey, tweak) {
              assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
              assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

              assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
              assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

              return secp256k1.privateKeyTweakAdd(privateKey, tweak)
            },

            privateKeyTweakMul: function (privateKey, tweak) {
              assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
              assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

              assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
              assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

              return secp256k1.privateKeyTweakMul(privateKey, tweak)
            },

            publicKeyCreate: function (privateKey, compressed) {
              assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
              assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

              compressed = initCompressedValue(compressed, true)

              return secp256k1.publicKeyCreate(privateKey, compressed)
            },

            publicKeyConvert: function (publicKey, compressed) {
              assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
              assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

              compressed = initCompressedValue(compressed, true)

              return secp256k1.publicKeyConvert(publicKey, compressed)
            },

            publicKeyVerify: function (publicKey) {
              assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
              return secp256k1.publicKeyVerify(publicKey)
            },

            publicKeyTweakAdd: function (publicKey, tweak, compressed) {
              assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
              assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

              assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
              assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

              compressed = initCompressedValue(compressed, true)

              return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)
            },

            publicKeyTweakMul: function (publicKey, tweak, compressed) {
              assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
              assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

              assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
              assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)

              compressed = initCompressedValue(compressed, true)

              return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)
            },

            publicKeyCombine: function (publicKeys, compressed) {
              assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)
              assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)
              for (var i = 0; i < publicKeys.length; ++i) {
                assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)
                assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)
              }

              compressed = initCompressedValue(compressed, true)

              return secp256k1.publicKeyCombine(publicKeys, compressed)
            },

            signatureNormalize: function (signature) {
              assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
              assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

              return secp256k1.signatureNormalize(signature)
            },

            signatureExport: function (signature) {
              assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
              assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

              var sigObj = secp256k1.signatureExport(signature)
              return der.signatureExport(sigObj)
            },

            signatureImport: function (sig) {
              assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)
              assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

              var sigObj = der.signatureImport(sig)
              if (sigObj) return secp256k1.signatureImport(sigObj)

              throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)
            },

            signatureImportLax: function (sig) {
              assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)
              assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

              var sigObj = der.signatureImportLax(sig)
              if (sigObj) return secp256k1.signatureImport(sigObj)

              throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)
            },

            sign: function (message, privateKey, options) {
              assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
              assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

              assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
              assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

              var data = null
              var noncefn = null
              if (options !== undefined) {
                assert.isObject(options, messages.OPTIONS_TYPE_INVALID)

                if (options.data !== undefined) {
                  assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)
                  assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)
                  data = options.data
                }

                if (options.noncefn !== undefined) {
                  assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)
                  noncefn = options.noncefn
                }
              }

              return secp256k1.sign(message, privateKey, noncefn, data)
            },

            verify: function (message, signature, publicKey) {
              assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
              assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

              assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
              assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

              assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
              assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

              return secp256k1.verify(message, signature, publicKey)
            },

            recover: function (message, signature, recovery, compressed) {
              assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
              assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)

              assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
              assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)

              assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)
              assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)

              compressed = initCompressedValue(compressed, true)

              return secp256k1.recover(message, signature, recovery, compressed)
            },

            ecdh: function (publicKey, privateKey) {
              assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
              assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

              assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
              assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

              return secp256k1.ecdh(publicKey, privateKey)
            },

            ecdhUnsafe: function (publicKey, privateKey, compressed) {
              assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
              assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)

              assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
              assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)

              compressed = initCompressedValue(compressed, true)

              return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)
            }
          }
        }


        /***/
}),
/* 519 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
/* WEBPACK VAR INJECTION */(function (Buffer) {
          var toString = Object.prototype.toString

          // TypeError
          exports.isArray = function (value, message) {
            if (!Array.isArray(value)) throw TypeError(message)
          }

          exports.isBoolean = function (value, message) {
            if (toString.call(value) !== '[object Boolean]') throw TypeError(message)
          }

          exports.isBuffer = function (value, message) {
            if (!Buffer.isBuffer(value)) throw TypeError(message)
          }

          exports.isFunction = function (value, message) {
            if (toString.call(value) !== '[object Function]') throw TypeError(message)
          }

          exports.isNumber = function (value, message) {
            if (toString.call(value) !== '[object Number]') throw TypeError(message)
          }

          exports.isObject = function (value, message) {
            if (toString.call(value) !== '[object Object]') throw TypeError(message)
          }

          // RangeError
          exports.isBufferLength = function (buffer, length, message) {
            if (buffer.length !== length) throw RangeError(message)
          }

          exports.isBufferLength2 = function (buffer, length1, length2, message) {
            if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message)
          }

          exports.isLengthGTZero = function (value, message) {
            if (value.length === 0) throw RangeError(message)
          }

          exports.isNumberInInterval = function (number, x, y, message) {
            if (number <= x || number >= y) throw RangeError(message)
          }

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(27).Buffer))

        /***/
}),
/* 520 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";

        var Buffer = __webpack_require__(10).Buffer
        var bip66 = __webpack_require__(521)

        var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
          // begin
          0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
          // private key
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          // middle
          0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
          0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
          0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
          0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
          0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
          0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
          // public key
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00
        ])

        var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
          // begin
          0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
          // private key
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          // middle
          0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
          0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
          0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
          0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
          0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11,
          0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10,
          0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
          0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
          // public key
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00
        ])

        exports.privateKeyExport = function (privateKey, publicKey, compressed) {
          var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED)
          privateKey.copy(result, compressed ? 8 : 9)
          publicKey.copy(result, compressed ? 181 : 214)
          return result
        }

        exports.privateKeyImport = function (privateKey) {
          var length = privateKey.length

          // sequence header
          var index = 0
          if (length < index + 1 || privateKey[index] !== 0x30) return
          index += 1

          // sequence length constructor
          if (length < index + 1 || !(privateKey[index] & 0x80)) return

          var lenb = privateKey[index] & 0x7f
          index += 1
          if (lenb < 1 || lenb > 2) return
          if (length < index + lenb) return

          // sequence length
          var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0)
          index += lenb
          if (length < index + len) return

          // sequence element 0: version number (=1)
          if (length < index + 3 ||
            privateKey[index] !== 0x02 ||
            privateKey[index + 1] !== 0x01 ||
            privateKey[index + 2] !== 0x01) {
            return
          }
          index += 3

          // sequence element 1: octet string, up to 32 bytes
          if (length < index + 2 ||
            privateKey[index] !== 0x04 ||
            privateKey[index + 1] > 0x20 ||
            length < index + 2 + privateKey[index + 1]) {
            return
          }

          return privateKey.slice(index + 2, index + 2 + privateKey[index + 1])
        }

        exports.signatureExport = function (sigObj) {
          var r = Buffer.concat([Buffer.from([0]), sigObj.r])
          for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

          var s = Buffer.concat([Buffer.from([0]), sigObj.s])
          for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

          return bip66.encode(r.slice(posR), s.slice(posS))
        }

        exports.signatureImport = function (sig) {
          var r = Buffer.alloc(32, 0)
          var s = Buffer.alloc(32, 0)

          try {
            var sigObj = bip66.decode(sig)
            if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1)
            if (sigObj.r.length > 32) throw new Error('R length is too long')
            if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1)
            if (sigObj.s.length > 32) throw new Error('S length is too long')
          } catch (err) {
            return
          }

          sigObj.r.copy(r, 32 - sigObj.r.length)
          sigObj.s.copy(s, 32 - sigObj.s.length)

          return { r: r, s: s }
        }

        exports.signatureImportLax = function (sig) {
          var r = Buffer.alloc(32, 0)
          var s = Buffer.alloc(32, 0)

          var length = sig.length
          var index = 0

          // sequence tag byte
          if (sig[index++] !== 0x30) return

          // sequence length byte
          var lenbyte = sig[index++]
          if (lenbyte & 0x80) {
            index += lenbyte - 0x80
            if (index > length) return
          }

          // sequence tag byte for r
          if (sig[index++] !== 0x02) return

          // length for r
          var rlen = sig[index++]
          if (rlen & 0x80) {
            lenbyte = rlen - 0x80
            if (index + lenbyte > length) return
            for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
            for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index]
          }
          if (rlen > length - index) return
          var rindex = index
          index += rlen

          // sequence tag byte for s
          if (sig[index++] !== 0x02) return

          // length for s
          var slen = sig[index++]
          if (slen & 0x80) {
            lenbyte = slen - 0x80
            if (index + lenbyte > length) return
            for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
            for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index]
          }
          if (slen > length - index) return
          var sindex = index
          index += slen

          // ignore leading zeros in r
          for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1);
          // copy r value
          if (rlen > 32) return
          var rvalue = sig.slice(rindex, rindex + rlen)
          rvalue.copy(r, 32 - rvalue.length)

          // ignore leading zeros in s
          for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1);
          // copy s value
          if (slen > 32) return
          var svalue = sig.slice(sindex, sindex + slen)
          svalue.copy(s, 32 - svalue.length)

          return { r: r, s: s }
        }


        /***/
}),
/* 521 */
/***/ (function (module, exports, __webpack_require__) {

        // Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
        // Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
        // NOTE: SIGHASH byte ignored AND restricted, truncate before use

        var Buffer = __webpack_require__(10).Buffer

        function check(buffer) {
          if (buffer.length < 8) return false
          if (buffer.length > 72) return false
          if (buffer[0] !== 0x30) return false
          if (buffer[1] !== buffer.length - 2) return false
          if (buffer[2] !== 0x02) return false

          var lenR = buffer[3]
          if (lenR === 0) return false
          if (5 + lenR >= buffer.length) return false
          if (buffer[4 + lenR] !== 0x02) return false

          var lenS = buffer[5 + lenR]
          if (lenS === 0) return false
          if ((6 + lenR + lenS) !== buffer.length) return false

          if (buffer[4] & 0x80) return false
          if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false

          if (buffer[lenR + 6] & 0x80) return false
          if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false
          return true
        }

        function decode(buffer) {
          if (buffer.length < 8) throw new Error('DER sequence length is too short')
          if (buffer.length > 72) throw new Error('DER sequence length is too long')
          if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')
          if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')
          if (buffer[2] !== 0x02) throw new Error('Expected DER integer')

          var lenR = buffer[3]
          if (lenR === 0) throw new Error('R length is zero')
          if (5 + lenR >= buffer.length) throw new Error('R length is too long')
          if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')

          var lenS = buffer[5 + lenR]
          if (lenS === 0) throw new Error('S length is zero')
          if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')

          if (buffer[4] & 0x80) throw new Error('R value is negative')
          if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')

          if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')
          if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')

          // non-BIP66 - extract R, S values
          return {
            r: buffer.slice(4, 4 + lenR),
            s: buffer.slice(6 + lenR)
          }
        }

        /*
         * Expects r and s to be positive DER integers.
         *
         * The DER format uses the most significant bit as a sign bit (& 0x80).
         * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
         *
         * Examples:
         *
         *      0 =>     0x00
         *      1 =>     0x01
         *     -1 =>     0xff
         *    127 =>     0x7f
         *   -127 =>     0x81
         *    128 =>   0x0080
         *   -128 =>     0x80
         *    255 =>   0x00ff
         *   -255 =>   0xff01
         *  16300 =>   0x3fac
         * -16300 =>   0xc054
         *  62300 => 0x00f35c
         * -62300 => 0xff0ca4
        */
        function encode(r, s) {
          var lenR = r.length
          var lenS = s.length
          if (lenR === 0) throw new Error('R length is zero')
          if (lenS === 0) throw new Error('S length is zero')
          if (lenR > 33) throw new Error('R length is too long')
          if (lenS > 33) throw new Error('S length is too long')
          if (r[0] & 0x80) throw new Error('R value is negative')
          if (s[0] & 0x80) throw new Error('S value is negative')
          if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')
          if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')

          var signature = Buffer.allocUnsafe(6 + lenR + lenS)

          // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
          signature[0] = 0x30
          signature[1] = signature.length - 2
          signature[2] = 0x02
          signature[3] = r.length
          r.copy(signature, 4)
          signature[4 + lenR] = 0x02
          signature[5 + lenR] = s.length
          s.copy(signature, 6 + lenR)

          return signature
        }

        module.exports = {
          check: check,
          decode: decode,
          encode: encode
        }


        /***/
}),
/* 522 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";

        var Buffer = __webpack_require__(10).Buffer
        var createHash = __webpack_require__(523)
        var BN = __webpack_require__(544)
        var EC = __webpack_require__(211).ec

        var messages = __webpack_require__(216)

        var ec = new EC('secp256k1')
        var ecparams = ec.curve

        function loadCompressedPublicKey(first, xBuffer) {
          var x = new BN(xBuffer)

          // overflow
          if (x.cmp(ecparams.p) >= 0) return null
          x = x.toRed(ecparams.red)

          // compute corresponding Y
          var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()
          if ((first === 0x03) !== y.isOdd()) y = y.redNeg()

          return ec.keyPair({ pub: { x: x, y: y } })
        }

        function loadUncompressedPublicKey(first, xBuffer, yBuffer) {
          var x = new BN(xBuffer)
          var y = new BN(yBuffer)

          // overflow
          if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

          x = x.toRed(ecparams.red)
          y = y.toRed(ecparams.red)

          // is odd flag
          if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

          // x*x*x + b = y*y
          var x3 = x.redSqr().redIMul(x)
          if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

          return ec.keyPair({ pub: { x: x, y: y } })
        }

        function loadPublicKey(publicKey) {
          var first = publicKey[0]
          switch (first) {
            case 0x02:
            case 0x03:
              if (publicKey.length !== 33) return null
              return loadCompressedPublicKey(first, publicKey.slice(1, 33))
            case 0x04:
            case 0x06:
            case 0x07:
              if (publicKey.length !== 65) return null
              return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))
            default:
              return null
          }
        }

        exports.privateKeyVerify = function (privateKey) {
          var bn = new BN(privateKey)
          return bn.cmp(ecparams.n) < 0 && !bn.isZero()
        }

        exports.privateKeyExport = function (privateKey, compressed) {
          var d = new BN(privateKey)
          if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)

          return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
        }

        exports.privateKeyNegate = function (privateKey) {
          var bn = new BN(privateKey)
          return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)
        }

        exports.privateKeyModInverse = function (privateKey) {
          var bn = new BN(privateKey)
          if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID)

          return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)
        }

        exports.privateKeyTweakAdd = function (privateKey, tweak) {
          var bn = new BN(tweak)
          if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)

          bn.iadd(new BN(privateKey))
          if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)
          if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)

          return bn.toArrayLike(Buffer, 'be', 32)
        }

        exports.privateKeyTweakMul = function (privateKey, tweak) {
          var bn = new BN(tweak)
          if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)

          bn.imul(new BN(privateKey))
          if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)

          return bn.toArrayLike(Buffer, 'be', 32)
        }

        exports.publicKeyCreate = function (privateKey, compressed) {
          var d = new BN(privateKey)
          if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)

          return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
        }

        exports.publicKeyConvert = function (publicKey, compressed) {
          var pair = loadPublicKey(publicKey)
          if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

          return Buffer.from(pair.getPublic(compressed, true))
        }

        exports.publicKeyVerify = function (publicKey) {
          return loadPublicKey(publicKey) !== null
        }

        exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
          var pair = loadPublicKey(publicKey)
          if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

          tweak = new BN(tweak)
          if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)

          var point = ecparams.g.mul(tweak).add(pair.pub)
          if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)

          return Buffer.from(point.encode(true, compressed))
        }

        exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
          var pair = loadPublicKey(publicKey)
          if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

          tweak = new BN(tweak)
          if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)

          return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))
        }

        exports.publicKeyCombine = function (publicKeys, compressed) {
          var pairs = new Array(publicKeys.length)
          for (var i = 0; i < publicKeys.length; ++i) {
            pairs[i] = loadPublicKey(publicKeys[i])
            if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)
          }

          var point = pairs[0].pub
          for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)
          if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)

          return Buffer.from(point.encode(true, compressed))
        }

        exports.signatureNormalize = function (signature) {
          var r = new BN(signature.slice(0, 32))
          var s = new BN(signature.slice(32, 64))
          if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

          var result = Buffer.from(signature)
          if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)

          return result
        }

        exports.signatureExport = function (signature) {
          var r = signature.slice(0, 32)
          var s = signature.slice(32, 64)
          if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

          return { r: r, s: s }
        }

        exports.signatureImport = function (sigObj) {
          var r = new BN(sigObj.r)
          if (r.cmp(ecparams.n) >= 0) r = new BN(0)

          var s = new BN(sigObj.s)
          if (s.cmp(ecparams.n) >= 0) s = new BN(0)

          return Buffer.concat([
            r.toArrayLike(Buffer, 'be', 32),
            s.toArrayLike(Buffer, 'be', 32)
          ])
        }

        exports.sign = function (message, privateKey, noncefn, data) {
          if (typeof noncefn === 'function') {
            var getNonce = noncefn
            noncefn = function (counter) {
              var nonce = getNonce(message, privateKey, null, data, counter)
              if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)

              return new BN(nonce)
            }
          }

          var d = new BN(privateKey)
          if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)

          var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data })
          return {
            signature: Buffer.concat([
              result.r.toArrayLike(Buffer, 'be', 32),
              result.s.toArrayLike(Buffer, 'be', 32)
            ]),
            recovery: result.recoveryParam
          }
        }

        exports.verify = function (message, signature, publicKey) {
          var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }

          var sigr = new BN(sigObj.r)
          var sigs = new BN(sigObj.s)
          if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)
          if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false

          var pair = loadPublicKey(publicKey)
          if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

          return ec.verify(message, sigObj, { x: pair.pub.x, y: pair.pub.y })
        }

        exports.recover = function (message, signature, recovery, compressed) {
          var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }

          var sigr = new BN(sigObj.r)
          var sigs = new BN(sigObj.s)
          if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)

          try {
            if (sigr.isZero() || sigs.isZero()) throw new Error()

            var point = ec.recoverPubKey(message, sigObj, recovery)
            return Buffer.from(point.encode(true, compressed))
          } catch (err) {
            throw new Error(messages.ECDSA_RECOVER_FAIL)
          }
        }

        exports.ecdh = function (publicKey, privateKey) {
          var shared = exports.ecdhUnsafe(publicKey, privateKey, true)
          return createHash('sha256').update(shared).digest()
        }

        exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
          var pair = loadPublicKey(publicKey)
          if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)

          var scalar = new BN(privateKey)
          if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)

          return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))
        }


        /***/
}),
/* 523 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";

        var inherits = __webpack_require__(6)
        var MD5 = __webpack_require__(524)
        var RIPEMD160 = __webpack_require__(537)
        var sha = __webpack_require__(538)
        var Base = __webpack_require__(543)

        function Hash(hash) {
          Base.call(this, 'digest')

          this._hash = hash
        }

        inherits(Hash, Base)

        Hash.prototype._update = function (data) {
          this._hash.update(data)
        }

        Hash.prototype._final = function () {
          return this._hash.digest()
        }

        module.exports = function createHash(alg) {
          alg = alg.toLowerCase()
          if (alg === 'md5') return new MD5()
          if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

          return new Hash(sha(alg))
        }


        /***/
}),
/* 524 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";

        var inherits = __webpack_require__(6)
        var HashBase = __webpack_require__(217)
        var Buffer = __webpack_require__(10).Buffer

        var ARRAY16 = new Array(16)

        function MD5() {
          HashBase.call(this, 64)

          // state
          this._a = 0x67452301
          this._b = 0xefcdab89
          this._c = 0x98badcfe
          this._d = 0x10325476
        }

        inherits(MD5, HashBase)

        MD5.prototype._update = function () {
          var M = ARRAY16
          for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

          var a = this._a
          var b = this._b
          var c = this._c
          var d = this._d

          a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
          d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
          c = fnF(c, d, a, b, M[2], 0x242070db, 17)
          b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
          a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
          d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
          c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
          b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
          a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
          d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
          c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
          b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
          a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
          d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
          c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
          b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

          a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
          d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
          c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
          b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
          a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
          d = fnG(d, a, b, c, M[10], 0x02441453, 9)
          c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
          b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
          a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
          d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
          c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
          b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
          a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
          d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
          c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
          b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

          a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
          d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
          c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
          b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
          a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
          d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
          c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
          b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
          a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
          d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
          c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
          b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
          a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
          d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
          c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
          b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

          a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
          d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
          c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
          b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
          a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
          d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
          c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
          b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
          a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
          d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
          c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
          b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
          a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
          d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
          c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
          b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

          this._a = (this._a + a) | 0
          this._b = (this._b + b) | 0
          this._c = (this._c + c) | 0
          this._d = (this._d + d) | 0
        }

        MD5.prototype._digest = function () {
          // create padding and handle blocks
          this._block[this._blockOffset++] = 0x80
          if (this._blockOffset > 56) {
            this._block.fill(0, this._blockOffset, 64)
            this._update()
            this._blockOffset = 0
          }

          this._block.fill(0, this._blockOffset, 56)
          this._block.writeUInt32LE(this._length[0], 56)
          this._block.writeUInt32LE(this._length[1], 60)
          this._update()

          // produce result
          var buffer = Buffer.allocUnsafe(16)
          buffer.writeInt32LE(this._a, 0)
          buffer.writeInt32LE(this._b, 4)
          buffer.writeInt32LE(this._c, 8)
          buffer.writeInt32LE(this._d, 12)
          return buffer
        }

        function rotl(x, n) {
          return (x << n) | (x >>> (32 - n))
        }

        function fnF(a, b, c, d, m, k, s) {
          return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
        }

        function fnG(a, b, c, d, m, k, s) {
          return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
        }

        function fnH(a, b, c, d, m, k, s) {
          return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
        }

        function fnI(a, b, c, d, m, k, s) {
          return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
        }

        module.exports = MD5


        /***/
}),
/* 525 */
/***/ (function (module, exports) {

        /* (ignored) */

        /***/
}),
/* 526 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var Buffer = __webpack_require__(130).Buffer;
        var util = __webpack_require__(527);

        function copyBuffer(src, target, offset) {
          src.copy(target, offset);
        }

        module.exports = function () {
          function BufferList() {
            _classCallCheck(this, BufferList);

            this.head = null;
            this.tail = null;
            this.length = 0;
          }

          BufferList.prototype.push = function push(v) {
            var entry = { data: v, next: null };
            if (this.length > 0) this.tail.next = entry; else this.head = entry;
            this.tail = entry;
            ++this.length;
          };

          BufferList.prototype.unshift = function unshift(v) {
            var entry = { data: v, next: this.head };
            if (this.length === 0) this.tail = entry;
            this.head = entry;
            ++this.length;
          };

          BufferList.prototype.shift = function shift() {
            if (this.length === 0) return;
            var ret = this.head.data;
            if (this.length === 1) this.head = this.tail = null; else this.head = this.head.next;
            --this.length;
            return ret;
          };

          BufferList.prototype.clear = function clear() {
            this.head = this.tail = null;
            this.length = 0;
          };

          BufferList.prototype.join = function join(s) {
            if (this.length === 0) return '';
            var p = this.head;
            var ret = '' + p.data;
            while (p = p.next) {
              ret += s + p.data;
            } return ret;
          };

          BufferList.prototype.concat = function concat(n) {
            if (this.length === 0) return Buffer.alloc(0);
            if (this.length === 1) return this.head.data;
            var ret = Buffer.allocUnsafe(n >>> 0);
            var p = this.head;
            var i = 0;
            while (p) {
              copyBuffer(p.data, ret, i);
              i += p.data.length;
              p = p.next;
            }
            return ret;
          };

          return BufferList;
        }();

        if (util && util.inspect && util.inspect.custom) {
          module.exports.prototype[util.inspect.custom] = function () {
            var obj = util.inspect({ length: this.length });
            return this.constructor.name + ' ' + obj;
          };
        }

        /***/
}),
/* 527 */
/***/ (function (module, exports) {

        /* (ignored) */

        /***/
}),
/* 528 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (global) {
          var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
          var apply = Function.prototype.apply;

          // DOM APIs, for completeness

          exports.setTimeout = function () {
            return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
          };
          exports.setInterval = function () {
            return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
          };
          exports.clearTimeout =
            exports.clearInterval = function (timeout) {
              if (timeout) {
                timeout.close();
              }
            };

          function Timeout(id, clearFn) {
            this._id = id;
            this._clearFn = clearFn;
          }
          Timeout.prototype.unref = Timeout.prototype.ref = function () { };
          Timeout.prototype.close = function () {
            this._clearFn.call(scope, this._id);
          };

          // Does not start the time, just sets up the members needed.
          exports.enroll = function (item, msecs) {
            clearTimeout(item._idleTimeoutId);
            item._idleTimeout = msecs;
          };

          exports.unenroll = function (item) {
            clearTimeout(item._idleTimeoutId);
            item._idleTimeout = -1;
          };

          exports._unrefActive = exports.active = function (item) {
            clearTimeout(item._idleTimeoutId);

            var msecs = item._idleTimeout;
            if (msecs >= 0) {
              item._idleTimeoutId = setTimeout(function onTimeout() {
                if (item._onTimeout)
                  item._onTimeout();
              }, msecs);
            }
          };

          // setimmediate attaches itself to the global object
          __webpack_require__(529);
          // On some exotic environments, it's not clear which object `setimmediate` was
          // able to install onto.  Search each possibility in the same order as the
          // `setimmediate` library.
          exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
            (typeof global !== "undefined" && global.setImmediate) ||
            (this && this.setImmediate);
          exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
            (typeof global !== "undefined" && global.clearImmediate) ||
            (this && this.clearImmediate);

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(21)))

        /***/
}),
/* 529 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (global, process) {
          (function (global, undefined) {
            "use strict";

            if (global.setImmediate) {
              return;
            }

            var nextHandle = 1; // Spec says greater than zero
            var tasksByHandle = {};
            var currentlyRunningATask = false;
            var doc = global.document;
            var registerImmediate;

            function setImmediate(callback) {
              // Callback can either be a function or a string
              if (typeof callback !== "function") {
                callback = new Function("" + callback);
              }
              // Copy function arguments
              var args = new Array(arguments.length - 1);
              for (var i = 0; i < args.length; i++) {
                args[i] = arguments[i + 1];
              }
              // Store and register the task
              var task = { callback: callback, args: args };
              tasksByHandle[nextHandle] = task;
              registerImmediate(nextHandle);
              return nextHandle++;
            }

            function clearImmediate(handle) {
              delete tasksByHandle[handle];
            }

            function run(task) {
              var callback = task.callback;
              var args = task.args;
              switch (args.length) {
                case 0:
                  callback();
                  break;
                case 1:
                  callback(args[0]);
                  break;
                case 2:
                  callback(args[0], args[1]);
                  break;
                case 3:
                  callback(args[0], args[1], args[2]);
                  break;
                default:
                  callback.apply(undefined, args);
                  break;
              }
            }

            function runIfPresent(handle) {
              // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
              // So if we're currently running a task, we'll need to delay this invocation.
              if (currentlyRunningATask) {
                // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
                // "too much recursion" error.
                setTimeout(runIfPresent, 0, handle);
              } else {
                var task = tasksByHandle[handle];
                if (task) {
                  currentlyRunningATask = true;
                  try {
                    run(task);
                  } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                  }
                }
              }
            }

            function installNextTickImplementation() {
              registerImmediate = function (handle) {
                process.nextTick(function () { runIfPresent(handle); });
              };
            }

            function canUsePostMessage() {
              // The test against `importScripts` prevents this implementation from being installed inside a web worker,
              // where `global.postMessage` means something completely different and can't be used for this purpose.
              if (global.postMessage && !global.importScripts) {
                var postMessageIsAsynchronous = true;
                var oldOnMessage = global.onmessage;
                global.onmessage = function () {
                  postMessageIsAsynchronous = false;
                };
                global.postMessage("", "*");
                global.onmessage = oldOnMessage;
                return postMessageIsAsynchronous;
              }
            }

            function installPostMessageImplementation() {
              // Installs an event handler on `global` for the `message` event: see
              // * https://developer.mozilla.org/en/DOM/window.postMessage
              // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

              var messagePrefix = "setImmediate$" + Math.random() + "$";
              var onGlobalMessage = function (event) {
                if (event.source === global &&
                  typeof event.data === "string" &&
                  event.data.indexOf(messagePrefix) === 0) {
                  runIfPresent(+event.data.slice(messagePrefix.length));
                }
              };

              if (global.addEventListener) {
                global.addEventListener("message", onGlobalMessage, false);
              } else {
                global.attachEvent("onmessage", onGlobalMessage);
              }

              registerImmediate = function (handle) {
                global.postMessage(messagePrefix + handle, "*");
              };
            }

            function installMessageChannelImplementation() {
              var channel = new MessageChannel();
              channel.port1.onmessage = function (event) {
                var handle = event.data;
                runIfPresent(handle);
              };

              registerImmediate = function (handle) {
                channel.port2.postMessage(handle);
              };
            }

            function installReadyStateChangeImplementation() {
              var html = doc.documentElement;
              registerImmediate = function (handle) {
                // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
                // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
                var script = doc.createElement("script");
                script.onreadystatechange = function () {
                  runIfPresent(handle);
                  script.onreadystatechange = null;
                  html.removeChild(script);
                  script = null;
                };
                html.appendChild(script);
              };
            }

            function installSetTimeoutImplementation() {
              registerImmediate = function (handle) {
                setTimeout(runIfPresent, 0, handle);
              };
            }

            // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
            var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
            attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

            // Don't get fooled by e.g. browserify environments.
            if ({}.toString.call(global.process) === "[object process]") {
              // For Node.js before 0.9
              installNextTickImplementation();

            } else if (canUsePostMessage()) {
              // For non-IE10 modern browsers
              installPostMessageImplementation();

            } else if (global.MessageChannel) {
              // For web workers, where supported
              installMessageChannelImplementation();

            } else if (doc && "onreadystatechange" in doc.createElement("script")) {
              // For IE 6â€“8
              installReadyStateChangeImplementation();

            } else {
              // For older browsers
              installSetTimeoutImplementation();
            }

            attachTo.setImmediate = setImmediate;
            attachTo.clearImmediate = clearImmediate;
          }(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(21), __webpack_require__(60)))

        /***/
}),
/* 530 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (global) {
          /**
           * Module exports.
           */

          module.exports = deprecate;

          /**
           * Mark that a method should not be used.
           * Returns a modified function which warns once by default.
           *
           * If `localStorage.noDeprecation = true` is set, then it is a no-op.
           *
           * If `localStorage.throwDeprecation = true` is set, then deprecated functions
           * will throw an Error when invoked.
           *
           * If `localStorage.traceDeprecation = true` is set, then deprecated functions
           * will invoke `console.trace()` instead of `console.error()`.
           *
           * @param {Function} fn - the function to deprecate
           * @param {String} msg - the string to print to the console when `fn` is invoked
           * @returns {Function} a new "deprecated" version of `fn`
           * @api public
           */

          function deprecate(fn, msg) {
            if (config('noDeprecation')) {
              return fn;
            }

            var warned = false;
            function deprecated() {
              if (!warned) {
                if (config('throwDeprecation')) {
                  throw new Error(msg);
                } else if (config('traceDeprecation')) {
                  console.trace(msg);
                } else {
                  console.warn(msg);
                }
                warned = true;
              }
              return fn.apply(this, arguments);
            }

            return deprecated;
          }

          /**
           * Checks `localStorage` for boolean values for the given `name`.
           *
           * @param {String} name
           * @returns {Boolean}
           * @api private
           */

          function config(name) {
            // accessing global.localStorage can trigger a DOMException in sandboxed iframes
            try {
              if (!global.localStorage) return false;
            } catch (_) {
              return false;
            }
            var val = global.localStorage[name];
            if (null == val) return false;
            return String(val).toLowerCase() === 'true';
          }

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(21)))

        /***/
}),
/* 531 */
/***/ (function (module, exports, __webpack_require__) {

        /* eslint-disable node/no-deprecated-api */
        var buffer = __webpack_require__(27)
        var Buffer = buffer.Buffer

        // alternative to using Object.keys for old browsers
        function copyProps(src, dst) {
          for (var key in src) {
            dst[key] = src[key]
          }
        }
        if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
          module.exports = buffer
        } else {
          // Copy properties from require('buffer')
          copyProps(buffer, exports)
          exports.Buffer = SafeBuffer
        }

        function SafeBuffer(arg, encodingOrOffset, length) {
          return Buffer(arg, encodingOrOffset, length)
        }

        SafeBuffer.prototype = Object.create(Buffer.prototype)

        // Copy static methods from Buffer
        copyProps(Buffer, SafeBuffer)

        SafeBuffer.from = function (arg, encodingOrOffset, length) {
          if (typeof arg === 'number') {
            throw new TypeError('Argument must not be a number')
          }
          return Buffer(arg, encodingOrOffset, length)
        }

        SafeBuffer.alloc = function (size, fill, encoding) {
          if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number')
          }
          var buf = Buffer(size)
          if (fill !== undefined) {
            if (typeof encoding === 'string') {
              buf.fill(fill, encoding)
            } else {
              buf.fill(fill)
            }
          } else {
            buf.fill(0)
          }
          return buf
        }

        SafeBuffer.allocUnsafe = function (size) {
          if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number')
          }
          return Buffer(size)
        }

        SafeBuffer.allocUnsafeSlow = function (size) {
          if (typeof size !== 'number') {
            throw new TypeError('Argument must be a number')
          }
          return buffer.SlowBuffer(size)
        }


        /***/
}),
/* 532 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // a passthrough stream.
        // basically just the most minimal sort of Transform stream.
        // Every written chunk gets output as-is.



        module.exports = PassThrough;

        var Transform = __webpack_require__(222);

        /*<replacement>*/
        var util = Object.create(__webpack_require__(71));
        util.inherits = __webpack_require__(57);
        /*</replacement>*/

        util.inherits(PassThrough, Transform);

        function PassThrough(options) {
          if (!(this instanceof PassThrough)) return new PassThrough(options);

          Transform.call(this, options);
        }

        PassThrough.prototype._transform = function (chunk, encoding, cb) {
          cb(null, chunk);
        };

        /***/
}),
/* 533 */
/***/ (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(131);


        /***/
}),
/* 534 */
/***/ (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(46);


        /***/
}),
/* 535 */
/***/ (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(129).Transform


        /***/
}),
/* 536 */
/***/ (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(129).PassThrough


        /***/
}),
/* 537 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";

        var Buffer = __webpack_require__(27).Buffer
        var inherits = __webpack_require__(6)
        var HashBase = __webpack_require__(217)

        var ARRAY16 = new Array(16)

        var zl = [
          0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
          7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
          3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
          1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
          4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
        ]

        var zr = [
          5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
          6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
          15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
          8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
          12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
        ]

        var sl = [
          11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
          7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
          11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
          11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
          9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
        ]

        var sr = [
          8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
          9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
          9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
          15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
          8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
        ]

        var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
        var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

        function RIPEMD160() {
          HashBase.call(this, 64)

          // state
          this._a = 0x67452301
          this._b = 0xefcdab89
          this._c = 0x98badcfe
          this._d = 0x10325476
          this._e = 0xc3d2e1f0
        }

        inherits(RIPEMD160, HashBase)

        RIPEMD160.prototype._update = function () {
          var words = ARRAY16
          for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

          var al = this._a | 0
          var bl = this._b | 0
          var cl = this._c | 0
          var dl = this._d | 0
          var el = this._e | 0

          var ar = this._a | 0
          var br = this._b | 0
          var cr = this._c | 0
          var dr = this._d | 0
          var er = this._e | 0

          // computation
          for (var i = 0; i < 80; i += 1) {
            var tl
            var tr
            if (i < 16) {
              tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
              tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
            } else if (i < 32) {
              tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
              tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
            } else if (i < 48) {
              tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
              tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
            } else if (i < 64) {
              tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
              tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
            } else { // if (i<80) {
              tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
              tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
            }

            al = el
            el = dl
            dl = rotl(cl, 10)
            cl = bl
            bl = tl

            ar = er
            er = dr
            dr = rotl(cr, 10)
            cr = br
            br = tr
          }

          // update state
          var t = (this._b + cl + dr) | 0
          this._b = (this._c + dl + er) | 0
          this._c = (this._d + el + ar) | 0
          this._d = (this._e + al + br) | 0
          this._e = (this._a + bl + cr) | 0
          this._a = t
        }

        RIPEMD160.prototype._digest = function () {
          // create padding and handle blocks
          this._block[this._blockOffset++] = 0x80
          if (this._blockOffset > 56) {
            this._block.fill(0, this._blockOffset, 64)
            this._update()
            this._blockOffset = 0
          }

          this._block.fill(0, this._blockOffset, 56)
          this._block.writeUInt32LE(this._length[0], 56)
          this._block.writeUInt32LE(this._length[1], 60)
          this._update()

          // produce result
          var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
          buffer.writeInt32LE(this._a, 0)
          buffer.writeInt32LE(this._b, 4)
          buffer.writeInt32LE(this._c, 8)
          buffer.writeInt32LE(this._d, 12)
          buffer.writeInt32LE(this._e, 16)
          return buffer
        }

        function rotl(x, n) {
          return (x << n) | (x >>> (32 - n))
        }

        function fn1(a, b, c, d, e, m, k, s) {
          return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
        }

        function fn2(a, b, c, d, e, m, k, s) {
          return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
        }

        function fn3(a, b, c, d, e, m, k, s) {
          return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
        }

        function fn4(a, b, c, d, e, m, k, s) {
          return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
        }

        function fn5(a, b, c, d, e, m, k, s) {
          return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
        }

        module.exports = RIPEMD160


        /***/
}),
/* 538 */
/***/ (function (module, exports, __webpack_require__) {

        var exports = module.exports = function SHA(algorithm) {
          algorithm = algorithm.toLowerCase()

          var Algorithm = exports[algorithm]
          if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

          return new Algorithm()
        }

        exports.sha = __webpack_require__(539)
        exports.sha1 = __webpack_require__(540)
        exports.sha224 = __webpack_require__(541)
        exports.sha256 = __webpack_require__(223)
        exports.sha384 = __webpack_require__(542)
        exports.sha512 = __webpack_require__(224)


        /***/
}),
/* 539 */
/***/ (function (module, exports, __webpack_require__) {

        /*
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
         * in FIPS PUB 180-1
         * This source code is derived from sha1.js of the same repository.
         * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
         * operation was added.
         */

        var inherits = __webpack_require__(6)
        var Hash = __webpack_require__(58)
        var Buffer = __webpack_require__(10).Buffer

        var K = [
          0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
        ]

        var W = new Array(80)

        function Sha() {
          this.init()
          this._w = W

          Hash.call(this, 64, 56)
        }

        inherits(Sha, Hash)

        Sha.prototype.init = function () {
          this._a = 0x67452301
          this._b = 0xefcdab89
          this._c = 0x98badcfe
          this._d = 0x10325476
          this._e = 0xc3d2e1f0

          return this
        }

        function rotl5(num) {
          return (num << 5) | (num >>> 27)
        }

        function rotl30(num) {
          return (num << 30) | (num >>> 2)
        }

        function ft(s, b, c, d) {
          if (s === 0) return (b & c) | ((~b) & d)
          if (s === 2) return (b & c) | (b & d) | (c & d)
          return b ^ c ^ d
        }

        Sha.prototype._update = function (M) {
          var W = this._w

          var a = this._a | 0
          var b = this._b | 0
          var c = this._c | 0
          var d = this._d | 0
          var e = this._e | 0

          for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
          for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

          for (var j = 0; j < 80; ++j) {
            var s = ~~(j / 20)
            var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

            e = d
            d = c
            c = rotl30(b)
            b = a
            a = t
          }

          this._a = (a + this._a) | 0
          this._b = (b + this._b) | 0
          this._c = (c + this._c) | 0
          this._d = (d + this._d) | 0
          this._e = (e + this._e) | 0
        }

        Sha.prototype._hash = function () {
          var H = Buffer.allocUnsafe(20)

          H.writeInt32BE(this._a | 0, 0)
          H.writeInt32BE(this._b | 0, 4)
          H.writeInt32BE(this._c | 0, 8)
          H.writeInt32BE(this._d | 0, 12)
          H.writeInt32BE(this._e | 0, 16)

          return H
        }

        module.exports = Sha


        /***/
}),
/* 540 */
/***/ (function (module, exports, __webpack_require__) {

        /*
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
         * in FIPS PUB 180-1
         * Version 2.1a Copyright Paul Johnston 2000 - 2002.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         * Distributed under the BSD License
         * See http://pajhome.org.uk/crypt/md5 for details.
         */

        var inherits = __webpack_require__(6)
        var Hash = __webpack_require__(58)
        var Buffer = __webpack_require__(10).Buffer

        var K = [
          0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
        ]

        var W = new Array(80)

        function Sha1() {
          this.init()
          this._w = W

          Hash.call(this, 64, 56)
        }

        inherits(Sha1, Hash)

        Sha1.prototype.init = function () {
          this._a = 0x67452301
          this._b = 0xefcdab89
          this._c = 0x98badcfe
          this._d = 0x10325476
          this._e = 0xc3d2e1f0

          return this
        }

        function rotl1(num) {
          return (num << 1) | (num >>> 31)
        }

        function rotl5(num) {
          return (num << 5) | (num >>> 27)
        }

        function rotl30(num) {
          return (num << 30) | (num >>> 2)
        }

        function ft(s, b, c, d) {
          if (s === 0) return (b & c) | ((~b) & d)
          if (s === 2) return (b & c) | (b & d) | (c & d)
          return b ^ c ^ d
        }

        Sha1.prototype._update = function (M) {
          var W = this._w

          var a = this._a | 0
          var b = this._b | 0
          var c = this._c | 0
          var d = this._d | 0
          var e = this._e | 0

          for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
          for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

          for (var j = 0; j < 80; ++j) {
            var s = ~~(j / 20)
            var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

            e = d
            d = c
            c = rotl30(b)
            b = a
            a = t
          }

          this._a = (a + this._a) | 0
          this._b = (b + this._b) | 0
          this._c = (c + this._c) | 0
          this._d = (d + this._d) | 0
          this._e = (e + this._e) | 0
        }

        Sha1.prototype._hash = function () {
          var H = Buffer.allocUnsafe(20)

          H.writeInt32BE(this._a | 0, 0)
          H.writeInt32BE(this._b | 0, 4)
          H.writeInt32BE(this._c | 0, 8)
          H.writeInt32BE(this._d | 0, 12)
          H.writeInt32BE(this._e | 0, 16)

          return H
        }

        module.exports = Sha1


        /***/
}),
/* 541 */
/***/ (function (module, exports, __webpack_require__) {

        /**
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
         * in FIPS 180-2
         * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         *
         */

        var inherits = __webpack_require__(6)
        var Sha256 = __webpack_require__(223)
        var Hash = __webpack_require__(58)
        var Buffer = __webpack_require__(10).Buffer

        var W = new Array(64)

        function Sha224() {
          this.init()

          this._w = W // new Array(64)

          Hash.call(this, 64, 56)
        }

        inherits(Sha224, Sha256)

        Sha224.prototype.init = function () {
          this._a = 0xc1059ed8
          this._b = 0x367cd507
          this._c = 0x3070dd17
          this._d = 0xf70e5939
          this._e = 0xffc00b31
          this._f = 0x68581511
          this._g = 0x64f98fa7
          this._h = 0xbefa4fa4

          return this
        }

        Sha224.prototype._hash = function () {
          var H = Buffer.allocUnsafe(28)

          H.writeInt32BE(this._a, 0)
          H.writeInt32BE(this._b, 4)
          H.writeInt32BE(this._c, 8)
          H.writeInt32BE(this._d, 12)
          H.writeInt32BE(this._e, 16)
          H.writeInt32BE(this._f, 20)
          H.writeInt32BE(this._g, 24)

          return H
        }

        module.exports = Sha224


        /***/
}),
/* 542 */
/***/ (function (module, exports, __webpack_require__) {

        var inherits = __webpack_require__(6)
        var SHA512 = __webpack_require__(224)
        var Hash = __webpack_require__(58)
        var Buffer = __webpack_require__(10).Buffer

        var W = new Array(160)

        function Sha384() {
          this.init()
          this._w = W

          Hash.call(this, 128, 112)
        }

        inherits(Sha384, SHA512)

        Sha384.prototype.init = function () {
          this._ah = 0xcbbb9d5d
          this._bh = 0x629a292a
          this._ch = 0x9159015a
          this._dh = 0x152fecd8
          this._eh = 0x67332667
          this._fh = 0x8eb44a87
          this._gh = 0xdb0c2e0d
          this._hh = 0x47b5481d

          this._al = 0xc1059ed8
          this._bl = 0x367cd507
          this._cl = 0x3070dd17
          this._dl = 0xf70e5939
          this._el = 0xffc00b31
          this._fl = 0x68581511
          this._gl = 0x64f98fa7
          this._hl = 0xbefa4fa4

          return this
        }

        Sha384.prototype._hash = function () {
          var H = Buffer.allocUnsafe(48)

          function writeInt64BE(h, l, offset) {
            H.writeInt32BE(h, offset)
            H.writeInt32BE(l, offset + 4)
          }

          writeInt64BE(this._ah, this._al, 0)
          writeInt64BE(this._bh, this._bl, 8)
          writeInt64BE(this._ch, this._cl, 16)
          writeInt64BE(this._dh, this._dl, 24)
          writeInt64BE(this._eh, this._el, 32)
          writeInt64BE(this._fh, this._fl, 40)

          return H
        }

        module.exports = Sha384


        /***/
}),
/* 543 */
/***/ (function (module, exports, __webpack_require__) {

        var Buffer = __webpack_require__(10).Buffer
        var Transform = __webpack_require__(218).Transform
        var StringDecoder = __webpack_require__(132).StringDecoder
        var inherits = __webpack_require__(6)

        function CipherBase(hashMode) {
          Transform.call(this)
          this.hashMode = typeof hashMode === 'string'
          if (this.hashMode) {
            this[hashMode] = this._finalOrDigest
          } else {
            this.final = this._finalOrDigest
          }
          if (this._final) {
            this.__final = this._final
            this._final = null
          }
          this._decoder = null
          this._encoding = null
        }
        inherits(CipherBase, Transform)

        CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
          if (typeof data === 'string') {
            data = Buffer.from(data, inputEnc)
          }

          var outData = this._update(data)
          if (this.hashMode) return this

          if (outputEnc) {
            outData = this._toString(outData, outputEnc)
          }

          return outData
        }

        CipherBase.prototype.setAutoPadding = function () { }
        CipherBase.prototype.getAuthTag = function () {
          throw new Error('trying to get auth tag in unsupported state')
        }

        CipherBase.prototype.setAuthTag = function () {
          throw new Error('trying to set auth tag in unsupported state')
        }

        CipherBase.prototype.setAAD = function () {
          throw new Error('trying to set aad in unsupported state')
        }

        CipherBase.prototype._transform = function (data, _, next) {
          var err
          try {
            if (this.hashMode) {
              this._update(data)
            } else {
              this.push(this._update(data))
            }
          } catch (e) {
            err = e
          } finally {
            next(err)
          }
        }
        CipherBase.prototype._flush = function (done) {
          var err
          try {
            this.push(this.__final())
          } catch (e) {
            err = e
          }

          done(err)
        }
        CipherBase.prototype._finalOrDigest = function (outputEnc) {
          var outData = this.__final() || Buffer.alloc(0)
          if (outputEnc) {
            outData = this._toString(outData, outputEnc, true)
          }
          return outData
        }

        CipherBase.prototype._toString = function (value, enc, fin) {
          if (!this._decoder) {
            this._decoder = new StringDecoder(enc)
            this._encoding = enc
          }

          if (this._encoding !== enc) throw new Error('can\'t switch encodings')

          var out = this._decoder.write(value)
          if (fin) {
            out += this._decoder.end()
          }

          return out
        }

        module.exports = CipherBase


        /***/
}),
/* 544 */
/***/ (function (module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function (module) {
          (function (module, exports) {
            'use strict';

            // Utils
            function assert(val, msg) {
              if (!val) throw new Error(msg || 'Assertion failed');
            }

            // Could use `inherits` module, but don't want to move from single file
            // architecture yet.
            function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function () { };
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            }

            // BN

            function BN(number, base, endian) {
              if (BN.isBN(number)) {
                return number;
              }

              this.negative = 0;
              this.words = null;
              this.length = 0;

              // Reduction context
              this.red = null;

              if (number !== null) {
                if (base === 'le' || base === 'be') {
                  endian = base;
                  base = 10;
                }

                this._init(number || 0, base || 10, endian || 'be');
              }
            }
            if (typeof module === 'object') {
              module.exports = BN;
            } else {
              exports.BN = BN;
            }

            BN.BN = BN;
            BN.wordSize = 26;

            var Buffer;
            try {
              Buffer = __webpack_require__(545).Buffer;
            } catch (e) {
            }

            BN.isBN = function isBN(num) {
              if (num instanceof BN) {
                return true;
              }

              return num !== null && typeof num === 'object' &&
                num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
            };

            BN.max = function max(left, right) {
              if (left.cmp(right) > 0) return left;
              return right;
            };

            BN.min = function min(left, right) {
              if (left.cmp(right) < 0) return left;
              return right;
            };

            BN.prototype._init = function init(number, base, endian) {
              if (typeof number === 'number') {
                return this._initNumber(number, base, endian);
              }

              if (typeof number === 'object') {
                return this._initArray(number, base, endian);
              }

              if (base === 'hex') {
                base = 16;
              }
              assert(base === (base | 0) && base >= 2 && base <= 36);

              number = number.toString().replace(/\s+/g, '');
              var start = 0;
              if (number[0] === '-') {
                start++;
              }

              if (base === 16) {
                this._parseHex(number, start);
              } else {
                this._parseBase(number, base, start);
              }

              if (number[0] === '-') {
                this.negative = 1;
              }

              this.strip();

              if (endian !== 'le') return;

              this._initArray(this.toArray(), base, endian);
            };

            BN.prototype._initNumber = function _initNumber(number, base, endian) {
              if (number < 0) {
                this.negative = 1;
                number = -number;
              }
              if (number < 0x4000000) {
                this.words = [number & 0x3ffffff];
                this.length = 1;
              } else if (number < 0x10000000000000) {
                this.words = [
                  number & 0x3ffffff,
                  (number / 0x4000000) & 0x3ffffff
                ];
                this.length = 2;
              } else {
                assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
                this.words = [
                  number & 0x3ffffff,
                  (number / 0x4000000) & 0x3ffffff,
                  1
                ];
                this.length = 3;
              }

              if (endian !== 'le') return;

              // Reverse the bytes
              this._initArray(this.toArray(), base, endian);
            };

            BN.prototype._initArray = function _initArray(number, base, endian) {
              // Perhaps a Uint8Array
              assert(typeof number.length === 'number');
              if (number.length <= 0) {
                this.words = [0];
                this.length = 1;
                return this;
              }

              this.length = Math.ceil(number.length / 3);
              this.words = new Array(this.length);
              for (var i = 0; i < this.length; i++) {
                this.words[i] = 0;
              }

              var j, w;
              var off = 0;
              if (endian === 'be') {
                for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                  w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                  this.words[j] |= (w << off) & 0x3ffffff;
                  this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                  off += 24;
                  if (off >= 26) {
                    off -= 26;
                    j++;
                  }
                }
              } else if (endian === 'le') {
                for (i = 0, j = 0; i < number.length; i += 3) {
                  w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                  this.words[j] |= (w << off) & 0x3ffffff;
                  this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                  off += 24;
                  if (off >= 26) {
                    off -= 26;
                    j++;
                  }
                }
              }
              return this.strip();
            };

            function parseHex(str, start, end) {
              var r = 0;
              var len = Math.min(str.length, end);
              for (var i = start; i < len; i++) {
                var c = str.charCodeAt(i) - 48;

                r <<= 4;

                // 'a' - 'f'
                if (c >= 49 && c <= 54) {
                  r |= c - 49 + 0xa;

                  // 'A' - 'F'
                } else if (c >= 17 && c <= 22) {
                  r |= c - 17 + 0xa;

                  // '0' - '9'
                } else {
                  r |= c & 0xf;
                }
              }
              return r;
            }

            BN.prototype._parseHex = function _parseHex(number, start) {
              // Create possibly bigger array to ensure that it fits the number
              this.length = Math.ceil((number.length - start) / 6);
              this.words = new Array(this.length);
              for (var i = 0; i < this.length; i++) {
                this.words[i] = 0;
              }

              var j, w;
              // Scan 24-bit chunks and add them to the number
              var off = 0;
              for (i = number.length - 6, j = 0; i >= start; i -= 6) {
                w = parseHex(number, i, i + 6);
                this.words[j] |= (w << off) & 0x3ffffff;
                // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
                this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
              if (i + 6 !== start) {
                w = parseHex(number, start, i + 6);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
              }
              this.strip();
            };

            function parseBase(str, start, end, mul) {
              var r = 0;
              var len = Math.min(str.length, end);
              for (var i = start; i < len; i++) {
                var c = str.charCodeAt(i) - 48;

                r *= mul;

                // 'a'
                if (c >= 49) {
                  r += c - 49 + 0xa;

                  // 'A'
                } else if (c >= 17) {
                  r += c - 17 + 0xa;

                  // '0' - '9'
                } else {
                  r += c;
                }
              }
              return r;
            }

            BN.prototype._parseBase = function _parseBase(number, base, start) {
              // Initialize as zero
              this.words = [0];
              this.length = 1;

              // Find length of limb in base
              for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
                limbLen++;
              }
              limbLen--;
              limbPow = (limbPow / base) | 0;

              var total = number.length - start;
              var mod = total % limbLen;
              var end = Math.min(total, total - mod) + start;

              var word = 0;
              for (var i = start; i < end; i += limbLen) {
                word = parseBase(number, i, i + limbLen, base);

                this.imuln(limbPow);
                if (this.words[0] + word < 0x4000000) {
                  this.words[0] += word;
                } else {
                  this._iaddn(word);
                }
              }

              if (mod !== 0) {
                var pow = 1;
                word = parseBase(number, i, number.length, base);

                for (i = 0; i < mod; i++) {
                  pow *= base;
                }

                this.imuln(pow);
                if (this.words[0] + word < 0x4000000) {
                  this.words[0] += word;
                } else {
                  this._iaddn(word);
                }
              }
            };

            BN.prototype.copy = function copy(dest) {
              dest.words = new Array(this.length);
              for (var i = 0; i < this.length; i++) {
                dest.words[i] = this.words[i];
              }
              dest.length = this.length;
              dest.negative = this.negative;
              dest.red = this.red;
            };

            BN.prototype.clone = function clone() {
              var r = new BN(null);
              this.copy(r);
              return r;
            };

            BN.prototype._expand = function _expand(size) {
              while (this.length < size) {
                this.words[this.length++] = 0;
              }
              return this;
            };

            // Remove leading `0` from `this`
            BN.prototype.strip = function strip() {
              while (this.length > 1 && this.words[this.length - 1] === 0) {
                this.length--;
              }
              return this._normSign();
            };

            BN.prototype._normSign = function _normSign() {
              // -0 = 0
              if (this.length === 1 && this.words[0] === 0) {
                this.negative = 0;
              }
              return this;
            };

            BN.prototype.inspect = function inspect() {
              return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
            };

            /*
          
            var zeros = [];
            var groupSizes = [];
            var groupBases = [];
          
            var s = '';
            var i = -1;
            while (++i < BN.wordSize) {
              zeros[i] = s;
              s += '0';
            }
            groupSizes[0] = 0;
            groupSizes[1] = 0;
            groupBases[0] = 0;
            groupBases[1] = 0;
            var base = 2 - 1;
            while (++base < 36 + 1) {
              var groupSize = 0;
              var groupBase = 1;
              while (groupBase < (1 << BN.wordSize) / base) {
                groupBase *= base;
                groupSize += 1;
              }
              groupSizes[base] = groupSize;
              groupBases[base] = groupBase;
            }
          
            */

            var zeros = [
              '',
              '0',
              '00',
              '000',
              '0000',
              '00000',
              '000000',
              '0000000',
              '00000000',
              '000000000',
              '0000000000',
              '00000000000',
              '000000000000',
              '0000000000000',
              '00000000000000',
              '000000000000000',
              '0000000000000000',
              '00000000000000000',
              '000000000000000000',
              '0000000000000000000',
              '00000000000000000000',
              '000000000000000000000',
              '0000000000000000000000',
              '00000000000000000000000',
              '000000000000000000000000',
              '0000000000000000000000000'
            ];

            var groupSizes = [
              0, 0,
              25, 16, 12, 11, 10, 9, 8,
              8, 7, 7, 7, 7, 6, 6,
              6, 6, 6, 6, 6, 5, 5,
              5, 5, 5, 5, 5, 5, 5,
              5, 5, 5, 5, 5, 5, 5
            ];

            var groupBases = [
              0, 0,
              33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
              43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
              16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
              6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
              24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
            ];

            BN.prototype.toString = function toString(base, padding) {
              base = base || 10;
              padding = padding | 0 || 1;

              var out;
              if (base === 16 || base === 'hex') {
                out = '';
                var off = 0;
                var carry = 0;
                for (var i = 0; i < this.length; i++) {
                  var w = this.words[i];
                  var word = (((w << off) | carry) & 0xffffff).toString(16);
                  carry = (w >>> (24 - off)) & 0xffffff;
                  if (carry !== 0 || i !== this.length - 1) {
                    out = zeros[6 - word.length] + word + out;
                  } else {
                    out = word + out;
                  }
                  off += 2;
                  if (off >= 26) {
                    off -= 26;
                    i--;
                  }
                }
                if (carry !== 0) {
                  out = carry.toString(16) + out;
                }
                while (out.length % padding !== 0) {
                  out = '0' + out;
                }
                if (this.negative !== 0) {
                  out = '-' + out;
                }
                return out;
              }

              if (base === (base | 0) && base >= 2 && base <= 36) {
                // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                var groupSize = groupSizes[base];
                // var groupBase = Math.pow(base, groupSize);
                var groupBase = groupBases[base];
                out = '';
                var c = this.clone();
                c.negative = 0;
                while (!c.isZero()) {
                  var r = c.modn(groupBase).toString(base);
                  c = c.idivn(groupBase);

                  if (!c.isZero()) {
                    out = zeros[groupSize - r.length] + r + out;
                  } else {
                    out = r + out;
                  }
                }
                if (this.isZero()) {
                  out = '0' + out;
                }
                while (out.length % padding !== 0) {
                  out = '0' + out;
                }
                if (this.negative !== 0) {
                  out = '-' + out;
                }
                return out;
              }

              assert(false, 'Base should be between 2 and 36');
            };

            BN.prototype.toNumber = function toNumber() {
              var ret = this.words[0];
              if (this.length === 2) {
                ret += this.words[1] * 0x4000000;
              } else if (this.length === 3 && this.words[2] === 0x01) {
                // NOTE: at this stage it is known that the top bit is set
                ret += 0x10000000000000 + (this.words[1] * 0x4000000);
              } else if (this.length > 2) {
                assert(false, 'Number can only safely store up to 53 bits');
              }
              return (this.negative !== 0) ? -ret : ret;
            };

            BN.prototype.toJSON = function toJSON() {
              return this.toString(16);
            };

            BN.prototype.toBuffer = function toBuffer(endian, length) {
              assert(typeof Buffer !== 'undefined');
              return this.toArrayLike(Buffer, endian, length);
            };

            BN.prototype.toArray = function toArray(endian, length) {
              return this.toArrayLike(Array, endian, length);
            };

            BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
              var byteLength = this.byteLength();
              var reqLength = length || Math.max(1, byteLength);
              assert(byteLength <= reqLength, 'byte array longer than desired length');
              assert(reqLength > 0, 'Requested array length <= 0');

              this.strip();
              var littleEndian = endian === 'le';
              var res = new ArrayType(reqLength);

              var b, i;
              var q = this.clone();
              if (!littleEndian) {
                // Assume big-endian
                for (i = 0; i < reqLength - byteLength; i++) {
                  res[i] = 0;
                }

                for (i = 0; !q.isZero(); i++) {
                  b = q.andln(0xff);
                  q.iushrn(8);

                  res[reqLength - i - 1] = b;
                }
              } else {
                for (i = 0; !q.isZero(); i++) {
                  b = q.andln(0xff);
                  q.iushrn(8);

                  res[i] = b;
                }

                for (; i < reqLength; i++) {
                  res[i] = 0;
                }
              }

              return res;
            };

            if (Math.clz32) {
              BN.prototype._countBits = function _countBits(w) {
                return 32 - Math.clz32(w);
              };
            } else {
              BN.prototype._countBits = function _countBits(w) {
                var t = w;
                var r = 0;
                if (t >= 0x1000) {
                  r += 13;
                  t >>>= 13;
                }
                if (t >= 0x40) {
                  r += 7;
                  t >>>= 7;
                }
                if (t >= 0x8) {
                  r += 4;
                  t >>>= 4;
                }
                if (t >= 0x02) {
                  r += 2;
                  t >>>= 2;
                }
                return r + t;
              };
            }

            BN.prototype._zeroBits = function _zeroBits(w) {
              // Short-cut
              if (w === 0) return 26;

              var t = w;
              var r = 0;
              if ((t & 0x1fff) === 0) {
                r += 13;
                t >>>= 13;
              }
              if ((t & 0x7f) === 0) {
                r += 7;
                t >>>= 7;
              }
              if ((t & 0xf) === 0) {
                r += 4;
                t >>>= 4;
              }
              if ((t & 0x3) === 0) {
                r += 2;
                t >>>= 2;
              }
              if ((t & 0x1) === 0) {
                r++;
              }
              return r;
            };

            // Return number of used bits in a BN
            BN.prototype.bitLength = function bitLength() {
              var w = this.words[this.length - 1];
              var hi = this._countBits(w);
              return (this.length - 1) * 26 + hi;
            };

            function toBitArray(num) {
              var w = new Array(num.bitLength());

              for (var bit = 0; bit < w.length; bit++) {
                var off = (bit / 26) | 0;
                var wbit = bit % 26;

                w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
              }

              return w;
            }

            // Number of trailing zero bits
            BN.prototype.zeroBits = function zeroBits() {
              if (this.isZero()) return 0;

              var r = 0;
              for (var i = 0; i < this.length; i++) {
                var b = this._zeroBits(this.words[i]);
                r += b;
                if (b !== 26) break;
              }
              return r;
            };

            BN.prototype.byteLength = function byteLength() {
              return Math.ceil(this.bitLength() / 8);
            };

            BN.prototype.toTwos = function toTwos(width) {
              if (this.negative !== 0) {
                return this.abs().inotn(width).iaddn(1);
              }
              return this.clone();
            };

            BN.prototype.fromTwos = function fromTwos(width) {
              if (this.testn(width - 1)) {
                return this.notn(width).iaddn(1).ineg();
              }
              return this.clone();
            };

            BN.prototype.isNeg = function isNeg() {
              return this.negative !== 0;
            };

            // Return negative clone of `this`
            BN.prototype.neg = function neg() {
              return this.clone().ineg();
            };

            BN.prototype.ineg = function ineg() {
              if (!this.isZero()) {
                this.negative ^= 1;
              }

              return this;
            };

            // Or `num` with `this` in-place
            BN.prototype.iuor = function iuor(num) {
              while (this.length < num.length) {
                this.words[this.length++] = 0;
              }

              for (var i = 0; i < num.length; i++) {
                this.words[i] = this.words[i] | num.words[i];
              }

              return this.strip();
            };

            BN.prototype.ior = function ior(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuor(num);
            };

            // Or `num` with `this`
            BN.prototype.or = function or(num) {
              if (this.length > num.length) return this.clone().ior(num);
              return num.clone().ior(this);
            };

            BN.prototype.uor = function uor(num) {
              if (this.length > num.length) return this.clone().iuor(num);
              return num.clone().iuor(this);
            };

            // And `num` with `this` in-place
            BN.prototype.iuand = function iuand(num) {
              // b = min-length(num, this)
              var b;
              if (this.length > num.length) {
                b = num;
              } else {
                b = this;
              }

              for (var i = 0; i < b.length; i++) {
                this.words[i] = this.words[i] & num.words[i];
              }

              this.length = b.length;

              return this.strip();
            };

            BN.prototype.iand = function iand(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuand(num);
            };

            // And `num` with `this`
            BN.prototype.and = function and(num) {
              if (this.length > num.length) return this.clone().iand(num);
              return num.clone().iand(this);
            };

            BN.prototype.uand = function uand(num) {
              if (this.length > num.length) return this.clone().iuand(num);
              return num.clone().iuand(this);
            };

            // Xor `num` with `this` in-place
            BN.prototype.iuxor = function iuxor(num) {
              // a.length > b.length
              var a;
              var b;
              if (this.length > num.length) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              for (var i = 0; i < b.length; i++) {
                this.words[i] = a.words[i] ^ b.words[i];
              }

              if (this !== a) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              this.length = a.length;

              return this.strip();
            };

            BN.prototype.ixor = function ixor(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuxor(num);
            };

            // Xor `num` with `this`
            BN.prototype.xor = function xor(num) {
              if (this.length > num.length) return this.clone().ixor(num);
              return num.clone().ixor(this);
            };

            BN.prototype.uxor = function uxor(num) {
              if (this.length > num.length) return this.clone().iuxor(num);
              return num.clone().iuxor(this);
            };

            // Not ``this`` with ``width`` bitwidth
            BN.prototype.inotn = function inotn(width) {
              assert(typeof width === 'number' && width >= 0);

              var bytesNeeded = Math.ceil(width / 26) | 0;
              var bitsLeft = width % 26;

              // Extend the buffer with leading zeroes
              this._expand(bytesNeeded);

              if (bitsLeft > 0) {
                bytesNeeded--;
              }

              // Handle complete words
              for (var i = 0; i < bytesNeeded; i++) {
                this.words[i] = ~this.words[i] & 0x3ffffff;
              }

              // Handle the residue
              if (bitsLeft > 0) {
                this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
              }

              // And remove leading zeroes
              return this.strip();
            };

            BN.prototype.notn = function notn(width) {
              return this.clone().inotn(width);
            };

            // Set `bit` of `this`
            BN.prototype.setn = function setn(bit, val) {
              assert(typeof bit === 'number' && bit >= 0);

              var off = (bit / 26) | 0;
              var wbit = bit % 26;

              this._expand(off + 1);

              if (val) {
                this.words[off] = this.words[off] | (1 << wbit);
              } else {
                this.words[off] = this.words[off] & ~(1 << wbit);
              }

              return this.strip();
            };

            // Add `num` to `this` in-place
            BN.prototype.iadd = function iadd(num) {
              var r;

              // negative + positive
              if (this.negative !== 0 && num.negative === 0) {
                this.negative = 0;
                r = this.isub(num);
                this.negative ^= 1;
                return this._normSign();

                // positive + negative
              } else if (this.negative === 0 && num.negative !== 0) {
                num.negative = 0;
                r = this.isub(num);
                num.negative = 1;
                return r._normSign();
              }

              // a.length > b.length
              var a, b;
              if (this.length > num.length) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              var carry = 0;
              for (var i = 0; i < b.length; i++) {
                r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                this.words[i] = r & 0x3ffffff;
                carry = r >>> 26;
              }
              for (; carry !== 0 && i < a.length; i++) {
                r = (a.words[i] | 0) + carry;
                this.words[i] = r & 0x3ffffff;
                carry = r >>> 26;
              }

              this.length = a.length;
              if (carry !== 0) {
                this.words[this.length] = carry;
                this.length++;
                // Copy the rest of the words
              } else if (a !== this) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              return this;
            };

            // Add `num` to `this`
            BN.prototype.add = function add(num) {
              var res;
              if (num.negative !== 0 && this.negative === 0) {
                num.negative = 0;
                res = this.sub(num);
                num.negative ^= 1;
                return res;
              } else if (num.negative === 0 && this.negative !== 0) {
                this.negative = 0;
                res = num.sub(this);
                this.negative = 1;
                return res;
              }

              if (this.length > num.length) return this.clone().iadd(num);

              return num.clone().iadd(this);
            };

            // Subtract `num` from `this` in-place
            BN.prototype.isub = function isub(num) {
              // this - (-num) = this + num
              if (num.negative !== 0) {
                num.negative = 0;
                var r = this.iadd(num);
                num.negative = 1;
                return r._normSign();

                // -this - num = -(this + num)
              } else if (this.negative !== 0) {
                this.negative = 0;
                this.iadd(num);
                this.negative = 1;
                return this._normSign();
              }

              // At this point both numbers are positive
              var cmp = this.cmp(num);

              // Optimization - zeroify
              if (cmp === 0) {
                this.negative = 0;
                this.length = 1;
                this.words[0] = 0;
                return this;
              }

              // a > b
              var a, b;
              if (cmp > 0) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              var carry = 0;
              for (var i = 0; i < b.length; i++) {
                r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                carry = r >> 26;
                this.words[i] = r & 0x3ffffff;
              }
              for (; carry !== 0 && i < a.length; i++) {
                r = (a.words[i] | 0) + carry;
                carry = r >> 26;
                this.words[i] = r & 0x3ffffff;
              }

              // Copy rest of the words
              if (carry === 0 && i < a.length && a !== this) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              this.length = Math.max(this.length, i);

              if (a !== this) {
                this.negative = 1;
              }

              return this.strip();
            };

            // Subtract `num` from `this`
            BN.prototype.sub = function sub(num) {
              return this.clone().isub(num);
            };

            function smallMulTo(self, num, out) {
              out.negative = num.negative ^ self.negative;
              var len = (self.length + num.length) | 0;
              out.length = len;
              len = (len - 1) | 0;

              // Peel one iteration (compiler can't do it, because of code complexity)
              var a = self.words[0] | 0;
              var b = num.words[0] | 0;
              var r = a * b;

              var lo = r & 0x3ffffff;
              var carry = (r / 0x4000000) | 0;
              out.words[0] = lo;

              for (var k = 1; k < len; k++) {
                // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                // note that ncarry could be >= 0x3ffffff
                var ncarry = carry >>> 26;
                var rword = carry & 0x3ffffff;
                var maxJ = Math.min(k, num.length - 1);
                for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                  var i = (k - j) | 0;
                  a = self.words[i] | 0;
                  b = num.words[j] | 0;
                  r = a * b + rword;
                  ncarry += (r / 0x4000000) | 0;
                  rword = r & 0x3ffffff;
                }
                out.words[k] = rword | 0;
                carry = ncarry | 0;
              }
              if (carry !== 0) {
                out.words[k] = carry | 0;
              } else {
                out.length--;
              }

              return out.strip();
            }

            // TODO(indutny): it may be reasonable to omit it for users who don't need
            // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
            // multiplication (like elliptic secp256k1).
            var comb10MulTo = function comb10MulTo(self, num, out) {
              var a = self.words;
              var b = num.words;
              var o = out.words;
              var c = 0;
              var lo;
              var mid;
              var hi;
              var a0 = a[0] | 0;
              var al0 = a0 & 0x1fff;
              var ah0 = a0 >>> 13;
              var a1 = a[1] | 0;
              var al1 = a1 & 0x1fff;
              var ah1 = a1 >>> 13;
              var a2 = a[2] | 0;
              var al2 = a2 & 0x1fff;
              var ah2 = a2 >>> 13;
              var a3 = a[3] | 0;
              var al3 = a3 & 0x1fff;
              var ah3 = a3 >>> 13;
              var a4 = a[4] | 0;
              var al4 = a4 & 0x1fff;
              var ah4 = a4 >>> 13;
              var a5 = a[5] | 0;
              var al5 = a5 & 0x1fff;
              var ah5 = a5 >>> 13;
              var a6 = a[6] | 0;
              var al6 = a6 & 0x1fff;
              var ah6 = a6 >>> 13;
              var a7 = a[7] | 0;
              var al7 = a7 & 0x1fff;
              var ah7 = a7 >>> 13;
              var a8 = a[8] | 0;
              var al8 = a8 & 0x1fff;
              var ah8 = a8 >>> 13;
              var a9 = a[9] | 0;
              var al9 = a9 & 0x1fff;
              var ah9 = a9 >>> 13;
              var b0 = b[0] | 0;
              var bl0 = b0 & 0x1fff;
              var bh0 = b0 >>> 13;
              var b1 = b[1] | 0;
              var bl1 = b1 & 0x1fff;
              var bh1 = b1 >>> 13;
              var b2 = b[2] | 0;
              var bl2 = b2 & 0x1fff;
              var bh2 = b2 >>> 13;
              var b3 = b[3] | 0;
              var bl3 = b3 & 0x1fff;
              var bh3 = b3 >>> 13;
              var b4 = b[4] | 0;
              var bl4 = b4 & 0x1fff;
              var bh4 = b4 >>> 13;
              var b5 = b[5] | 0;
              var bl5 = b5 & 0x1fff;
              var bh5 = b5 >>> 13;
              var b6 = b[6] | 0;
              var bl6 = b6 & 0x1fff;
              var bh6 = b6 >>> 13;
              var b7 = b[7] | 0;
              var bl7 = b7 & 0x1fff;
              var bh7 = b7 >>> 13;
              var b8 = b[8] | 0;
              var bl8 = b8 & 0x1fff;
              var bh8 = b8 >>> 13;
              var b9 = b[9] | 0;
              var bl9 = b9 & 0x1fff;
              var bh9 = b9 >>> 13;

              out.negative = self.negative ^ num.negative;
              out.length = 19;
              /* k = 0 */
              lo = Math.imul(al0, bl0);
              mid = Math.imul(al0, bh0);
              mid = (mid + Math.imul(ah0, bl0)) | 0;
              hi = Math.imul(ah0, bh0);
              var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
              w0 &= 0x3ffffff;
              /* k = 1 */
              lo = Math.imul(al1, bl0);
              mid = Math.imul(al1, bh0);
              mid = (mid + Math.imul(ah1, bl0)) | 0;
              hi = Math.imul(ah1, bh0);
              lo = (lo + Math.imul(al0, bl1)) | 0;
              mid = (mid + Math.imul(al0, bh1)) | 0;
              mid = (mid + Math.imul(ah0, bl1)) | 0;
              hi = (hi + Math.imul(ah0, bh1)) | 0;
              var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
              w1 &= 0x3ffffff;
              /* k = 2 */
              lo = Math.imul(al2, bl0);
              mid = Math.imul(al2, bh0);
              mid = (mid + Math.imul(ah2, bl0)) | 0;
              hi = Math.imul(ah2, bh0);
              lo = (lo + Math.imul(al1, bl1)) | 0;
              mid = (mid + Math.imul(al1, bh1)) | 0;
              mid = (mid + Math.imul(ah1, bl1)) | 0;
              hi = (hi + Math.imul(ah1, bh1)) | 0;
              lo = (lo + Math.imul(al0, bl2)) | 0;
              mid = (mid + Math.imul(al0, bh2)) | 0;
              mid = (mid + Math.imul(ah0, bl2)) | 0;
              hi = (hi + Math.imul(ah0, bh2)) | 0;
              var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
              w2 &= 0x3ffffff;
              /* k = 3 */
              lo = Math.imul(al3, bl0);
              mid = Math.imul(al3, bh0);
              mid = (mid + Math.imul(ah3, bl0)) | 0;
              hi = Math.imul(ah3, bh0);
              lo = (lo + Math.imul(al2, bl1)) | 0;
              mid = (mid + Math.imul(al2, bh1)) | 0;
              mid = (mid + Math.imul(ah2, bl1)) | 0;
              hi = (hi + Math.imul(ah2, bh1)) | 0;
              lo = (lo + Math.imul(al1, bl2)) | 0;
              mid = (mid + Math.imul(al1, bh2)) | 0;
              mid = (mid + Math.imul(ah1, bl2)) | 0;
              hi = (hi + Math.imul(ah1, bh2)) | 0;
              lo = (lo + Math.imul(al0, bl3)) | 0;
              mid = (mid + Math.imul(al0, bh3)) | 0;
              mid = (mid + Math.imul(ah0, bl3)) | 0;
              hi = (hi + Math.imul(ah0, bh3)) | 0;
              var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
              w3 &= 0x3ffffff;
              /* k = 4 */
              lo = Math.imul(al4, bl0);
              mid = Math.imul(al4, bh0);
              mid = (mid + Math.imul(ah4, bl0)) | 0;
              hi = Math.imul(ah4, bh0);
              lo = (lo + Math.imul(al3, bl1)) | 0;
              mid = (mid + Math.imul(al3, bh1)) | 0;
              mid = (mid + Math.imul(ah3, bl1)) | 0;
              hi = (hi + Math.imul(ah3, bh1)) | 0;
              lo = (lo + Math.imul(al2, bl2)) | 0;
              mid = (mid + Math.imul(al2, bh2)) | 0;
              mid = (mid + Math.imul(ah2, bl2)) | 0;
              hi = (hi + Math.imul(ah2, bh2)) | 0;
              lo = (lo + Math.imul(al1, bl3)) | 0;
              mid = (mid + Math.imul(al1, bh3)) | 0;
              mid = (mid + Math.imul(ah1, bl3)) | 0;
              hi = (hi + Math.imul(ah1, bh3)) | 0;
              lo = (lo + Math.imul(al0, bl4)) | 0;
              mid = (mid + Math.imul(al0, bh4)) | 0;
              mid = (mid + Math.imul(ah0, bl4)) | 0;
              hi = (hi + Math.imul(ah0, bh4)) | 0;
              var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
              w4 &= 0x3ffffff;
              /* k = 5 */
              lo = Math.imul(al5, bl0);
              mid = Math.imul(al5, bh0);
              mid = (mid + Math.imul(ah5, bl0)) | 0;
              hi = Math.imul(ah5, bh0);
              lo = (lo + Math.imul(al4, bl1)) | 0;
              mid = (mid + Math.imul(al4, bh1)) | 0;
              mid = (mid + Math.imul(ah4, bl1)) | 0;
              hi = (hi + Math.imul(ah4, bh1)) | 0;
              lo = (lo + Math.imul(al3, bl2)) | 0;
              mid = (mid + Math.imul(al3, bh2)) | 0;
              mid = (mid + Math.imul(ah3, bl2)) | 0;
              hi = (hi + Math.imul(ah3, bh2)) | 0;
              lo = (lo + Math.imul(al2, bl3)) | 0;
              mid = (mid + Math.imul(al2, bh3)) | 0;
              mid = (mid + Math.imul(ah2, bl3)) | 0;
              hi = (hi + Math.imul(ah2, bh3)) | 0;
              lo = (lo + Math.imul(al1, bl4)) | 0;
              mid = (mid + Math.imul(al1, bh4)) | 0;
              mid = (mid + Math.imul(ah1, bl4)) | 0;
              hi = (hi + Math.imul(ah1, bh4)) | 0;
              lo = (lo + Math.imul(al0, bl5)) | 0;
              mid = (mid + Math.imul(al0, bh5)) | 0;
              mid = (mid + Math.imul(ah0, bl5)) | 0;
              hi = (hi + Math.imul(ah0, bh5)) | 0;
              var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
              w5 &= 0x3ffffff;
              /* k = 6 */
              lo = Math.imul(al6, bl0);
              mid = Math.imul(al6, bh0);
              mid = (mid + Math.imul(ah6, bl0)) | 0;
              hi = Math.imul(ah6, bh0);
              lo = (lo + Math.imul(al5, bl1)) | 0;
              mid = (mid + Math.imul(al5, bh1)) | 0;
              mid = (mid + Math.imul(ah5, bl1)) | 0;
              hi = (hi + Math.imul(ah5, bh1)) | 0;
              lo = (lo + Math.imul(al4, bl2)) | 0;
              mid = (mid + Math.imul(al4, bh2)) | 0;
              mid = (mid + Math.imul(ah4, bl2)) | 0;
              hi = (hi + Math.imul(ah4, bh2)) | 0;
              lo = (lo + Math.imul(al3, bl3)) | 0;
              mid = (mid + Math.imul(al3, bh3)) | 0;
              mid = (mid + Math.imul(ah3, bl3)) | 0;
              hi = (hi + Math.imul(ah3, bh3)) | 0;
              lo = (lo + Math.imul(al2, bl4)) | 0;
              mid = (mid + Math.imul(al2, bh4)) | 0;
              mid = (mid + Math.imul(ah2, bl4)) | 0;
              hi = (hi + Math.imul(ah2, bh4)) | 0;
              lo = (lo + Math.imul(al1, bl5)) | 0;
              mid = (mid + Math.imul(al1, bh5)) | 0;
              mid = (mid + Math.imul(ah1, bl5)) | 0;
              hi = (hi + Math.imul(ah1, bh5)) | 0;
              lo = (lo + Math.imul(al0, bl6)) | 0;
              mid = (mid + Math.imul(al0, bh6)) | 0;
              mid = (mid + Math.imul(ah0, bl6)) | 0;
              hi = (hi + Math.imul(ah0, bh6)) | 0;
              var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
              w6 &= 0x3ffffff;
              /* k = 7 */
              lo = Math.imul(al7, bl0);
              mid = Math.imul(al7, bh0);
              mid = (mid + Math.imul(ah7, bl0)) | 0;
              hi = Math.imul(ah7, bh0);
              lo = (lo + Math.imul(al6, bl1)) | 0;
              mid = (mid + Math.imul(al6, bh1)) | 0;
              mid = (mid + Math.imul(ah6, bl1)) | 0;
              hi = (hi + Math.imul(ah6, bh1)) | 0;
              lo = (lo + Math.imul(al5, bl2)) | 0;
              mid = (mid + Math.imul(al5, bh2)) | 0;
              mid = (mid + Math.imul(ah5, bl2)) | 0;
              hi = (hi + Math.imul(ah5, bh2)) | 0;
              lo = (lo + Math.imul(al4, bl3)) | 0;
              mid = (mid + Math.imul(al4, bh3)) | 0;
              mid = (mid + Math.imul(ah4, bl3)) | 0;
              hi = (hi + Math.imul(ah4, bh3)) | 0;
              lo = (lo + Math.imul(al3, bl4)) | 0;
              mid = (mid + Math.imul(al3, bh4)) | 0;
              mid = (mid + Math.imul(ah3, bl4)) | 0;
              hi = (hi + Math.imul(ah3, bh4)) | 0;
              lo = (lo + Math.imul(al2, bl5)) | 0;
              mid = (mid + Math.imul(al2, bh5)) | 0;
              mid = (mid + Math.imul(ah2, bl5)) | 0;
              hi = (hi + Math.imul(ah2, bh5)) | 0;
              lo = (lo + Math.imul(al1, bl6)) | 0;
              mid = (mid + Math.imul(al1, bh6)) | 0;
              mid = (mid + Math.imul(ah1, bl6)) | 0;
              hi = (hi + Math.imul(ah1, bh6)) | 0;
              lo = (lo + Math.imul(al0, bl7)) | 0;
              mid = (mid + Math.imul(al0, bh7)) | 0;
              mid = (mid + Math.imul(ah0, bl7)) | 0;
              hi = (hi + Math.imul(ah0, bh7)) | 0;
              var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
              w7 &= 0x3ffffff;
              /* k = 8 */
              lo = Math.imul(al8, bl0);
              mid = Math.imul(al8, bh0);
              mid = (mid + Math.imul(ah8, bl0)) | 0;
              hi = Math.imul(ah8, bh0);
              lo = (lo + Math.imul(al7, bl1)) | 0;
              mid = (mid + Math.imul(al7, bh1)) | 0;
              mid = (mid + Math.imul(ah7, bl1)) | 0;
              hi = (hi + Math.imul(ah7, bh1)) | 0;
              lo = (lo + Math.imul(al6, bl2)) | 0;
              mid = (mid + Math.imul(al6, bh2)) | 0;
              mid = (mid + Math.imul(ah6, bl2)) | 0;
              hi = (hi + Math.imul(ah6, bh2)) | 0;
              lo = (lo + Math.imul(al5, bl3)) | 0;
              mid = (mid + Math.imul(al5, bh3)) | 0;
              mid = (mid + Math.imul(ah5, bl3)) | 0;
              hi = (hi + Math.imul(ah5, bh3)) | 0;
              lo = (lo + Math.imul(al4, bl4)) | 0;
              mid = (mid + Math.imul(al4, bh4)) | 0;
              mid = (mid + Math.imul(ah4, bl4)) | 0;
              hi = (hi + Math.imul(ah4, bh4)) | 0;
              lo = (lo + Math.imul(al3, bl5)) | 0;
              mid = (mid + Math.imul(al3, bh5)) | 0;
              mid = (mid + Math.imul(ah3, bl5)) | 0;
              hi = (hi + Math.imul(ah3, bh5)) | 0;
              lo = (lo + Math.imul(al2, bl6)) | 0;
              mid = (mid + Math.imul(al2, bh6)) | 0;
              mid = (mid + Math.imul(ah2, bl6)) | 0;
              hi = (hi + Math.imul(ah2, bh6)) | 0;
              lo = (lo + Math.imul(al1, bl7)) | 0;
              mid = (mid + Math.imul(al1, bh7)) | 0;
              mid = (mid + Math.imul(ah1, bl7)) | 0;
              hi = (hi + Math.imul(ah1, bh7)) | 0;
              lo = (lo + Math.imul(al0, bl8)) | 0;
              mid = (mid + Math.imul(al0, bh8)) | 0;
              mid = (mid + Math.imul(ah0, bl8)) | 0;
              hi = (hi + Math.imul(ah0, bh8)) | 0;
              var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
              w8 &= 0x3ffffff;
              /* k = 9 */
              lo = Math.imul(al9, bl0);
              mid = Math.imul(al9, bh0);
              mid = (mid + Math.imul(ah9, bl0)) | 0;
              hi = Math.imul(ah9, bh0);
              lo = (lo + Math.imul(al8, bl1)) | 0;
              mid = (mid + Math.imul(al8, bh1)) | 0;
              mid = (mid + Math.imul(ah8, bl1)) | 0;
              hi = (hi + Math.imul(ah8, bh1)) | 0;
              lo = (lo + Math.imul(al7, bl2)) | 0;
              mid = (mid + Math.imul(al7, bh2)) | 0;
              mid = (mid + Math.imul(ah7, bl2)) | 0;
              hi = (hi + Math.imul(ah7, bh2)) | 0;
              lo = (lo + Math.imul(al6, bl3)) | 0;
              mid = (mid + Math.imul(al6, bh3)) | 0;
              mid = (mid + Math.imul(ah6, bl3)) | 0;
              hi = (hi + Math.imul(ah6, bh3)) | 0;
              lo = (lo + Math.imul(al5, bl4)) | 0;
              mid = (mid + Math.imul(al5, bh4)) | 0;
              mid = (mid + Math.imul(ah5, bl4)) | 0;
              hi = (hi + Math.imul(ah5, bh4)) | 0;
              lo = (lo + Math.imul(al4, bl5)) | 0;
              mid = (mid + Math.imul(al4, bh5)) | 0;
              mid = (mid + Math.imul(ah4, bl5)) | 0;
              hi = (hi + Math.imul(ah4, bh5)) | 0;
              lo = (lo + Math.imul(al3, bl6)) | 0;
              mid = (mid + Math.imul(al3, bh6)) | 0;
              mid = (mid + Math.imul(ah3, bl6)) | 0;
              hi = (hi + Math.imul(ah3, bh6)) | 0;
              lo = (lo + Math.imul(al2, bl7)) | 0;
              mid = (mid + Math.imul(al2, bh7)) | 0;
              mid = (mid + Math.imul(ah2, bl7)) | 0;
              hi = (hi + Math.imul(ah2, bh7)) | 0;
              lo = (lo + Math.imul(al1, bl8)) | 0;
              mid = (mid + Math.imul(al1, bh8)) | 0;
              mid = (mid + Math.imul(ah1, bl8)) | 0;
              hi = (hi + Math.imul(ah1, bh8)) | 0;
              lo = (lo + Math.imul(al0, bl9)) | 0;
              mid = (mid + Math.imul(al0, bh9)) | 0;
              mid = (mid + Math.imul(ah0, bl9)) | 0;
              hi = (hi + Math.imul(ah0, bh9)) | 0;
              var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
              w9 &= 0x3ffffff;
              /* k = 10 */
              lo = Math.imul(al9, bl1);
              mid = Math.imul(al9, bh1);
              mid = (mid + Math.imul(ah9, bl1)) | 0;
              hi = Math.imul(ah9, bh1);
              lo = (lo + Math.imul(al8, bl2)) | 0;
              mid = (mid + Math.imul(al8, bh2)) | 0;
              mid = (mid + Math.imul(ah8, bl2)) | 0;
              hi = (hi + Math.imul(ah8, bh2)) | 0;
              lo = (lo + Math.imul(al7, bl3)) | 0;
              mid = (mid + Math.imul(al7, bh3)) | 0;
              mid = (mid + Math.imul(ah7, bl3)) | 0;
              hi = (hi + Math.imul(ah7, bh3)) | 0;
              lo = (lo + Math.imul(al6, bl4)) | 0;
              mid = (mid + Math.imul(al6, bh4)) | 0;
              mid = (mid + Math.imul(ah6, bl4)) | 0;
              hi = (hi + Math.imul(ah6, bh4)) | 0;
              lo = (lo + Math.imul(al5, bl5)) | 0;
              mid = (mid + Math.imul(al5, bh5)) | 0;
              mid = (mid + Math.imul(ah5, bl5)) | 0;
              hi = (hi + Math.imul(ah5, bh5)) | 0;
              lo = (lo + Math.imul(al4, bl6)) | 0;
              mid = (mid + Math.imul(al4, bh6)) | 0;
              mid = (mid + Math.imul(ah4, bl6)) | 0;
              hi = (hi + Math.imul(ah4, bh6)) | 0;
              lo = (lo + Math.imul(al3, bl7)) | 0;
              mid = (mid + Math.imul(al3, bh7)) | 0;
              mid = (mid + Math.imul(ah3, bl7)) | 0;
              hi = (hi + Math.imul(ah3, bh7)) | 0;
              lo = (lo + Math.imul(al2, bl8)) | 0;
              mid = (mid + Math.imul(al2, bh8)) | 0;
              mid = (mid + Math.imul(ah2, bl8)) | 0;
              hi = (hi + Math.imul(ah2, bh8)) | 0;
              lo = (lo + Math.imul(al1, bl9)) | 0;
              mid = (mid + Math.imul(al1, bh9)) | 0;
              mid = (mid + Math.imul(ah1, bl9)) | 0;
              hi = (hi + Math.imul(ah1, bh9)) | 0;
              var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
              w10 &= 0x3ffffff;
              /* k = 11 */
              lo = Math.imul(al9, bl2);
              mid = Math.imul(al9, bh2);
              mid = (mid + Math.imul(ah9, bl2)) | 0;
              hi = Math.imul(ah9, bh2);
              lo = (lo + Math.imul(al8, bl3)) | 0;
              mid = (mid + Math.imul(al8, bh3)) | 0;
              mid = (mid + Math.imul(ah8, bl3)) | 0;
              hi = (hi + Math.imul(ah8, bh3)) | 0;
              lo = (lo + Math.imul(al7, bl4)) | 0;
              mid = (mid + Math.imul(al7, bh4)) | 0;
              mid = (mid + Math.imul(ah7, bl4)) | 0;
              hi = (hi + Math.imul(ah7, bh4)) | 0;
              lo = (lo + Math.imul(al6, bl5)) | 0;
              mid = (mid + Math.imul(al6, bh5)) | 0;
              mid = (mid + Math.imul(ah6, bl5)) | 0;
              hi = (hi + Math.imul(ah6, bh5)) | 0;
              lo = (lo + Math.imul(al5, bl6)) | 0;
              mid = (mid + Math.imul(al5, bh6)) | 0;
              mid = (mid + Math.imul(ah5, bl6)) | 0;
              hi = (hi + Math.imul(ah5, bh6)) | 0;
              lo = (lo + Math.imul(al4, bl7)) | 0;
              mid = (mid + Math.imul(al4, bh7)) | 0;
              mid = (mid + Math.imul(ah4, bl7)) | 0;
              hi = (hi + Math.imul(ah4, bh7)) | 0;
              lo = (lo + Math.imul(al3, bl8)) | 0;
              mid = (mid + Math.imul(al3, bh8)) | 0;
              mid = (mid + Math.imul(ah3, bl8)) | 0;
              hi = (hi + Math.imul(ah3, bh8)) | 0;
              lo = (lo + Math.imul(al2, bl9)) | 0;
              mid = (mid + Math.imul(al2, bh9)) | 0;
              mid = (mid + Math.imul(ah2, bl9)) | 0;
              hi = (hi + Math.imul(ah2, bh9)) | 0;
              var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
              w11 &= 0x3ffffff;
              /* k = 12 */
              lo = Math.imul(al9, bl3);
              mid = Math.imul(al9, bh3);
              mid = (mid + Math.imul(ah9, bl3)) | 0;
              hi = Math.imul(ah9, bh3);
              lo = (lo + Math.imul(al8, bl4)) | 0;
              mid = (mid + Math.imul(al8, bh4)) | 0;
              mid = (mid + Math.imul(ah8, bl4)) | 0;
              hi = (hi + Math.imul(ah8, bh4)) | 0;
              lo = (lo + Math.imul(al7, bl5)) | 0;
              mid = (mid + Math.imul(al7, bh5)) | 0;
              mid = (mid + Math.imul(ah7, bl5)) | 0;
              hi = (hi + Math.imul(ah7, bh5)) | 0;
              lo = (lo + Math.imul(al6, bl6)) | 0;
              mid = (mid + Math.imul(al6, bh6)) | 0;
              mid = (mid + Math.imul(ah6, bl6)) | 0;
              hi = (hi + Math.imul(ah6, bh6)) | 0;
              lo = (lo + Math.imul(al5, bl7)) | 0;
              mid = (mid + Math.imul(al5, bh7)) | 0;
              mid = (mid + Math.imul(ah5, bl7)) | 0;
              hi = (hi + Math.imul(ah5, bh7)) | 0;
              lo = (lo + Math.imul(al4, bl8)) | 0;
              mid = (mid + Math.imul(al4, bh8)) | 0;
              mid = (mid + Math.imul(ah4, bl8)) | 0;
              hi = (hi + Math.imul(ah4, bh8)) | 0;
              lo = (lo + Math.imul(al3, bl9)) | 0;
              mid = (mid + Math.imul(al3, bh9)) | 0;
              mid = (mid + Math.imul(ah3, bl9)) | 0;
              hi = (hi + Math.imul(ah3, bh9)) | 0;
              var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
              w12 &= 0x3ffffff;
              /* k = 13 */
              lo = Math.imul(al9, bl4);
              mid = Math.imul(al9, bh4);
              mid = (mid + Math.imul(ah9, bl4)) | 0;
              hi = Math.imul(ah9, bh4);
              lo = (lo + Math.imul(al8, bl5)) | 0;
              mid = (mid + Math.imul(al8, bh5)) | 0;
              mid = (mid + Math.imul(ah8, bl5)) | 0;
              hi = (hi + Math.imul(ah8, bh5)) | 0;
              lo = (lo + Math.imul(al7, bl6)) | 0;
              mid = (mid + Math.imul(al7, bh6)) | 0;
              mid = (mid + Math.imul(ah7, bl6)) | 0;
              hi = (hi + Math.imul(ah7, bh6)) | 0;
              lo = (lo + Math.imul(al6, bl7)) | 0;
              mid = (mid + Math.imul(al6, bh7)) | 0;
              mid = (mid + Math.imul(ah6, bl7)) | 0;
              hi = (hi + Math.imul(ah6, bh7)) | 0;
              lo = (lo + Math.imul(al5, bl8)) | 0;
              mid = (mid + Math.imul(al5, bh8)) | 0;
              mid = (mid + Math.imul(ah5, bl8)) | 0;
              hi = (hi + Math.imul(ah5, bh8)) | 0;
              lo = (lo + Math.imul(al4, bl9)) | 0;
              mid = (mid + Math.imul(al4, bh9)) | 0;
              mid = (mid + Math.imul(ah4, bl9)) | 0;
              hi = (hi + Math.imul(ah4, bh9)) | 0;
              var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
              w13 &= 0x3ffffff;
              /* k = 14 */
              lo = Math.imul(al9, bl5);
              mid = Math.imul(al9, bh5);
              mid = (mid + Math.imul(ah9, bl5)) | 0;
              hi = Math.imul(ah9, bh5);
              lo = (lo + Math.imul(al8, bl6)) | 0;
              mid = (mid + Math.imul(al8, bh6)) | 0;
              mid = (mid + Math.imul(ah8, bl6)) | 0;
              hi = (hi + Math.imul(ah8, bh6)) | 0;
              lo = (lo + Math.imul(al7, bl7)) | 0;
              mid = (mid + Math.imul(al7, bh7)) | 0;
              mid = (mid + Math.imul(ah7, bl7)) | 0;
              hi = (hi + Math.imul(ah7, bh7)) | 0;
              lo = (lo + Math.imul(al6, bl8)) | 0;
              mid = (mid + Math.imul(al6, bh8)) | 0;
              mid = (mid + Math.imul(ah6, bl8)) | 0;
              hi = (hi + Math.imul(ah6, bh8)) | 0;
              lo = (lo + Math.imul(al5, bl9)) | 0;
              mid = (mid + Math.imul(al5, bh9)) | 0;
              mid = (mid + Math.imul(ah5, bl9)) | 0;
              hi = (hi + Math.imul(ah5, bh9)) | 0;
              var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
              w14 &= 0x3ffffff;
              /* k = 15 */
              lo = Math.imul(al9, bl6);
              mid = Math.imul(al9, bh6);
              mid = (mid + Math.imul(ah9, bl6)) | 0;
              hi = Math.imul(ah9, bh6);
              lo = (lo + Math.imul(al8, bl7)) | 0;
              mid = (mid + Math.imul(al8, bh7)) | 0;
              mid = (mid + Math.imul(ah8, bl7)) | 0;
              hi = (hi + Math.imul(ah8, bh7)) | 0;
              lo = (lo + Math.imul(al7, bl8)) | 0;
              mid = (mid + Math.imul(al7, bh8)) | 0;
              mid = (mid + Math.imul(ah7, bl8)) | 0;
              hi = (hi + Math.imul(ah7, bh8)) | 0;
              lo = (lo + Math.imul(al6, bl9)) | 0;
              mid = (mid + Math.imul(al6, bh9)) | 0;
              mid = (mid + Math.imul(ah6, bl9)) | 0;
              hi = (hi + Math.imul(ah6, bh9)) | 0;
              var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
              w15 &= 0x3ffffff;
              /* k = 16 */
              lo = Math.imul(al9, bl7);
              mid = Math.imul(al9, bh7);
              mid = (mid + Math.imul(ah9, bl7)) | 0;
              hi = Math.imul(ah9, bh7);
              lo = (lo + Math.imul(al8, bl8)) | 0;
              mid = (mid + Math.imul(al8, bh8)) | 0;
              mid = (mid + Math.imul(ah8, bl8)) | 0;
              hi = (hi + Math.imul(ah8, bh8)) | 0;
              lo = (lo + Math.imul(al7, bl9)) | 0;
              mid = (mid + Math.imul(al7, bh9)) | 0;
              mid = (mid + Math.imul(ah7, bl9)) | 0;
              hi = (hi + Math.imul(ah7, bh9)) | 0;
              var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
              w16 &= 0x3ffffff;
              /* k = 17 */
              lo = Math.imul(al9, bl8);
              mid = Math.imul(al9, bh8);
              mid = (mid + Math.imul(ah9, bl8)) | 0;
              hi = Math.imul(ah9, bh8);
              lo = (lo + Math.imul(al8, bl9)) | 0;
              mid = (mid + Math.imul(al8, bh9)) | 0;
              mid = (mid + Math.imul(ah8, bl9)) | 0;
              hi = (hi + Math.imul(ah8, bh9)) | 0;
              var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
              w17 &= 0x3ffffff;
              /* k = 18 */
              lo = Math.imul(al9, bl9);
              mid = Math.imul(al9, bh9);
              mid = (mid + Math.imul(ah9, bl9)) | 0;
              hi = Math.imul(ah9, bh9);
              var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
              w18 &= 0x3ffffff;
              o[0] = w0;
              o[1] = w1;
              o[2] = w2;
              o[3] = w3;
              o[4] = w4;
              o[5] = w5;
              o[6] = w6;
              o[7] = w7;
              o[8] = w8;
              o[9] = w9;
              o[10] = w10;
              o[11] = w11;
              o[12] = w12;
              o[13] = w13;
              o[14] = w14;
              o[15] = w15;
              o[16] = w16;
              o[17] = w17;
              o[18] = w18;
              if (c !== 0) {
                o[19] = c;
                out.length++;
              }
              return out;
            };

            // Polyfill comb
            if (!Math.imul) {
              comb10MulTo = smallMulTo;
            }

            function bigMulTo(self, num, out) {
              out.negative = num.negative ^ self.negative;
              out.length = self.length + num.length;

              var carry = 0;
              var hncarry = 0;
              for (var k = 0; k < out.length - 1; k++) {
                // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                // note that ncarry could be >= 0x3ffffff
                var ncarry = hncarry;
                hncarry = 0;
                var rword = carry & 0x3ffffff;
                var maxJ = Math.min(k, num.length - 1);
                for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                  var i = k - j;
                  var a = self.words[i] | 0;
                  var b = num.words[j] | 0;
                  var r = a * b;

                  var lo = r & 0x3ffffff;
                  ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                  lo = (lo + rword) | 0;
                  rword = lo & 0x3ffffff;
                  ncarry = (ncarry + (lo >>> 26)) | 0;

                  hncarry += ncarry >>> 26;
                  ncarry &= 0x3ffffff;
                }
                out.words[k] = rword;
                carry = ncarry;
                ncarry = hncarry;
              }
              if (carry !== 0) {
                out.words[k] = carry;
              } else {
                out.length--;
              }

              return out.strip();
            }

            function jumboMulTo(self, num, out) {
              var fftm = new FFTM();
              return fftm.mulp(self, num, out);
            }

            BN.prototype.mulTo = function mulTo(num, out) {
              var res;
              var len = this.length + num.length;
              if (this.length === 10 && num.length === 10) {
                res = comb10MulTo(this, num, out);
              } else if (len < 63) {
                res = smallMulTo(this, num, out);
              } else if (len < 1024) {
                res = bigMulTo(this, num, out);
              } else {
                res = jumboMulTo(this, num, out);
              }

              return res;
            };

            // Cooley-Tukey algorithm for FFT
            // slightly revisited to rely on looping instead of recursion

            function FFTM(x, y) {
              this.x = x;
              this.y = y;
            }

            FFTM.prototype.makeRBT = function makeRBT(N) {
              var t = new Array(N);
              var l = BN.prototype._countBits(N) - 1;
              for (var i = 0; i < N; i++) {
                t[i] = this.revBin(i, l, N);
              }

              return t;
            };

            // Returns binary-reversed representation of `x`
            FFTM.prototype.revBin = function revBin(x, l, N) {
              if (x === 0 || x === N - 1) return x;

              var rb = 0;
              for (var i = 0; i < l; i++) {
                rb |= (x & 1) << (l - i - 1);
                x >>= 1;
              }

              return rb;
            };

            // Performs "tweedling" phase, therefore 'emulating'
            // behaviour of the recursive algorithm
            FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
              for (var i = 0; i < N; i++) {
                rtws[i] = rws[rbt[i]];
                itws[i] = iws[rbt[i]];
              }
            };

            FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
              this.permute(rbt, rws, iws, rtws, itws, N);

              for (var s = 1; s < N; s <<= 1) {
                var l = s << 1;

                var rtwdf = Math.cos(2 * Math.PI / l);
                var itwdf = Math.sin(2 * Math.PI / l);

                for (var p = 0; p < N; p += l) {
                  var rtwdf_ = rtwdf;
                  var itwdf_ = itwdf;

                  for (var j = 0; j < s; j++) {
                    var re = rtws[p + j];
                    var ie = itws[p + j];

                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];

                    var rx = rtwdf_ * ro - itwdf_ * io;

                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;

                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;

                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;

                    /* jshint maxdepth : false */
                    if (j !== l) {
                      rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                      itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                      rtwdf_ = rx;
                    }
                  }
                }
              }
            };

            FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
              var N = Math.max(m, n) | 1;
              var odd = N & 1;
              var i = 0;
              for (N = N / 2 | 0; N; N = N >>> 1) {
                i++;
              }

              return 1 << i + 1 + odd;
            };

            FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
              if (N <= 1) return;

              for (var i = 0; i < N / 2; i++) {
                var t = rws[i];

                rws[i] = rws[N - i - 1];
                rws[N - i - 1] = t;

                t = iws[i];

                iws[i] = -iws[N - i - 1];
                iws[N - i - 1] = -t;
              }
            };

            FFTM.prototype.normalize13b = function normalize13b(ws, N) {
              var carry = 0;
              for (var i = 0; i < N / 2; i++) {
                var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
                  Math.round(ws[2 * i] / N) +
                  carry;

                ws[i] = w & 0x3ffffff;

                if (w < 0x4000000) {
                  carry = 0;
                } else {
                  carry = w / 0x4000000 | 0;
                }
              }

              return ws;
            };

            FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
              var carry = 0;
              for (var i = 0; i < len; i++) {
                carry = carry + (ws[i] | 0);

                rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
                rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
              }

              // Pad with zeroes
              for (i = 2 * len; i < N; ++i) {
                rws[i] = 0;
              }

              assert(carry === 0);
              assert((carry & ~0x1fff) === 0);
            };

            FFTM.prototype.stub = function stub(N) {
              var ph = new Array(N);
              for (var i = 0; i < N; i++) {
                ph[i] = 0;
              }

              return ph;
            };

            FFTM.prototype.mulp = function mulp(x, y, out) {
              var N = 2 * this.guessLen13b(x.length, y.length);

              var rbt = this.makeRBT(N);

              var _ = this.stub(N);

              var rws = new Array(N);
              var rwst = new Array(N);
              var iwst = new Array(N);

              var nrws = new Array(N);
              var nrwst = new Array(N);
              var niwst = new Array(N);

              var rmws = out.words;
              rmws.length = N;

              this.convert13b(x.words, x.length, rws, N);
              this.convert13b(y.words, y.length, nrws, N);

              this.transform(rws, _, rwst, iwst, N, rbt);
              this.transform(nrws, _, nrwst, niwst, N, rbt);

              for (var i = 0; i < N; i++) {
                var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                rwst[i] = rx;
              }

              this.conjugate(rwst, iwst, N);
              this.transform(rwst, iwst, rmws, _, N, rbt);
              this.conjugate(rmws, _, N);
              this.normalize13b(rmws, N);

              out.negative = x.negative ^ y.negative;
              out.length = x.length + y.length;
              return out.strip();
            };

            // Multiply `this` by `num`
            BN.prototype.mul = function mul(num) {
              var out = new BN(null);
              out.words = new Array(this.length + num.length);
              return this.mulTo(num, out);
            };

            // Multiply employing FFT
            BN.prototype.mulf = function mulf(num) {
              var out = new BN(null);
              out.words = new Array(this.length + num.length);
              return jumboMulTo(this, num, out);
            };

            // In-place Multiplication
            BN.prototype.imul = function imul(num) {
              return this.clone().mulTo(num, this);
            };

            BN.prototype.imuln = function imuln(num) {
              assert(typeof num === 'number');
              assert(num < 0x4000000);

              // Carry
              var carry = 0;
              for (var i = 0; i < this.length; i++) {
                var w = (this.words[i] | 0) * num;
                var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                carry >>= 26;
                carry += (w / 0x4000000) | 0;
                // NOTE: lo is 27bit maximum
                carry += lo >>> 26;
                this.words[i] = lo & 0x3ffffff;
              }

              if (carry !== 0) {
                this.words[i] = carry;
                this.length++;
              }

              return this;
            };

            BN.prototype.muln = function muln(num) {
              return this.clone().imuln(num);
            };

            // `this` * `this`
            BN.prototype.sqr = function sqr() {
              return this.mul(this);
            };

            // `this` * `this` in-place
            BN.prototype.isqr = function isqr() {
              return this.imul(this.clone());
            };

            // Math.pow(`this`, `num`)
            BN.prototype.pow = function pow(num) {
              var w = toBitArray(num);
              if (w.length === 0) return new BN(1);

              // Skip leading zeroes
              var res = this;
              for (var i = 0; i < w.length; i++ , res = res.sqr()) {
                if (w[i] !== 0) break;
              }

              if (++i < w.length) {
                for (var q = res.sqr(); i < w.length; i++ , q = q.sqr()) {
                  if (w[i] === 0) continue;

                  res = res.mul(q);
                }
              }

              return res;
            };

            // Shift-left in-place
            BN.prototype.iushln = function iushln(bits) {
              assert(typeof bits === 'number' && bits >= 0);
              var r = bits % 26;
              var s = (bits - r) / 26;
              var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
              var i;

              if (r !== 0) {
                var carry = 0;

                for (i = 0; i < this.length; i++) {
                  var newCarry = this.words[i] & carryMask;
                  var c = ((this.words[i] | 0) - newCarry) << r;
                  this.words[i] = c | carry;
                  carry = newCarry >>> (26 - r);
                }

                if (carry) {
                  this.words[i] = carry;
                  this.length++;
                }
              }

              if (s !== 0) {
                for (i = this.length - 1; i >= 0; i--) {
                  this.words[i + s] = this.words[i];
                }

                for (i = 0; i < s; i++) {
                  this.words[i] = 0;
                }

                this.length += s;
              }

              return this.strip();
            };

            BN.prototype.ishln = function ishln(bits) {
              // TODO(indutny): implement me
              assert(this.negative === 0);
              return this.iushln(bits);
            };

            // Shift-right in-place
            // NOTE: `hint` is a lowest bit before trailing zeroes
            // NOTE: if `extended` is present - it will be filled with destroyed bits
            BN.prototype.iushrn = function iushrn(bits, hint, extended) {
              assert(typeof bits === 'number' && bits >= 0);
              var h;
              if (hint) {
                h = (hint - (hint % 26)) / 26;
              } else {
                h = 0;
              }

              var r = bits % 26;
              var s = Math.min((bits - r) / 26, this.length);
              var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
              var maskedWords = extended;

              h -= s;
              h = Math.max(0, h);

              // Extended mode, copy masked part
              if (maskedWords) {
                for (var i = 0; i < s; i++) {
                  maskedWords.words[i] = this.words[i];
                }
                maskedWords.length = s;
              }

              if (s === 0) {
                // No-op, we should not move anything at all
              } else if (this.length > s) {
                this.length -= s;
                for (i = 0; i < this.length; i++) {
                  this.words[i] = this.words[i + s];
                }
              } else {
                this.words[0] = 0;
                this.length = 1;
              }

              var carry = 0;
              for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
                var word = this.words[i] | 0;
                this.words[i] = (carry << (26 - r)) | (word >>> r);
                carry = word & mask;
              }

              // Push carried bits as a mask
              if (maskedWords && carry !== 0) {
                maskedWords.words[maskedWords.length++] = carry;
              }

              if (this.length === 0) {
                this.words[0] = 0;
                this.length = 1;
              }

              return this.strip();
            };

            BN.prototype.ishrn = function ishrn(bits, hint, extended) {
              // TODO(indutny): implement me
              assert(this.negative === 0);
              return this.iushrn(bits, hint, extended);
            };

            // Shift-left
            BN.prototype.shln = function shln(bits) {
              return this.clone().ishln(bits);
            };

            BN.prototype.ushln = function ushln(bits) {
              return this.clone().iushln(bits);
            };

            // Shift-right
            BN.prototype.shrn = function shrn(bits) {
              return this.clone().ishrn(bits);
            };

            BN.prototype.ushrn = function ushrn(bits) {
              return this.clone().iushrn(bits);
            };

            // Test if n bit is set
            BN.prototype.testn = function testn(bit) {
              assert(typeof bit === 'number' && bit >= 0);
              var r = bit % 26;
              var s = (bit - r) / 26;
              var q = 1 << r;

              // Fast case: bit is much higher than all existing words
              if (this.length <= s) return false;

              // Check bit and return
              var w = this.words[s];

              return !!(w & q);
            };

            // Return only lowers bits of number (in-place)
            BN.prototype.imaskn = function imaskn(bits) {
              assert(typeof bits === 'number' && bits >= 0);
              var r = bits % 26;
              var s = (bits - r) / 26;

              assert(this.negative === 0, 'imaskn works only with positive numbers');

              if (this.length <= s) {
                return this;
              }

              if (r !== 0) {
                s++;
              }
              this.length = Math.min(s, this.length);

              if (r !== 0) {
                var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                this.words[this.length - 1] &= mask;
              }

              return this.strip();
            };

            // Return only lowers bits of number
            BN.prototype.maskn = function maskn(bits) {
              return this.clone().imaskn(bits);
            };

            // Add plain number `num` to `this`
            BN.prototype.iaddn = function iaddn(num) {
              assert(typeof num === 'number');
              assert(num < 0x4000000);
              if (num < 0) return this.isubn(-num);

              // Possible sign change
              if (this.negative !== 0) {
                if (this.length === 1 && (this.words[0] | 0) < num) {
                  this.words[0] = num - (this.words[0] | 0);
                  this.negative = 0;
                  return this;
                }

                this.negative = 0;
                this.isubn(num);
                this.negative = 1;
                return this;
              }

              // Add without checks
              return this._iaddn(num);
            };

            BN.prototype._iaddn = function _iaddn(num) {
              this.words[0] += num;

              // Carry
              for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
                this.words[i] -= 0x4000000;
                if (i === this.length - 1) {
                  this.words[i + 1] = 1;
                } else {
                  this.words[i + 1]++;
                }
              }
              this.length = Math.max(this.length, i + 1);

              return this;
            };

            // Subtract plain number `num` from `this`
            BN.prototype.isubn = function isubn(num) {
              assert(typeof num === 'number');
              assert(num < 0x4000000);
              if (num < 0) return this.iaddn(-num);

              if (this.negative !== 0) {
                this.negative = 0;
                this.iaddn(num);
                this.negative = 1;
                return this;
              }

              this.words[0] -= num;

              if (this.length === 1 && this.words[0] < 0) {
                this.words[0] = -this.words[0];
                this.negative = 1;
              } else {
                // Carry
                for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                  this.words[i] += 0x4000000;
                  this.words[i + 1] -= 1;
                }
              }

              return this.strip();
            };

            BN.prototype.addn = function addn(num) {
              return this.clone().iaddn(num);
            };

            BN.prototype.subn = function subn(num) {
              return this.clone().isubn(num);
            };

            BN.prototype.iabs = function iabs() {
              this.negative = 0;

              return this;
            };

            BN.prototype.abs = function abs() {
              return this.clone().iabs();
            };

            BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
              var len = num.length + shift;
              var i;

              this._expand(len);

              var w;
              var carry = 0;
              for (i = 0; i < num.length; i++) {
                w = (this.words[i + shift] | 0) + carry;
                var right = (num.words[i] | 0) * mul;
                w -= right & 0x3ffffff;
                carry = (w >> 26) - ((right / 0x4000000) | 0);
                this.words[i + shift] = w & 0x3ffffff;
              }
              for (; i < this.length - shift; i++) {
                w = (this.words[i + shift] | 0) + carry;
                carry = w >> 26;
                this.words[i + shift] = w & 0x3ffffff;
              }

              if (carry === 0) return this.strip();

              // Subtraction overflow
              assert(carry === -1);
              carry = 0;
              for (i = 0; i < this.length; i++) {
                w = -(this.words[i] | 0) + carry;
                carry = w >> 26;
                this.words[i] = w & 0x3ffffff;
              }
              this.negative = 1;

              return this.strip();
            };

            BN.prototype._wordDiv = function _wordDiv(num, mode) {
              var shift = this.length - num.length;

              var a = this.clone();
              var b = num;

              // Normalize
              var bhi = b.words[b.length - 1] | 0;
              var bhiBits = this._countBits(bhi);
              shift = 26 - bhiBits;
              if (shift !== 0) {
                b = b.ushln(shift);
                a.iushln(shift);
                bhi = b.words[b.length - 1] | 0;
              }

              // Initialize quotient
              var m = a.length - b.length;
              var q;

              if (mode !== 'mod') {
                q = new BN(null);
                q.length = m + 1;
                q.words = new Array(q.length);
                for (var i = 0; i < q.length; i++) {
                  q.words[i] = 0;
                }
              }

              var diff = a.clone()._ishlnsubmul(b, 1, m);
              if (diff.negative === 0) {
                a = diff;
                if (q) {
                  q.words[m] = 1;
                }
              }

              for (var j = m - 1; j >= 0; j--) {
                var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                  (a.words[b.length + j - 1] | 0);

                // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                // (0x7ffffff)
                qj = Math.min((qj / bhi) | 0, 0x3ffffff);

                a._ishlnsubmul(b, qj, j);
                while (a.negative !== 0) {
                  qj--;
                  a.negative = 0;
                  a._ishlnsubmul(b, 1, j);
                  if (!a.isZero()) {
                    a.negative ^= 1;
                  }
                }
                if (q) {
                  q.words[j] = qj;
                }
              }
              if (q) {
                q.strip();
              }
              a.strip();

              // Denormalize
              if (mode !== 'div' && shift !== 0) {
                a.iushrn(shift);
              }

              return {
                div: q || null,
                mod: a
              };
            };

            // NOTE: 1) `mode` can be set to `mod` to request mod only,
            //       to `div` to request div only, or be absent to
            //       request both div & mod
            //       2) `positive` is true if unsigned mod is requested
            BN.prototype.divmod = function divmod(num, mode, positive) {
              assert(!num.isZero());

              if (this.isZero()) {
                return {
                  div: new BN(0),
                  mod: new BN(0)
                };
              }

              var div, mod, res;
              if (this.negative !== 0 && num.negative === 0) {
                res = this.neg().divmod(num, mode);

                if (mode !== 'mod') {
                  div = res.div.neg();
                }

                if (mode !== 'div') {
                  mod = res.mod.neg();
                  if (positive && mod.negative !== 0) {
                    mod.iadd(num);
                  }
                }

                return {
                  div: div,
                  mod: mod
                };
              }

              if (this.negative === 0 && num.negative !== 0) {
                res = this.divmod(num.neg(), mode);

                if (mode !== 'mod') {
                  div = res.div.neg();
                }

                return {
                  div: div,
                  mod: res.mod
                };
              }

              if ((this.negative & num.negative) !== 0) {
                res = this.neg().divmod(num.neg(), mode);

                if (mode !== 'div') {
                  mod = res.mod.neg();
                  if (positive && mod.negative !== 0) {
                    mod.isub(num);
                  }
                }

                return {
                  div: res.div,
                  mod: mod
                };
              }

              // Both numbers are positive at this point

              // Strip both numbers to approximate shift value
              if (num.length > this.length || this.cmp(num) < 0) {
                return {
                  div: new BN(0),
                  mod: this
                };
              }

              // Very short reduction
              if (num.length === 1) {
                if (mode === 'div') {
                  return {
                    div: this.divn(num.words[0]),
                    mod: null
                  };
                }

                if (mode === 'mod') {
                  return {
                    div: null,
                    mod: new BN(this.modn(num.words[0]))
                  };
                }

                return {
                  div: this.divn(num.words[0]),
                  mod: new BN(this.modn(num.words[0]))
                };
              }

              return this._wordDiv(num, mode);
            };

            // Find `this` / `num`
            BN.prototype.div = function div(num) {
              return this.divmod(num, 'div', false).div;
            };

            // Find `this` % `num`
            BN.prototype.mod = function mod(num) {
              return this.divmod(num, 'mod', false).mod;
            };

            BN.prototype.umod = function umod(num) {
              return this.divmod(num, 'mod', true).mod;
            };

            // Find Round(`this` / `num`)
            BN.prototype.divRound = function divRound(num) {
              var dm = this.divmod(num);

              // Fast case - exact division
              if (dm.mod.isZero()) return dm.div;

              var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

              var half = num.ushrn(1);
              var r2 = num.andln(1);
              var cmp = mod.cmp(half);

              // Round down
              if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

              // Round up
              return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
            };

            BN.prototype.modn = function modn(num) {
              assert(num <= 0x3ffffff);
              var p = (1 << 26) % num;

              var acc = 0;
              for (var i = this.length - 1; i >= 0; i--) {
                acc = (p * acc + (this.words[i] | 0)) % num;
              }

              return acc;
            };

            // In-place division by number
            BN.prototype.idivn = function idivn(num) {
              assert(num <= 0x3ffffff);

              var carry = 0;
              for (var i = this.length - 1; i >= 0; i--) {
                var w = (this.words[i] | 0) + carry * 0x4000000;
                this.words[i] = (w / num) | 0;
                carry = w % num;
              }

              return this.strip();
            };

            BN.prototype.divn = function divn(num) {
              return this.clone().idivn(num);
            };

            BN.prototype.egcd = function egcd(p) {
              assert(p.negative === 0);
              assert(!p.isZero());

              var x = this;
              var y = p.clone();

              if (x.negative !== 0) {
                x = x.umod(p);
              } else {
                x = x.clone();
              }

              // A * x + B * y = x
              var A = new BN(1);
              var B = new BN(0);

              // C * x + D * y = y
              var C = new BN(0);
              var D = new BN(1);

              var g = 0;

              while (x.isEven() && y.isEven()) {
                x.iushrn(1);
                y.iushrn(1);
                ++g;
              }

              var yp = y.clone();
              var xp = x.clone();

              while (!x.isZero()) {
                for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                if (i > 0) {
                  x.iushrn(i);
                  while (i-- > 0) {
                    if (A.isOdd() || B.isOdd()) {
                      A.iadd(yp);
                      B.isub(xp);
                    }

                    A.iushrn(1);
                    B.iushrn(1);
                  }
                }

                for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                if (j > 0) {
                  y.iushrn(j);
                  while (j-- > 0) {
                    if (C.isOdd() || D.isOdd()) {
                      C.iadd(yp);
                      D.isub(xp);
                    }

                    C.iushrn(1);
                    D.iushrn(1);
                  }
                }

                if (x.cmp(y) >= 0) {
                  x.isub(y);
                  A.isub(C);
                  B.isub(D);
                } else {
                  y.isub(x);
                  C.isub(A);
                  D.isub(B);
                }
              }

              return {
                a: C,
                b: D,
                gcd: y.iushln(g)
              };
            };

            // This is reduced incarnation of the binary EEA
            // above, designated to invert members of the
            // _prime_ fields F(p) at a maximal speed
            BN.prototype._invmp = function _invmp(p) {
              assert(p.negative === 0);
              assert(!p.isZero());

              var a = this;
              var b = p.clone();

              if (a.negative !== 0) {
                a = a.umod(p);
              } else {
                a = a.clone();
              }

              var x1 = new BN(1);
              var x2 = new BN(0);

              var delta = b.clone();

              while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                if (i > 0) {
                  a.iushrn(i);
                  while (i-- > 0) {
                    if (x1.isOdd()) {
                      x1.iadd(delta);
                    }

                    x1.iushrn(1);
                  }
                }

                for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                if (j > 0) {
                  b.iushrn(j);
                  while (j-- > 0) {
                    if (x2.isOdd()) {
                      x2.iadd(delta);
                    }

                    x2.iushrn(1);
                  }
                }

                if (a.cmp(b) >= 0) {
                  a.isub(b);
                  x1.isub(x2);
                } else {
                  b.isub(a);
                  x2.isub(x1);
                }
              }

              var res;
              if (a.cmpn(1) === 0) {
                res = x1;
              } else {
                res = x2;
              }

              if (res.cmpn(0) < 0) {
                res.iadd(p);
              }

              return res;
            };

            BN.prototype.gcd = function gcd(num) {
              if (this.isZero()) return num.abs();
              if (num.isZero()) return this.abs();

              var a = this.clone();
              var b = num.clone();
              a.negative = 0;
              b.negative = 0;

              // Remove common factor of two
              for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                a.iushrn(1);
                b.iushrn(1);
              }

              do {
                while (a.isEven()) {
                  a.iushrn(1);
                }
                while (b.isEven()) {
                  b.iushrn(1);
                }

                var r = a.cmp(b);
                if (r < 0) {
                  // Swap `a` and `b` to make `a` always bigger than `b`
                  var t = a;
                  a = b;
                  b = t;
                } else if (r === 0 || b.cmpn(1) === 0) {
                  break;
                }

                a.isub(b);
              } while (true);

              return b.iushln(shift);
            };

            // Invert number in the field F(num)
            BN.prototype.invm = function invm(num) {
              return this.egcd(num).a.umod(num);
            };

            BN.prototype.isEven = function isEven() {
              return (this.words[0] & 1) === 0;
            };

            BN.prototype.isOdd = function isOdd() {
              return (this.words[0] & 1) === 1;
            };

            // And first word and num
            BN.prototype.andln = function andln(num) {
              return this.words[0] & num;
            };

            // Increment at the bit position in-line
            BN.prototype.bincn = function bincn(bit) {
              assert(typeof bit === 'number');
              var r = bit % 26;
              var s = (bit - r) / 26;
              var q = 1 << r;

              // Fast case: bit is much higher than all existing words
              if (this.length <= s) {
                this._expand(s + 1);
                this.words[s] |= q;
                return this;
              }

              // Add bit and propagate, if needed
              var carry = q;
              for (var i = s; carry !== 0 && i < this.length; i++) {
                var w = this.words[i] | 0;
                w += carry;
                carry = w >>> 26;
                w &= 0x3ffffff;
                this.words[i] = w;
              }
              if (carry !== 0) {
                this.words[i] = carry;
                this.length++;
              }
              return this;
            };

            BN.prototype.isZero = function isZero() {
              return this.length === 1 && this.words[0] === 0;
            };

            BN.prototype.cmpn = function cmpn(num) {
              var negative = num < 0;

              if (this.negative !== 0 && !negative) return -1;
              if (this.negative === 0 && negative) return 1;

              this.strip();

              var res;
              if (this.length > 1) {
                res = 1;
              } else {
                if (negative) {
                  num = -num;
                }

                assert(num <= 0x3ffffff, 'Number is too big');

                var w = this.words[0] | 0;
                res = w === num ? 0 : w < num ? -1 : 1;
              }
              if (this.negative !== 0) return -res | 0;
              return res;
            };

            // Compare two numbers and return:
            // 1 - if `this` > `num`
            // 0 - if `this` == `num`
            // -1 - if `this` < `num`
            BN.prototype.cmp = function cmp(num) {
              if (this.negative !== 0 && num.negative === 0) return -1;
              if (this.negative === 0 && num.negative !== 0) return 1;

              var res = this.ucmp(num);
              if (this.negative !== 0) return -res | 0;
              return res;
            };

            // Unsigned comparison
            BN.prototype.ucmp = function ucmp(num) {
              // At this point both numbers have the same sign
              if (this.length > num.length) return 1;
              if (this.length < num.length) return -1;

              var res = 0;
              for (var i = this.length - 1; i >= 0; i--) {
                var a = this.words[i] | 0;
                var b = num.words[i] | 0;

                if (a === b) continue;
                if (a < b) {
                  res = -1;
                } else if (a > b) {
                  res = 1;
                }
                break;
              }
              return res;
            };

            BN.prototype.gtn = function gtn(num) {
              return this.cmpn(num) === 1;
            };

            BN.prototype.gt = function gt(num) {
              return this.cmp(num) === 1;
            };

            BN.prototype.gten = function gten(num) {
              return this.cmpn(num) >= 0;
            };

            BN.prototype.gte = function gte(num) {
              return this.cmp(num) >= 0;
            };

            BN.prototype.ltn = function ltn(num) {
              return this.cmpn(num) === -1;
            };

            BN.prototype.lt = function lt(num) {
              return this.cmp(num) === -1;
            };

            BN.prototype.lten = function lten(num) {
              return this.cmpn(num) <= 0;
            };

            BN.prototype.lte = function lte(num) {
              return this.cmp(num) <= 0;
            };

            BN.prototype.eqn = function eqn(num) {
              return this.cmpn(num) === 0;
            };

            BN.prototype.eq = function eq(num) {
              return this.cmp(num) === 0;
            };

            //
            // A reduce context, could be using montgomery or something better, depending
            // on the `m` itself.
            //
            BN.red = function red(num) {
              return new Red(num);
            };

            BN.prototype.toRed = function toRed(ctx) {
              assert(!this.red, 'Already a number in reduction context');
              assert(this.negative === 0, 'red works only with positives');
              return ctx.convertTo(this)._forceRed(ctx);
            };

            BN.prototype.fromRed = function fromRed() {
              assert(this.red, 'fromRed works only with numbers in reduction context');
              return this.red.convertFrom(this);
            };

            BN.prototype._forceRed = function _forceRed(ctx) {
              this.red = ctx;
              return this;
            };

            BN.prototype.forceRed = function forceRed(ctx) {
              assert(!this.red, 'Already a number in reduction context');
              return this._forceRed(ctx);
            };

            BN.prototype.redAdd = function redAdd(num) {
              assert(this.red, 'redAdd works only with red numbers');
              return this.red.add(this, num);
            };

            BN.prototype.redIAdd = function redIAdd(num) {
              assert(this.red, 'redIAdd works only with red numbers');
              return this.red.iadd(this, num);
            };

            BN.prototype.redSub = function redSub(num) {
              assert(this.red, 'redSub works only with red numbers');
              return this.red.sub(this, num);
            };

            BN.prototype.redISub = function redISub(num) {
              assert(this.red, 'redISub works only with red numbers');
              return this.red.isub(this, num);
            };

            BN.prototype.redShl = function redShl(num) {
              assert(this.red, 'redShl works only with red numbers');
              return this.red.shl(this, num);
            };

            BN.prototype.redMul = function redMul(num) {
              assert(this.red, 'redMul works only with red numbers');
              this.red._verify2(this, num);
              return this.red.mul(this, num);
            };

            BN.prototype.redIMul = function redIMul(num) {
              assert(this.red, 'redMul works only with red numbers');
              this.red._verify2(this, num);
              return this.red.imul(this, num);
            };

            BN.prototype.redSqr = function redSqr() {
              assert(this.red, 'redSqr works only with red numbers');
              this.red._verify1(this);
              return this.red.sqr(this);
            };

            BN.prototype.redISqr = function redISqr() {
              assert(this.red, 'redISqr works only with red numbers');
              this.red._verify1(this);
              return this.red.isqr(this);
            };

            // Square root over p
            BN.prototype.redSqrt = function redSqrt() {
              assert(this.red, 'redSqrt works only with red numbers');
              this.red._verify1(this);
              return this.red.sqrt(this);
            };

            BN.prototype.redInvm = function redInvm() {
              assert(this.red, 'redInvm works only with red numbers');
              this.red._verify1(this);
              return this.red.invm(this);
            };

            // Return negative clone of `this` % `red modulo`
            BN.prototype.redNeg = function redNeg() {
              assert(this.red, 'redNeg works only with red numbers');
              this.red._verify1(this);
              return this.red.neg(this);
            };

            BN.prototype.redPow = function redPow(num) {
              assert(this.red && !num.red, 'redPow(normalNum)');
              this.red._verify1(this);
              return this.red.pow(this, num);
            };

            // Prime numbers with efficient reduction
            var primes = {
              k256: null,
              p224: null,
              p192: null,
              p25519: null
            };

            // Pseudo-Mersenne prime
            function MPrime(name, p) {
              // P = 2 ^ N - K
              this.name = name;
              this.p = new BN(p, 16);
              this.n = this.p.bitLength();
              this.k = new BN(1).iushln(this.n).isub(this.p);

              this.tmp = this._tmp();
            }

            MPrime.prototype._tmp = function _tmp() {
              var tmp = new BN(null);
              tmp.words = new Array(Math.ceil(this.n / 13));
              return tmp;
            };

            MPrime.prototype.ireduce = function ireduce(num) {
              // Assumes that `num` is less than `P^2`
              // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
              var r = num;
              var rlen;

              do {
                this.split(r, this.tmp);
                r = this.imulK(r);
                r = r.iadd(this.tmp);
                rlen = r.bitLength();
              } while (rlen > this.n);

              var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
              if (cmp === 0) {
                r.words[0] = 0;
                r.length = 1;
              } else if (cmp > 0) {
                r.isub(this.p);
              } else {
                r.strip();
              }

              return r;
            };

            MPrime.prototype.split = function split(input, out) {
              input.iushrn(this.n, 0, out);
            };

            MPrime.prototype.imulK = function imulK(num) {
              return num.imul(this.k);
            };

            function K256() {
              MPrime.call(
                this,
                'k256',
                'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
            }
            inherits(K256, MPrime);

            K256.prototype.split = function split(input, output) {
              // 256 = 9 * 26 + 22
              var mask = 0x3fffff;

              var outLen = Math.min(input.length, 9);
              for (var i = 0; i < outLen; i++) {
                output.words[i] = input.words[i];
              }
              output.length = outLen;

              if (input.length <= 9) {
                input.words[0] = 0;
                input.length = 1;
                return;
              }

              // Shift by 9 limbs
              var prev = input.words[9];
              output.words[output.length++] = prev & mask;

              for (i = 10; i < input.length; i++) {
                var next = input.words[i] | 0;
                input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
                prev = next;
              }
              prev >>>= 22;
              input.words[i - 10] = prev;
              if (prev === 0 && input.length > 10) {
                input.length -= 10;
              } else {
                input.length -= 9;
              }
            };

            K256.prototype.imulK = function imulK(num) {
              // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
              num.words[num.length] = 0;
              num.words[num.length + 1] = 0;
              num.length += 2;

              // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
              var lo = 0;
              for (var i = 0; i < num.length; i++) {
                var w = num.words[i] | 0;
                lo += w * 0x3d1;
                num.words[i] = lo & 0x3ffffff;
                lo = w * 0x40 + ((lo / 0x4000000) | 0);
              }

              // Fast length reduction
              if (num.words[num.length - 1] === 0) {
                num.length--;
                if (num.words[num.length - 1] === 0) {
                  num.length--;
                }
              }
              return num;
            };

            function P224() {
              MPrime.call(
                this,
                'p224',
                'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
            }
            inherits(P224, MPrime);

            function P192() {
              MPrime.call(
                this,
                'p192',
                'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
            }
            inherits(P192, MPrime);

            function P25519() {
              // 2 ^ 255 - 19
              MPrime.call(
                this,
                '25519',
                '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
            }
            inherits(P25519, MPrime);

            P25519.prototype.imulK = function imulK(num) {
              // K = 0x13
              var carry = 0;
              for (var i = 0; i < num.length; i++) {
                var hi = (num.words[i] | 0) * 0x13 + carry;
                var lo = hi & 0x3ffffff;
                hi >>>= 26;

                num.words[i] = lo;
                carry = hi;
              }
              if (carry !== 0) {
                num.words[num.length++] = carry;
              }
              return num;
            };

            // Exported mostly for testing purposes, use plain name instead
            BN._prime = function prime(name) {
              // Cached version of prime
              if (primes[name]) return primes[name];

              var prime;
              if (name === 'k256') {
                prime = new K256();
              } else if (name === 'p224') {
                prime = new P224();
              } else if (name === 'p192') {
                prime = new P192();
              } else if (name === 'p25519') {
                prime = new P25519();
              } else {
                throw new Error('Unknown prime ' + name);
              }
              primes[name] = prime;

              return prime;
            };

            //
            // Base reduction engine
            //
            function Red(m) {
              if (typeof m === 'string') {
                var prime = BN._prime(m);
                this.m = prime.p;
                this.prime = prime;
              } else {
                assert(m.gtn(1), 'modulus must be greater than 1');
                this.m = m;
                this.prime = null;
              }
            }

            Red.prototype._verify1 = function _verify1(a) {
              assert(a.negative === 0, 'red works only with positives');
              assert(a.red, 'red works only with red numbers');
            };

            Red.prototype._verify2 = function _verify2(a, b) {
              assert((a.negative | b.negative) === 0, 'red works only with positives');
              assert(a.red && a.red === b.red,
                'red works only with red numbers');
            };

            Red.prototype.imod = function imod(a) {
              if (this.prime) return this.prime.ireduce(a)._forceRed(this);
              return a.umod(this.m)._forceRed(this);
            };

            Red.prototype.neg = function neg(a) {
              if (a.isZero()) {
                return a.clone();
              }

              return this.m.sub(a)._forceRed(this);
            };

            Red.prototype.add = function add(a, b) {
              this._verify2(a, b);

              var res = a.add(b);
              if (res.cmp(this.m) >= 0) {
                res.isub(this.m);
              }
              return res._forceRed(this);
            };

            Red.prototype.iadd = function iadd(a, b) {
              this._verify2(a, b);

              var res = a.iadd(b);
              if (res.cmp(this.m) >= 0) {
                res.isub(this.m);
              }
              return res;
            };

            Red.prototype.sub = function sub(a, b) {
              this._verify2(a, b);

              var res = a.sub(b);
              if (res.cmpn(0) < 0) {
                res.iadd(this.m);
              }
              return res._forceRed(this);
            };

            Red.prototype.isub = function isub(a, b) {
              this._verify2(a, b);

              var res = a.isub(b);
              if (res.cmpn(0) < 0) {
                res.iadd(this.m);
              }
              return res;
            };

            Red.prototype.shl = function shl(a, num) {
              this._verify1(a);
              return this.imod(a.ushln(num));
            };

            Red.prototype.imul = function imul(a, b) {
              this._verify2(a, b);
              return this.imod(a.imul(b));
            };

            Red.prototype.mul = function mul(a, b) {
              this._verify2(a, b);
              return this.imod(a.mul(b));
            };

            Red.prototype.isqr = function isqr(a) {
              return this.imul(a, a.clone());
            };

            Red.prototype.sqr = function sqr(a) {
              return this.mul(a, a);
            };

            Red.prototype.sqrt = function sqrt(a) {
              if (a.isZero()) return a.clone();

              var mod3 = this.m.andln(3);
              assert(mod3 % 2 === 1);

              // Fast case
              if (mod3 === 3) {
                var pow = this.m.add(new BN(1)).iushrn(2);
                return this.pow(a, pow);
              }

              // Tonelli-Shanks algorithm (Totally unoptimized and slow)
              //
              // Find Q and S, that Q * 2 ^ S = (P - 1)
              var q = this.m.subn(1);
              var s = 0;
              while (!q.isZero() && q.andln(1) === 0) {
                s++;
                q.iushrn(1);
              }
              assert(!q.isZero());

              var one = new BN(1).toRed(this);
              var nOne = one.redNeg();

              // Find quadratic non-residue
              // NOTE: Max is such because of generalized Riemann hypothesis.
              var lpow = this.m.subn(1).iushrn(1);
              var z = this.m.bitLength();
              z = new BN(2 * z * z).toRed(this);

              while (this.pow(z, lpow).cmp(nOne) !== 0) {
                z.redIAdd(nOne);
              }

              var c = this.pow(z, q);
              var r = this.pow(a, q.addn(1).iushrn(1));
              var t = this.pow(a, q);
              var m = s;
              while (t.cmp(one) !== 0) {
                var tmp = t;
                for (var i = 0; tmp.cmp(one) !== 0; i++) {
                  tmp = tmp.redSqr();
                }
                assert(i < m);
                var b = this.pow(c, new BN(1).iushln(m - i - 1));

                r = r.redMul(b);
                c = b.redSqr();
                t = t.redMul(c);
                m = i;
              }

              return r;
            };

            Red.prototype.invm = function invm(a) {
              var inv = a._invmp(this.m);
              if (inv.negative !== 0) {
                inv.negative = 0;
                return this.imod(inv).redNeg();
              } else {
                return this.imod(inv);
              }
            };

            Red.prototype.pow = function pow(a, num) {
              if (num.isZero()) return new BN(1).toRed(this);
              if (num.cmpn(1) === 0) return a.clone();

              var windowSize = 4;
              var wnd = new Array(1 << windowSize);
              wnd[0] = new BN(1).toRed(this);
              wnd[1] = a;
              for (var i = 2; i < wnd.length; i++) {
                wnd[i] = this.mul(wnd[i - 1], a);
              }

              var res = wnd[0];
              var current = 0;
              var currentLen = 0;
              var start = num.bitLength() % 26;
              if (start === 0) {
                start = 26;
              }

              for (i = num.length - 1; i >= 0; i--) {
                var word = num.words[i];
                for (var j = start - 1; j >= 0; j--) {
                  var bit = (word >> j) & 1;
                  if (res !== wnd[0]) {
                    res = this.sqr(res);
                  }

                  if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                  }

                  current <<= 1;
                  current |= bit;
                  currentLen++;
                  if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

                  res = this.mul(res, wnd[current]);
                  currentLen = 0;
                  current = 0;
                }
                start = 26;
              }

              return res;
            };

            Red.prototype.convertTo = function convertTo(num) {
              var r = num.umod(this.m);

              return r === num ? r.clone() : r;
            };

            Red.prototype.convertFrom = function convertFrom(num) {
              var res = num.clone();
              res.red = null;
              return res;
            };

            //
            // Montgomery method engine
            //

            BN.mont = function mont(num) {
              return new Mont(num);
            };

            function Mont(m) {
              Red.call(this, m);

              this.shift = this.m.bitLength();
              if (this.shift % 26 !== 0) {
                this.shift += 26 - (this.shift % 26);
              }

              this.r = new BN(1).iushln(this.shift);
              this.r2 = this.imod(this.r.sqr());
              this.rinv = this.r._invmp(this.m);

              this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
              this.minv = this.minv.umod(this.r);
              this.minv = this.r.sub(this.minv);
            }
            inherits(Mont, Red);

            Mont.prototype.convertTo = function convertTo(num) {
              return this.imod(num.ushln(this.shift));
            };

            Mont.prototype.convertFrom = function convertFrom(num) {
              var r = this.imod(num.mul(this.rinv));
              r.red = null;
              return r;
            };

            Mont.prototype.imul = function imul(a, b) {
              if (a.isZero() || b.isZero()) {
                a.words[0] = 0;
                a.length = 1;
                return a;
              }

              var t = a.imul(b);
              var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
              var u = t.isub(c).iushrn(this.shift);
              var res = u;

              if (u.cmp(this.m) >= 0) {
                res = u.isub(this.m);
              } else if (u.cmpn(0) < 0) {
                res = u.iadd(this.m);
              }

              return res._forceRed(this);
            };

            Mont.prototype.mul = function mul(a, b) {
              if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

              var t = a.mul(b);
              var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
              var u = t.isub(c).iushrn(this.shift);
              var res = u;
              if (u.cmp(this.m) >= 0) {
                res = u.isub(this.m);
              } else if (u.cmpn(0) < 0) {
                res = u.iadd(this.m);
              }

              return res._forceRed(this);
            };

            Mont.prototype.invm = function invm(a) {
              // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
              var res = this.imod(a._invmp(this.m).mul(this.r2));
              return res._forceRed(this);
            };
          })(typeof module === 'undefined' || module, this);

          /* WEBPACK VAR INJECTION */
}.call(exports, __webpack_require__(36)(module)))

        /***/
}),
/* 545 */
/***/ (function (module, exports) {

        /* (ignored) */

        /***/
}),
/* 546 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file dapp.js
         * @MOAC tech 
         * @date 2018
         * @provide access to MOAC microChain dapps constant functions and variables.
         * @as a replacement for contract.js 
         */

        var utils = __webpack_require__(0);
        var coder = __webpack_require__(23);
        var SolidityEvent = __webpack_require__(92);
        var DappFunction = __webpack_require__(547);
        var AllEvents = __webpack_require__(548);

        /**
         * Should be called to encode constructor params
         *
         * @method encodeConstructorParams
         * @param {Array} abi
         * @param {Array} constructor params
         */
        var encodeConstructorParams = function (abi, params) {
          return abi.filter(function (json) {
            return json.type === 'constructor' && json.inputs.length === params.length;
          }).map(function (json) {
            return json.inputs.map(function (input) {
              return input.type;
            });
          }).map(function (types) {
            return coder.encodeParams(types, params);
          })[0] || '';
        };

        /**
         * Should be called to add functions to Dapp object
         *
         * @method addDappFunctions
         * @param {Contract} contract
         * @param {Array} abi
         */
        var addDappFunctions = function (mcdapp) {
          // contract.abi.filter(function (json) {
          mcdapp.abi.filter(function (json) {
            return json.type === 'function';
          }).map(function (json) {
            return new DappFunction(mcdapp._mc, mcdapp._scs, json, mcdapp.address, mcdapp.via);
          }).forEach(function (f) {
            f.attachToDapp(mcdapp);
          });
        };

        /**
         * Should be called to add events to Dapp object
         *
         * @method addDappEvents
         * @param {Contract} contract
         * @param {Array} abi
         */
        var addDappEvents = function (contract) {
          var events = contract.abi.filter(function (json) {
            return json.type === 'event';
          });

          var All = new AllEvents(contract._scs._requestManager, events, contract.address);
          All.attachToContract(contract);

          events.map(function (json) {
            return new SolidityEvent(contract._scs._requestManager, json, contract.address);
          }).forEach(function (e) {
            e.attachToContract(contract);
          });
        };


        /**
         * Should be called to check if the Dapp gets properly deployed.
         * This requires both VNODE and SCS monitor are connecting.
         * on the MicroChain.
         *
         * @method checkForMicroChainDapp
         * @param {Object} contract
         * @param {Function} callback
         * @returns {Undefined}
         */
        var checkForMicroChainDapp = function (dapp, callback) {

          var count = 0,
            callbackFired = false;

          // wait for receipt
          var filter = dapp._mc.filter('latest', function (e) {
            if (!e && !callbackFired) {
              count++;

              // stop watching after 50 blocks (timeout)
              if (count > 50) {

                filter.stopWatching(function () { });
                callbackFired = true;

                if (callback)
                  callback(new Error('Contract transaction couldn\'t be found after 50 blocks'));
                else
                  throw new Error('Contract transaction couldn\'t be found after 50 blocks');


              } else {

                dapp._mc.getTransactionReceipt(dapp.transactionHash, function (e, receipt) {
                  if (receipt && !callbackFired) {

                    dapp._scs.getCode(receipt.contractAddress, function (e, code) {
                      /*jshint maxcomplexity: 6 */

                      if (callbackFired || !code)
                        return;

                      filter.stopWatching(function () { });
                      callbackFired = true;

                      if (code.length > 3) {

                        dapp.address = receipt.contractAddress;

                        // attach events and methods again after we have
                        addFunctionsToContract(dapp);
                        addEventsToContract(dapp);

                        // call callback for the second time
                        if (callback)
                          callback(null, dapp);

                      } else {
                        if (callback)
                          callback(new Error('The dapp code couldn\'t be stored, please check your gas amount.'));
                        else
                          throw new Error('The dapp code couldn\'t be stored, please check your gas amount.');
                      }
                    });
                  }
                });
              }
            }
          });
        };

        /**
         * Should be called to deploy new Dapp instance
         * on a existing MicroChain
         * This is similar to the ContractFactory
         * object for mc, but only keeps the call, 
         * no sendTransaction.
         * 
         * @method MicroChainDapp
         * @param {Array} abi
         */
        var MicroChainDapp = function (mc, scs, abi) {
          this._mc = mc;
          this._scs = scs;
          this.abi = abi;
          this.via = null;

          /**
           * Should be called to create new Dapp on the MicroChain blockchain
           * by sending the transaction to VNODE with shardingFlag = 0,
           * Note, the DAPP requires the microChain address as input
           * to deploy.
           * 
           * @method new
           * @param {inAddress} MicroChain Address to deploy the Dapp
           * @param {viaAddress} VNODE Address to connect for deploying the Dapp
           * @param {Any} Dapp contract constructor param1 (optional)
           * @param {Any} Dapp contract constructor param2 (optional)
           * @param {Object} contract transaction object (required)
           * @param {Function} callback
           * @returns {Dapp} returns Dapp instance
           */
          this.new = function () {

            // parse arguments
            var options = {}; // required!
            var callback;

            //Processing the arguments
            var args = Array.prototype.slice.call(arguments);

            if (args.length < 2) {
              throw new Error('DAPP init requires MicroChain address and VNODE address as the first two input arguments!');
            }

            inAddress = args[0];
            if (!utils.isAddress(inAddress)) {
              throw new Error('No MicroChain address in the input arguments!');
            }
            // Remove the MicroChain address (1st element)
            args.shift();

            viaAddress = args[0];
            if (!utils.isAddress(viaAddress)) {
              throw new Error('No VNODE address in the input arguments!');
            }
            // Start building the Dapp on the MicroChain
            var mcDapp = new Dapp(this._mc, this._scs, this.abi, inAddress, viaAddress);

            if (this._scs.getDappState(inAddress) != 0) {
              throw new Error('MicroChain is not ready or already has DAPP on it');
              return;
            }

            // Remove the VNODE address (2nd element)
            args.shift();

            // Remove the callback func (last element)
            if (utils.isFunction(args[args.length - 1])) {
              callback = args.pop();
            }

            var last = args[args.length - 1];
            if (utils.isObject(last) && !utils.isArray(last)) {
              options = args.pop();
            }

            if (options.value > 0) {
              var constructorAbi = abi.filter(function (json) {
                return json.type === 'constructor' && json.inputs.length === args.length;
              })[0] || {};

              if (!constructorAbi.payable) {
                throw new Error('Cannot send value to non-payable constructor');
              }
            }

            // Added the function input parameters from args

            var bytes = encodeConstructorParams(this.abi, args);
            options.data += bytes;

            //Dapp is not a contract, need to setup more fields
            // DAPP deploy need send to the microChain address
            options.to = inAddress;
            options.gas = 0;
            options.shardingFlag = 1;
            options.nonce = 0;//Should check, usually for a mciroChain without DAPP, all accounts nonce is 0
            options.via = viaAddress;


            //All transaction should send to the microChain through VNODE with shardingFlag = 1
            if (callback) {

              // wait for the mcDapp address adn check if the code was deployed
              this._mc.sendTransaction(options, function (err, hash) {
                if (err) {
                  callback(err);
                } else {
                  // add the transaction hash
                  mcDapp.transactionHash = hash;

                  // call callback for the first time
                  callback(null, mcDapp);

                  checkForMicroChainDapp(mcDapp, callback);
                }
              });
            } else {
              var hash = this._mc.sendTransaction(options);
              // add the transaction hash
              mcDapp.transactionHash = hash;
              checkForMicroChainDapp(mcDapp);
            }

            return mcDapp;
          };

          this.new.getData = this.getData.bind(this);
        };


        /**
         * Should be called to get access to existing Dapp on the MicroChain
         *
         * @method at
         * @param {Address} MicroChain address (required)
         * @param {Function} callback {optional)
         * @returns {mcDapp} returns mcirochain Dapp if no callback was passed,
         * otherwise calls callback function (err, mcDapp)
         * Possible errors:
         * 
         */
        MicroChainDapp.prototype.at = function (address, callback) {
          var mcDapp = new Dapp(this._mc, this._scs, this.abi, address, this.via);

          // this functions are not part of prototype,
          // because we dont want to spoil the interface
          addDappFunctions(mcDapp);
          addDappEvents(mcDapp);

          if (callback) {
            callback(null, mcDapp);
          }
          return mcDapp;
        };

        /**
         * Gets the data, which is data to deploy plus constructor params
         *
         * @method getData
         */
        MicroChainDapp.prototype.getData = function () {
          var options = {}; // required!
          var args = Array.prototype.slice.call(arguments);

          var last = args[args.length - 1];
          if (utils.isObject(last) && !utils.isArray(last)) {
            options = args.pop();
          }

          var bytes = encodeConstructorParams(this.abi, args);
          options.data += bytes;

          return options.data;
        };

        /**
         * Set the benefit address of the VNODE server.
         *
         * @method setVnodeAddress
         */
        MicroChainDapp.prototype.setVnodeAddress = function (viaAddress) {

          if (utils.isAddress(viaAddress)) {
            this.via = viaAddress;
            return true;
          }
          throw errors.InvalidPublicAddress();
          return false;
        };

        /**
         * Return the address of the VNODE server.
         *
         * @method getVnodeAddress
         */
        MicroChainDapp.prototype.getVnodeAddress = function () {

          return this.via;
        };

        /**
         * Should be called to create new Dapp on the MicroChaib
         * contract instance
         *
         * @method Contract
         * @param {Array} abi
         * @param {Address} contract address
         */
        var Dapp = function (mc, scs, abi, address, viaAddress) {
          this._mc = mc; //vnode server to sendTransaction
          this._scs = scs;  //SCS server to sendCall
          this.transactionHash = null;// This is needed to check if the Dapp is deploy or not, note this is different from MicroChain HASH
          this.address = address; //MicroChain address
          this.abi = abi;
          this.via = viaAddress;
        };

        module.exports = MicroChainDapp;


        /***/
}),
/* 547 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file dappfunction.js
         * @MOAC tech 
         * @date 2018
         * @provide access to MOAC microChain dapps functions and variables.
         * @as a replacement for function.js 
         */

        var coder = __webpack_require__(23);
        var utils = __webpack_require__(0);
        var errors = __webpack_require__(32);
        var formatters = __webpack_require__(3);
        var sha3 = __webpack_require__(18);

        /**
         * This prototype should be used to call/sendTransaction to solidity functions
         * for DAPPs.
         * 2018/09/30, for nuwa 1.0.3, the Dapp 
         * uses mc to send non-constant to vnode
         * uses scs to send constant function to SCS and get returns.
         */
        var DappFunction = function (mc, scs, json, address, via) {
          this._mc = mc;
          this._scs = scs;
          this._inputTypes = json.inputs.map(function (i) {
            return i.type;
          });
          this._outputTypes = json.outputs.map(function (i) {
            return i.type;
          });
          this._constant = json.constant;

          this._payable = json.payable;
          this._name = utils.transformToFullName(json);
          this._address = address;
          this._from = "0xa8863fc8ce3816411378685223c03daae9770ebb";//mc.coinbase;//default set to vnode account, can be changed
          this._via = via;//need to be set before sendTransaction call


          // console.log("DappFunction new: ",this._name, " constant: ", json.constant, this._constant);
        };

        DappFunction.prototype.extractCallback = function (args) {
          if (utils.isFunction(args[args.length - 1])) {
            return args.pop(); // modify the args array!
          }
        };

        DappFunction.prototype.extractDefaultBlock = function (args) {
          if (args.length > this._inputTypes.length && !utils.isObject(args[args.length - 1])) {
            return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!
          }
        };

        /**
         * Should be used if connect with a remote VNODE server.
         * User need to setup a source account instead of default mc coinbase.
         *
         * @method setSrcAccount
         * @param {ADDRESS} inAcct
         * @throws {Error} if input is not a valid address
         */

        DappFunction.prototype.setSrcAccount = function (inAcct) {
          if (utils.isAddress(inAcct)) {
            this._from = inAcct;
            return true;
          }
          throw errors.InvalidPublicAddress();
          return false;
        }

        /**
         * Should be set with the benefit address from the VNODE server.
         *
         * @method setVnodeVia
         * @param {ADDRESS} inAcct
         * @throws {Error} if it is not
         */

        DappFunction.prototype.setVnodeAddress = function (inAcct) {
          if (utils.isAddress(inAcct)) {
            this._via = inAcct;
            return true;
          }
          throw errors.InvalidPublicAddress();
          return false;
        }

        /**
         * Should be called to check if the number of arguments is correct
         *
         * @method validateArgs
         * @param {Array} arguments
         * @throws {Error} if it is not
         */
        DappFunction.prototype.validateArgs = function (args) {
          var inputArgs = args.filter(function (a) {
            // filter the options object but not arguments that are arrays
            return !((utils.isObject(a) === true) &&
              (utils.isArray(a) === false) &&
              (utils.isBigNumber(a) === false)
            );
          });
          if (inputArgs.length !== this._inputTypes.length) {
            throw errors.InvalidNumberOfSolidityArgs();
          }
        };

        /**
         * Should be used to create payload from arguments
         *
         * @method toPayload
         * @param {Array} solidity function params
         * @param {Object} optional payload options
         */
        DappFunction.prototype.toPayload = function (args) {
          var options = {};
          if (args.length > this._inputTypes.length && utils.isObject(args[args.length - 1])) {
            options = args[args.length - 1];
          }
          this.validateArgs(args);
          options.to = this._address;
          options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);
          return options;
        };

        /**
         * Should be used to get function signature
         *
         * @method signature
         * @return {String} function signature
         */
        DappFunction.prototype.signature = function () {
          return sha3(this._name).slice(0, 8);
        };


        DappFunction.prototype.unpackOutput = function (output) {
          if (!output) {
            return;
          }

          output = output.length >= 2 ? output.slice(2) : output;
          var result = coder.decodeParams(this._outputTypes, output);
          return result.length === 1 ? result[0] : result;
        };

        /**
         * Calls a Solidity constant function by using arguments
         * and send to the SCS server
         *
         * @method call
         * @param {...Object} Contract function arguments
         * @param {function} If the last argument is a function, the contract function
         *   call will be asynchronous, and the callback will be passed the
         *   error and result.
         * @return {String} output bytes
         */
        DappFunction.prototype.call = function () {
          var args = Array.prototype.slice.call(arguments).filter(function (a) { return a !== undefined; });
          var callback = this.extractCallback(args);
          var defaultBlock = this.extractDefaultBlock(args);
          var payload = this.toPayload(args);

          //For direct call send to SCS, put in an empty from account
          //This won't change any state on the MicroChain.
          payload.from = this._from;//'0x0000000000000000000000000000000000000000';

          if (!callback) {
            var output = this._scs.directCall(payload, defaultBlock);
            return this.unpackOutput(output);
          }

          //Asyn callback
          var self = this;
          this._scs.directCall(payload, defaultBlock, function (error, output) {
            if (error) return callback(error, null);

            var unpacked = null;
            try {
              unpacked = self.unpackOutput(output);
            }
            catch (e) {
              error = e;
            }

            callback(error, unpacked);
          });
        };

        /**
         * Call the Solidity non-constant function
         * to VNODE. 
         * Note, this need to setup as Direct Call,
         * add sharding flag and via through the payload
         * @method sendTransaction
         */
        DappFunction.prototype.sendTransaction = function () {
          var args = Array.prototype.slice.call(arguments).filter(function (a) { return a !== undefined; });
          var callback = this.extractCallback(args);
          var payload = this.toPayload(args);

          if (payload.value > 0 && !this._payable) {
            throw new Error('Cannot send value to non-payable function');
          }


          srcnonce = this._scs.getNonce(payload.to, this._from);

          //For DAPP function, send as direct call
          if (payload.shardingFlag != 1) {
            payload.shardingFlag = 1
          }

          if (utils.isAddress(this._from)) {
            payload.from = this._from;
          } else {
            throw new Error('sendTransaction has no valid src account');
          }

          //Note, this via is from dapp, 
          if (utils.isAddress(this._via)) {
            payload.via = this._via;
          } else {
            throw new Error('sendTransaction has no valid vnode via account');
          }

          //Gas need set to gas estimate
          payload.gas = 4000000;// use this as default

          payload.nonce = srcnonce;

          //Make sure the args has shardingFlag = 1
          //and via is set to the VNODE via address
          if (!callback) {
            return this._mc.sendTransaction(payload);
          }

          this._mc.sendTransaction(payload, callback);
        };

        /**
         * Should be used to estimateGas of Dapp function
         * Work with Nuwa 1.0.4 and later.
         *
         * @method estimateGas
         */
        DappFunction.prototype.estimateGas = function () {
          var args = Array.prototype.slice.call(arguments);
          var callback = this.extractCallback(args);
          var payload = this.toPayload(args);

          if (!callback) {
            return this._mc.estimateGas(payload);
          }

          this._mc.estimateGas(payload, callback);
        };

        /**
         * Return the encoded data of the call
         *
         * @method getData
         * @return {String} the encoded data
         */
        DappFunction.prototype.getData = function () {
          var args = Array.prototype.slice.call(arguments);
          var payload = this.toPayload(args);

          return payload.data;
        };

        /**
         * Should be used to get function display name
         *
         * @method displayName
         * @return {String} display name of the function
         */
        DappFunction.prototype.displayName = function () {
          return utils.extractDisplayName(this._name);
        };

        /**
         * Should be used to get function type name
         *
         * @method typeName
         * @return {String} type name of the function
         */
        DappFunction.prototype.typeName = function () {
          return utils.extractTypeName(this._name);
        };

        /**
         * Should be called to get rpc requests from solidity function
         *
         * @method request
         * @returns {Object}
         */
        DappFunction.prototype.request = function () {
          var args = Array.prototype.slice.call(arguments);
          var callback = this.extractCallback(args);
          var payload = this.toPayload(args);
          var format = this.unpackOutput.bind(this);

          //if costant function, use SCS call
          //otherwise use mc sendTransaction
          return {
            method: this._constant ? 'scs_call' : 'mc_sendTransaction',
            callback: callback,
            params: [payload],
            format: format
          };
        };

        /**
         * Should be called to execute function
         *
         * @method execute
         */
        DappFunction.prototype.execute = function () {

          var transaction = !this._constant;

          // send transaction for non-constant function
          if (transaction) {
            console.log("TX===");
            return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));
          }

          // call
          return this.call.apply(this, Array.prototype.slice.call(arguments));
        };

        /**
         * Should be called to attach function to contract
         * from attachToContract
         * @method attachToDapp
         * @param {Contract}
         */
        DappFunction.prototype.attachToDapp = function (contract) {
          var execute = this.execute.bind(this);
          execute.request = this.request.bind(this);
          execute.call = this.call.bind(this);
          execute.sendTransaction = this.sendTransaction.bind(this);
          execute.estimateGas = this.estimateGas.bind(this);
          execute.getData = this.getData.bind(this);
          var displayName = this.displayName();
          if (!contract[displayName]) {
            contract[displayName] = execute;
          }
          contract[displayName][this.typeName()] = execute; // circular!!!!
        };

        module.exports = DappFunction;


        /***/
}),
/* 548 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file allevents.js
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2014
         * @modified for MOAC project
         * @MOAC lab
         * @date 2018
         */

        var sha3 = __webpack_require__(18);
        var SolidityEvent = __webpack_require__(549);
        var formatters = __webpack_require__(3);
        var utils = __webpack_require__(0);
        var Filter = __webpack_require__(44);
        var watches = __webpack_require__(45);

        var AllSolidityEvents = function (requestManager, json, address) {
          this._requestManager = requestManager;
          this._json = json;
          this._address = address;
        };

        AllSolidityEvents.prototype.encode = function (options) {
          options = options || {};
          var result = {};

          ['fromBlock', 'toBlock'].filter(function (f) {
            return options[f] !== undefined;
          }).forEach(function (f) {
            result[f] = formatters.inputBlockNumberFormatter(options[f]);
          });

          result.address = this._address;

          return result;
        };

        AllSolidityEvents.prototype.decode = function (data) {
          data.data = data.data || '';

          var eventTopic = (utils.isArray(data.topics) && utils.isString(data.topics[0])) ? data.topics[0].slice(2) : '';
          var match = this._json.filter(function (j) {
            return eventTopic === sha3(utils.transformToFullName(j));
          })[0];

          if (!match) { // cannot find matching event?
            return formatters.outputLogFormatter(data);
          }

          var event = new SolidityEvent(this._requestManager, match, this._address);

          return event.decode(data);
        };

        AllSolidityEvents.prototype.execute = function (options, callback) {

          if (utils.isFunction(arguments[arguments.length - 1])) {
            callback = arguments[arguments.length - 1];
            if (arguments.length === 1)
              options = null;
          }

          var o = this.encode(options);
          var formatter = this.decode.bind(this);
          return new Filter(o, 'scs', this._requestManager, watches.scs(), formatter, callback);
        };

        AllSolidityEvents.prototype.attachToContract = function (contract) {
          var execute = this.execute.bind(this);
          contract.allEvents = execute;
        };

        module.exports = AllSolidityEvents;



        /***/
}),
/* 549 */
/***/ (function (module, exports, __webpack_require__) {

        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */
        /**
         * @file event.js
         * @author Marek Kotewicz <marek@ethdev.com>
         *  @date 2014
         * @modified for MOAC project
         * @MOAC Tech Inc.
         * @date 2018
         * @provide access to MOAC microChain dapps events.
         * @as a replacement for event.js 
         */

        var utils = __webpack_require__(0);
        var coder = __webpack_require__(23);
        var formatters = __webpack_require__(3);
        var sha3 = __webpack_require__(18);
        var Filter = __webpack_require__(44);
        var watches = __webpack_require__(45);

        /**
         * This prototype should be used to create event filters
         * for DAPP on SCSs
         */
        var SolidityEvent = function (requestManager, json, address) {
          this._requestManager = requestManager;
          this._params = json.inputs;
          this._name = utils.transformToFullName(json);
          this._address = address;
          this._anonymous = json.anonymous;
        };

        /**
         * Should be used to get filtered param types
         *
         * @method types
         * @param {Bool} decide if returned typed should be indexed
         * @return {Array} array of types
         */
        SolidityEvent.prototype.types = function (indexed) {
          return this._params.filter(function (i) {
            return i.indexed === indexed;
          }).map(function (i) {
            return i.type;
          });
        };

        /**
         * Should be used to get event display name
         *
         * @method displayName
         * @return {String} event display name
         */
        SolidityEvent.prototype.displayName = function () {
          return utils.extractDisplayName(this._name);
        };

        /**
         * Should be used to get event type name
         *
         * @method typeName
         * @return {String} event type name
         */
        SolidityEvent.prototype.typeName = function () {
          return utils.extractTypeName(this._name);
        };

        /**
         * Should be used to get event signature
         *
         * @method signature
         * @return {String} event signature
         */
        SolidityEvent.prototype.signature = function () {
          return sha3(this._name);
        };

        /**
         * Should be used to encode indexed params and options to one final object
         *
         * @method encode
         * @param {Object} indexed
         * @param {Object} options
         * @return {Object} everything combined together and encoded
         */
        SolidityEvent.prototype.encode = function (indexed, options) {
          indexed = indexed || {};
          options = options || {};
          var result = {};

          ['fromBlock', 'toBlock'].filter(function (f) {
            return options[f] !== undefined;
          }).forEach(function (f) {
            result[f] = formatters.inputBlockNumberFormatter(options[f]);
          });

          result.topics = [];

          result.address = this._address;
          if (!this._anonymous) {
            result.topics.push('0x' + this.signature());
          }

          var indexedTopics = this._params.filter(function (i) {
            return i.indexed === true;
          }).map(function (i) {
            var value = indexed[i.name];
            if (value === undefined || value === null) {
              return null;
            }

            if (utils.isArray(value)) {
              return value.map(function (v) {
                return '0x' + coder.encodeParam(i.type, v);
              });
            }
            return '0x' + coder.encodeParam(i.type, value);
          });

          result.topics = result.topics.concat(indexedTopics);

          return result;
        };

        /**
         * Should be used to decode indexed params and options
         *
         * @method decode
         * @param {Object} data
         * @return {Object} result object with decoded indexed && not indexed params
         */
        SolidityEvent.prototype.decode = function (data) {

          //MOAC returned the data in TxData, ETH is in data
          data.data = data.TxData || data.data;
          //If both are undefined, set it to null
          data.data = data.data || '';
          data.topics = data.topics || [];

          var argTopics = this._anonymous ? data.topics : data.topics.slice(1);
          var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join("");
          var indexedParams = coder.decodeParams(this.types(true), indexedData);

          var notIndexedData = data.data.slice(2);
          var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);

          var result = formatters.outputLogFormatter(data);
          result.event = this.displayName();
          result.address = data.address;

          result.args = this._params.reduce(function (acc, current) {
            acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();
            return acc;
          }, {});

          delete result.data;
          delete result.topics;

          return result;
        };

        /**
         * Should be used to create new filter object from event
         *
         * @method execute
         * @param {Object} indexed
         * @param {Object} options
         * @return {Object} filter object
         */
        SolidityEvent.prototype.execute = function (indexed, options, callback) {

          if (utils.isFunction(arguments[arguments.length - 1])) {
            callback = arguments[arguments.length - 1];
            if (arguments.length === 2)
              options = null;
            if (arguments.length === 1) {
              options = null;
              indexed = {};
            }
          }

          var o = this.encode(indexed, options);
          var formatter = this.decode.bind(this);
          return new Filter(o, 'scs', this._requestManager, watches.scs(), formatter, callback);
        };

        /**
         * Should be used to attach event to contract object
         *
         * @method attachToContract
         * @param {Contract}
         */
        SolidityEvent.prototype.attachToContract = function (contract) {
          var execute = this.execute.bind(this);
          var displayName = this.displayName();
          if (!contract[displayName]) {
            contract[displayName] = execute;
          }
          contract[displayName][this.typeName()] = this.execute.bind(this, contract);
        };

        module.exports = SolidityEvent;



        /***/
}),
/* 550 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";
        /*
            This file is part of chain3.js.
        
            chain3.js is free software: you can redistribute it and/or modify
            it under the terms of the GNU Lesser General Public License as published by
            the Free Software Foundation, either version 3 of the License, or
            (at your option) any later version.
        
            chain3.js is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public License
            along with chain3.js.  If not, see <http://www.gnu.org/licenses/>.
        */




        var Method = __webpack_require__(28);
        // var Property = require('../property');
        var formatters = __webpack_require__(3);

        function Debug(chain3) {
          this._requestManager = chain3._requestManager;

          var self = this;

          methods().forEach(function (method) {
            method.attachToObject(self);
            method.setRequestManager(self._requestManager);
          });

          // properties().forEach(function(p) {
          //     p.attachToObject(self);
          //     p.setRequestManager(self._requestManager);
          // });
        }

        var methods = function () {
          // Input is a TX HASH
          var traceTransaction = new Method({
            name: 'traceTransaction',
            call: 'debug_traceTransaction',
            params: 1,
            inputFormatter: [null]
          });

          // Input as signed Transaction
          var actualGas = new Method({
            name: 'actualGas',
            call: 'debug_actualGas',
            params: 1
          });


          return [
            traceTransaction,
            actualGas
          ];
        };

        // var properties = function () {
        //     return [
        //         new Property({
        //             name: 'listAccounts',
        //             getter: 'personal_listAccounts'
        //         })
        //     ];
        // };


        module.exports = Debug;


        /***/
})
/******/]);